
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00200000 <_vectors>:
  200000:	20000400 	.word	0x20000400
  200004:	002002d9 	.word	0x002002d9
  200008:	002002db 	.word	0x002002db
  20000c:	002002da 	.word	0x002002da
  200010:	002002da 	.word	0x002002da
  200014:	002002da 	.word	0x002002da
  200018:	002002da 	.word	0x002002da
  20001c:	002002da 	.word	0x002002da
  200020:	002002da 	.word	0x002002da
  200024:	002002da 	.word	0x002002da
  200028:	002002da 	.word	0x002002da
  20002c:	00202721 	.word	0x00202721
  200030:	002002da 	.word	0x002002da
  200034:	002002da 	.word	0x002002da
  200038:	002002da 	.word	0x002002da
  20003c:	002002da 	.word	0x002002da
  200040:	002002da 	.word	0x002002da
  200044:	002002da 	.word	0x002002da
  200048:	002002da 	.word	0x002002da
  20004c:	002002da 	.word	0x002002da
  200050:	002002da 	.word	0x002002da
  200054:	002002da 	.word	0x002002da
  200058:	002067c1 	.word	0x002067c1
  20005c:	00206771 	.word	0x00206771
  200060:	00206721 	.word	0x00206721
  200064:	002066d1 	.word	0x002066d1
  200068:	00206681 	.word	0x00206681
  20006c:	002002da 	.word	0x002002da
  200070:	002002da 	.word	0x002002da
  200074:	002002da 	.word	0x002002da
  200078:	002002da 	.word	0x002002da
  20007c:	002002da 	.word	0x002002da
  200080:	002002da 	.word	0x002002da
  200084:	002002da 	.word	0x002002da
  200088:	002002da 	.word	0x002002da
  20008c:	002002da 	.word	0x002002da
  200090:	002002da 	.word	0x002002da
  200094:	002002da 	.word	0x002002da
  200098:	002002da 	.word	0x002002da
  20009c:	00206591 	.word	0x00206591
  2000a0:	002002da 	.word	0x002002da
  2000a4:	002002da 	.word	0x002002da
  2000a8:	002002da 	.word	0x002002da
  2000ac:	002002da 	.word	0x002002da
  2000b0:	002063d1 	.word	0x002063d1
  2000b4:	002002da 	.word	0x002002da
  2000b8:	002002da 	.word	0x002002da
  2000bc:	002002da 	.word	0x002002da
  2000c0:	002002da 	.word	0x002002da
  2000c4:	002002da 	.word	0x002002da
  2000c8:	002002da 	.word	0x002002da
  2000cc:	002002da 	.word	0x002002da
  2000d0:	002002da 	.word	0x002002da
  2000d4:	00206261 	.word	0x00206261
  2000d8:	002002da 	.word	0x002002da
  2000dc:	002002da 	.word	0x002002da
  2000e0:	00206471 	.word	0x00206471
  2000e4:	002002da 	.word	0x002002da
  2000e8:	002002da 	.word	0x002002da
  2000ec:	002002da 	.word	0x002002da
  2000f0:	002002da 	.word	0x002002da
  2000f4:	002002da 	.word	0x002002da
  2000f8:	002002da 	.word	0x002002da
  2000fc:	002002da 	.word	0x002002da
  200100:	002002da 	.word	0x002002da
  200104:	002002da 	.word	0x002002da
  200108:	002002da 	.word	0x002002da
  20010c:	002002da 	.word	0x002002da
  200110:	002002da 	.word	0x002002da
  200114:	002002da 	.word	0x002002da
  200118:	002002da 	.word	0x002002da
  20011c:	002002da 	.word	0x002002da
  200120:	002002da 	.word	0x002002da
  200124:	002002da 	.word	0x002002da
  200128:	002002da 	.word	0x002002da
  20012c:	002002da 	.word	0x002002da
  200130:	002002da 	.word	0x002002da
  200134:	002002da 	.word	0x002002da
  200138:	002002da 	.word	0x002002da
  20013c:	002002da 	.word	0x002002da
  200140:	002002da 	.word	0x002002da
  200144:	002002da 	.word	0x002002da
  200148:	002002da 	.word	0x002002da
  20014c:	002002da 	.word	0x002002da
  200150:	002002da 	.word	0x002002da
  200154:	002002da 	.word	0x002002da
  200158:	002002da 	.word	0x002002da
  20015c:	002002da 	.word	0x002002da
  200160:	002002da 	.word	0x002002da
  200164:	002002da 	.word	0x002002da
  200168:	002002da 	.word	0x002002da
  20016c:	002002da 	.word	0x002002da
  200170:	002002da 	.word	0x002002da
  200174:	002002da 	.word	0x002002da
  200178:	002002da 	.word	0x002002da
  20017c:	002002da 	.word	0x002002da
  200180:	002002da 	.word	0x002002da
  200184:	002002da 	.word	0x002002da
  200188:	002002da 	.word	0x002002da
  20018c:	002002da 	.word	0x002002da
  200190:	002002da 	.word	0x002002da
  200194:	002002da 	.word	0x002002da
  200198:	002002da 	.word	0x002002da
  20019c:	002002da 	.word	0x002002da
  2001a0:	002002da 	.word	0x002002da
  2001a4:	002002da 	.word	0x002002da
  2001a8:	002002da 	.word	0x002002da
  2001ac:	002002da 	.word	0x002002da
  2001b0:	002002da 	.word	0x002002da
  2001b4:	002002da 	.word	0x002002da
  2001b8:	002002da 	.word	0x002002da
  2001bc:	002002da 	.word	0x002002da
  2001c0:	002002da 	.word	0x002002da
  2001c4:	002002da 	.word	0x002002da
  2001c8:	002002da 	.word	0x002002da
  2001cc:	002002da 	.word	0x002002da
  2001d0:	002002da 	.word	0x002002da
  2001d4:	002002da 	.word	0x002002da
  2001d8:	002002da 	.word	0x002002da
  2001dc:	002002da 	.word	0x002002da
  2001e0:	002002da 	.word	0x002002da
  2001e4:	002002da 	.word	0x002002da
  2001e8:	002002da 	.word	0x002002da
  2001ec:	002002da 	.word	0x002002da
  2001f0:	002002da 	.word	0x002002da
  2001f4:	002002da 	.word	0x002002da
  2001f8:	002002da 	.word	0x002002da
  2001fc:	002002da 	.word	0x002002da

Disassembly of section .text:

00200200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
  200200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
  200202:	4827      	ldr	r0, [pc, #156]	; (2002a0 <endfiniloop+0x4>)
                msr     MSP, r0
  200204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
  200208:	4826      	ldr	r0, [pc, #152]	; (2002a4 <endfiniloop+0x8>)
                msr     PSP, r0
  20020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
  20020e:	4826      	ldr	r0, [pc, #152]	; (2002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
  200210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
  200214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
  200218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
  20021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
  20021c:	f380 8814 	msr	CONTROL, r0
                isb
  200220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
  200224:	f006 fb34 	bl	206890 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
  200228:	f005 fe82 	bl	205f30 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
  20022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
  200230:	491e      	ldr	r1, [pc, #120]	; (2002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
  200232:	4a1b      	ldr	r2, [pc, #108]	; (2002a0 <endfiniloop+0x4>)

00200234 <msloop>:
msloop:
                cmp     r1, r2
  200234:	4291      	cmp	r1, r2
                itt     lo
  200236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
  20023c:	e7fa      	bcc.n	200234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
  20023e:	491c      	ldr	r1, [pc, #112]	; (2002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
  200240:	4a18      	ldr	r2, [pc, #96]	; (2002a4 <endfiniloop+0x8>)

00200242 <psloop>:
psloop:
                cmp     r1, r2
  200242:	4291      	cmp	r1, r2
                itt     lo
  200244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
  20024a:	e7fa      	bcc.n	200242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
  20024c:	4919      	ldr	r1, [pc, #100]	; (2002b4 <endfiniloop+0x18>)
                ldr     r2, =_data_start
  20024e:	4a1a      	ldr	r2, [pc, #104]	; (2002b8 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
  200250:	4b1a      	ldr	r3, [pc, #104]	; (2002bc <endfiniloop+0x20>)

00200252 <dloop>:
dloop:
                cmp     r2, r3
  200252:	429a      	cmp	r2, r3
                ittt    lo
  200254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
  200256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
  20025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
  20025e:	e7f8      	bcc.n	200252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
  200260:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
  200262:	4917      	ldr	r1, [pc, #92]	; (2002c0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
  200264:	4a17      	ldr	r2, [pc, #92]	; (2002c4 <endfiniloop+0x28>)

00200266 <bloop>:
bloop:
                cmp     r1, r2
  200266:	4291      	cmp	r1, r2
                itt     lo
  200268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  20026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
  20026e:	e7fa      	bcc.n	200266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
  200270:	f006 fac6 	bl	206800 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
  200274:	f006 fb04 	bl	206880 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
  200278:	4c13      	ldr	r4, [pc, #76]	; (2002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
  20027a:	4d14      	ldr	r5, [pc, #80]	; (2002cc <endfiniloop+0x30>)

0020027c <initloop>:
initloop:
                cmp     r4, r5
  20027c:	42ac      	cmp	r4, r5
                bge     endinitloop
  20027e:	da03      	bge.n	200288 <endinitloop>
                ldr     r1, [r4], #4
  200280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200284:	4788      	blx	r1
                b       initloop
  200286:	e7f9      	b.n	20027c <initloop>

00200288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
  200288:	f005 fa7a 	bl	205780 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
  20028c:	4c10      	ldr	r4, [pc, #64]	; (2002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
  20028e:	4d11      	ldr	r5, [pc, #68]	; (2002d4 <endfiniloop+0x38>)

00200290 <finiloop>:
finiloop:
                cmp     r4, r5
  200290:	42ac      	cmp	r4, r5
                bge     endfiniloop
  200292:	da03      	bge.n	20029c <endfiniloop>
                ldr     r1, [r4], #4
  200294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200298:	4788      	blx	r1
                b       finiloop
  20029a:	e7f9      	b.n	200290 <finiloop>

0020029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
  20029c:	f006 bae8 	b.w	206870 <__default_exit>
                ldr     r0, =__main_stack_end__
  2002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
  2002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
  2002a8:	00200000 	.word	0x00200000
                ldr     r1, =__main_stack_base__
  2002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
  2002b0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
  2002b4:	08009f68 	.word	0x08009f68
                ldr     r2, =_data_start
  2002b8:	20020000 	.word	0x20020000
                ldr     r3, =_data_end
  2002bc:	2002008c 	.word	0x2002008c
                ldr     r1, =_bss_start
  2002c0:	20000800 	.word	0x20000800
                ldr     r2, =_bss_end
  2002c4:	20001464 	.word	0x20001464
                ldr     r4, =__init_array_start
  2002c8:	00200200 	.word	0x00200200
                ldr     r5, =__init_array_end
  2002cc:	00200200 	.word	0x00200200
                ldr     r4, =__fini_array_start
  2002d0:	00200200 	.word	0x00200200
                ldr     r5, =__fini_array_end
  2002d4:	00200200 	.word	0x00200200

002002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
  2002d8:	e792      	b.n	200200 <_crt0_entry>

002002da <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
         b          _unhandled_exception
  2002da:	e7ff      	b.n	2002dc <_unhandled_exception>

002002dc <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
  2002dc:	e7fe      	b.n	2002dc <_unhandled_exception>
  2002de:	46c0      	nop			; (mov r8, r8)

002002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
  2002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
  2002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
  2002e8:	f8d0 d00c 	ldr.w	sp, [r0, #12]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  2002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
  2002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
  2002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
  2002f6:	4628      	mov	r0, r5
                blx     r4
  2002f8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
  2002fa:	2000      	movs	r0, #0
                bl      chThdExit
  2002fc:	f006 ff70 	bl	2071e0 <chThdExit>

00200300 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
  200300:	f006 fc3e 	bl	206b80 <chSchDoReschedule>

00200304 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
  200304:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
  200306:	e7fe      	b.n	200306 <_port_exit_from_isr+0x2>

00200308 <memcpy>:
  200308:	4684      	mov	ip, r0
  20030a:	ea41 0300 	orr.w	r3, r1, r0
  20030e:	f013 0303 	ands.w	r3, r3, #3
  200312:	d16d      	bne.n	2003f0 <memcpy+0xe8>
  200314:	3a40      	subs	r2, #64	; 0x40
  200316:	d341      	bcc.n	20039c <memcpy+0x94>
  200318:	f851 3b04 	ldr.w	r3, [r1], #4
  20031c:	f840 3b04 	str.w	r3, [r0], #4
  200320:	f851 3b04 	ldr.w	r3, [r1], #4
  200324:	f840 3b04 	str.w	r3, [r0], #4
  200328:	f851 3b04 	ldr.w	r3, [r1], #4
  20032c:	f840 3b04 	str.w	r3, [r0], #4
  200330:	f851 3b04 	ldr.w	r3, [r1], #4
  200334:	f840 3b04 	str.w	r3, [r0], #4
  200338:	f851 3b04 	ldr.w	r3, [r1], #4
  20033c:	f840 3b04 	str.w	r3, [r0], #4
  200340:	f851 3b04 	ldr.w	r3, [r1], #4
  200344:	f840 3b04 	str.w	r3, [r0], #4
  200348:	f851 3b04 	ldr.w	r3, [r1], #4
  20034c:	f840 3b04 	str.w	r3, [r0], #4
  200350:	f851 3b04 	ldr.w	r3, [r1], #4
  200354:	f840 3b04 	str.w	r3, [r0], #4
  200358:	f851 3b04 	ldr.w	r3, [r1], #4
  20035c:	f840 3b04 	str.w	r3, [r0], #4
  200360:	f851 3b04 	ldr.w	r3, [r1], #4
  200364:	f840 3b04 	str.w	r3, [r0], #4
  200368:	f851 3b04 	ldr.w	r3, [r1], #4
  20036c:	f840 3b04 	str.w	r3, [r0], #4
  200370:	f851 3b04 	ldr.w	r3, [r1], #4
  200374:	f840 3b04 	str.w	r3, [r0], #4
  200378:	f851 3b04 	ldr.w	r3, [r1], #4
  20037c:	f840 3b04 	str.w	r3, [r0], #4
  200380:	f851 3b04 	ldr.w	r3, [r1], #4
  200384:	f840 3b04 	str.w	r3, [r0], #4
  200388:	f851 3b04 	ldr.w	r3, [r1], #4
  20038c:	f840 3b04 	str.w	r3, [r0], #4
  200390:	f851 3b04 	ldr.w	r3, [r1], #4
  200394:	f840 3b04 	str.w	r3, [r0], #4
  200398:	3a40      	subs	r2, #64	; 0x40
  20039a:	d2bd      	bcs.n	200318 <memcpy+0x10>
  20039c:	3230      	adds	r2, #48	; 0x30
  20039e:	d311      	bcc.n	2003c4 <memcpy+0xbc>
  2003a0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003a4:	f840 3b04 	str.w	r3, [r0], #4
  2003a8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003ac:	f840 3b04 	str.w	r3, [r0], #4
  2003b0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003b4:	f840 3b04 	str.w	r3, [r0], #4
  2003b8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003bc:	f840 3b04 	str.w	r3, [r0], #4
  2003c0:	3a10      	subs	r2, #16
  2003c2:	d2ed      	bcs.n	2003a0 <memcpy+0x98>
  2003c4:	320c      	adds	r2, #12
  2003c6:	d305      	bcc.n	2003d4 <memcpy+0xcc>
  2003c8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003cc:	f840 3b04 	str.w	r3, [r0], #4
  2003d0:	3a04      	subs	r2, #4
  2003d2:	d2f9      	bcs.n	2003c8 <memcpy+0xc0>
  2003d4:	3204      	adds	r2, #4
  2003d6:	d008      	beq.n	2003ea <memcpy+0xe2>
  2003d8:	07d2      	lsls	r2, r2, #31
  2003da:	bf1c      	itt	ne
  2003dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  2003e0:	f800 3b01 	strbne.w	r3, [r0], #1
  2003e4:	d301      	bcc.n	2003ea <memcpy+0xe2>
  2003e6:	880b      	ldrh	r3, [r1, #0]
  2003e8:	8003      	strh	r3, [r0, #0]
  2003ea:	4660      	mov	r0, ip
  2003ec:	4770      	bx	lr
  2003ee:	bf00      	nop
  2003f0:	2a08      	cmp	r2, #8
  2003f2:	d313      	bcc.n	20041c <memcpy+0x114>
  2003f4:	078b      	lsls	r3, r1, #30
  2003f6:	d08d      	beq.n	200314 <memcpy+0xc>
  2003f8:	f010 0303 	ands.w	r3, r0, #3
  2003fc:	d08a      	beq.n	200314 <memcpy+0xc>
  2003fe:	f1c3 0304 	rsb	r3, r3, #4
  200402:	1ad2      	subs	r2, r2, r3
  200404:	07db      	lsls	r3, r3, #31
  200406:	bf1c      	itt	ne
  200408:	f811 3b01 	ldrbne.w	r3, [r1], #1
  20040c:	f800 3b01 	strbne.w	r3, [r0], #1
  200410:	d380      	bcc.n	200314 <memcpy+0xc>
  200412:	f831 3b02 	ldrh.w	r3, [r1], #2
  200416:	f820 3b02 	strh.w	r3, [r0], #2
  20041a:	e77b      	b.n	200314 <memcpy+0xc>
  20041c:	3a04      	subs	r2, #4
  20041e:	d3d9      	bcc.n	2003d4 <memcpy+0xcc>
  200420:	3a01      	subs	r2, #1
  200422:	f811 3b01 	ldrb.w	r3, [r1], #1
  200426:	f800 3b01 	strb.w	r3, [r0], #1
  20042a:	d2f9      	bcs.n	200420 <memcpy+0x118>
  20042c:	780b      	ldrb	r3, [r1, #0]
  20042e:	7003      	strb	r3, [r0, #0]
  200430:	784b      	ldrb	r3, [r1, #1]
  200432:	7043      	strb	r3, [r0, #1]
  200434:	788b      	ldrb	r3, [r1, #2]
  200436:	7083      	strb	r3, [r0, #2]
  200438:	4660      	mov	r0, ip
  20043a:	4770      	bx	lr
  20043c:	0000      	movs	r0, r0
	...

00200440 <chThdDequeueNextI.constprop.75>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
  200440:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  200442:	4290      	cmp	r0, r2
  200444:	d00a      	beq.n	20045c <chThdDequeueNextI.constprop.75+0x1c>
  200446:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
  200448:	6811      	ldr	r1, [r2, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  (void) chSchReadyI(tp);
  20044a:	4610      	mov	r0, r2
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  20044c:	b410      	push	{r4}
  tp->u.rdymsg = msg;
  20044e:	2400      	movs	r4, #0
  200450:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  200452:	604b      	str	r3, [r1, #4]
  200454:	6254      	str	r4, [r2, #36]	; 0x24
    chThdDoDequeueNextI(tqp, msg);
  }
}
  200456:	bc10      	pop	{r4}
  (void) chSchReadyI(tp);
  200458:	f006 bc8a 	b.w	206d70 <chSchReadyI>
  20045c:	4770      	bx	lr
  20045e:	bf00      	nop

00200460 <chTMStartMeasurementX.constprop.62>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200460:	4b01      	ldr	r3, [pc, #4]	; (200468 <chTMStartMeasurementX.constprop.62+0x8>)
  200462:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
  200464:	6083      	str	r3, [r0, #8]
  200466:	4770      	bx	lr
  200468:	e0001000 	.word	0xe0001000
  20046c:	00000000 	.word	0x00000000

00200470 <chThdCreateStatic.constprop.61>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
  200470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  200474:	4615      	mov	r5, r2
  200476:	4604      	mov	r4, r0
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  200478:	2220      	movs	r2, #32
  20047a:	f382 8811 	msr	BASEPRI, r2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  20047e:	4a1f      	ldr	r2, [pc, #124]	; (2004fc <chThdCreateStatic.constprop.61+0x8c>)
  tp = (thread_t *)((uint8_t *)wsp + size -
  200480:	f504 7680 	add.w	r6, r4, #256	; 0x100
  REG_INSERT(tp);
  200484:	4f1e      	ldr	r7, [pc, #120]	; (200500 <chThdCreateStatic.constprop.61+0x90>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200486:	f100 08dc 	add.w	r8, r0, #220	; 0xdc
  20048a:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
  tp->refs      = (trefs_t)1;
  20048e:	f04f 0c01 	mov.w	ip, #1
  tp->name      = name;
  200492:	4a1c      	ldr	r2, [pc, #112]	; (200504 <chThdCreateStatic.constprop.61+0x94>)
  list_init(&tp->waiting);
  200494:	f504 7e94 	add.w	lr, r4, #296	; 0x128
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200498:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
  tp->state     = CH_STATE_WTSTART;
  20049c:	2002      	movs	r0, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
  20049e:	2500      	movs	r5, #0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  2004a0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  tp->name      = name;
  2004a4:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
  queue_init(&tp->msgqueue);
  2004a8:	f504 7396 	add.w	r3, r4, #300	; 0x12c
  REG_INSERT(tp);
  2004ac:	697a      	ldr	r2, [r7, #20]
  tp->prio      = prio;
  2004ae:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  tp->realprio  = prio;
  2004b2:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
  chSchWakeupS(tp, MSG_OK);
  2004b6:	4629      	mov	r1, r5
  tp->state     = CH_STATE_WTSTART;
  2004b8:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
  chSchWakeupS(tp, MSG_OK);
  2004bc:	4630      	mov	r0, r6
  tp->wabase = (stkalign_t *)wsp;
  2004be:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  2004c2:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
  tp->refs      = (trefs_t)1;
  2004c6:	f884 c122 	strb.w	ip, [r4, #290]	; 0x122
  tp->flags     = CH_FLAG_MODE_STATIC;
  2004ca:	f884 5121 	strb.w	r5, [r4, #289]	; 0x121
  tp->mtxlist   = NULL;
  2004ce:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
  2004d2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
  REG_INSERT(tp);
  2004d6:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
  2004da:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
  2004de:	6116      	str	r6, [r2, #16]
  tlp->next = (thread_t *)tlp;
  2004e0:	f8c4 e128 	str.w	lr, [r4, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
  2004e4:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
  2004e8:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  2004ec:	617e      	str	r6, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
  2004ee:	f006 fb8f 	bl	206c10 <chSchWakeupS>
  2004f2:	f385 8811 	msr	BASEPRI, r5
}
  2004f6:	4630      	mov	r0, r6
  2004f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  2004fc:	002002f1 	.word	0x002002f1
  200500:	20000860 	.word	0x20000860
  200504:	08007da8 	.word	0x08007da8
	...

00200510 <chSemWaitTimeout.constprop.58>:
  200510:	2320      	movs	r3, #32
  200512:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
  200516:	4b10      	ldr	r3, [pc, #64]	; (200558 <chSemWaitTimeout.constprop.58+0x48>)
  200518:	6899      	ldr	r1, [r3, #8]
  20051a:	1e4a      	subs	r2, r1, #1
  20051c:	2a00      	cmp	r2, #0
  20051e:	609a      	str	r2, [r3, #8]
  200520:	db04      	blt.n	20052c <chSemWaitTimeout.constprop.58+0x1c>
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
  }

  return MSG_OK;
  200522:	2000      	movs	r0, #0
  200524:	2300      	movs	r3, #0
  200526:	f383 8811 	msr	BASEPRI, r3
}
  20052a:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
  20052c:	b180      	cbz	r0, 200550 <chSemWaitTimeout.constprop.58+0x40>
    currp->u.wtsemp = sp;
  20052e:	4a0b      	ldr	r2, [pc, #44]	; (20055c <chSemWaitTimeout.constprop.58+0x4c>)
  200530:	4601      	mov	r1, r0
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
  200532:	2005      	movs	r0, #5
    currp->u.wtsemp = sp;
  200534:	6992      	ldr	r2, [r2, #24]
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
  200536:	b510      	push	{r4, lr}
  tp->queue.prev             = tqp->prev;
  200538:	685c      	ldr	r4, [r3, #4]
    currp->u.wtsemp = sp;
  20053a:	6253      	str	r3, [r2, #36]	; 0x24
  20053c:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->queue.prev->queue.next = tp;
  200540:	6022      	str	r2, [r4, #0]
  tqp->prev                  = tp;
  200542:	605a      	str	r2, [r3, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
  200544:	f006 feec 	bl	207320 <chSchGoSleepTimeoutS>
  200548:	2300      	movs	r3, #0
  20054a:	f383 8811 	msr	BASEPRI, r3
}
  20054e:	bd10      	pop	{r4, pc}
      sp->cnt++;
  200550:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
  200552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  200556:	e7e5      	b.n	200524 <chSemWaitTimeout.constprop.58+0x14>
  200558:	20000974 	.word	0x20000974
  20055c:	20000860 	.word	0x20000860

00200560 <chSemSignalWait.constprop.55>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
  200560:	b538      	push	{r3, r4, r5, lr}
  200562:	2320      	movs	r3, #32
  200564:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
  200568:	4c15      	ldr	r4, [pc, #84]	; (2005c0 <chSemSignalWait.constprop.55+0x60>)
  20056a:	68a3      	ldr	r3, [r4, #8]
  20056c:	3301      	adds	r3, #1
  20056e:	2b00      	cmp	r3, #0
  200570:	60a3      	str	r3, [r4, #8]
  200572:	dd1a      	ble.n	2005aa <chSemSignalWait.constprop.55+0x4a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
  200574:	3b01      	subs	r3, #1
  200576:	2b00      	cmp	r3, #0
  200578:	60a3      	str	r3, [r4, #8]
  20057a:	db06      	blt.n	20058a <chSemSignalWait.constprop.55+0x2a>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
  20057c:	f006 fb20 	bl	206bc0 <chSchRescheduleS>
    msg = MSG_OK;
  200580:	2000      	movs	r0, #0
  200582:	2300      	movs	r3, #0
  200584:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
  200588:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
  20058a:	4a0e      	ldr	r2, [pc, #56]	; (2005c4 <chSemSignalWait.constprop.55+0x64>)
    chSchGoSleepS(CH_STATE_WTSEM);
  20058c:	2005      	movs	r0, #5
  tp->queue.prev             = tqp->prev;
  20058e:	6863      	ldr	r3, [r4, #4]
    thread_t *ctp = currp;
  200590:	6995      	ldr	r5, [r2, #24]
  200592:	606b      	str	r3, [r5, #4]
  tp->queue.next             = (thread_t *)tqp;
  200594:	602c      	str	r4, [r5, #0]
  tp->queue.prev->queue.next = tp;
  200596:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
  200598:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
  20059a:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
  20059c:	f006 fb88 	bl	206cb0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
  2005a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
  2005a2:	2300      	movs	r3, #0
  2005a4:	f383 8811 	msr	BASEPRI, r3
}
  2005a8:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
  2005aa:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
  2005ac:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2005ae:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
  2005b0:	6023      	str	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  2005b2:	f006 fbdd 	bl	206d70 <chSchReadyI>
  2005b6:	2200      	movs	r2, #0
  2005b8:	68a3      	ldr	r3, [r4, #8]
  2005ba:	6242      	str	r2, [r0, #36]	; 0x24
  2005bc:	e7da      	b.n	200574 <chSemSignalWait.constprop.55+0x14>
  2005be:	bf00      	nop
  2005c0:	20000974 	.word	0x20000974
  2005c4:	20000860 	.word	0x20000860
	...

002005d0 <chMtxTryLock.constprop.53>:
  2005d0:	2320      	movs	r3, #32
  2005d2:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
  2005d6:	4b09      	ldr	r3, [pc, #36]	; (2005fc <chMtxTryLock.constprop.53+0x2c>)
  2005d8:	689a      	ldr	r2, [r3, #8]
  2005da:	b122      	cbz	r2, 2005e6 <chMtxTryLock.constprop.53+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
  2005dc:	2000      	movs	r0, #0
  2005de:	2300      	movs	r3, #0
  2005e0:	f383 8811 	msr	BASEPRI, r3
}
  2005e4:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
  2005e6:	4a06      	ldr	r2, [pc, #24]	; (200600 <chMtxTryLock.constprop.53+0x30>)
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
  2005e8:	2001      	movs	r0, #1
  mp->owner = currp;
  2005ea:	6992      	ldr	r2, [r2, #24]
  mp->next = currp->mtxlist;
  2005ec:	6b91      	ldr	r1, [r2, #56]	; 0x38
  mp->owner = currp;
  2005ee:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
  2005f0:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
  2005f2:	6393      	str	r3, [r2, #56]	; 0x38
  2005f4:	2300      	movs	r3, #0
  2005f6:	f383 8811 	msr	BASEPRI, r3
}
  2005fa:	4770      	bx	lr
  2005fc:	20020024 	.word	0x20020024
  200600:	20000860 	.word	0x20000860
	...

00200610 <chCondSignal.constprop.51>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
  200610:	b508      	push	{r3, lr}
  200612:	2320      	movs	r3, #32
  200614:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
  200618:	4b06      	ldr	r3, [pc, #24]	; (200634 <chCondSignal.constprop.51+0x24>)
  20061a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->queue)) {
  20061c:	4298      	cmp	r0, r3
  20061e:	d005      	beq.n	20062c <chCondSignal.constprop.51+0x1c>
  tqp->next             = tp->queue.next;
  200620:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
  200622:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
  200624:	6053      	str	r3, [r2, #4]
  tqp->next             = tp->queue.next;
  200626:	601a      	str	r2, [r3, #0]
  200628:	f006 faf2 	bl	206c10 <chSchWakeupS>
  20062c:	2300      	movs	r3, #0
  20062e:	f383 8811 	msr	BASEPRI, r3
  200632:	bd08      	pop	{r3, pc}
  200634:	20020000 	.word	0x20020000
	...

00200640 <chCondSignalI.constprop.50>:
  return (bool)(tqp->next != (const thread_t *)tqp);
  200640:	4b07      	ldr	r3, [pc, #28]	; (200660 <chCondSignalI.constprop.50+0x20>)
  200642:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
  200644:	429a      	cmp	r2, r3
  200646:	d009      	beq.n	20065c <chCondSignalI.constprop.50+0x1c>
  tqp->next             = tp->queue.next;
  200648:	6811      	ldr	r1, [r2, #0]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  20064a:	4610      	mov	r0, r2
void chCondSignalI(condition_variable_t *cp) {
  20064c:	b410      	push	{r4}
    tp->u.rdymsg = MSG_OK;
  20064e:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
  200650:	604b      	str	r3, [r1, #4]
  tqp->next             = tp->queue.next;
  200652:	6019      	str	r1, [r3, #0]
  200654:	6254      	str	r4, [r2, #36]	; 0x24
  }
}
  200656:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
  200658:	f006 bb8a 	b.w	206d70 <chSchReadyI>
  20065c:	4770      	bx	lr
  20065e:	bf00      	nop
  200660:	20020000 	.word	0x20020000
	...

00200670 <chEvtGetAndClearEvents.constprop.43>:
  200670:	2320      	movs	r3, #32
  200672:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
  200676:	4a04      	ldr	r2, [pc, #16]	; (200688 <chEvtGetAndClearEvents.constprop.43+0x18>)
  currp->epending &= ~events;
  200678:	2300      	movs	r3, #0
  m = currp->epending & events;
  20067a:	6992      	ldr	r2, [r2, #24]
  20067c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
  20067e:	6353      	str	r3, [r2, #52]	; 0x34
  200680:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
  200684:	4770      	bx	lr
  200686:	bf00      	nop
  200688:	20000860 	.word	0x20000860
  20068c:	00000000 	.word	0x00000000

00200690 <chEvtWaitOne.constprop.39>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
  200690:	4a0b      	ldr	r2, [pc, #44]	; (2006c0 <chEvtWaitOne.constprop.39+0x30>)
  200692:	2320      	movs	r3, #32
eventmask_t chEvtWaitOne(eventmask_t events) {
  200694:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
  200696:	6994      	ldr	r4, [r2, #24]
  200698:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  20069c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
  20069e:	b933      	cbnz	r3, 2006ae <chEvtWaitOne.constprop.39+0x1e>
    ctp->u.ewmask = events;
  2006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
  2006a4:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
  2006a6:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
  2006a8:	f006 fb02 	bl	206cb0 <chSchGoSleepS>
    m = ctp->epending & events;
  2006ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
  2006ae:	4258      	negs	r0, r3
  2006b0:	2200      	movs	r2, #0
  2006b2:	4018      	ands	r0, r3
  ctp->epending &= ~m;
  2006b4:	ea23 0300 	bic.w	r3, r3, r0
  2006b8:	6363      	str	r3, [r4, #52]	; 0x34
  2006ba:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
  2006be:	bd10      	pop	{r4, pc}
  2006c0:	20000860 	.word	0x20000860
	...

002006d0 <chEvtWaitAny.constprop.38>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
  2006d0:	4a09      	ldr	r2, [pc, #36]	; (2006f8 <chEvtWaitAny.constprop.38+0x28>)
  2006d2:	2320      	movs	r3, #32
eventmask_t chEvtWaitAny(eventmask_t events) {
  2006d4:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
  2006d6:	6994      	ldr	r4, [r2, #24]
  2006d8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  2006dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
  2006de:	b930      	cbnz	r0, 2006ee <chEvtWaitAny.constprop.38+0x1e>
    ctp->u.ewmask = events;
  2006e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
  2006e4:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
  2006e6:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
  2006e8:	f006 fae2 	bl	206cb0 <chSchGoSleepS>
    m = ctp->epending & events;
  2006ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->epending &= ~m;
  2006ee:	2300      	movs	r3, #0
  2006f0:	6363      	str	r3, [r4, #52]	; 0x34
  2006f2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
  2006f6:	bd10      	pop	{r4, pc}
  2006f8:	20000860 	.word	0x20000860
  2006fc:	00000000 	.word	0x00000000

00200700 <chEvtWaitAll.constprop.37>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
  200700:	4a0c      	ldr	r2, [pc, #48]	; (200734 <chEvtWaitAll.constprop.37+0x34>)
  200702:	2320      	movs	r3, #32
eventmask_t chEvtWaitAll(eventmask_t events) {
  200704:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
  200706:	6994      	ldr	r4, [r2, #24]
  200708:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
  20070c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  20070e:	f003 0205 	and.w	r2, r3, #5
  200712:	2a05      	cmp	r2, #5
  200714:	d005      	beq.n	200722 <chEvtWaitAll.constprop.37+0x22>
    ctp->u.ewmask = events;
  200716:	2305      	movs	r3, #5
    chSchGoSleepS(CH_STATE_WTANDEVT);
  200718:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
  20071a:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
  20071c:	f006 fac8 	bl	206cb0 <chSchGoSleepS>
  200720:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
  200722:	f023 0305 	bic.w	r3, r3, #5
  200726:	2200      	movs	r2, #0
  200728:	6363      	str	r3, [r4, #52]	; 0x34
  20072a:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return events;
}
  20072e:	2005      	movs	r0, #5
  200730:	bd10      	pop	{r4, pc}
  200732:	bf00      	nop
  200734:	20000860 	.word	0x20000860
	...

00200740 <chHeapAllocAligned.constprop.33>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
  200740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
  200744:	4d40      	ldr	r5, [pc, #256]	; (200848 <chHeapAllocAligned.constprop.33+0x108>)
  if (align < CH_HEAP_ALIGNMENT) {
    align = CH_HEAP_ALIGNMENT;
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
  200746:	f101 0807 	add.w	r8, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
  20074a:	460c      	mov	r4, r1
    heapp = &default_heap;
  20074c:	2800      	cmp	r0, #0
  20074e:	bf18      	it	ne
  200750:	4605      	movne	r5, r0
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
  200752:	ea4f 08d8 	mov.w	r8, r8, lsr #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
  200756:	f105 070c 	add.w	r7, r5, #12
  20075a:	4638      	mov	r0, r7
  20075c:	f006 fc38 	bl	206fd0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  200760:	f105 0e04 	add.w	lr, r5, #4
  while (H_NEXT(qp) != NULL) {
  200764:	f8de 3000 	ldr.w	r3, [lr]

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
  200768:	f103 020f 	add.w	r2, r3, #15
  20076c:	f103 0c08 	add.w	ip, r3, #8
  while (H_NEXT(qp) != NULL) {
  200770:	b1cb      	cbz	r3, 2007a6 <chHeapAllocAligned.constprop.33+0x66>

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
  200772:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
  200776:	f022 0207 	bic.w	r2, r2, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
  20077a:	f109 0101 	add.w	r1, r9, #1
  20077e:	4616      	mov	r6, r2
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
  200780:	3a08      	subs	r2, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
  200782:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  200786:	1b88      	subs	r0, r1, r6
  200788:	428a      	cmp	r2, r1
  20078a:	ea4f 00e0 	mov.w	r0, r0, asr #3
  20078e:	d201      	bcs.n	200794 <chHeapAllocAligned.constprop.33+0x54>
  200790:	4580      	cmp	r8, r0
  200792:	d91c      	bls.n	2007ce <chHeapAllocAligned.constprop.33+0x8e>
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
  200794:	469e      	mov	lr, r3
  while (H_NEXT(qp) != NULL) {
  200796:	f8de 3000 	ldr.w	r3, [lr]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
  20079a:	f103 020f 	add.w	r2, r3, #15
  20079e:	f103 0c08 	add.w	ip, r3, #8
  while (H_NEXT(qp) != NULL) {
  2007a2:	2b00      	cmp	r3, #0
  2007a4:	d1e5      	bne.n	200772 <chHeapAllocAligned.constprop.33+0x32>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
  2007a6:	4638      	mov	r0, r7
  2007a8:	f006 fb72 	bl	206e90 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
  2007ac:	682e      	ldr	r6, [r5, #0]
  2007ae:	2e00      	cmp	r6, #0
  2007b0:	d044      	beq.n	20083c <chHeapAllocAligned.constprop.33+0xfc>
    ahp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT,
  2007b2:	f108 0001 	add.w	r0, r8, #1
  2007b6:	2208      	movs	r2, #8
  2007b8:	00c0      	lsls	r0, r0, #3
  2007ba:	4611      	mov	r1, r2
  2007bc:	47b0      	blx	r6
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
  2007be:	2800      	cmp	r0, #0
  2007c0:	d03f      	beq.n	200842 <chHeapAllocAligned.constprop.33+0x102>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
  2007c2:	f840 5c08 	str.w	r5, [r0, #-8]
      H_SIZE(hp) = size;
  2007c6:	f840 4c04 	str.w	r4, [r0, #-4]
  2007ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
  2007ce:	4293      	cmp	r3, r2
  2007d0:	d31a      	bcc.n	200808 <chHeapAllocAligned.constprop.33+0xc8>
        if (H_PAGES(hp) == pages) {
  2007d2:	45c8      	cmp	r8, r9
  2007d4:	d02c      	beq.n	200830 <chHeapAllocAligned.constprop.33+0xf0>
          fp = H_BLOCK(hp) + pages;
  2007d6:	f108 0801 	add.w	r8, r8, #1
          H_NEXT(fp) = H_NEXT(hp);
  2007da:	6818      	ldr	r0, [r3, #0]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
  2007dc:	4666      	mov	r6, ip
          H_NEXT(qp) = fp;
  2007de:	461a      	mov	r2, r3
          fp = H_BLOCK(hp) + pages;
  2007e0:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
  2007e4:	f843 0038 	str.w	r0, [r3, r8, lsl #3]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
  2007e8:	f10c 0308 	add.w	r3, ip, #8
  2007ec:	1acb      	subs	r3, r1, r3
  2007ee:	10db      	asrs	r3, r3, #3
  2007f0:	f8cc 3004 	str.w	r3, [ip, #4]
          H_NEXT(qp) = fp;
  2007f4:	f8ce c000 	str.w	ip, [lr]
      H_UNLOCK(heapp);
  2007f8:	4638      	mov	r0, r7
      H_SIZE(hp) = size;
  2007fa:	6054      	str	r4, [r2, #4]
      H_HEAP(hp) = heapp;
  2007fc:	6015      	str	r5, [r2, #0]
      H_UNLOCK(heapp);
  2007fe:	f006 fb47 	bl	206e90 <chMtxUnlock>
      return (void *)H_BLOCK(hp);
  200802:	4630      	mov	r0, r6
  200804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
  200808:	eba2 010c 	sub.w	r1, r2, ip
        if (bpages > pages) {
  20080c:	4580      	cmp	r8, r0
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
  20080e:	ea4f 01e1 	mov.w	r1, r1, asr #3
  200812:	6059      	str	r1, [r3, #4]
        if (bpages > pages) {
  200814:	d2f0      	bcs.n	2007f8 <chHeapAllocAligned.constprop.33+0xb8>
          fp = H_BLOCK(ahp) + pages;
  200816:	f108 0e01 	add.w	lr, r8, #1
          H_PAGES(fp) = (bpages - pages) - 1U;
  20081a:	ea6f 0808 	mvn.w	r8, r8
          fp = H_BLOCK(ahp) + pages;
  20081e:	eb02 01ce 	add.w	r1, r2, lr, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
  200822:	4440      	add	r0, r8
  200824:	6048      	str	r0, [r1, #4]
          H_NEXT(fp) = H_NEXT(hp);
  200826:	6818      	ldr	r0, [r3, #0]
  200828:	f842 003e 	str.w	r0, [r2, lr, lsl #3]
          H_NEXT(hp) = fp;
  20082c:	6019      	str	r1, [r3, #0]
  20082e:	e7e3      	b.n	2007f8 <chHeapAllocAligned.constprop.33+0xb8>
          H_NEXT(qp) = H_NEXT(hp);
  200830:	6819      	ldr	r1, [r3, #0]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
  200832:	4666      	mov	r6, ip
          H_NEXT(qp) = H_NEXT(hp);
  200834:	461a      	mov	r2, r3
  200836:	f8ce 1000 	str.w	r1, [lr]
  20083a:	e7dd      	b.n	2007f8 <chHeapAllocAligned.constprop.33+0xb8>
      return (void *)ahp;
      /*lint -restore*/
    }
  }

  return NULL;
  20083c:	4630      	mov	r0, r6
  20083e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
  200842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  200846:	bf00      	nop
  200848:	2000091c 	.word	0x2000091c
  20084c:	00000000 	.word	0x00000000

00200850 <chThdCreateFromHeap.constprop.32>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
  200850:	b5f0      	push	{r4, r5, r6, r7, lr}
  200852:	4604      	mov	r4, r0
  200854:	b087      	sub	sp, #28
  200856:	460f      	mov	r7, r1
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
  200858:	4811      	ldr	r0, [pc, #68]	; (2008a0 <chThdCreateFromHeap.constprop.32+0x50>)
  20085a:	4621      	mov	r1, r4
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
  20085c:	4616      	mov	r6, r2
  20085e:	461d      	mov	r5, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
  200860:	f7ff ff6e 	bl	200740 <chHeapAllocAligned.constprop.33>
  if (wsp == NULL) {
  200864:	b1d0      	cbz	r0, 20089c <chThdCreateFromHeap.constprop.32+0x4c>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
  200866:	4404      	add	r4, r0
  thread_descriptor_t td = {
  200868:	4a0e      	ldr	r2, [pc, #56]	; (2008a4 <chThdCreateFromHeap.constprop.32+0x54>)
  20086a:	9700      	str	r7, [sp, #0]
  20086c:	2320      	movs	r3, #32
  20086e:	9402      	str	r4, [sp, #8]
  200870:	9001      	str	r0, [sp, #4]
  200872:	9603      	str	r6, [sp, #12]
  200874:	9505      	str	r5, [sp, #20]
  200876:	9204      	str	r2, [sp, #16]
  200878:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
  20087c:	4668      	mov	r0, sp
  20087e:	f006 f937 	bl	206af0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
  200882:	2301      	movs	r3, #1
  chSchWakeupS(tp, MSG_OK);
  200884:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
  200886:	4604      	mov	r4, r0
  tp->flags = CH_FLAG_MODE_HEAP;
  200888:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
  20088c:	f006 f9c0 	bl	206c10 <chSchWakeupS>
  200890:	2300      	movs	r3, #0
  200892:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
  200896:	4620      	mov	r0, r4
  200898:	b007      	add	sp, #28
  20089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
  20089c:	4604      	mov	r4, r0
  20089e:	e7fa      	b.n	200896 <chThdCreateFromHeap.constprop.32+0x46>
  2008a0:	20000938 	.word	0x20000938
  2008a4:	002014b1 	.word	0x002014b1
	...

002008b0 <chThdCreateFromMemoryPool.constprop.31>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
  2008b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
  2008b2:	4d14      	ldr	r5, [pc, #80]	; (200904 <chThdCreateFromMemoryPool.constprop.31+0x54>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
  2008b4:	b087      	sub	sp, #28
  2008b6:	4607      	mov	r7, r0
  2008b8:	460e      	mov	r6, r1
  wsp = chPoolAlloc(mp);
  2008ba:	4628      	mov	r0, r5
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
  2008bc:	4614      	mov	r4, r2
  wsp = chPoolAlloc(mp);
  2008be:	f002 f83f 	bl	202940 <chPoolAlloc>
  if (wsp == NULL) {
  2008c2:	b1e0      	cbz	r0, 2008fe <chThdCreateFromMemoryPool.constprop.31+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
  2008c4:	686b      	ldr	r3, [r5, #4]
  2008c6:	2220      	movs	r2, #32
  thread_descriptor_t td = {
  2008c8:	490f      	ldr	r1, [pc, #60]	; (200908 <chThdCreateFromMemoryPool.constprop.31+0x58>)
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
  2008ca:	4403      	add	r3, r0
  thread_descriptor_t td = {
  2008cc:	9700      	str	r7, [sp, #0]
  2008ce:	9001      	str	r0, [sp, #4]
  2008d0:	9603      	str	r6, [sp, #12]
  2008d2:	9405      	str	r4, [sp, #20]
  2008d4:	9302      	str	r3, [sp, #8]
  2008d6:	9104      	str	r1, [sp, #16]
  2008d8:	f382 8811 	msr	BASEPRI, r2
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
  2008dc:	4668      	mov	r0, sp
  2008de:	f006 f907 	bl	206af0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
  2008e2:	2302      	movs	r3, #2
  tp->mpool = mp;
  chSchWakeupS(tp, MSG_OK);
  2008e4:	2100      	movs	r1, #0
  tp->mpool = mp;
  2008e6:	6405      	str	r5, [r0, #64]	; 0x40
  tp->flags = CH_FLAG_MODE_MPOOL;
  2008e8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
  2008ec:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
  2008ee:	f006 f98f 	bl	206c10 <chSchWakeupS>
  2008f2:	2300      	movs	r3, #0
  2008f4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
  2008f8:	4620      	mov	r0, r4
  2008fa:	b007      	add	sp, #28
  2008fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
  2008fe:	4604      	mov	r4, r0
  200900:	e7fa      	b.n	2008f8 <chThdCreateFromMemoryPool.constprop.31+0x48>
  200902:	bf00      	nop
  200904:	20000964 	.word	0x20000964
  200908:	002014b1 	.word	0x002014b1
  20090c:	00000000 	.word	0x00000000

00200910 <chMBReset.constprop.29>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBReset(mailbox_t *mbp) {
  200910:	b538      	push	{r3, r4, r5, lr}
  200912:	2320      	movs	r3, #32
  200914:	f383 8811 	msr	BASEPRI, r3
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
  200918:	4c0c      	ldr	r4, [pc, #48]	; (20094c <chMBReset.constprop.29+0x3c>)
  mbp->rdptr = mbp->buffer;
  mbp->cnt   = (size_t)0;
  mbp->reset = true;
  20091a:	2201      	movs	r2, #1
  mbp->cnt   = (size_t)0;
  20091c:	2500      	movs	r5, #0
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
  20091e:	f06f 0101 	mvn.w	r1, #1
  mbp->wrptr = mbp->buffer;
  200922:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
  200924:	f104 0018 	add.w	r0, r4, #24
  mbp->reset = true;
  200928:	7522      	strb	r2, [r4, #20]
  mbp->wrptr = mbp->buffer;
  20092a:	60a3      	str	r3, [r4, #8]
  mbp->rdptr = mbp->buffer;
  20092c:	60e3      	str	r3, [r4, #12]
  mbp->cnt   = (size_t)0;
  20092e:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
  200930:	f006 fc3e 	bl	2071b0 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
  200934:	f104 0020 	add.w	r0, r4, #32
  200938:	f06f 0101 	mvn.w	r1, #1
  20093c:	f006 fc38 	bl	2071b0 <chThdDequeueAllI>
  chSchRescheduleS();
  200940:	f006 f93e 	bl	206bc0 <chSchRescheduleS>
  200944:	f385 8811 	msr	BASEPRI, r5
  200948:	bd38      	pop	{r3, r4, r5, pc}
  20094a:	bf00      	nop
  20094c:	20020034 	.word	0x20020034

00200950 <chMBPostTimeout.constprop.27>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
  200950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  200954:	2320      	movs	r3, #32
  200956:	4680      	mov	r8, r0
  200958:	460e      	mov	r6, r1
  20095a:	f383 8811 	msr	BASEPRI, r3
  20095e:	4c18      	ldr	r4, [pc, #96]	; (2009c0 <chMBPostTimeout.constprop.27+0x70>)

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
  200960:	f104 0518 	add.w	r5, r4, #24
  200964:	e00a      	b.n	20097c <chMBPostTimeout.constprop.27+0x2c>
  200966:	6827      	ldr	r7, [r4, #0]
  200968:	6862      	ldr	r2, [r4, #4]
  20096a:	6923      	ldr	r3, [r4, #16]
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
  20096c:	eba2 0c07 	sub.w	ip, r2, r7
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
  200970:	ebb3 0fac 	cmp.w	r3, ip, asr #2
  200974:	d10e      	bne.n	200994 <chMBPostTimeout.constprop.27+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
  200976:	f006 fcfb 	bl	207370 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
  20097a:	b930      	cbnz	r0, 20098a <chMBPostTimeout.constprop.27+0x3a>
    if (mbp->reset) {
  20097c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
  20097e:	4631      	mov	r1, r6
  200980:	4628      	mov	r0, r5
    if (mbp->reset) {
  200982:	2b00      	cmp	r3, #0
  200984:	d0ef      	beq.n	200966 <chMBPostTimeout.constprop.27+0x16>
      return MSG_RESET;
  200986:	f06f 0001 	mvn.w	r0, #1
  20098a:	2300      	movs	r3, #0
  20098c:	f383 8811 	msr	BASEPRI, r3
}
  200990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
  200994:	68a0      	ldr	r0, [r4, #8]
      mbp->cnt++;
  200996:	3301      	adds	r3, #1
      *mbp->wrptr++ = msg;
  200998:	1d01      	adds	r1, r0, #4
      if (mbp->wrptr >= mbp->top) {
  20099a:	428a      	cmp	r2, r1
      *mbp->wrptr++ = msg;
  20099c:	60a1      	str	r1, [r4, #8]
  20099e:	f8c0 8000 	str.w	r8, [r0]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
  2009a2:	4808      	ldr	r0, [pc, #32]	; (2009c4 <chMBPostTimeout.constprop.27+0x74>)
        mbp->wrptr = mbp->buffer;
  2009a4:	bf98      	it	ls
  2009a6:	60a7      	strls	r7, [r4, #8]
      mbp->cnt++;
  2009a8:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
  2009aa:	f7ff fd49 	bl	200440 <chThdDequeueNextI.constprop.75>
      chSchRescheduleS();
  2009ae:	f006 f907 	bl	206bc0 <chSchRescheduleS>
      return MSG_OK;
  2009b2:	2000      	movs	r0, #0
  2009b4:	2300      	movs	r3, #0
  2009b6:	f383 8811 	msr	BASEPRI, r3
}
  2009ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  2009be:	bf00      	nop
  2009c0:	20020034 	.word	0x20020034
  2009c4:	20020054 	.word	0x20020054
	...

002009d0 <chMBPostI.constprop.26>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
  2009d0:	4b0f      	ldr	r3, [pc, #60]	; (200a10 <chMBPostI.constprop.26+0x40>)
  2009d2:	7d1a      	ldrb	r2, [r3, #20]
  2009d4:	b9aa      	cbnz	r2, 200a02 <chMBPostI.constprop.26+0x32>
  2009d6:	6859      	ldr	r1, [r3, #4]
  2009d8:	691a      	ldr	r2, [r3, #16]
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
  2009da:	b570      	push	{r4, r5, r6, lr}
  2009dc:	681e      	ldr	r6, [r3, #0]
  2009de:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
  2009e0:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
  2009e4:	d010      	beq.n	200a08 <chMBPostI.constprop.26+0x38>
    *mbp->wrptr++ = msg;
  2009e6:	689d      	ldr	r5, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
  2009e8:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
  2009ea:	1d2c      	adds	r4, r5, #4
    if (mbp->wrptr >= mbp->top) {
  2009ec:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
  2009ee:	609c      	str	r4, [r3, #8]
  2009f0:	6028      	str	r0, [r5, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
  2009f2:	4808      	ldr	r0, [pc, #32]	; (200a14 <chMBPostI.constprop.26+0x44>)
      mbp->wrptr = mbp->buffer;
  2009f4:	bf98      	it	ls
  2009f6:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
  2009f8:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
  2009fa:	f7ff fd21 	bl	200440 <chThdDequeueNextI.constprop.75>

    return MSG_OK;
  2009fe:	2000      	movs	r0, #0
  200a00:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
  200a02:	f06f 0001 	mvn.w	r0, #1
  200a06:	4770      	bx	lr
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
  200a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
  200a0c:	bd70      	pop	{r4, r5, r6, pc}
  200a0e:	bf00      	nop
  200a10:	20020034 	.word	0x20020034
  200a14:	20020054 	.word	0x20020054
	...

00200a20 <chMBPostAheadTimeout.constprop.24>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
  200a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  200a24:	2320      	movs	r3, #32
  200a26:	4680      	mov	r8, r0
  200a28:	460f      	mov	r7, r1
  200a2a:	f383 8811 	msr	BASEPRI, r3
  200a2e:	4c18      	ldr	r4, [pc, #96]	; (200a90 <chMBPostAheadTimeout.constprop.24+0x70>)

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
  200a30:	f104 0518 	add.w	r5, r4, #24
  200a34:	e00a      	b.n	200a4c <chMBPostAheadTimeout.constprop.24+0x2c>
  200a36:	e894 0044 	ldmia.w	r4, {r2, r6}
  200a3a:	6923      	ldr	r3, [r4, #16]
  200a3c:	eba6 0c02 	sub.w	ip, r6, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
  200a40:	ebb3 0fac 	cmp.w	r3, ip, asr #2
  200a44:	d10e      	bne.n	200a64 <chMBPostAheadTimeout.constprop.24+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
  200a46:	f006 fc93 	bl	207370 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
  200a4a:	b930      	cbnz	r0, 200a5a <chMBPostAheadTimeout.constprop.24+0x3a>
    if (mbp->reset) {
  200a4c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
  200a4e:	4639      	mov	r1, r7
  200a50:	4628      	mov	r0, r5
    if (mbp->reset) {
  200a52:	2b00      	cmp	r3, #0
  200a54:	d0ef      	beq.n	200a36 <chMBPostAheadTimeout.constprop.24+0x16>
      return MSG_RESET;
  200a56:	f06f 0001 	mvn.w	r0, #1
  200a5a:	2300      	movs	r3, #0
  200a5c:	f383 8811 	msr	BASEPRI, r3
}
  200a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
  200a64:	68e1      	ldr	r1, [r4, #12]
      mbp->cnt++;
  200a66:	3301      	adds	r3, #1
      chThdDequeueNextI(&mbp->qr, MSG_OK);
  200a68:	480a      	ldr	r0, [pc, #40]	; (200a94 <chMBPostAheadTimeout.constprop.24+0x74>)
      if (--mbp->rdptr < mbp->buffer) {
  200a6a:	3904      	subs	r1, #4
  200a6c:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
  200a6e:	bf88      	it	hi
  200a70:	1f31      	subhi	r1, r6, #4
  200a72:	60e1      	str	r1, [r4, #12]
      *mbp->rdptr = msg;
  200a74:	f8c1 8000 	str.w	r8, [r1]
      mbp->cnt++;
  200a78:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
  200a7a:	f7ff fce1 	bl	200440 <chThdDequeueNextI.constprop.75>
      chSchRescheduleS();
  200a7e:	f006 f89f 	bl	206bc0 <chSchRescheduleS>
      return MSG_OK;
  200a82:	2000      	movs	r0, #0
  200a84:	2300      	movs	r3, #0
  200a86:	f383 8811 	msr	BASEPRI, r3
}
  200a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  200a8e:	bf00      	nop
  200a90:	20020034 	.word	0x20020034
  200a94:	20020054 	.word	0x20020054
	...

00200aa0 <chMBPostAheadI.constprop.23>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
  200aa0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
  200aa2:	4b0f      	ldr	r3, [pc, #60]	; (200ae0 <chMBPostAheadI.constprop.23+0x40>)
  200aa4:	7d1a      	ldrb	r2, [r3, #20]
  200aa6:	b9a2      	cbnz	r2, 200ad2 <chMBPostAheadI.constprop.23+0x32>
  200aa8:	6919      	ldr	r1, [r3, #16]
  200aaa:	e893 0030 	ldmia.w	r3, {r4, r5}
  200aae:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
  200ab0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
  200ab4:	d010      	beq.n	200ad8 <chMBPostAheadI.constprop.23+0x38>
    if (--mbp->rdptr < mbp->buffer) {
  200ab6:	68da      	ldr	r2, [r3, #12]
      mbp->rdptr = mbp->top - 1;
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
  200ab8:	3101      	adds	r1, #1
    if (--mbp->rdptr < mbp->buffer) {
  200aba:	3a04      	subs	r2, #4
  200abc:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
  200abe:	bf88      	it	hi
  200ac0:	1f2a      	subhi	r2, r5, #4
  200ac2:	60da      	str	r2, [r3, #12]
    *mbp->rdptr = msg;
  200ac4:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
  200ac6:	4807      	ldr	r0, [pc, #28]	; (200ae4 <chMBPostAheadI.constprop.23+0x44>)
    mbp->cnt++;
  200ac8:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
  200aca:	f7ff fcb9 	bl	200440 <chThdDequeueNextI.constprop.75>

    return MSG_OK;
  200ace:	2000      	movs	r0, #0
  200ad0:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
  200ad2:	f06f 0001 	mvn.w	r0, #1
  200ad6:	bd38      	pop	{r3, r4, r5, pc}
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
  200ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
  200adc:	bd38      	pop	{r3, r4, r5, pc}
  200ade:	bf00      	nop
  200ae0:	20020034 	.word	0x20020034
  200ae4:	20020054 	.word	0x20020054
	...

00200af0 <chMBFetchTimeout.constprop.21>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
  200af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  200af2:	4607      	mov	r7, r0
  200af4:	460e      	mov	r6, r1
  200af6:	2320      	movs	r3, #32
  200af8:	f383 8811 	msr	BASEPRI, r3
  200afc:	4c14      	ldr	r4, [pc, #80]	; (200b50 <chMBFetchTimeout.constprop.21+0x60>)

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
  200afe:	18e5      	adds	r5, r4, r3
  200b00:	e004      	b.n	200b0c <chMBFetchTimeout.constprop.21+0x1c>
  200b02:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
  200b04:	b96b      	cbnz	r3, 200b22 <chMBFetchTimeout.constprop.21+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
  200b06:	f006 fc33 	bl	207370 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
  200b0a:	b930      	cbnz	r0, 200b1a <chMBFetchTimeout.constprop.21+0x2a>
    if (mbp->reset) {
  200b0c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
  200b0e:	4631      	mov	r1, r6
  200b10:	4628      	mov	r0, r5
    if (mbp->reset) {
  200b12:	2b00      	cmp	r3, #0
  200b14:	d0f5      	beq.n	200b02 <chMBFetchTimeout.constprop.21+0x12>
      return MSG_RESET;
  200b16:	f06f 0001 	mvn.w	r0, #1
  200b1a:	2300      	movs	r3, #0
  200b1c:	f383 8811 	msr	BASEPRI, r3
}
  200b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
  200b22:	68e1      	ldr	r1, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
  200b24:	6860      	ldr	r0, [r4, #4]
      *msgp = *mbp->rdptr++;
  200b26:	1d0a      	adds	r2, r1, #4
  200b28:	6809      	ldr	r1, [r1, #0]
      if (mbp->rdptr >= mbp->top) {
  200b2a:	4282      	cmp	r2, r0
      *msgp = *mbp->rdptr++;
  200b2c:	60e2      	str	r2, [r4, #12]
  200b2e:	6039      	str	r1, [r7, #0]
      if (mbp->rdptr >= mbp->top) {
  200b30:	d301      	bcc.n	200b36 <chMBFetchTimeout.constprop.21+0x46>
        mbp->rdptr = mbp->buffer;
  200b32:	6822      	ldr	r2, [r4, #0]
  200b34:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
  200b36:	3b01      	subs	r3, #1
      chThdDequeueNextI(&mbp->qw, MSG_OK);
  200b38:	4806      	ldr	r0, [pc, #24]	; (200b54 <chMBFetchTimeout.constprop.21+0x64>)
      mbp->cnt--;
  200b3a:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
  200b3c:	f7ff fc80 	bl	200440 <chThdDequeueNextI.constprop.75>
      chSchRescheduleS();
  200b40:	f006 f83e 	bl	206bc0 <chSchRescheduleS>
      return MSG_OK;
  200b44:	2000      	movs	r0, #0
  200b46:	2300      	movs	r3, #0
  200b48:	f383 8811 	msr	BASEPRI, r3
}
  200b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200b4e:	bf00      	nop
  200b50:	20020034 	.word	0x20020034
  200b54:	2002004c 	.word	0x2002004c
	...

00200b60 <chMBFetchI.constprop.20>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
  200b60:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
  200b62:	4b0e      	ldr	r3, [pc, #56]	; (200b9c <chMBFetchI.constprop.20+0x3c>)
  200b64:	7d1a      	ldrb	r2, [r3, #20]
  200b66:	b992      	cbnz	r2, 200b8e <chMBFetchI.constprop.20+0x2e>
  200b68:	691a      	ldr	r2, [r3, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
  200b6a:	b19a      	cbz	r2, 200b94 <chMBFetchI.constprop.20+0x34>
    *msgp = *mbp->rdptr++;
  200b6c:	68dc      	ldr	r4, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
  200b6e:	685d      	ldr	r5, [r3, #4]
    *msgp = *mbp->rdptr++;
  200b70:	1d21      	adds	r1, r4, #4
  200b72:	6824      	ldr	r4, [r4, #0]
    if (mbp->rdptr >= mbp->top) {
  200b74:	42a9      	cmp	r1, r5
    *msgp = *mbp->rdptr++;
  200b76:	60d9      	str	r1, [r3, #12]
  200b78:	6004      	str	r4, [r0, #0]
    if (mbp->rdptr >= mbp->top) {
  200b7a:	d301      	bcc.n	200b80 <chMBFetchI.constprop.20+0x20>
      mbp->rdptr = mbp->buffer;
  200b7c:	6819      	ldr	r1, [r3, #0]
  200b7e:	60d9      	str	r1, [r3, #12]
    }
    mbp->cnt--;
  200b80:	3a01      	subs	r2, #1

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
  200b82:	4807      	ldr	r0, [pc, #28]	; (200ba0 <chMBFetchI.constprop.20+0x40>)
    mbp->cnt--;
  200b84:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
  200b86:	f7ff fc5b 	bl	200440 <chThdDequeueNextI.constprop.75>

    return MSG_OK;
  200b8a:	2000      	movs	r0, #0
  200b8c:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
  200b8e:	f06f 0001 	mvn.w	r0, #1
  200b92:	bd38      	pop	{r3, r4, r5, pc}
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
  200b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
  200b98:	bd38      	pop	{r3, r4, r5, pc}
  200b9a:	bf00      	nop
  200b9c:	20020034 	.word	0x20020034
  200ba0:	2002004c 	.word	0x2002004c
	...

00200bb0 <chGuardedPoolAllocTimeout.constprop.15>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
  200bb0:	b510      	push	{r4, lr}
  200bb2:	2320      	movs	r3, #32
  200bb4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
  200bb8:	4c16      	ldr	r4, [pc, #88]	; (200c14 <chGuardedPoolAllocTimeout.constprop.15+0x64>)
  200bba:	68a2      	ldr	r2, [r4, #8]
  200bbc:	1e53      	subs	r3, r2, #1
  200bbe:	2b00      	cmp	r3, #0
  200bc0:	60a3      	str	r3, [r4, #8]
  200bc2:	db07      	blt.n	200bd4 <chGuardedPoolAllocTimeout.constprop.15+0x24>
  objp = mp->next;
  200bc4:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
  200bc6:	b1c8      	cbz	r0, 200bfc <chGuardedPoolAllocTimeout.constprop.15+0x4c>
    mp->next = mp->next->next;
  200bc8:	6803      	ldr	r3, [r0, #0]
  200bca:	60e3      	str	r3, [r4, #12]
  200bcc:	2300      	movs	r3, #0
  200bce:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
  200bd2:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
  200bd4:	b1e0      	cbz	r0, 200c10 <chGuardedPoolAllocTimeout.constprop.15+0x60>
    currp->u.wtsemp = sp;
  200bd6:	4b10      	ldr	r3, [pc, #64]	; (200c18 <chGuardedPoolAllocTimeout.constprop.15+0x68>)
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
  200bd8:	4601      	mov	r1, r0
  tp->queue.prev             = tqp->prev;
  200bda:	6862      	ldr	r2, [r4, #4]
  200bdc:	2005      	movs	r0, #5
    currp->u.wtsemp = sp;
  200bde:	699b      	ldr	r3, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
  200be0:	601c      	str	r4, [r3, #0]
  tp->queue.prev             = tqp->prev;
  200be2:	605a      	str	r2, [r3, #4]
  200be4:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.prev->queue.next = tp;
  200be6:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
  200be8:	6063      	str	r3, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
  200bea:	f006 fb99 	bl	207320 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
  200bee:	2800      	cmp	r0, #0
  200bf0:	d0e8      	beq.n	200bc4 <chGuardedPoolAllocTimeout.constprop.15+0x14>
    return NULL;
  200bf2:	2000      	movs	r0, #0
  200bf4:	2300      	movs	r3, #0
  200bf6:	f383 8811 	msr	BASEPRI, r3
}
  200bfa:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
  200bfc:	69a3      	ldr	r3, [r4, #24]
  200bfe:	2b00      	cmp	r3, #0
  200c00:	d0f7      	beq.n	200bf2 <chGuardedPoolAllocTimeout.constprop.15+0x42>
    objp = mp->provider(mp->object_size, mp->align);
  200c02:	6961      	ldr	r1, [r4, #20]
  200c04:	6920      	ldr	r0, [r4, #16]
  200c06:	4798      	blx	r3
  200c08:	2300      	movs	r3, #0
  200c0a:	f383 8811 	msr	BASEPRI, r3
}
  200c0e:	bd10      	pop	{r4, pc}
      sp->cnt++;
  200c10:	60a2      	str	r2, [r4, #8]
  200c12:	e7db      	b.n	200bcc <chGuardedPoolAllocTimeout.constprop.15+0x1c>
  200c14:	20020008 	.word	0x20020008
  200c18:	20000860 	.word	0x20000860
  200c1c:	00000000 	.word	0x00000000

00200c20 <chFactoryRegisterObject.constprop.12>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
  200c20:	b538      	push	{r3, r4, r5, lr}
  200c22:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
  200c24:	4807      	ldr	r0, [pc, #28]	; (200c44 <chFactoryRegisterObject.constprop.12+0x24>)
  200c26:	f006 f9d3 	bl	206fd0 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
  200c2a:	4a07      	ldr	r2, [pc, #28]	; (200c48 <chFactoryRegisterObject.constprop.12+0x28>)
  200c2c:	4807      	ldr	r0, [pc, #28]	; (200c4c <chFactoryRegisterObject.constprop.12+0x2c>)
  200c2e:	1f11      	subs	r1, r2, #4
  200c30:	f001 fe9e 	bl	202970 <dyn_create_object_pool.lto_priv.80>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
  200c34:	4604      	mov	r4, r0
  200c36:	b100      	cbz	r0, 200c3a <chFactoryRegisterObject.constprop.12+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
  200c38:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
  200c3a:	4802      	ldr	r0, [pc, #8]	; (200c44 <chFactoryRegisterObject.constprop.12+0x24>)
  200c3c:	f006 f928 	bl	206e90 <chMtxUnlock>

  return rop;
}
  200c40:	4620      	mov	r0, r4
  200c42:	bd38      	pop	{r3, r4, r5, pc}
  200c44:	200008d8 	.word	0x200008d8
  200c48:	200008ec 	.word	0x200008ec
  200c4c:	08007da0 	.word	0x08007da0

00200c50 <chFactoryFindObject.constprop.11>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
  200c50:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
  200c52:	4c07      	ldr	r4, [pc, #28]	; (200c70 <chFactoryFindObject.constprop.11+0x20>)
  200c54:	4620      	mov	r0, r4
  200c56:	f006 f9bb 	bl	206fd0 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
  200c5a:	f104 0110 	add.w	r1, r4, #16
  200c5e:	4805      	ldr	r0, [pc, #20]	; (200c74 <chFactoryFindObject.constprop.11+0x24>)
  200c60:	f001 fe26 	bl	2028b0 <dyn_find_object.lto_priv.81>
  200c64:	4605      	mov	r5, r0

  F_UNLOCK();
  200c66:	4620      	mov	r0, r4
  200c68:	f006 f912 	bl	206e90 <chMtxUnlock>

  return rop;
}
  200c6c:	4628      	mov	r0, r5
  200c6e:	bd38      	pop	{r3, r4, r5, pc}
  200c70:	200008d8 	.word	0x200008d8
  200c74:	08007da0 	.word	0x08007da0
	...

00200c80 <chFactoryCreateBuffer.constprop.10>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
  200c80:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
  200c82:	480a      	ldr	r0, [pc, #40]	; (200cac <chFactoryCreateBuffer.constprop.10+0x2c>)
  200c84:	f006 f9a4 	bl	206fd0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
  200c88:	2280      	movs	r2, #128	; 0x80
  200c8a:	4909      	ldr	r1, [pc, #36]	; (200cb0 <chFactoryCreateBuffer.constprop.10+0x30>)
  200c8c:	4809      	ldr	r0, [pc, #36]	; (200cb4 <chFactoryCreateBuffer.constprop.10+0x34>)
  200c8e:	f001 fe2f 	bl	2028f0 <dyn_create_object_heap.lto_priv.82>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
  200c92:	4604      	mov	r4, r0
  200c94:	b120      	cbz	r0, 200ca0 <chFactoryCreateBuffer.constprop.10+0x20>
    /* Initializing buffer object data.*/
    memset((void *)dbp->buffer, 0, size);
  200c96:	2280      	movs	r2, #128	; 0x80
  200c98:	2100      	movs	r1, #0
  200c9a:	3010      	adds	r0, #16
  200c9c:	f006 ff94 	bl	207bc8 <memset>
  }

  F_UNLOCK();
  200ca0:	4802      	ldr	r0, [pc, #8]	; (200cac <chFactoryCreateBuffer.constprop.10+0x2c>)
  200ca2:	f006 f8f5 	bl	206e90 <chMtxUnlock>

  return dbp;
}
  200ca6:	4620      	mov	r0, r4
  200ca8:	bd10      	pop	{r4, pc}
  200caa:	bf00      	nop
  200cac:	200008d8 	.word	0x200008d8
  200cb0:	200008fc 	.word	0x200008fc
  200cb4:	08007d80 	.word	0x08007d80
	...

00200cc0 <chFactoryFindBuffer.constprop.9>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
  200cc0:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
  200cc2:	4c07      	ldr	r4, [pc, #28]	; (200ce0 <chFactoryFindBuffer.constprop.9+0x20>)
  200cc4:	4620      	mov	r0, r4
  200cc6:	f006 f983 	bl	206fd0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
  200cca:	f104 0124 	add.w	r1, r4, #36	; 0x24
  200cce:	4805      	ldr	r0, [pc, #20]	; (200ce4 <chFactoryFindBuffer.constprop.9+0x24>)
  200cd0:	f001 fdee 	bl	2028b0 <dyn_find_object.lto_priv.81>
  200cd4:	4605      	mov	r5, r0

  F_UNLOCK();
  200cd6:	4620      	mov	r0, r4
  200cd8:	f006 f8da 	bl	206e90 <chMtxUnlock>

  return dbp;
}
  200cdc:	4628      	mov	r0, r5
  200cde:	bd38      	pop	{r3, r4, r5, pc}
  200ce0:	200008d8 	.word	0x200008d8
  200ce4:	08007d80 	.word	0x08007d80
	...

00200cf0 <chFactoryCreateSemaphore.constprop.8>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
  200cf0:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
  200cf2:	480a      	ldr	r0, [pc, #40]	; (200d1c <chFactoryCreateSemaphore.constprop.8+0x2c>)
  200cf4:	f006 f96c 	bl	206fd0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
  200cf8:	4a09      	ldr	r2, [pc, #36]	; (200d20 <chFactoryCreateSemaphore.constprop.8+0x30>)
  200cfa:	480a      	ldr	r0, [pc, #40]	; (200d24 <chFactoryCreateSemaphore.constprop.8+0x34>)
  200cfc:	1f11      	subs	r1, r2, #4
  200cfe:	f001 fe37 	bl	202970 <dyn_create_object_pool.lto_priv.80>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
  200d02:	4604      	mov	r4, r0
  200d04:	b128      	cbz	r0, 200d12 <chFactoryCreateSemaphore.constprop.8+0x22>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
  200d06:	f100 0310 	add.w	r3, r0, #16
  sp->cnt = n;
  200d0a:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
  200d0c:	6103      	str	r3, [r0, #16]
  tqp->prev = (thread_t *)tqp;
  200d0e:	6143      	str	r3, [r0, #20]
  200d10:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
  200d12:	4802      	ldr	r0, [pc, #8]	; (200d1c <chFactoryCreateSemaphore.constprop.8+0x2c>)
  200d14:	f006 f8bc 	bl	206e90 <chMtxUnlock>

  return dsp;
}
  200d18:	4620      	mov	r0, r4
  200d1a:	bd10      	pop	{r4, pc}
  200d1c:	200008d8 	.word	0x200008d8
  200d20:	20000904 	.word	0x20000904
  200d24:	08007d98 	.word	0x08007d98
	...

00200d30 <chFactoryFindSemaphore.constprop.7>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
  200d30:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
  200d32:	4c07      	ldr	r4, [pc, #28]	; (200d50 <chFactoryFindSemaphore.constprop.7+0x20>)
  200d34:	4620      	mov	r0, r4
  200d36:	f006 f94b 	bl	206fd0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
  200d3a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  200d3e:	4805      	ldr	r0, [pc, #20]	; (200d54 <chFactoryFindSemaphore.constprop.7+0x24>)
  200d40:	f001 fdb6 	bl	2028b0 <dyn_find_object.lto_priv.81>
  200d44:	4605      	mov	r5, r0

  F_UNLOCK();
  200d46:	4620      	mov	r0, r4
  200d48:	f006 f8a2 	bl	206e90 <chMtxUnlock>

  return dsp;
}
  200d4c:	4628      	mov	r0, r5
  200d4e:	bd38      	pop	{r3, r4, r5, pc}
  200d50:	200008d8 	.word	0x200008d8
  200d54:	08007d98 	.word	0x08007d98
	...

00200d60 <chFactoryCreateMailbox.constprop.6>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
  200d60:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
  200d62:	4811      	ldr	r0, [pc, #68]	; (200da8 <chFactoryCreateMailbox.constprop.6+0x48>)
  200d64:	f006 f934 	bl	206fd0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
  200d68:	2278      	movs	r2, #120	; 0x78
  200d6a:	4910      	ldr	r1, [pc, #64]	; (200dac <chFactoryCreateMailbox.constprop.6+0x4c>)
  200d6c:	4810      	ldr	r0, [pc, #64]	; (200db0 <chFactoryCreateMailbox.constprop.6+0x50>)
  200d6e:	f001 fdbf 	bl	2028f0 <dyn_create_object_heap.lto_priv.82>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
  200d72:	4604      	mov	r4, r0
  200d74:	b198      	cbz	r0, 200d9e <chFactoryCreateMailbox.constprop.6+0x3e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
  200d76:	f100 0338 	add.w	r3, r0, #56	; 0x38
  mbp->top    = &buf[n];
  200d7a:	f100 0578 	add.w	r5, r0, #120	; 0x78
  chThdQueueObjectInit(&mbp->qw);
  200d7e:	f104 0128 	add.w	r1, r4, #40	; 0x28
  mbp->cnt    = (size_t)0;
  200d82:	2000      	movs	r0, #0
  chThdQueueObjectInit(&mbp->qr);
  200d84:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->buffer = buf;
  200d88:	6123      	str	r3, [r4, #16]
  mbp->rdptr  = buf;
  200d8a:	61e3      	str	r3, [r4, #28]
  mbp->wrptr  = buf;
  200d8c:	61a3      	str	r3, [r4, #24]
  mbp->top    = &buf[n];
  200d8e:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
  200d90:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
  200d92:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
  200d96:	62a1      	str	r1, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
  200d98:	62e1      	str	r1, [r4, #44]	; 0x2c
  tqp->next = (thread_t *)tqp;
  200d9a:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  200d9c:	6362      	str	r2, [r4, #52]	; 0x34
  }

  F_UNLOCK();
  200d9e:	4802      	ldr	r0, [pc, #8]	; (200da8 <chFactoryCreateMailbox.constprop.6+0x48>)
  200da0:	f006 f876 	bl	206e90 <chMtxUnlock>

  return dmp;
}
  200da4:	4620      	mov	r0, r4
  200da6:	bd38      	pop	{r3, r4, r5, pc}
  200da8:	200008d8 	.word	0x200008d8
  200dac:	20000914 	.word	0x20000914
  200db0:	08007d88 	.word	0x08007d88
	...

00200dc0 <chFactoryFindMailbox.constprop.5>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
  200dc0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
  200dc2:	4c07      	ldr	r4, [pc, #28]	; (200de0 <chFactoryFindMailbox.constprop.5+0x20>)
  200dc4:	4620      	mov	r0, r4
  200dc6:	f006 f903 	bl	206fd0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
  200dca:	f104 013c 	add.w	r1, r4, #60	; 0x3c
  200dce:	4805      	ldr	r0, [pc, #20]	; (200de4 <chFactoryFindMailbox.constprop.5+0x24>)
  200dd0:	f001 fd6e 	bl	2028b0 <dyn_find_object.lto_priv.81>
  200dd4:	4605      	mov	r5, r0

  F_UNLOCK();
  200dd6:	4620      	mov	r0, r4
  200dd8:	f006 f85a 	bl	206e90 <chMtxUnlock>

  return dmp;
}
  200ddc:	4628      	mov	r0, r5
  200dde:	bd38      	pop	{r3, r4, r5, pc}
  200de0:	200008d8 	.word	0x200008d8
  200de4:	08007d88 	.word	0x08007d88
	...

00200df0 <chFactoryCreateObjectsFIFO.constprop.4>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
  200df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
  200df4:	4824      	ldr	r0, [pc, #144]	; (200e88 <chFactoryCreateObjectsFIFO.constprop.4+0x98>)
  200df6:	f006 f8eb 	bl	206fd0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
  200dfa:	f44f 72ca 	mov.w	r2, #404	; 0x194
  200dfe:	4923      	ldr	r1, [pc, #140]	; (200e8c <chFactoryCreateObjectsFIFO.constprop.4+0x9c>)
  200e00:	4823      	ldr	r0, [pc, #140]	; (200e90 <chFactoryCreateObjectsFIFO.constprop.4+0xa0>)
  200e02:	f001 fd75 	bl	2028f0 <dyn_create_object_heap.lto_priv.82>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
  200e06:	4604      	mov	r4, r0
  200e08:	2800      	cmp	r0, #0
  200e0a:	d037      	beq.n	200e7c <chFactoryCreateObjectsFIFO.constprop.4+0x8c>
  mp->next = NULL;
  200e0c:	2300      	movs	r3, #0
  mp->object_size = size;
  200e0e:	2210      	movs	r2, #16
    /* Initializing mailbox object data.*/
    chFifoObjectInit(&dofp->fifo, objsize, objn, objalign,
                     (void *)&dofp->msgbuf[objn], dofp->msgbuf);
  200e10:	f100 0a94 	add.w	sl, r0, #148	; 0x94
  mp->align = align;
  200e14:	2104      	movs	r1, #4
 */
static inline void chFifoObjectInit(objects_fifo_t *ofp, size_t objsize,
                                    size_t objn, unsigned objalign,
                                    void *objbuf, msg_t *msgbuf) {

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
  200e16:	1886      	adds	r6, r0, r2
  200e18:	4698      	mov	r8, r3
  200e1a:	4655      	mov	r5, sl
  200e1c:	4693      	mov	fp, r2
  200e1e:	f100 0954 	add.w	r9, r0, #84	; 0x54
  200e22:	2720      	movs	r7, #32
  mp->next = NULL;
  200e24:	61c3      	str	r3, [r0, #28]
  mp->provider = provider;
  200e26:	6283      	str	r3, [r0, #40]	; 0x28
  200e28:	6183      	str	r3, [r0, #24]
  mp->object_size = size;
  200e2a:	6202      	str	r2, [r0, #32]
  tqp->next = (thread_t *)tqp;
  200e2c:	6106      	str	r6, [r0, #16]
  tqp->prev = (thread_t *)tqp;
  200e2e:	6146      	str	r6, [r0, #20]
  mp->align = align;
  200e30:	6241      	str	r1, [r0, #36]	; 0x24
  200e32:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
  200e36:	69e3      	ldr	r3, [r4, #28]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
  200e38:	4630      	mov	r0, r6
  php->next = mp->next;
  200e3a:	602b      	str	r3, [r5, #0]
  mp->next = php;
  200e3c:	61e5      	str	r5, [r4, #28]
  chSemSignalI(&gmp->sem);
  200e3e:	f006 f97f 	bl	207140 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
  200e42:	f005 febd 	bl	206bc0 <chSchRescheduleS>
  200e46:	f388 8811 	msr	BASEPRI, r8
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
  200e4a:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
  200e4c:	f1bb 0b01 	subs.w	fp, fp, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
  200e50:	441d      	add	r5, r3
  while (n != 0U) {
  200e52:	d1ee      	bne.n	200e32 <chFactoryCreateObjectsFIFO.constprop.4+0x42>
  chThdQueueObjectInit(&mbp->qw);
  200e54:	f104 0244 	add.w	r2, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
  200e58:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->buffer = buf;
  200e5c:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  mbp->rdptr  = buf;
  200e60:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  mbp->wrptr  = buf;
  200e64:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  mbp->top    = &buf[n];
  200e68:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
  200e6c:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
  mbp->reset  = false;
  200e70:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
  200e74:	6462      	str	r2, [r4, #68]	; 0x44
  tqp->prev = (thread_t *)tqp;
  200e76:	64a2      	str	r2, [r4, #72]	; 0x48
  tqp->next = (thread_t *)tqp;
  200e78:	64e3      	str	r3, [r4, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
  200e7a:	6523      	str	r3, [r4, #80]	; 0x50
  }

  F_UNLOCK();
  200e7c:	4802      	ldr	r0, [pc, #8]	; (200e88 <chFactoryCreateObjectsFIFO.constprop.4+0x98>)
  200e7e:	f006 f807 	bl	206e90 <chMtxUnlock>

  return dofp;
}
  200e82:	4620      	mov	r0, r4
  200e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200e88:	200008d8 	.word	0x200008d8
  200e8c:	20000918 	.word	0x20000918
  200e90:	08007d90 	.word	0x08007d90
	...

00200ea0 <chFactoryFindObjectsFIFO.constprop.3>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
  200ea0:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
  200ea2:	4c07      	ldr	r4, [pc, #28]	; (200ec0 <chFactoryFindObjectsFIFO.constprop.3+0x20>)
  200ea4:	4620      	mov	r0, r4
  200ea6:	f006 f893 	bl	206fd0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
  200eaa:	f104 0140 	add.w	r1, r4, #64	; 0x40
  200eae:	4805      	ldr	r0, [pc, #20]	; (200ec4 <chFactoryFindObjectsFIFO.constprop.3+0x24>)
  200eb0:	f001 fcfe 	bl	2028b0 <dyn_find_object.lto_priv.81>
  200eb4:	4605      	mov	r5, r0

  F_UNLOCK();
  200eb6:	4620      	mov	r0, r4
  200eb8:	f005 ffea 	bl	206e90 <chMtxUnlock>

  return dofp;
}
  200ebc:	4628      	mov	r0, r5
  200ebe:	bd38      	pop	{r3, r4, r5, pc}
  200ec0:	200008d8 	.word	0x200008d8
  200ec4:	08007d90 	.word	0x08007d90
	...

00200ed0 <_test_assert_time_window.constprop.2>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
  200ed0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
  200ed4:	1a09      	subs	r1, r1, r0
  200ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  200ed8:	1a1b      	subs	r3, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
  200eda:	428b      	cmp	r3, r1
  200edc:	d30b      	bcc.n	200ef6 <_test_assert_time_window.constprop.2+0x26>
  test_local_fail      = true;
  200ede:	2301      	movs	r3, #1
  test_failure_message = msg;
  200ee0:	4a06      	ldr	r2, [pc, #24]	; (200efc <_test_assert_time_window.constprop.2+0x2c>)
  200ee2:	4907      	ldr	r1, [pc, #28]	; (200f00 <_test_assert_time_window.constprop.2+0x30>)
    return _test_fail(msg);
  200ee4:	4618      	mov	r0, r3
  clear_tokens();

  return false;
}

bool _test_assert_time_window(systime_t start,
  200ee6:	b430      	push	{r4, r5}
  test_local_fail      = true;
  200ee8:	4d06      	ldr	r5, [pc, #24]	; (200f04 <_test_assert_time_window.constprop.2+0x34>)
  test_global_fail     = true;
  200eea:	4c07      	ldr	r4, [pc, #28]	; (200f08 <_test_assert_time_window.constprop.2+0x38>)
  test_local_fail      = true;
  200eec:	702b      	strb	r3, [r5, #0]
  test_global_fail     = true;
  200eee:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
  200ef0:	6011      	str	r1, [r2, #0]
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
  200ef2:	bc30      	pop	{r4, r5}
  200ef4:	4770      	bx	lr
  return false;
  200ef6:	2000      	movs	r0, #0
  200ef8:	4770      	bx	lr
  200efa:	bf00      	nop
  200efc:	20000984 	.word	0x20000984
  200f00:	08007d6c 	.word	0x08007d6c
  200f04:	20000989 	.word	0x20000989
  200f08:	20000988 	.word	0x20000988
  200f0c:	00000000 	.word	0x00000000

00200f10 <test_execute.constprop.1>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
  200f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int tseq, tcase;

  test_chp = stream;
  200f14:	4b9c      	ldr	r3, [pc, #624]	; (201188 <test_execute.constprop.1+0x278>)
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
  200f16:	4681      	mov	r9, r0
  test_chp = stream;
  200f18:	4c9c      	ldr	r4, [pc, #624]	; (20118c <test_execute.constprop.1+0x27c>)
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
  200f1a:	b083      	sub	sp, #12
  test_println("");
  200f1c:	489c      	ldr	r0, [pc, #624]	; (201190 <test_execute.constprop.1+0x280>)
  test_chp = stream;
  200f1e:	6023      	str	r3, [r4, #0]
  test_println("");
  200f20:	f001 f8b6 	bl	202090 <test_println>
  if (tsp->name != NULL) {
  200f24:	f8d9 3000 	ldr.w	r3, [r9]
  200f28:	2b00      	cmp	r3, #0
  200f2a:	f000 8185 	beq.w	201238 <test_execute.constprop.1+0x328>
  200f2e:	212a      	movs	r1, #42	; 0x2a
  200f30:	4d98      	ldr	r5, [pc, #608]	; (201194 <test_execute.constprop.1+0x284>)
    streamPut(test_chp, *msgp++);
  200f32:	6820      	ldr	r0, [r4, #0]
  200f34:	6803      	ldr	r3, [r0, #0]
  200f36:	689b      	ldr	r3, [r3, #8]
  200f38:	4798      	blx	r3
  while (*msgp)
  200f3a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  200f3e:	2900      	cmp	r1, #0
  200f40:	d1f7      	bne.n	200f32 <test_execute.constprop.1+0x22>
    test_print("*** ");
    test_println(tsp->name);
  200f42:	f8d9 0000 	ldr.w	r0, [r9]
  200f46:	f001 f8a3 	bl	202090 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
  200f4a:	4893      	ldr	r0, [pc, #588]	; (201198 <test_execute.constprop.1+0x288>)
  200f4c:	f001 f8a0 	bl	202090 <test_println>
  200f50:	4d92      	ldr	r5, [pc, #584]	; (20119c <test_execute.constprop.1+0x28c>)
  200f52:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
  200f54:	6820      	ldr	r0, [r4, #0]
  200f56:	6803      	ldr	r3, [r0, #0]
  200f58:	689b      	ldr	r3, [r3, #8]
  200f5a:	4798      	blx	r3
  while (*msgp)
  200f5c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  200f60:	2900      	cmp	r1, #0
  200f62:	d1f7      	bne.n	200f54 <test_execute.constprop.1+0x44>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
  200f64:	488e      	ldr	r0, [pc, #568]	; (2011a0 <test_execute.constprop.1+0x290>)
  200f66:	f001 f893 	bl	202090 <test_println>
  200f6a:	4d8e      	ldr	r5, [pc, #568]	; (2011a4 <test_execute.constprop.1+0x294>)
  200f6c:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
  200f6e:	6820      	ldr	r0, [r4, #0]
  200f70:	6803      	ldr	r3, [r0, #0]
  200f72:	689b      	ldr	r3, [r3, #8]
  200f74:	4798      	blx	r3
  while (*msgp)
  200f76:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  200f7a:	2900      	cmp	r1, #0
  200f7c:	d1f7      	bne.n	200f6e <test_execute.constprop.1+0x5e>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
  200f7e:	252a      	movs	r5, #42	; 0x2a
  200f80:	4889      	ldr	r0, [pc, #548]	; (2011a8 <test_execute.constprop.1+0x298>)
  200f82:	f001 f885 	bl	202090 <test_println>
  200f86:	4e89      	ldr	r6, [pc, #548]	; (2011ac <test_execute.constprop.1+0x29c>)
  200f88:	4629      	mov	r1, r5
    streamPut(test_chp, *msgp++);
  200f8a:	6820      	ldr	r0, [r4, #0]
  200f8c:	6803      	ldr	r3, [r0, #0]
  200f8e:	689b      	ldr	r3, [r3, #8]
  200f90:	4798      	blx	r3
  while (*msgp)
  200f92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  200f96:	2900      	cmp	r1, #0
  200f98:	d1f7      	bne.n	200f8a <test_execute.constprop.1+0x7a>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
  200f9a:	4885      	ldr	r0, [pc, #532]	; (2011b0 <test_execute.constprop.1+0x2a0>)
  200f9c:	460d      	mov	r5, r1
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");

  test_global_fail = false;
  tseq = 0;
  200f9e:	9101      	str	r1, [sp, #4]
  test_println(BOARD_NAME);
  200fa0:	f001 f876 	bl	202090 <test_println>
  test_println("");
  200fa4:	487a      	ldr	r0, [pc, #488]	; (201190 <test_execute.constprop.1+0x280>)
  200fa6:	f001 f873 	bl	202090 <test_println>
  test_global_fail = false;
  200faa:	4b82      	ldr	r3, [pc, #520]	; (2011b4 <test_execute.constprop.1+0x2a4>)
  test_tokp = test_tokens_buffer;
  200fac:	4e82      	ldr	r6, [pc, #520]	; (2011b8 <test_execute.constprop.1+0x2a8>)
  test_global_fail = false;
  200fae:	701d      	strb	r5, [r3, #0]
  test_tokp = test_tokens_buffer;
  200fb0:	f8df b224 	ldr.w	fp, [pc, #548]	; 2011d8 <test_execute.constprop.1+0x2c8>
  200fb4:	f8d9 3004 	ldr.w	r3, [r9, #4]
  while (tsp->sequences[tseq] != NULL) {
  200fb8:	9901      	ldr	r1, [sp, #4]
  200fba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  200fbe:	ea4f 0881 	mov.w	r8, r1, lsl #2
  200fc2:	2b00      	cmp	r3, #0
  200fc4:	f000 8116 	beq.w	2011f4 <test_execute.constprop.1+0x2e4>
  200fc8:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
  200fca:	6820      	ldr	r0, [r4, #0]
  200fcc:	213d      	movs	r1, #61	; 0x3d
  200fce:	6803      	ldr	r3, [r0, #0]
  200fd0:	689b      	ldr	r3, [r3, #8]
  200fd2:	4798      	blx	r3
  for (i = 0; i < 76; i++)
  200fd4:	3d01      	subs	r5, #1
  200fd6:	d1f8      	bne.n	200fca <test_execute.constprop.1+0xba>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
  200fd8:	6820      	ldr	r0, [r4, #0]
  200fda:	2202      	movs	r2, #2
  200fdc:	4977      	ldr	r1, [pc, #476]	; (2011bc <test_execute.constprop.1+0x2ac>)
  200fde:	6803      	ldr	r3, [r0, #0]
  200fe0:	4d77      	ldr	r5, [pc, #476]	; (2011c0 <test_execute.constprop.1+0x2b0>)
  200fe2:	681b      	ldr	r3, [r3, #0]
  200fe4:	4798      	blx	r3
  200fe6:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
  200fe8:	6820      	ldr	r0, [r4, #0]
  200fea:	6803      	ldr	r3, [r0, #0]
  200fec:	689b      	ldr	r3, [r3, #8]
  200fee:	4798      	blx	r3
  while (*msgp)
  200ff0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  200ff4:	2900      	cmp	r1, #0
  200ff6:	d1f7      	bne.n	200fe8 <test_execute.constprop.1+0xd8>
#if TEST_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
  200ff8:	9b01      	ldr	r3, [sp, #4]
  200ffa:	4d72      	ldr	r5, [pc, #456]	; (2011c4 <test_execute.constprop.1+0x2b4>)
  200ffc:	3301      	adds	r3, #1
  200ffe:	4618      	mov	r0, r3
  201000:	9301      	str	r3, [sp, #4]
  201002:	f000 ffb5 	bl	201f70 <test_printn>
  201006:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
  201008:	6820      	ldr	r0, [r4, #0]
  20100a:	6803      	ldr	r3, [r0, #0]
  20100c:	689b      	ldr	r3, [r3, #8]
  20100e:	4798      	blx	r3
  while (*msgp)
  201010:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  201014:	2900      	cmp	r1, #0
  201016:	d1f7      	bne.n	201008 <test_execute.constprop.1+0xf8>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
  201018:	f8d9 3004 	ldr.w	r3, [r9, #4]
  20101c:	f853 3008 	ldr.w	r3, [r3, r8]
  201020:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
  201022:	7829      	ldrb	r1, [r5, #0]
  201024:	b139      	cbz	r1, 201036 <test_execute.constprop.1+0x126>
    streamPut(test_chp, *msgp++);
  201026:	6820      	ldr	r0, [r4, #0]
  201028:	6803      	ldr	r3, [r0, #0]
  20102a:	689b      	ldr	r3, [r3, #8]
  20102c:	4798      	blx	r3
  while (*msgp)
  20102e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  201032:	2900      	cmp	r1, #0
  201034:	d1f7      	bne.n	201026 <test_execute.constprop.1+0x116>
    test_println(")");
  201036:	4864      	ldr	r0, [pc, #400]	; (2011c8 <test_execute.constprop.1+0x2b8>)
#endif
    tcase = 0;
  201038:	2700      	movs	r7, #0
    test_println(")");
  20103a:	f001 f829 	bl	202090 <test_println>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
  20103e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  201042:	00bd      	lsls	r5, r7, #2
  201044:	f853 2008 	ldr.w	r2, [r3, r8]
  201048:	6852      	ldr	r2, [r2, #4]
  20104a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
  20104e:	2a00      	cmp	r2, #0
  201050:	d0b2      	beq.n	200fb8 <test_execute.constprop.1+0xa8>
      print_line();
  201052:	f001 fb1d 	bl	202690 <print_line.lto_priv.83>
  201056:	f8df a194 	ldr.w	sl, [pc, #404]	; 2011ec <test_execute.constprop.1+0x2dc>
  20105a:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
  20105c:	6820      	ldr	r0, [r4, #0]
  20105e:	6803      	ldr	r3, [r0, #0]
  201060:	689b      	ldr	r3, [r3, #8]
  201062:	4798      	blx	r3
  while (*msgp)
  201064:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
  201068:	2900      	cmp	r1, #0
  20106a:	d1f7      	bne.n	20105c <test_execute.constprop.1+0x14c>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
  20106c:	9801      	ldr	r0, [sp, #4]
      test_print(".");
      test_printn(tcase + 1);
  20106e:	3701      	adds	r7, #1
      test_printn(tseq + 1);
  201070:	f000 ff7e 	bl	201f70 <test_printn>
    streamPut(test_chp, *msgp++);
  201074:	6820      	ldr	r0, [r4, #0]
  201076:	212e      	movs	r1, #46	; 0x2e
      test_printn(tcase + 1);
  201078:	f8df a148 	ldr.w	sl, [pc, #328]	; 2011c4 <test_execute.constprop.1+0x2b4>
    streamPut(test_chp, *msgp++);
  20107c:	6803      	ldr	r3, [r0, #0]
  20107e:	689b      	ldr	r3, [r3, #8]
  201080:	4798      	blx	r3
      test_printn(tcase + 1);
  201082:	4638      	mov	r0, r7
  201084:	f000 ff74 	bl	201f70 <test_printn>
  201088:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
  20108a:	6820      	ldr	r0, [r4, #0]
  20108c:	6803      	ldr	r3, [r0, #0]
  20108e:	689b      	ldr	r3, [r3, #8]
  201090:	4798      	blx	r3
  while (*msgp)
  201092:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
  201096:	2900      	cmp	r1, #0
  201098:	d1f7      	bne.n	20108a <test_execute.constprop.1+0x17a>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
  20109a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  20109e:	f853 3008 	ldr.w	r3, [r3, r8]
  2010a2:	685b      	ldr	r3, [r3, #4]
  2010a4:	595b      	ldr	r3, [r3, r5]
  2010a6:	f8d3 a000 	ldr.w	sl, [r3]
  while (*msgp)
  2010aa:	f89a 1000 	ldrb.w	r1, [sl]
  2010ae:	b139      	cbz	r1, 2010c0 <test_execute.constprop.1+0x1b0>
    streamPut(test_chp, *msgp++);
  2010b0:	6820      	ldr	r0, [r4, #0]
  2010b2:	6803      	ldr	r3, [r0, #0]
  2010b4:	689b      	ldr	r3, [r3, #8]
  2010b6:	4798      	blx	r3
  while (*msgp)
  2010b8:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
  2010bc:	2900      	cmp	r1, #0
  2010be:	d1f7      	bne.n	2010b0 <test_execute.constprop.1+0x1a0>
      test_println(")");
  2010c0:	4841      	ldr	r0, [pc, #260]	; (2011c8 <test_execute.constprop.1+0x2b8>)
  2010c2:	f000 ffe5 	bl	202090 <test_println>
 *
 * @api
 */
static inline void osalThreadSleep(sysinterval_t delay) {

  chThdSleep(delay);
  2010c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  2010ca:	f006 f969 	bl	2073a0 <chThdSleep>
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
  2010ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
  test_local_fail = false;
  2010d2:	f8df a11c 	ldr.w	sl, [pc, #284]	; 2011f0 <test_execute.constprop.1+0x2e0>
  2010d6:	2200      	movs	r2, #0
      execute_test(tsp->sequences[tseq]->cases[tcase]);
  2010d8:	f853 3008 	ldr.w	r3, [r3, r8]
  2010dc:	685b      	ldr	r3, [r3, #4]
  2010de:	595d      	ldr	r5, [r3, r5]
  test_tokp = test_tokens_buffer;
  2010e0:	f8c6 b000 	str.w	fp, [r6]
  if (tcp->setup != NULL)
  2010e4:	686b      	ldr	r3, [r5, #4]
  test_local_fail = false;
  2010e6:	f88a 2000 	strb.w	r2, [sl]
  if (tcp->setup != NULL)
  2010ea:	b103      	cbz	r3, 2010ee <test_execute.constprop.1+0x1de>
    tcp->setup();
  2010ec:	4798      	blx	r3
  tcp->execute();
  2010ee:	68eb      	ldr	r3, [r5, #12]
  2010f0:	4798      	blx	r3
  if (tcp->teardown != NULL)
  2010f2:	68ab      	ldr	r3, [r5, #8]
  2010f4:	b103      	cbz	r3, 2010f8 <test_execute.constprop.1+0x1e8>
    tcp->teardown();
  2010f6:	4798      	blx	r3
      if (test_local_fail) {
  2010f8:	f89a 3000 	ldrb.w	r3, [sl]
  2010fc:	2b00      	cmp	r3, #0
  2010fe:	d03e      	beq.n	20117e <test_execute.constprop.1+0x26e>
  201100:	212d      	movs	r1, #45	; 0x2d
  201102:	4d32      	ldr	r5, [pc, #200]	; (2011cc <test_execute.constprop.1+0x2bc>)
    streamPut(test_chp, *msgp++);
  201104:	6820      	ldr	r0, [r4, #0]
  201106:	6803      	ldr	r3, [r0, #0]
  201108:	689b      	ldr	r3, [r3, #8]
  20110a:	4798      	blx	r3
  while (*msgp)
  20110c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  201110:	2900      	cmp	r1, #0
  201112:	d1f7      	bne.n	201104 <test_execute.constprop.1+0x1f4>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
  201114:	4b2e      	ldr	r3, [pc, #184]	; (2011d0 <test_execute.constprop.1+0x2c0>)
  201116:	4d2f      	ldr	r5, [pc, #188]	; (2011d4 <test_execute.constprop.1+0x2c4>)
  201118:	6818      	ldr	r0, [r3, #0]
  20111a:	f000 ff29 	bl	201f70 <test_printn>
  20111e:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
  201120:	6820      	ldr	r0, [r4, #0]
  201122:	6803      	ldr	r3, [r0, #0]
  201124:	689b      	ldr	r3, [r3, #8]
  201126:	4798      	blx	r3
  while (*msgp)
  201128:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  20112c:	2900      	cmp	r1, #0
  20112e:	d1f7      	bne.n	201120 <test_execute.constprop.1+0x210>
  while (cp < test_tokp)
  201130:	6833      	ldr	r3, [r6, #0]
  201132:	455b      	cmp	r3, fp
  201134:	d909      	bls.n	20114a <test_execute.constprop.1+0x23a>
  201136:	4d28      	ldr	r5, [pc, #160]	; (2011d8 <test_execute.constprop.1+0x2c8>)
    streamPut(test_chp, *cp++);
  201138:	6820      	ldr	r0, [r4, #0]
  20113a:	f815 1b01 	ldrb.w	r1, [r5], #1
  20113e:	6803      	ldr	r3, [r0, #0]
  201140:	689b      	ldr	r3, [r3, #8]
  201142:	4798      	blx	r3
  while (cp < test_tokp)
  201144:	6833      	ldr	r3, [r6, #0]
  201146:	429d      	cmp	r5, r3
  201148:	d3f6      	bcc.n	201138 <test_execute.constprop.1+0x228>
  20114a:	215d      	movs	r1, #93	; 0x5d
  20114c:	4d23      	ldr	r5, [pc, #140]	; (2011dc <test_execute.constprop.1+0x2cc>)
    streamPut(test_chp, *msgp++);
  20114e:	6820      	ldr	r0, [r4, #0]
  201150:	6803      	ldr	r3, [r0, #0]
  201152:	689b      	ldr	r3, [r3, #8]
  201154:	4798      	blx	r3
  while (*msgp)
  201156:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  20115a:	2900      	cmp	r1, #0
  20115c:	d1f7      	bne.n	20114e <test_execute.constprop.1+0x23e>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
  20115e:	4b20      	ldr	r3, [pc, #128]	; (2011e0 <test_execute.constprop.1+0x2d0>)
  201160:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
  201162:	7829      	ldrb	r1, [r5, #0]
  201164:	b139      	cbz	r1, 201176 <test_execute.constprop.1+0x266>
    streamPut(test_chp, *msgp++);
  201166:	6820      	ldr	r0, [r4, #0]
  201168:	6803      	ldr	r3, [r0, #0]
  20116a:	689b      	ldr	r3, [r3, #8]
  20116c:	4798      	blx	r3
  while (*msgp)
  20116e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  201172:	2900      	cmp	r1, #0
  201174:	d1f7      	bne.n	201166 <test_execute.constprop.1+0x256>
        test_println("\")");
  201176:	481b      	ldr	r0, [pc, #108]	; (2011e4 <test_execute.constprop.1+0x2d4>)
  201178:	f000 ff8a 	bl	202090 <test_println>
  20117c:	e75f      	b.n	20103e <test_execute.constprop.1+0x12e>
      }
      else {
        test_println("--- Result: SUCCESS");
  20117e:	481a      	ldr	r0, [pc, #104]	; (2011e8 <test_execute.constprop.1+0x2d8>)
  201180:	f000 ff86 	bl	202090 <test_println>
  201184:	e75b      	b.n	20103e <test_execute.constprop.1+0x12e>
  201186:	bf00      	nop
  201188:	20000800 	.word	0x20000800
  20118c:	20000980 	.word	0x20000980
  201190:	08008118 	.word	0x08008118
  201194:	08007db0 	.word	0x08007db0
  201198:	08007e5c 	.word	0x08007e5c
  20119c:	08007db8 	.word	0x08007db8
  2011a0:	08007e60 	.word	0x08007e60
  2011a4:	08007dcc 	.word	0x08007dcc
  2011a8:	08007e78 	.word	0x08007e78
  2011ac:	08007de0 	.word	0x08007de0
  2011b0:	08007eac 	.word	0x08007eac
  2011b4:	20000988 	.word	0x20000988
  2011b8:	200009a0 	.word	0x200009a0
  2011bc:	08007ed4 	.word	0x08007ed4
  2011c0:	08007df4 	.word	0x08007df4
  2011c4:	08007e08 	.word	0x08007e08
  2011c8:	08007ed8 	.word	0x08007ed8
  2011cc:	08007e1c 	.word	0x08007e1c
  2011d0:	2000098c 	.word	0x2000098c
  2011d4:	08007e34 	.word	0x08007e34
  2011d8:	20000990 	.word	0x20000990
  2011dc:	08007e38 	.word	0x08007e38
  2011e0:	20000984 	.word	0x20000984
  2011e4:	08007edc 	.word	0x08007edc
  2011e8:	08007ee0 	.word	0x08007ee0
  2011ec:	08007e0c 	.word	0x08007e0c
  2011f0:	20000989 	.word	0x20000989
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
  2011f4:	f001 fa4c 	bl	202690 <print_line.lto_priv.83>
  test_println("");
  2011f8:	4811      	ldr	r0, [pc, #68]	; (201240 <test_execute.constprop.1+0x330>)
  2011fa:	f000 ff49 	bl	202090 <test_println>
  2011fe:	4d11      	ldr	r5, [pc, #68]	; (201244 <test_execute.constprop.1+0x334>)
  201200:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
  201202:	6820      	ldr	r0, [r4, #0]
  201204:	6803      	ldr	r3, [r0, #0]
  201206:	689b      	ldr	r3, [r3, #8]
  201208:	4798      	blx	r3
  while (*msgp)
  20120a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
  20120e:	2900      	cmp	r1, #0
  201210:	d1f7      	bne.n	201202 <test_execute.constprop.1+0x2f2>
  test_print("Final result: ");
  if (test_global_fail)
  201212:	4b0d      	ldr	r3, [pc, #52]	; (201248 <test_execute.constprop.1+0x338>)
  201214:	781b      	ldrb	r3, [r3, #0]
  201216:	b93b      	cbnz	r3, 201228 <test_execute.constprop.1+0x318>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
  201218:	480c      	ldr	r0, [pc, #48]	; (20124c <test_execute.constprop.1+0x33c>)
  20121a:	f000 ff39 	bl	202090 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
  20121e:	4b0a      	ldr	r3, [pc, #40]	; (201248 <test_execute.constprop.1+0x338>)
  201220:	7818      	ldrb	r0, [r3, #0]
  201222:	b003      	add	sp, #12
  201224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("FAILURE");
  201228:	4809      	ldr	r0, [pc, #36]	; (201250 <test_execute.constprop.1+0x340>)
  20122a:	f000 ff31 	bl	202090 <test_println>
}
  20122e:	4b06      	ldr	r3, [pc, #24]	; (201248 <test_execute.constprop.1+0x338>)
  201230:	7818      	ldrb	r0, [r3, #0]
  201232:	b003      	add	sp, #12
  201234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
  201238:	4806      	ldr	r0, [pc, #24]	; (201254 <test_execute.constprop.1+0x344>)
  20123a:	f000 ff29 	bl	202090 <test_println>
  20123e:	e684      	b.n	200f4a <test_execute.constprop.1+0x3a>
  201240:	08008118 	.word	0x08008118
  201244:	08007e3c 	.word	0x08007e3c
  201248:	20000988 	.word	0x20000988
  20124c:	08007eec 	.word	0x08007eec
  201250:	08007ef4 	.word	0x08007ef4
  201254:	08007e4c 	.word	0x08007e4c
	...

00201260 <rt_test_009_001_setup.lto_priv.151>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
  201260:	4b0b      	ldr	r3, [pc, #44]	; (201290 <rt_test_009_001_setup.lto_priv.151+0x30>)
  heapp->provider = NULL;
  201262:	2000      	movs	r0, #0
  201264:	4a0b      	ldr	r2, [pc, #44]	; (201294 <rt_test_009_001_setup.lto_priv.151+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
  201266:	1dd9      	adds	r1, r3, #7
  201268:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  20126c:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
  20126e:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
 *   freeing memory.
 * - [9.1.7] Getting heap info again for verification.
 * .
 */

static void rt_test_009_001_setup(void) {
  201272:	b410      	push	{r4}
  201274:	08db      	lsrs	r3, r3, #3
  tqp->next = (thread_t *)tqp;
  201276:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(&heapp->header) = 0;
  20127a:	6090      	str	r0, [r2, #8]
  H_NEXT(&heapp->header) = hp;
  20127c:	6051      	str	r1, [r2, #4]
  mp->owner = NULL;
  20127e:	6150      	str	r0, [r2, #20]
  heapp->provider = NULL;
  201280:	6010      	str	r0, [r2, #0]
  H_NEXT(hp) = NULL;
  201282:	6008      	str	r0, [r1, #0]
  201284:	60d4      	str	r4, [r2, #12]
  tqp->prev = (thread_t *)tqp;
  201286:	6114      	str	r4, [r2, #16]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
  201288:	604b      	str	r3, [r1, #4]
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
  20128a:	bc10      	pop	{r4}
  20128c:	4770      	bx	lr
  20128e:	bf00      	nop
  201290:	20000a70 	.word	0x20000a70
  201294:	20000938 	.word	0x20000938
	...

002012a0 <rt_test_006_009_setup.lto_priv.135>:
  tqp->next = (thread_t *)tqp;
  2012a0:	4a06      	ldr	r2, [pc, #24]	; (2012bc <rt_test_006_009_setup.lto_priv.135+0x1c>)
  2012a2:	2000      	movs	r0, #0
  2012a4:	4b06      	ldr	r3, [pc, #24]	; (2012c0 <rt_test_006_009_setup.lto_priv.135+0x20>)
  2012a6:	4907      	ldr	r1, [pc, #28]	; (2012c4 <rt_test_006_009_setup.lto_priv.135+0x24>)
  2012a8:	6012      	str	r2, [r2, #0]
  2012aa:	6009      	str	r1, [r1, #0]
  tqp->prev = (thread_t *)tqp;
  2012ac:	6049      	str	r1, [r1, #4]
  2012ae:	6052      	str	r2, [r2, #4]
  2012b0:	6090      	str	r0, [r2, #8]
  2012b2:	6098      	str	r0, [r3, #8]
  tqp->next = (thread_t *)tqp;
  2012b4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  2012b6:	605b      	str	r3, [r3, #4]
  2012b8:	4770      	bx	lr
  2012ba:	bf00      	nop
  2012bc:	20020024 	.word	0x20020024
  2012c0:	20020064 	.word	0x20020064
  2012c4:	20020000 	.word	0x20020000
	...

002012d0 <rt_test_006_008_setup.lto_priv.133>:
  tqp->next = (thread_t *)tqp;
  2012d0:	4b04      	ldr	r3, [pc, #16]	; (2012e4 <rt_test_006_008_setup.lto_priv.133+0x14>)
  2012d2:	2100      	movs	r1, #0
  2012d4:	4a04      	ldr	r2, [pc, #16]	; (2012e8 <rt_test_006_008_setup.lto_priv.133+0x18>)
  2012d6:	601b      	str	r3, [r3, #0]
  2012d8:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
  2012da:	6052      	str	r2, [r2, #4]
  2012dc:	605b      	str	r3, [r3, #4]
  2012de:	6099      	str	r1, [r3, #8]
  2012e0:	4770      	bx	lr
  2012e2:	bf00      	nop
  2012e4:	20020024 	.word	0x20020024
  2012e8:	20020000 	.word	0x20020000
  2012ec:	00000000 	.word	0x00000000

002012f0 <rt_test_008_002_execute.lto_priv.140>:

static void rt_test_008_002_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void rt_test_008_002_execute(void) {
  2012f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [8.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
  2012f2:	2301      	movs	r3, #1
  2012f4:	4a0f      	ldr	r2, [pc, #60]	; (201334 <rt_test_008_002_execute.lto_priv.140+0x44>)
  2012f6:	2507      	movs	r5, #7
  eid = (eventid_t)0;
  2012f8:	2400      	movs	r4, #0
      events &= ~EVENT_MASK(eid);
  2012fa:	461f      	mov	r7, r3
  2012fc:	4e0e      	ldr	r6, [pc, #56]	; (201338 <rt_test_008_002_execute.lto_priv.140+0x48>)
  2012fe:	6013      	str	r3, [r2, #0]
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
  201300:	fa25 f304 	lsr.w	r3, r5, r4
  201304:	07db      	lsls	r3, r3, #31
  201306:	d404      	bmi.n	201312 <rt_test_008_002_execute.lto_priv.140+0x22>
    eid++;
  201308:	3401      	adds	r4, #1
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
  20130a:	fa25 f304 	lsr.w	r3, r5, r4
  20130e:	07db      	lsls	r3, r3, #31
  201310:	d5fa      	bpl.n	201308 <rt_test_008_002_execute.lto_priv.140+0x18>
      events &= ~EVENT_MASK(eid);
  201312:	fa07 f204 	lsl.w	r2, r7, r4
      handlers[eid](eid);
  201316:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  20131a:	4620      	mov	r0, r4
  20131c:	3401      	adds	r4, #1
      events &= ~EVENT_MASK(eid);
  20131e:	ea25 0502 	bic.w	r5, r5, r2
      handlers[eid](eid);
  201322:	4798      	blx	r3
  while (events != (eventmask_t)0) {
  201324:	2d00      	cmp	r5, #0
  201326:	d1eb      	bne.n	201300 <rt_test_008_002_execute.lto_priv.140+0x10>
  {
    chEvtDispatch(evhndl, 7);
    test_assert_sequence("ABC", "invalid sequence");
  201328:	4904      	ldr	r1, [pc, #16]	; (20133c <rt_test_008_002_execute.lto_priv.140+0x4c>)
  20132a:	4805      	ldr	r0, [pc, #20]	; (201340 <rt_test_008_002_execute.lto_priv.140+0x50>)
  }
}
  20132c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
  201330:	f001 b96e 	b.w	202610 <_test_assert_sequence>
  201334:	2000098c 	.word	0x2000098c
  201338:	08007efc 	.word	0x08007efc
  20133c:	08007f38 	.word	0x08007f38
  201340:	08007f4c 	.word	0x08007f4c
	...

00201350 <rt_test_009_001_execute.lto_priv.152>:
  return ch.rlist.current;
  201350:	4942      	ldr	r1, [pc, #264]	; (20145c <rt_test_009_001_execute.lto_priv.152+0x10c>)
  {
    prio = chThdGetPriorityX();
  }

  /* [9.1.2] Getting heap info before the test.*/
  test_set_step(2);
  201352:	2302      	movs	r3, #2
  {
    n1 = chHeapStatus(&heap1, &total1, &largest1);
  201354:	4842      	ldr	r0, [pc, #264]	; (201460 <rt_test_009_001_execute.lto_priv.152+0x110>)
static void rt_test_009_001_execute(void) {
  201356:	b5f0      	push	{r4, r5, r6, r7, lr}
  201358:	b085      	sub	sp, #20
  return chThdGetSelfX()->prio;
  20135a:	698d      	ldr	r5, [r1, #24]
  test_set_step(2);
  20135c:	4c41      	ldr	r4, [pc, #260]	; (201464 <rt_test_009_001_execute.lto_priv.152+0x114>)
    n1 = chHeapStatus(&heap1, &total1, &largest1);
  20135e:	a903      	add	r1, sp, #12
  201360:	aa02      	add	r2, sp, #8
  201362:	68ae      	ldr	r6, [r5, #8]
  test_set_step(2);
  201364:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
  201366:	f001 fb2b 	bl	2029c0 <chHeapStatus>
  20136a:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
  20136c:	f1a0 0001 	sub.w	r0, r0, #1
  201370:	493d      	ldr	r1, [pc, #244]	; (201468 <rt_test_009_001_execute.lto_priv.152+0x118>)
  201372:	fab0 f080 	clz	r0, r0
  201376:	0940      	lsrs	r0, r0, #5
  201378:	f001 f972 	bl	202660 <_test_assert>
  20137c:	b108      	cbz	r0, 201382 <rt_test_009_001_execute.lto_priv.152+0x32>
    n2 = chHeapStatus(&heap1, &total2, &largest2);
    test_assert(n1 == n2, "fragmentation changed");
    test_assert(total1 == total2, "total free space changed");
    test_assert(largest1 == largest2, "largest fragment size changed");
  }
}
  20137e:	b005      	add	sp, #20
  201380:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_set_step(3);
  201382:	2703      	movs	r7, #3
    threads[0] = chThdCreateFromHeap(&heap1,
  201384:	4b39      	ldr	r3, [pc, #228]	; (20146c <rt_test_009_001_execute.lto_priv.152+0x11c>)
  201386:	493a      	ldr	r1, [pc, #232]	; (201470 <rt_test_009_001_execute.lto_priv.152+0x120>)
  201388:	1e72      	subs	r2, r6, #1
  20138a:	f44f 70a4 	mov.w	r0, #328	; 0x148
  test_set_step(3);
  20138e:	6027      	str	r7, [r4, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
  201390:	f7ff fa5e 	bl	200850 <chThdCreateFromHeap.constprop.32>
  201394:	4603      	mov	r3, r0
    test_assert(threads[0] != NULL, "thread creation failed");
  201396:	3000      	adds	r0, #0
    threads[0] = chThdCreateFromHeap(&heap1,
  201398:	4f36      	ldr	r7, [pc, #216]	; (201474 <rt_test_009_001_execute.lto_priv.152+0x124>)
    test_assert(threads[0] != NULL, "thread creation failed");
  20139a:	4937      	ldr	r1, [pc, #220]	; (201478 <rt_test_009_001_execute.lto_priv.152+0x128>)
  20139c:	bf18      	it	ne
  20139e:	2001      	movne	r0, #1
    threads[0] = chThdCreateFromHeap(&heap1,
  2013a0:	603b      	str	r3, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
  2013a2:	f001 f95d 	bl	202660 <_test_assert>
  2013a6:	2800      	cmp	r0, #0
  2013a8:	d1e9      	bne.n	20137e <rt_test_009_001_execute.lto_priv.152+0x2e>
  test_set_step(4);
  2013aa:	f04f 0e04 	mov.w	lr, #4
    threads[1] = chThdCreateFromHeap(&heap1,
  2013ae:	4b33      	ldr	r3, [pc, #204]	; (20147c <rt_test_009_001_execute.lto_priv.152+0x12c>)
  2013b0:	4933      	ldr	r1, [pc, #204]	; (201480 <rt_test_009_001_execute.lto_priv.152+0x130>)
  2013b2:	1eb2      	subs	r2, r6, #2
  2013b4:	f44f 70a4 	mov.w	r0, #328	; 0x148
  test_set_step(4);
  2013b8:	f8c4 e000 	str.w	lr, [r4]
    threads[1] = chThdCreateFromHeap(&heap1,
  2013bc:	f7ff fa48 	bl	200850 <chThdCreateFromHeap.constprop.32>
  2013c0:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
  2013c2:	3000      	adds	r0, #0
  2013c4:	492c      	ldr	r1, [pc, #176]	; (201478 <rt_test_009_001_execute.lto_priv.152+0x128>)
    threads[1] = chThdCreateFromHeap(&heap1,
  2013c6:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
  2013c8:	bf18      	it	ne
  2013ca:	2001      	movne	r0, #1
  2013cc:	f001 f948 	bl	202660 <_test_assert>
  2013d0:	2800      	cmp	r0, #0
  2013d2:	d1d4      	bne.n	20137e <rt_test_009_001_execute.lto_priv.152+0x2e>
  test_set_step(5);
  2013d4:	f04f 0e05 	mov.w	lr, #5
    threads[2] = chThdCreateFromHeap(&heap1,
  2013d8:	4b2a      	ldr	r3, [pc, #168]	; (201484 <rt_test_009_001_execute.lto_priv.152+0x134>)
  2013da:	492b      	ldr	r1, [pc, #172]	; (201488 <rt_test_009_001_execute.lto_priv.152+0x138>)
  2013dc:	1ef2      	subs	r2, r6, #3
  2013de:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  test_set_step(5);
  2013e2:	f8c4 e000 	str.w	lr, [r4]
    threads[2] = chThdCreateFromHeap(&heap1,
  2013e6:	f7ff fa33 	bl	200850 <chThdCreateFromHeap.constprop.32>
  2013ea:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
  2013ec:	fab0 f080 	clz	r0, r0
  2013f0:	4926      	ldr	r1, [pc, #152]	; (20148c <rt_test_009_001_execute.lto_priv.152+0x13c>)
    threads[2] = chThdCreateFromHeap(&heap1,
  2013f2:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
  2013f4:	0940      	lsrs	r0, r0, #5
  2013f6:	f001 f933 	bl	202660 <_test_assert>
  2013fa:	2800      	cmp	r0, #0
  2013fc:	d1bf      	bne.n	20137e <rt_test_009_001_execute.lto_priv.152+0x2e>
  test_set_step(6);
  2013fe:	2306      	movs	r3, #6
  201400:	6023      	str	r3, [r4, #0]
    test_wait_threads();
  201402:	f000 fdf5 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
  201406:	4922      	ldr	r1, [pc, #136]	; (201490 <rt_test_009_001_execute.lto_priv.152+0x140>)
  201408:	4822      	ldr	r0, [pc, #136]	; (201494 <rt_test_009_001_execute.lto_priv.152+0x144>)
  20140a:	f001 f901 	bl	202610 <_test_assert_sequence>
  20140e:	2800      	cmp	r0, #0
  201410:	d1b5      	bne.n	20137e <rt_test_009_001_execute.lto_priv.152+0x2e>
  test_set_step(7);
  201412:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
  201414:	a901      	add	r1, sp, #4
  201416:	466a      	mov	r2, sp
  201418:	4811      	ldr	r0, [pc, #68]	; (201460 <rt_test_009_001_execute.lto_priv.152+0x110>)
  test_set_step(7);
  20141a:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
  20141c:	f001 fad0 	bl	2029c0 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
  201420:	1a28      	subs	r0, r5, r0
  201422:	491d      	ldr	r1, [pc, #116]	; (201498 <rt_test_009_001_execute.lto_priv.152+0x148>)
  201424:	fab0 f080 	clz	r0, r0
  201428:	0940      	lsrs	r0, r0, #5
  20142a:	f001 f919 	bl	202660 <_test_assert>
  20142e:	2800      	cmp	r0, #0
  201430:	d1a5      	bne.n	20137e <rt_test_009_001_execute.lto_priv.152+0x2e>
    test_assert(total1 == total2, "total free space changed");
  201432:	9803      	ldr	r0, [sp, #12]
  201434:	9b01      	ldr	r3, [sp, #4]
  201436:	4919      	ldr	r1, [pc, #100]	; (20149c <rt_test_009_001_execute.lto_priv.152+0x14c>)
  201438:	1ac0      	subs	r0, r0, r3
  20143a:	fab0 f080 	clz	r0, r0
  20143e:	0940      	lsrs	r0, r0, #5
  201440:	f001 f90e 	bl	202660 <_test_assert>
  201444:	2800      	cmp	r0, #0
  201446:	d19a      	bne.n	20137e <rt_test_009_001_execute.lto_priv.152+0x2e>
    test_assert(largest1 == largest2, "largest fragment size changed");
  201448:	9802      	ldr	r0, [sp, #8]
  20144a:	9b00      	ldr	r3, [sp, #0]
  20144c:	4914      	ldr	r1, [pc, #80]	; (2014a0 <rt_test_009_001_execute.lto_priv.152+0x150>)
  20144e:	1ac0      	subs	r0, r0, r3
  201450:	fab0 f080 	clz	r0, r0
  201454:	0940      	lsrs	r0, r0, #5
  201456:	f001 f903 	bl	202660 <_test_assert>
  20145a:	e790      	b.n	20137e <rt_test_009_001_execute.lto_priv.152+0x2e>
  20145c:	20000860 	.word	0x20000860
  201460:	20000938 	.word	0x20000938
  201464:	2000098c 	.word	0x2000098c
  201468:	08007fc0 	.word	0x08007fc0
  20146c:	08007fd0 	.word	0x08007fd0
  201470:	08007fd4 	.word	0x08007fd4
  201474:	200010d8 	.word	0x200010d8
  201478:	08007fdc 	.word	0x08007fdc
  20147c:	08007ff4 	.word	0x08007ff4
  201480:	08007ff8 	.word	0x08007ff8
  201484:	08008000 	.word	0x08008000
  201488:	08008004 	.word	0x08008004
  20148c:	0800800c 	.word	0x0800800c
  201490:	08007f38 	.word	0x08007f38
  201494:	08008028 	.word	0x08008028
  201498:	0800802c 	.word	0x0800802c
  20149c:	08008044 	.word	0x08008044
  2014a0:	08008060 	.word	0x08008060
	...

002014b0 <dyn_thread1.lto_priv.79>:
  2014b0:	f006 b826 	b.w	207500 <thread.lto_priv.200>
	...

002014c0 <rt_test_008_001_execute.lto_priv.138>:
static void rt_test_008_001_execute(void) {
  2014c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(2);
  2014c4:	2002      	movs	r0, #2
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  2014c6:	4c36      	ldr	r4, [pc, #216]	; (2015a0 <rt_test_008_001_execute.lto_priv.138+0xe0>)
  2014c8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2015b0 <rt_test_008_001_execute.lto_priv.138+0xf0>
static void rt_test_008_001_execute(void) {
  2014cc:	b08a      	sub	sp, #40	; 0x28
  2014ce:	2620      	movs	r6, #32
  2014d0:	6024      	str	r4, [r4, #0]
  test_set_step(2);
  2014d2:	f8c9 0000 	str.w	r0, [r9]
  2014d6:	f386 8811 	msr	BASEPRI, r6
  elp->listener = currp;
  2014da:	4b32      	ldr	r3, [pc, #200]	; (2015a4 <rt_test_008_001_execute.lto_priv.138+0xe4>)
  elp->events   = events;
  2014dc:	2101      	movs	r1, #1
  elp->next     = esp->next;
  2014de:	af0a      	add	r7, sp, #40	; 0x28
  elp->flags    = (eventflags_t)0;
  2014e0:	2500      	movs	r5, #0
  elp->listener = currp;
  2014e2:	699a      	ldr	r2, [r3, #24]
  elp->events   = events;
  2014e4:	9107      	str	r1, [sp, #28]
  elp->wflags   = wflags;
  2014e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  elp->listener = currp;
  2014ea:	9206      	str	r2, [sp, #24]
  elp->next     = esp->next;
  2014ec:	6822      	ldr	r2, [r4, #0]
  elp->flags    = (eventflags_t)0;
  2014ee:	9508      	str	r5, [sp, #32]
  elp->next     = esp->next;
  2014f0:	f847 2d14 	str.w	r2, [r7, #-20]!
  elp->wflags   = wflags;
  2014f4:	9109      	str	r1, [sp, #36]	; 0x24
  esp->next     = elp;
  2014f6:	6027      	str	r7, [r4, #0]
  2014f8:	f385 8811 	msr	BASEPRI, r5
  2014fc:	f386 8811 	msr	BASEPRI, r6
  elp->listener = currp;
  201500:	699a      	ldr	r2, [r3, #24]
  elp->next     = esp->next;
  201502:	f10d 0828 	add.w	r8, sp, #40	; 0x28
  201506:	6823      	ldr	r3, [r4, #0]
  elp->events   = events;
  201508:	9002      	str	r0, [sp, #8]
  elp->next     = esp->next;
  20150a:	f848 3d28 	str.w	r3, [r8, #-40]!
  elp->listener = currp;
  20150e:	9201      	str	r2, [sp, #4]
  elp->flags    = (eventflags_t)0;
  201510:	9503      	str	r5, [sp, #12]
  elp->wflags   = wflags;
  201512:	9104      	str	r1, [sp, #16]
  esp->next     = elp;
  201514:	f8c4 8000 	str.w	r8, [r4]
  201518:	f385 8811 	msr	BASEPRI, r5
  20151c:	f386 8811 	msr	BASEPRI, r6
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->next);
  201520:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
  201522:	4921      	ldr	r1, [pc, #132]	; (2015a8 <rt_test_008_001_execute.lto_priv.138+0xe8>)
  201524:	1b00      	subs	r0, r0, r4
  201526:	bf18      	it	ne
  201528:	2001      	movne	r0, #1
  20152a:	f001 f899 	bl	202660 <_test_assert>
  20152e:	b120      	cbz	r0, 20153a <rt_test_008_001_execute.lto_priv.138+0x7a>
  201530:	f385 8811 	msr	BASEPRI, r5
}
  201534:	b00a      	add	sp, #40	; 0x28
  201536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20153a:	4682      	mov	sl, r0
  20153c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
  201540:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
  201542:	4639      	mov	r1, r7
  201544:	4620      	mov	r0, r4
  test_set_step(3);
  201546:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el1);
  20154a:	f005 fa61 	bl	206a10 <chEvtUnregister>
  20154e:	f386 8811 	msr	BASEPRI, r6
  201552:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
  201554:	4914      	ldr	r1, [pc, #80]	; (2015a8 <rt_test_008_001_execute.lto_priv.138+0xe8>)
  201556:	1b00      	subs	r0, r0, r4
  201558:	bf18      	it	ne
  20155a:	2001      	movne	r0, #1
  20155c:	f001 f880 	bl	202660 <_test_assert>
  201560:	4605      	mov	r5, r0
  201562:	b120      	cbz	r0, 20156e <rt_test_008_001_execute.lto_priv.138+0xae>
  201564:	f38a 8811 	msr	BASEPRI, sl
}
  201568:	b00a      	add	sp, #40	; 0x28
  20156a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20156e:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
  201572:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
  201574:	4641      	mov	r1, r8
  201576:	4620      	mov	r0, r4
  test_set_step(4);
  201578:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el2);
  20157c:	f005 fa48 	bl	206a10 <chEvtUnregister>
  201580:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  201584:	6820      	ldr	r0, [r4, #0]
  201586:	4909      	ldr	r1, [pc, #36]	; (2015ac <rt_test_008_001_execute.lto_priv.138+0xec>)
  201588:	1b00      	subs	r0, r0, r4
  20158a:	fab0 f080 	clz	r0, r0
  20158e:	0940      	lsrs	r0, r0, #5
  201590:	f001 f866 	bl	202660 <_test_assert>
  201594:	2800      	cmp	r0, #0
  201596:	d1cb      	bne.n	201530 <rt_test_008_001_execute.lto_priv.138+0x70>
  201598:	f380 8811 	msr	BASEPRI, r0
  20159c:	e7ca      	b.n	201534 <rt_test_008_001_execute.lto_priv.138+0x74>
  20159e:	bf00      	nop
  2015a0:	2002005c 	.word	0x2002005c
  2015a4:	20000860 	.word	0x20000860
  2015a8:	08007f1c 	.word	0x08007f1c
  2015ac:	08007f28 	.word	0x08007f28
  2015b0:	2000098c 	.word	0x2000098c
	...

002015c0 <rt_test_008_007_setup.lto_priv.149>:
 *   has been emptied.
 * - [8.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_008_007_setup(void) {
  2015c0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
  2015c2:	f7ff f855 	bl	200670 <chEvtGetAndClearEvents.constprop.43>
  esp->next = (event_listener_t *)esp;
  2015c6:	4a02      	ldr	r2, [pc, #8]	; (2015d0 <rt_test_008_007_setup.lto_priv.149+0x10>)
  2015c8:	4b02      	ldr	r3, [pc, #8]	; (2015d4 <rt_test_008_007_setup.lto_priv.149+0x14>)
  2015ca:	6012      	str	r2, [r2, #0]
  2015cc:	601b      	str	r3, [r3, #0]
  2015ce:	bd08      	pop	{r3, pc}
  2015d0:	2002005c 	.word	0x2002005c
  2015d4:	20020060 	.word	0x20020060
	...

002015e0 <rt_test_008_006_setup.lto_priv.147>:
  chEvtGetAndClearEvents(ALL_EVENTS);
  2015e0:	f7ff b846 	b.w	200670 <chEvtGetAndClearEvents.constprop.43>
	...

002015f0 <rt_test_008_005_setup.lto_priv.145>:
  2015f0:	f7ff bff6 	b.w	2015e0 <rt_test_008_006_setup.lto_priv.147>
	...

00201600 <rt_test_008_004_setup.lto_priv.143>:
  201600:	f7ff bfee 	b.w	2015e0 <rt_test_008_006_setup.lto_priv.147>
	...

00201610 <rt_test_008_003_setup.lto_priv.141>:
  201610:	f7ff bfe6 	b.w	2015e0 <rt_test_008_006_setup.lto_priv.147>
	...

00201620 <rt_test_008_002_setup.lto_priv.139>:
  201620:	f7ff bfde 	b.w	2015e0 <rt_test_008_006_setup.lto_priv.147>
	...

00201630 <rt_test_008_007_execute.lto_priv.150>:
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}

static void rt_test_008_007_execute(void) {
  201630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [8.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
  201634:	2201      	movs	r2, #1
  201636:	4d3c      	ldr	r5, [pc, #240]	; (201728 <rt_test_008_007_execute.lto_priv.150+0xf8>)
static void rt_test_008_007_execute(void) {
  201638:	b08b      	sub	sp, #44	; 0x2c
  20163a:	2420      	movs	r4, #32
  test_set_step(1);
  20163c:	602a      	str	r2, [r5, #0]
  20163e:	f384 8811 	msr	BASEPRI, r4
  elp->next     = esp->next;
  201642:	f8df 8104 	ldr.w	r8, [pc, #260]	; 201748 <rt_test_008_007_execute.lto_priv.150+0x118>
  201646:	ae0a      	add	r6, sp, #40	; 0x28
  elp->listener = currp;
  201648:	4f38      	ldr	r7, [pc, #224]	; (20172c <rt_test_008_007_execute.lto_priv.150+0xfc>)
  elp->flags    = (eventflags_t)0;
  20164a:	2300      	movs	r3, #0
  elp->wflags   = wflags;
  20164c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->events   = events;
  201650:	9207      	str	r2, [sp, #28]
  elp->listener = currp;
  201652:	69b9      	ldr	r1, [r7, #24]
  elp->next     = esp->next;
  201654:	f8d8 2000 	ldr.w	r2, [r8]
  elp->listener = currp;
  201658:	9106      	str	r1, [sp, #24]
  elp->next     = esp->next;
  20165a:	f846 2d14 	str.w	r2, [r6, #-20]!
  elp->flags    = (eventflags_t)0;
  20165e:	9308      	str	r3, [sp, #32]
  esp->next     = elp;
  201660:	f8c8 6000 	str.w	r6, [r8]
  elp->wflags   = wflags;
  201664:	9009      	str	r0, [sp, #36]	; 0x24
  201666:	f383 8811 	msr	BASEPRI, r3
  20166a:	f384 8811 	msr	BASEPRI, r4
  elp->next     = esp->next;
  20166e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 20174c <rt_test_008_007_execute.lto_priv.150+0x11c>
  201672:	ac0a      	add	r4, sp, #40	; 0x28
  elp->listener = currp;
  201674:	69b9      	ldr	r1, [r7, #24]
  elp->events   = events;
  201676:	f04f 0a04 	mov.w	sl, #4
  elp->next     = esp->next;
  20167a:	f8d9 2000 	ldr.w	r2, [r9]
  elp->flags    = (eventflags_t)0;
  20167e:	9303      	str	r3, [sp, #12]
  elp->next     = esp->next;
  201680:	f844 2d28 	str.w	r2, [r4, #-40]!
  elp->wflags   = wflags;
  201684:	9004      	str	r0, [sp, #16]
  elp->listener = currp;
  201686:	9101      	str	r1, [sp, #4]
  elp->events   = events;
  201688:	f8cd a008 	str.w	sl, [sp, #8]
  esp->next     = elp;
  20168c:	f8c9 4000 	str.w	r4, [r9]
  201690:	f383 8811 	msr	BASEPRI, r3
  }

  /* [8.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
  201694:	2302      	movs	r3, #2
  201696:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
  201698:	f000 fc9a 	bl	201fd0 <test_wait_tick>
  20169c:	69ba      	ldr	r2, [r7, #24]
  20169e:	4683      	mov	fp, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  2016a0:	4b23      	ldr	r3, [pc, #140]	; (201730 <rt_test_008_007_execute.lto_priv.150+0x100>)
  2016a2:	6891      	ldr	r1, [r2, #8]
  2016a4:	4823      	ldr	r0, [pc, #140]	; (201734 <rt_test_008_007_execute.lto_priv.150+0x104>)
  2016a6:	3901      	subs	r1, #1
  2016a8:	4a23      	ldr	r2, [pc, #140]	; (201738 <rt_test_008_007_execute.lto_priv.150+0x108>)
  2016aa:	f7fe fee1 	bl	200470 <chThdCreateStatic.constprop.61>
  2016ae:	4a23      	ldr	r2, [pc, #140]	; (20173c <rt_test_008_007_execute.lto_priv.150+0x10c>)
  }

  /* [8.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
  2016b0:	2303      	movs	r3, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  2016b2:	6010      	str	r0, [r2, #0]
  test_set_step(3);
  2016b4:	602b      	str	r3, [r5, #0]
  {
    m = chEvtWaitAll(5);
  2016b6:	f7ff f823 	bl	200700 <chEvtWaitAll.constprop.37>
    test_assert_time_window(target_time,
  2016ba:	f50b 7102 	add.w	r1, fp, #520	; 0x208
  2016be:	f50b 70fa 	add.w	r0, fp, #500	; 0x1f4
  2016c2:	f7ff fc05 	bl	200ed0 <_test_assert_time_window.constprop.2>
  2016c6:	b110      	cbz	r0, 2016ce <rt_test_008_007_execute.lto_priv.150+0x9e>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
  2016c8:	b00b      	add	sp, #44	; 0x2c
  2016ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
  2016ce:	f7fe ffcf 	bl	200670 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
  2016d2:	fab0 f080 	clz	r0, r0
  2016d6:	491a      	ldr	r1, [pc, #104]	; (201740 <rt_test_008_007_execute.lto_priv.150+0x110>)
  2016d8:	0940      	lsrs	r0, r0, #5
  2016da:	f000 ffc1 	bl	202660 <_test_assert>
  2016de:	2800      	cmp	r0, #0
  2016e0:	d1f2      	bne.n	2016c8 <rt_test_008_007_execute.lto_priv.150+0x98>
    test_wait_threads();
  2016e2:	f000 fc85 	bl	201ff0 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
  2016e6:	4631      	mov	r1, r6
  2016e8:	4640      	mov	r0, r8
  test_set_step(4);
  2016ea:	f8c5 a000 	str.w	sl, [r5]
    chEvtUnregister(&es1, &el1);
  2016ee:	f005 f98f 	bl	206a10 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
  2016f2:	4621      	mov	r1, r4
  2016f4:	4648      	mov	r0, r9
  2016f6:	f005 f98b 	bl	206a10 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
  2016fa:	f8d8 0000 	ldr.w	r0, [r8]
  2016fe:	4911      	ldr	r1, [pc, #68]	; (201744 <rt_test_008_007_execute.lto_priv.150+0x114>)
  201700:	eba0 0008 	sub.w	r0, r0, r8
  201704:	fab0 f080 	clz	r0, r0
  201708:	0940      	lsrs	r0, r0, #5
  20170a:	f000 ffa9 	bl	202660 <_test_assert>
  20170e:	2800      	cmp	r0, #0
  201710:	d1da      	bne.n	2016c8 <rt_test_008_007_execute.lto_priv.150+0x98>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  201712:	f8d9 0000 	ldr.w	r0, [r9]
  201716:	490b      	ldr	r1, [pc, #44]	; (201744 <rt_test_008_007_execute.lto_priv.150+0x114>)
  201718:	eba0 0009 	sub.w	r0, r0, r9
  20171c:	fab0 f080 	clz	r0, r0
  201720:	0940      	lsrs	r0, r0, #5
  201722:	f000 ff9d 	bl	202660 <_test_assert>
  201726:	e7cf      	b.n	2016c8 <rt_test_008_007_execute.lto_priv.150+0x98>
  201728:	2000098c 	.word	0x2000098c
  20172c:	20000860 	.word	0x20000860
  201730:	08007fd0 	.word	0x08007fd0
  201734:	20000a70 	.word	0x20000a70
  201738:	00201b61 	.word	0x00201b61
  20173c:	200010d8 	.word	0x200010d8
  201740:	08007fb4 	.word	0x08007fb4
  201744:	08007f28 	.word	0x08007f28
  201748:	2002005c 	.word	0x2002005c
  20174c:	20020060 	.word	0x20020060

00201750 <rt_test_008_006_execute.lto_priv.148>:
static void rt_test_008_006_execute(void) {
  201750:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
  201752:	2001      	movs	r0, #1
  201754:	4d56      	ldr	r5, [pc, #344]	; (2018b0 <rt_test_008_006_execute.lto_priv.148+0x160>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
  201756:	4c57      	ldr	r4, [pc, #348]	; (2018b4 <rt_test_008_006_execute.lto_priv.148+0x164>)
  201758:	2320      	movs	r3, #32
  20175a:	6028      	str	r0, [r5, #0]
  20175c:	69a2      	ldr	r2, [r4, #24]
  20175e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  201762:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
  201764:	b933      	cbnz	r3, 201774 <rt_test_008_006_execute.lto_priv.148+0x24>
  201766:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
  20176a:	4953      	ldr	r1, [pc, #332]	; (2018b8 <rt_test_008_006_execute.lto_priv.148+0x168>)
  20176c:	f000 ff78 	bl	202660 <_test_assert>
  201770:	b180      	cbz	r0, 201794 <rt_test_008_006_execute.lto_priv.148+0x44>
  201772:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
  201774:	4258      	negs	r0, r3
  201776:	2100      	movs	r1, #0
  201778:	4018      	ands	r0, r3
  ctp->epending &= ~m;
  20177a:	ea23 0300 	bic.w	r3, r3, r0
  20177e:	6353      	str	r3, [r2, #52]	; 0x34
  201780:	f381 8811 	msr	BASEPRI, r1
  201784:	fab0 f080 	clz	r0, r0
  201788:	494b      	ldr	r1, [pc, #300]	; (2018b8 <rt_test_008_006_execute.lto_priv.148+0x168>)
  20178a:	0940      	lsrs	r0, r0, #5
  20178c:	f000 ff68 	bl	202660 <_test_assert>
  201790:	2800      	cmp	r0, #0
  201792:	d1ee      	bne.n	201772 <rt_test_008_006_execute.lto_priv.148+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
  201794:	69a3      	ldr	r3, [r4, #24]
  201796:	2220      	movs	r2, #32
  201798:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
  20179c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  20179e:	2a00      	cmp	r2, #0
  2017a0:	d072      	beq.n	201888 <rt_test_008_006_execute.lto_priv.148+0x138>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
  2017a2:	6358      	str	r0, [r3, #52]	; 0x34
  2017a4:	f380 8811 	msr	BASEPRI, r0
    test_assert(m == 0, "spurious event");
  2017a8:	4943      	ldr	r1, [pc, #268]	; (2018b8 <rt_test_008_006_execute.lto_priv.148+0x168>)
  2017aa:	f000 ff59 	bl	202660 <_test_assert>
  2017ae:	2800      	cmp	r0, #0
  2017b0:	d1df      	bne.n	201772 <rt_test_008_006_execute.lto_priv.148+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
  2017b2:	69a3      	ldr	r3, [r4, #24]
  2017b4:	2220      	movs	r2, #32
  2017b6:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
  2017ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  2017bc:	3201      	adds	r2, #1
  2017be:	d067      	beq.n	201890 <rt_test_008_006_execute.lto_priv.148+0x140>
  2017c0:	f380 8811 	msr	BASEPRI, r0
  2017c4:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
  2017c6:	493c      	ldr	r1, [pc, #240]	; (2018b8 <rt_test_008_006_execute.lto_priv.148+0x168>)
  2017c8:	f000 ff4a 	bl	202660 <_test_assert>
  2017cc:	2800      	cmp	r0, #0
  2017ce:	d1d0      	bne.n	201772 <rt_test_008_006_execute.lto_priv.148+0x22>
  test_set_step(2);
  2017d0:	2202      	movs	r2, #2
  thread_t *ctp = currp;
  2017d2:	69a6      	ldr	r6, [r4, #24]
  2017d4:	2320      	movs	r3, #32
  2017d6:	602a      	str	r2, [r5, #0]
  2017d8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
  2017dc:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
  2017de:	b955      	cbnz	r5, 2017f6 <rt_test_008_006_execute.lto_priv.148+0xa6>
    ctp->u.ewmask = events;
  2017e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
  2017e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  2017e8:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
  2017ea:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
  2017ec:	f005 fd98 	bl	207320 <chSchGoSleepTimeoutS>
  2017f0:	2800      	cmp	r0, #0
  2017f2:	db51      	blt.n	201898 <rt_test_008_006_execute.lto_priv.148+0x148>
    m = ctp->epending & events;
  2017f4:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
  2017f6:	4268      	negs	r0, r5
  2017f8:	2300      	movs	r3, #0
  2017fa:	4028      	ands	r0, r5
  ctp->epending &= ~m;
  2017fc:	ea25 0500 	bic.w	r5, r5, r0
  201800:	6375      	str	r5, [r6, #52]	; 0x34
  201802:	f383 8811 	msr	BASEPRI, r3
  201806:	fab0 f080 	clz	r0, r0
  20180a:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
  20180c:	492a      	ldr	r1, [pc, #168]	; (2018b8 <rt_test_008_006_execute.lto_priv.148+0x168>)
  20180e:	f000 ff27 	bl	202660 <_test_assert>
  201812:	2800      	cmp	r0, #0
  201814:	d1ad      	bne.n	201772 <rt_test_008_006_execute.lto_priv.148+0x22>
  thread_t *ctp = currp;
  201816:	69a6      	ldr	r6, [r4, #24]
  201818:	2320      	movs	r3, #32
  20181a:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
  20181e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
  201820:	b955      	cbnz	r5, 201838 <rt_test_008_006_execute.lto_priv.148+0xe8>
    ctp->u.ewmask = events;
  201822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
  201826:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  20182a:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
  20182c:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
  20182e:	f005 fd77 	bl	207320 <chSchGoSleepTimeoutS>
  201832:	2800      	cmp	r0, #0
  201834:	db34      	blt.n	2018a0 <rt_test_008_006_execute.lto_priv.148+0x150>
    m = ctp->epending & events;
  201836:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
  201838:	2300      	movs	r3, #0
  20183a:	6373      	str	r3, [r6, #52]	; 0x34
  20183c:	f383 8811 	msr	BASEPRI, r3
  201840:	fab5 f085 	clz	r0, r5
  201844:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
  201846:	491c      	ldr	r1, [pc, #112]	; (2018b8 <rt_test_008_006_execute.lto_priv.148+0x168>)
  201848:	f000 ff0a 	bl	202660 <_test_assert>
  20184c:	4605      	mov	r5, r0
  20184e:	2800      	cmp	r0, #0
  201850:	d18f      	bne.n	201772 <rt_test_008_006_execute.lto_priv.148+0x22>
  thread_t *ctp = currp;
  201852:	69a4      	ldr	r4, [r4, #24]
  201854:	2320      	movs	r3, #32
  201856:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
  20185a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  20185c:	3301      	adds	r3, #1
  20185e:	d009      	beq.n	201874 <rt_test_008_006_execute.lto_priv.148+0x124>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
  201860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
  201864:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  201868:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
  20186a:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
  20186c:	f005 fd58 	bl	207320 <chSchGoSleepTimeoutS>
  201870:	2800      	cmp	r0, #0
  201872:	db19      	blt.n	2018a8 <rt_test_008_006_execute.lto_priv.148+0x158>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
  201874:	2300      	movs	r3, #0
  201876:	6363      	str	r3, [r4, #52]	; 0x34
  201878:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
  20187c:	4628      	mov	r0, r5
  20187e:	490e      	ldr	r1, [pc, #56]	; (2018b8 <rt_test_008_006_execute.lto_priv.148+0x168>)
}
  201880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
  201884:	f000 beec 	b.w	202660 <_test_assert>
  201888:	f382 8811 	msr	BASEPRI, r2
  20188c:	2001      	movs	r0, #1
  20188e:	e78b      	b.n	2017a8 <rt_test_008_006_execute.lto_priv.148+0x58>
  201890:	6358      	str	r0, [r3, #52]	; 0x34
  201892:	f380 8811 	msr	BASEPRI, r0
  201896:	e796      	b.n	2017c6 <rt_test_008_006_execute.lto_priv.148+0x76>
  201898:	f385 8811 	msr	BASEPRI, r5
  20189c:	2001      	movs	r0, #1
  20189e:	e7b5      	b.n	20180c <rt_test_008_006_execute.lto_priv.148+0xbc>
  2018a0:	f385 8811 	msr	BASEPRI, r5
  2018a4:	2001      	movs	r0, #1
  2018a6:	e7ce      	b.n	201846 <rt_test_008_006_execute.lto_priv.148+0xf6>
  2018a8:	f385 8811 	msr	BASEPRI, r5
  2018ac:	2501      	movs	r5, #1
  2018ae:	e7e5      	b.n	20187c <rt_test_008_006_execute.lto_priv.148+0x12c>
  2018b0:	2000098c 	.word	0x2000098c
  2018b4:	20000860 	.word	0x20000860
  2018b8:	08007fa4 	.word	0x08007fa4
  2018bc:	00000000 	.word	0x00000000

002018c0 <rt_test_008_005_execute.lto_priv.146>:
static void rt_test_008_005_execute(void) {
  2018c0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
  2018c2:	2301      	movs	r3, #1
  2018c4:	4c2a      	ldr	r4, [pc, #168]	; (201970 <rt_test_008_005_execute.lto_priv.146+0xb0>)
    chEvtAddEvents(5);
  2018c6:	2005      	movs	r0, #5
  test_set_step(1);
  2018c8:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
  2018ca:	f005 f891 	bl	2069f0 <chEvtAddEvents>
  test_set_step(2);
  2018ce:	2302      	movs	r3, #2
  2018d0:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
  2018d2:	f7fe ff15 	bl	200700 <chEvtWaitAll.constprop.37>
    test_assert(m == 5, "unexpected pending bit");
  2018d6:	f1a0 0005 	sub.w	r0, r0, #5
  2018da:	4926      	ldr	r1, [pc, #152]	; (201974 <rt_test_008_005_execute.lto_priv.146+0xb4>)
  2018dc:	fab0 f080 	clz	r0, r0
  2018e0:	0940      	lsrs	r0, r0, #5
  2018e2:	f000 febd 	bl	202660 <_test_assert>
  2018e6:	b100      	cbz	r0, 2018ea <rt_test_008_005_execute.lto_priv.146+0x2a>
  2018e8:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
  2018ea:	f7fe fec1 	bl	200670 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
  2018ee:	fab0 f080 	clz	r0, r0
  2018f2:	4921      	ldr	r1, [pc, #132]	; (201978 <rt_test_008_005_execute.lto_priv.146+0xb8>)
  2018f4:	0940      	lsrs	r0, r0, #5
  2018f6:	f000 feb3 	bl	202660 <_test_assert>
  2018fa:	2800      	cmp	r0, #0
  2018fc:	d1f4      	bne.n	2018e8 <rt_test_008_005_execute.lto_priv.146+0x28>
  test_set_step(3);
  2018fe:	2303      	movs	r3, #3
    chEvtAddEvents(4);
  201900:	2004      	movs	r0, #4
  test_set_step(3);
  201902:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(4);
  201904:	f005 f874 	bl	2069f0 <chEvtAddEvents>
  test_set_step(4);
  201908:	2304      	movs	r3, #4
  20190a:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
  20190c:	f000 fb60 	bl	201fd0 <test_wait_tick>
  return ch.rlist.current;
  201910:	4b1a      	ldr	r3, [pc, #104]	; (20197c <rt_test_008_005_execute.lto_priv.146+0xbc>)
  201912:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  201914:	4a1a      	ldr	r2, [pc, #104]	; (201980 <rt_test_008_005_execute.lto_priv.146+0xc0>)
  201916:	699b      	ldr	r3, [r3, #24]
  201918:	481a      	ldr	r0, [pc, #104]	; (201984 <rt_test_008_005_execute.lto_priv.146+0xc4>)
  20191a:	6899      	ldr	r1, [r3, #8]
  20191c:	3901      	subs	r1, #1
  20191e:	f7fe fda7 	bl	200470 <chThdCreateStatic.constprop.61>
  201922:	4a19      	ldr	r2, [pc, #100]	; (201988 <rt_test_008_005_execute.lto_priv.146+0xc8>)
  test_set_step(5);
  201924:	2305      	movs	r3, #5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  201926:	6010      	str	r0, [r2, #0]
  test_set_step(5);
  201928:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
  20192a:	f7fe fee9 	bl	200700 <chEvtWaitAll.constprop.37>
    test_assert_time_window(target_time,
  20192e:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
  201932:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
  201934:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
  201938:	f7ff faca 	bl	200ed0 <_test_assert_time_window.constprop.2>
  20193c:	2800      	cmp	r0, #0
  20193e:	d1d3      	bne.n	2018e8 <rt_test_008_005_execute.lto_priv.146+0x28>
    test_assert(m == 5, "event flags error");
  201940:	f1a4 0005 	sub.w	r0, r4, #5
  201944:	4911      	ldr	r1, [pc, #68]	; (20198c <rt_test_008_005_execute.lto_priv.146+0xcc>)
  201946:	fab0 f080 	clz	r0, r0
  20194a:	0940      	lsrs	r0, r0, #5
  20194c:	f000 fe88 	bl	202660 <_test_assert>
  201950:	2800      	cmp	r0, #0
  201952:	d1c9      	bne.n	2018e8 <rt_test_008_005_execute.lto_priv.146+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
  201954:	f7fe fe8c 	bl	200670 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
  201958:	fab0 f080 	clz	r0, r0
  20195c:	4906      	ldr	r1, [pc, #24]	; (201978 <rt_test_008_005_execute.lto_priv.146+0xb8>)
  20195e:	0940      	lsrs	r0, r0, #5
  201960:	f000 fe7e 	bl	202660 <_test_assert>
  201964:	2800      	cmp	r0, #0
  201966:	d1bf      	bne.n	2018e8 <rt_test_008_005_execute.lto_priv.146+0x28>
}
  201968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
  20196c:	f000 bb40 	b.w	201ff0 <test_wait_threads>
  201970:	2000098c 	.word	0x2000098c
  201974:	08007f78 	.word	0x08007f78
  201978:	08007fb4 	.word	0x08007fb4
  20197c:	20000860 	.word	0x20000860
  201980:	00201ba1 	.word	0x00201ba1
  201984:	20000a70 	.word	0x20000a70
  201988:	200010d8 	.word	0x200010d8
  20198c:	08007f90 	.word	0x08007f90

00201990 <rt_test_008_004_execute.lto_priv.144>:
static void rt_test_008_004_execute(void) {
  201990:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
  201992:	2301      	movs	r3, #1
  201994:	4c28      	ldr	r4, [pc, #160]	; (201a38 <rt_test_008_004_execute.lto_priv.144+0xa8>)
    chEvtAddEvents(5);
  201996:	2005      	movs	r0, #5
  test_set_step(1);
  201998:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
  20199a:	f005 f829 	bl	2069f0 <chEvtAddEvents>
  test_set_step(2);
  20199e:	2302      	movs	r3, #2
  2019a0:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
  2019a2:	f7fe fe95 	bl	2006d0 <chEvtWaitAny.constprop.38>
    test_assert(m == 5, "unexpected pending bit");
  2019a6:	f1a0 0005 	sub.w	r0, r0, #5
  2019aa:	4924      	ldr	r1, [pc, #144]	; (201a3c <rt_test_008_004_execute.lto_priv.144+0xac>)
  2019ac:	fab0 f080 	clz	r0, r0
  2019b0:	0940      	lsrs	r0, r0, #5
  2019b2:	f000 fe55 	bl	202660 <_test_assert>
  2019b6:	b100      	cbz	r0, 2019ba <rt_test_008_004_execute.lto_priv.144+0x2a>
  2019b8:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
  2019ba:	f7fe fe59 	bl	200670 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
  2019be:	fab0 f080 	clz	r0, r0
  2019c2:	491f      	ldr	r1, [pc, #124]	; (201a40 <rt_test_008_004_execute.lto_priv.144+0xb0>)
  2019c4:	0940      	lsrs	r0, r0, #5
  2019c6:	f000 fe4b 	bl	202660 <_test_assert>
  2019ca:	2800      	cmp	r0, #0
  2019cc:	d1f4      	bne.n	2019b8 <rt_test_008_004_execute.lto_priv.144+0x28>
  test_set_step(3);
  2019ce:	2303      	movs	r3, #3
  2019d0:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
  2019d2:	f000 fafd 	bl	201fd0 <test_wait_tick>
  2019d6:	4b1b      	ldr	r3, [pc, #108]	; (201a44 <rt_test_008_004_execute.lto_priv.144+0xb4>)
  2019d8:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  2019da:	4a1b      	ldr	r2, [pc, #108]	; (201a48 <rt_test_008_004_execute.lto_priv.144+0xb8>)
  2019dc:	699b      	ldr	r3, [r3, #24]
  2019de:	481b      	ldr	r0, [pc, #108]	; (201a4c <rt_test_008_004_execute.lto_priv.144+0xbc>)
  2019e0:	6899      	ldr	r1, [r3, #8]
  2019e2:	3901      	subs	r1, #1
  2019e4:	f7fe fd44 	bl	200470 <chThdCreateStatic.constprop.61>
  2019e8:	4a19      	ldr	r2, [pc, #100]	; (201a50 <rt_test_008_004_execute.lto_priv.144+0xc0>)
  test_set_step(4);
  2019ea:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  2019ec:	6010      	str	r0, [r2, #0]
  test_set_step(4);
  2019ee:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
  2019f0:	f7fe fe6e 	bl	2006d0 <chEvtWaitAny.constprop.38>
    test_assert_time_window(target_time,
  2019f4:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
  2019f8:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
  2019fa:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
  2019fe:	f7ff fa67 	bl	200ed0 <_test_assert_time_window.constprop.2>
  201a02:	2800      	cmp	r0, #0
  201a04:	d1d8      	bne.n	2019b8 <rt_test_008_004_execute.lto_priv.144+0x28>
    test_assert(m == 1, "event flag error");
  201a06:	f1a4 0001 	sub.w	r0, r4, #1
  201a0a:	4912      	ldr	r1, [pc, #72]	; (201a54 <rt_test_008_004_execute.lto_priv.144+0xc4>)
  201a0c:	fab0 f080 	clz	r0, r0
  201a10:	0940      	lsrs	r0, r0, #5
  201a12:	f000 fe25 	bl	202660 <_test_assert>
  201a16:	2800      	cmp	r0, #0
  201a18:	d1ce      	bne.n	2019b8 <rt_test_008_004_execute.lto_priv.144+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
  201a1a:	f7fe fe29 	bl	200670 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
  201a1e:	fab0 f080 	clz	r0, r0
  201a22:	4907      	ldr	r1, [pc, #28]	; (201a40 <rt_test_008_004_execute.lto_priv.144+0xb0>)
  201a24:	0940      	lsrs	r0, r0, #5
  201a26:	f000 fe1b 	bl	202660 <_test_assert>
  201a2a:	2800      	cmp	r0, #0
  201a2c:	d1c4      	bne.n	2019b8 <rt_test_008_004_execute.lto_priv.144+0x28>
}
  201a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
  201a32:	f000 badd 	b.w	201ff0 <test_wait_threads>
  201a36:	bf00      	nop
  201a38:	2000098c 	.word	0x2000098c
  201a3c:	08007f78 	.word	0x08007f78
  201a40:	08007fb4 	.word	0x08007fb4
  201a44:	20000860 	.word	0x20000860
  201a48:	00201ba1 	.word	0x00201ba1
  201a4c:	20000a70 	.word	0x20000a70
  201a50:	200010d8 	.word	0x200010d8
  201a54:	08007f64 	.word	0x08007f64
	...

00201a60 <rt_test_008_003_execute.lto_priv.142>:
static void rt_test_008_003_execute(void) {
  201a60:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
  201a62:	2301      	movs	r3, #1
  201a64:	4c34      	ldr	r4, [pc, #208]	; (201b38 <rt_test_008_003_execute.lto_priv.142+0xd8>)
    chEvtAddEvents(7);
  201a66:	2007      	movs	r0, #7
  test_set_step(1);
  201a68:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(7);
  201a6a:	f004 ffc1 	bl	2069f0 <chEvtAddEvents>
  test_set_step(2);
  201a6e:	2302      	movs	r3, #2
  201a70:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
  201a72:	f7fe fe0d 	bl	200690 <chEvtWaitOne.constprop.39>
    test_assert(m == 1, "single event error");
  201a76:	f1a0 0001 	sub.w	r0, r0, #1
  201a7a:	4930      	ldr	r1, [pc, #192]	; (201b3c <rt_test_008_003_execute.lto_priv.142+0xdc>)
  201a7c:	fab0 f080 	clz	r0, r0
  201a80:	0940      	lsrs	r0, r0, #5
  201a82:	f000 fded 	bl	202660 <_test_assert>
  201a86:	b100      	cbz	r0, 201a8a <rt_test_008_003_execute.lto_priv.142+0x2a>
  201a88:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
  201a8a:	f7fe fe01 	bl	200690 <chEvtWaitOne.constprop.39>
    test_assert(m == 2, "single event error");
  201a8e:	f1a0 0002 	sub.w	r0, r0, #2
  201a92:	492a      	ldr	r1, [pc, #168]	; (201b3c <rt_test_008_003_execute.lto_priv.142+0xdc>)
  201a94:	fab0 f080 	clz	r0, r0
  201a98:	0940      	lsrs	r0, r0, #5
  201a9a:	f000 fde1 	bl	202660 <_test_assert>
  201a9e:	2800      	cmp	r0, #0
  201aa0:	d1f2      	bne.n	201a88 <rt_test_008_003_execute.lto_priv.142+0x28>
    m = chEvtWaitOne(ALL_EVENTS);
  201aa2:	f7fe fdf5 	bl	200690 <chEvtWaitOne.constprop.39>
    test_assert(m == 4, "single event error");
  201aa6:	f1a0 0004 	sub.w	r0, r0, #4
  201aaa:	4924      	ldr	r1, [pc, #144]	; (201b3c <rt_test_008_003_execute.lto_priv.142+0xdc>)
  201aac:	fab0 f080 	clz	r0, r0
  201ab0:	0940      	lsrs	r0, r0, #5
  201ab2:	f000 fdd5 	bl	202660 <_test_assert>
  201ab6:	2800      	cmp	r0, #0
  201ab8:	d1e6      	bne.n	201a88 <rt_test_008_003_execute.lto_priv.142+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
  201aba:	f7fe fdd9 	bl	200670 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
  201abe:	fab0 f080 	clz	r0, r0
  201ac2:	491f      	ldr	r1, [pc, #124]	; (201b40 <rt_test_008_003_execute.lto_priv.142+0xe0>)
  201ac4:	0940      	lsrs	r0, r0, #5
  201ac6:	f000 fdcb 	bl	202660 <_test_assert>
  201aca:	2800      	cmp	r0, #0
  201acc:	d1dc      	bne.n	201a88 <rt_test_008_003_execute.lto_priv.142+0x28>
  test_set_step(3);
  201ace:	2303      	movs	r3, #3
  201ad0:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
  201ad2:	f000 fa7d 	bl	201fd0 <test_wait_tick>
  201ad6:	4b1b      	ldr	r3, [pc, #108]	; (201b44 <rt_test_008_003_execute.lto_priv.142+0xe4>)
  201ad8:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  201ada:	4a1b      	ldr	r2, [pc, #108]	; (201b48 <rt_test_008_003_execute.lto_priv.142+0xe8>)
  201adc:	699b      	ldr	r3, [r3, #24]
  201ade:	481b      	ldr	r0, [pc, #108]	; (201b4c <rt_test_008_003_execute.lto_priv.142+0xec>)
  201ae0:	6899      	ldr	r1, [r3, #8]
  201ae2:	3901      	subs	r1, #1
  201ae4:	f7fe fcc4 	bl	200470 <chThdCreateStatic.constprop.61>
  201ae8:	4a19      	ldr	r2, [pc, #100]	; (201b50 <rt_test_008_003_execute.lto_priv.142+0xf0>)
  test_set_step(4);
  201aea:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  201aec:	6010      	str	r0, [r2, #0]
  test_set_step(4);
  201aee:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
  201af0:	f7fe fdce 	bl	200690 <chEvtWaitOne.constprop.39>
    test_assert_time_window(target_time,
  201af4:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
  201af8:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
  201afa:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
  201afe:	f7ff f9e7 	bl	200ed0 <_test_assert_time_window.constprop.2>
  201b02:	2800      	cmp	r0, #0
  201b04:	d1c0      	bne.n	201a88 <rt_test_008_003_execute.lto_priv.142+0x28>
    test_assert(m == 1, "event flag error");
  201b06:	f1a4 0001 	sub.w	r0, r4, #1
  201b0a:	4912      	ldr	r1, [pc, #72]	; (201b54 <rt_test_008_003_execute.lto_priv.142+0xf4>)
  201b0c:	fab0 f080 	clz	r0, r0
  201b10:	0940      	lsrs	r0, r0, #5
  201b12:	f000 fda5 	bl	202660 <_test_assert>
  201b16:	2800      	cmp	r0, #0
  201b18:	d1b6      	bne.n	201a88 <rt_test_008_003_execute.lto_priv.142+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
  201b1a:	f7fe fda9 	bl	200670 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
  201b1e:	fab0 f080 	clz	r0, r0
  201b22:	4907      	ldr	r1, [pc, #28]	; (201b40 <rt_test_008_003_execute.lto_priv.142+0xe0>)
  201b24:	0940      	lsrs	r0, r0, #5
  201b26:	f000 fd9b 	bl	202660 <_test_assert>
  201b2a:	2800      	cmp	r0, #0
  201b2c:	d1ac      	bne.n	201a88 <rt_test_008_003_execute.lto_priv.142+0x28>
}
  201b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
  201b32:	f000 ba5d 	b.w	201ff0 <test_wait_threads>
  201b36:	bf00      	nop
  201b38:	2000098c 	.word	0x2000098c
  201b3c:	08007f50 	.word	0x08007f50
  201b40:	08007fb4 	.word	0x08007fb4
  201b44:	20000860 	.word	0x20000860
  201b48:	00201ba1 	.word	0x00201ba1
  201b4c:	20000a70 	.word	0x20000a70
  201b50:	200010d8 	.word	0x200010d8
  201b54:	08007f64 	.word	0x08007f64
	...

00201b60 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
  201b60:	b538      	push	{r3, r4, r5, lr}
  201b62:	2520      	movs	r5, #32
  201b64:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
  201b68:	2100      	movs	r1, #0
  201b6a:	480b      	ldr	r0, [pc, #44]	; (201b98 <evt_thread7+0x38>)
  201b6c:	f005 f950 	bl	206e10 <chEvtBroadcastFlagsI>
  201b70:	2400      	movs	r4, #0
  chSchRescheduleS();
  201b72:	f005 f825 	bl	206bc0 <chSchRescheduleS>
  201b76:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
  201b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  201b7e:	f005 fc0f 	bl	2073a0 <chThdSleep>
  201b82:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
  201b86:	4805      	ldr	r0, [pc, #20]	; (201b9c <evt_thread7+0x3c>)
  201b88:	4621      	mov	r1, r4
  201b8a:	f005 f941 	bl	206e10 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
  201b8e:	f005 f817 	bl	206bc0 <chSchRescheduleS>
  201b92:	f384 8811 	msr	BASEPRI, r4
  201b96:	bd38      	pop	{r3, r4, r5, pc}
  201b98:	2002005c 	.word	0x2002005c
  201b9c:	20020060 	.word	0x20020060

00201ba0 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
  201ba0:	b510      	push	{r4, lr}
  201ba2:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
  201ba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  201ba8:	f005 fbfa 	bl	2073a0 <chThdSleep>
  201bac:	2320      	movs	r3, #32
  201bae:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
  201bb2:	2101      	movs	r1, #1
  201bb4:	4620      	mov	r0, r4
  201bb6:	f005 f913 	bl	206de0 <chEvtSignalI>
  chSchRescheduleS();
  201bba:	f005 f801 	bl	206bc0 <chSchRescheduleS>
  201bbe:	2300      	movs	r3, #0
  201bc0:	f383 8811 	msr	BASEPRI, r3
  201bc4:	bd10      	pop	{r4, pc}
  201bc6:	bf00      	nop
	...

00201bd0 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
  201bd0:	2043      	movs	r0, #67	; 0x43
  201bd2:	f000 ba45 	b.w	202060 <test_emit_token>
  201bd6:	bf00      	nop
	...

00201be0 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
  201be0:	2042      	movs	r0, #66	; 0x42
  201be2:	f000 ba3d 	b.w	202060 <test_emit_token>
  201be6:	bf00      	nop
	...

00201bf0 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
  201bf0:	2041      	movs	r0, #65	; 0x41
  201bf2:	f000 ba35 	b.w	202060 <test_emit_token>
  201bf6:	bf00      	nop
	...

00201c00 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
  201c00:	b510      	push	{r4, lr}
  201c02:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
  201c04:	2141      	movs	r1, #65	; 0x41
  201c06:	f005 f8cb 	bl	206da0 <chMsgSend>
  chMsgSend(p, 'B');
  201c0a:	2142      	movs	r1, #66	; 0x42
  201c0c:	4620      	mov	r0, r4
  201c0e:	f005 f8c7 	bl	206da0 <chMsgSend>
  chMsgSend(p, 'C');
  201c12:	4620      	mov	r0, r4
  201c14:	2143      	movs	r1, #67	; 0x43
  201c16:	f005 f8c3 	bl	206da0 <chMsgSend>
  chMsgSend(p, 'D');
  201c1a:	4620      	mov	r0, r4
  201c1c:	2144      	movs	r1, #68	; 0x44
}
  201c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
  201c22:	f005 b8bd 	b.w	206da0 <chMsgSend>
  201c26:	bf00      	nop
	...

00201c30 <rt_test_007_001_execute.lto_priv.137>:
 * - [7.1.1] Starting the messenger thread.
 * - [7.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_007_001_execute(void) {
  201c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201c32:	4b14      	ldr	r3, [pc, #80]	; (201c84 <rt_test_007_001_execute.lto_priv.137+0x54>)
  thread_t *tp;
  msg_t msg;

  /* [7.1.1] Starting the messenger thread.*/
  test_set_step(1);
  201c34:	2001      	movs	r0, #1
  201c36:	4d14      	ldr	r5, [pc, #80]	; (201c88 <rt_test_007_001_execute.lto_priv.137+0x58>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [7.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
  201c38:	2404      	movs	r4, #4
  201c3a:	699b      	ldr	r3, [r3, #24]
  201c3c:	2720      	movs	r7, #32
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
  201c3e:	4a13      	ldr	r2, [pc, #76]	; (201c8c <rt_test_007_001_execute.lto_priv.137+0x5c>)
  201c40:	2600      	movs	r6, #0
  201c42:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
  201c44:	6028      	str	r0, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
  201c46:	4401      	add	r1, r0
  201c48:	4811      	ldr	r0, [pc, #68]	; (201c90 <rt_test_007_001_execute.lto_priv.137+0x60>)
  201c4a:	f7fe fc11 	bl	200470 <chThdCreateStatic.constprop.61>
  201c4e:	4a11      	ldr	r2, [pc, #68]	; (201c94 <rt_test_007_001_execute.lto_priv.137+0x64>)
  test_set_step(2);
  201c50:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
  201c52:	6010      	str	r0, [r2, #0]
  test_set_step(2);
  201c54:	602b      	str	r3, [r5, #0]
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
  201c56:	f005 f843 	bl	206ce0 <chMsgWait>
  201c5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  201c5c:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
  201c60:	4629      	mov	r1, r5
  201c62:	f004 ffd5 	bl	206c10 <chSchWakeupS>
  201c66:	f386 8811 	msr	BASEPRI, r6
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
  201c6a:	b2e8      	uxtb	r0, r5
  201c6c:	f000 f9f8 	bl	202060 <test_emit_token>
    for (i = 0; i < 4; i++) {
  201c70:	3c01      	subs	r4, #1
  201c72:	d1f0      	bne.n	201c56 <rt_test_007_001_execute.lto_priv.137+0x26>
    }
    test_wait_threads();
  201c74:	f000 f9bc 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  201c78:	4907      	ldr	r1, [pc, #28]	; (201c98 <rt_test_007_001_execute.lto_priv.137+0x68>)
  201c7a:	4808      	ldr	r0, [pc, #32]	; (201c9c <rt_test_007_001_execute.lto_priv.137+0x6c>)
  }
}
  201c7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
  201c80:	f000 bcc6 	b.w	202610 <_test_assert_sequence>
  201c84:	20000860 	.word	0x20000860
  201c88:	2000098c 	.word	0x2000098c
  201c8c:	00201c01 	.word	0x00201c01
  201c90:	20000a70 	.word	0x20000a70
  201c94:	200010d8 	.word	0x200010d8
  201c98:	08007f38 	.word	0x08007f38
  201c9c:	08007f14 	.word	0x08007f14

00201ca0 <rt_test_006_009_execute.lto_priv.136>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static void rt_test_006_009_execute(void) {
  201ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201ca2:	4b1d      	ldr	r3, [pc, #116]	; (201d18 <rt_test_006_009_execute.lto_priv.136+0x78>)
    prio = chThdGetPriorityX();
  }

  /* [6.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  201ca4:	f04f 0e02 	mov.w	lr, #2
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
  201ca8:	4e1c      	ldr	r6, [pc, #112]	; (201d1c <rt_test_006_009_execute.lto_priv.136+0x7c>)
  return chThdGetSelfX()->prio;
  201caa:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
  201cac:	4c1c      	ldr	r4, [pc, #112]	; (201d20 <rt_test_006_009_execute.lto_priv.136+0x80>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
  201cae:	4630      	mov	r0, r6
  201cb0:	689f      	ldr	r7, [r3, #8]
  201cb2:	4d1c      	ldr	r5, [pc, #112]	; (201d24 <rt_test_006_009_execute.lto_priv.136+0x84>)
  201cb4:	1c79      	adds	r1, r7, #1
  201cb6:	4b1c      	ldr	r3, [pc, #112]	; (201d28 <rt_test_006_009_execute.lto_priv.136+0x88>)
  201cb8:	4a1c      	ldr	r2, [pc, #112]	; (201d2c <rt_test_006_009_execute.lto_priv.136+0x8c>)
  test_set_step(2);
  201cba:	f8c4 e000 	str.w	lr, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
  201cbe:	f7fe fbd7 	bl	200470 <chThdCreateStatic.constprop.61>
  }

  /* [6.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  201cc2:	f04f 0e03 	mov.w	lr, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
  201cc6:	6028      	str	r0, [r5, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
  201cc8:	1cb9      	adds	r1, r7, #2
  201cca:	f506 70a4 	add.w	r0, r6, #328	; 0x148
  201cce:	4b18      	ldr	r3, [pc, #96]	; (201d30 <rt_test_006_009_execute.lto_priv.136+0x90>)
  201cd0:	4a18      	ldr	r2, [pc, #96]	; (201d34 <rt_test_006_009_execute.lto_priv.136+0x94>)
  test_set_step(3);
  201cd2:	f8c4 e000 	str.w	lr, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
  201cd6:	f7fe fbcb 	bl	200470 <chThdCreateStatic.constprop.61>
  }

  /* [6.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  201cda:	f04f 0e04 	mov.w	lr, #4
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
  201cde:	1cf9      	adds	r1, r7, #3
  201ce0:	4a15      	ldr	r2, [pc, #84]	; (201d38 <rt_test_006_009_execute.lto_priv.136+0x98>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
  201ce2:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
  201ce4:	f506 7024 	add.w	r0, r6, #656	; 0x290
  201ce8:	4b14      	ldr	r3, [pc, #80]	; (201d3c <rt_test_006_009_execute.lto_priv.136+0x9c>)
  test_set_step(4);
  201cea:	f8c4 e000 	str.w	lr, [r4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
  201cee:	f7fe fbbf 	bl	200470 <chThdCreateStatic.constprop.61>
  }

  /* [6.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
  201cf2:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
  201cf4:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
  201cf6:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
  201cf8:	f7fe fc8a 	bl	200610 <chCondSignal.constprop.51>
  }

  /* [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
  201cfc:	2306      	movs	r3, #6
  201cfe:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
  201d00:	f7fe fc86 	bl	200610 <chCondSignal.constprop.51>
  }

  /* [6.9.7] Checking the order of operations.*/
  test_set_step(7);
  201d04:	2307      	movs	r3, #7
  201d06:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
  201d08:	f000 f972 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
  201d0c:	490c      	ldr	r1, [pc, #48]	; (201d40 <rt_test_006_009_execute.lto_priv.136+0xa0>)
  201d0e:	480d      	ldr	r0, [pc, #52]	; (201d44 <rt_test_006_009_execute.lto_priv.136+0xa4>)
  }
}
  201d10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
  201d14:	f000 bc7c 	b.w	202610 <_test_assert_sequence>
  201d18:	20000860 	.word	0x20000860
  201d1c:	20000a70 	.word	0x20000a70
  201d20:	2000098c 	.word	0x2000098c
  201d24:	200010d8 	.word	0x200010d8
  201d28:	08007fd0 	.word	0x08007fd0
  201d2c:	00204ae1 	.word	0x00204ae1
  201d30:	08008000 	.word	0x08008000
  201d34:	00204b71 	.word	0x00204b71
  201d38:	00204ac1 	.word	0x00204ac1
  201d3c:	08007ff4 	.word	0x08007ff4
  201d40:	08007f38 	.word	0x08007f38
  201d44:	08007f4c 	.word	0x08007f4c
	...

00201d50 <rt_test_006_008_execute.lto_priv.134>:
static void rt_test_006_008_execute(void) {
  201d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
  201d52:	4b26      	ldr	r3, [pc, #152]	; (201dec <rt_test_006_008_execute.lto_priv.134+0x9c>)
  test_set_step(1);
  201d54:	2701      	movs	r7, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
  201d56:	4c26      	ldr	r4, [pc, #152]	; (201df0 <rt_test_006_008_execute.lto_priv.134+0xa0>)
  return chThdGetSelfX()->prio;
  201d58:	699b      	ldr	r3, [r3, #24]
  test_set_step(1);
  201d5a:	4e26      	ldr	r6, [pc, #152]	; (201df4 <rt_test_006_008_execute.lto_priv.134+0xa4>)
  201d5c:	689d      	ldr	r5, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
  201d5e:	4a26      	ldr	r2, [pc, #152]	; (201df8 <rt_test_006_008_execute.lto_priv.134+0xa8>)
  201d60:	19e9      	adds	r1, r5, r7
  201d62:	4b26      	ldr	r3, [pc, #152]	; (201dfc <rt_test_006_008_execute.lto_priv.134+0xac>)
  201d64:	4826      	ldr	r0, [pc, #152]	; (201e00 <rt_test_006_008_execute.lto_priv.134+0xb0>)
  test_set_step(1);
  201d66:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
  201d68:	f7fe fb82 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
  201d6c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
  201d6e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
  201d70:	4b24      	ldr	r3, [pc, #144]	; (201e04 <rt_test_006_008_execute.lto_priv.134+0xb4>)
  201d72:	4a21      	ldr	r2, [pc, #132]	; (201df8 <rt_test_006_008_execute.lto_priv.134+0xa8>)
  201d74:	4824      	ldr	r0, [pc, #144]	; (201e08 <rt_test_006_008_execute.lto_priv.134+0xb8>)
  201d76:	f7fe fb7b 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
  201d7a:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
  201d7c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
  201d7e:	4b23      	ldr	r3, [pc, #140]	; (201e0c <rt_test_006_008_execute.lto_priv.134+0xbc>)
  201d80:	4a1d      	ldr	r2, [pc, #116]	; (201df8 <rt_test_006_008_execute.lto_priv.134+0xa8>)
  201d82:	4823      	ldr	r0, [pc, #140]	; (201e10 <rt_test_006_008_execute.lto_priv.134+0xc0>)
  201d84:	f7fe fb74 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
  201d88:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
  201d8a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
  201d8c:	4b21      	ldr	r3, [pc, #132]	; (201e14 <rt_test_006_008_execute.lto_priv.134+0xc4>)
  201d8e:	4a1a      	ldr	r2, [pc, #104]	; (201df8 <rt_test_006_008_execute.lto_priv.134+0xa8>)
  201d90:	4821      	ldr	r0, [pc, #132]	; (201e18 <rt_test_006_008_execute.lto_priv.134+0xc8>)
  201d92:	f7fe fb6d 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
  201d96:	1d69      	adds	r1, r5, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
  201d98:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
  201d9a:	4b20      	ldr	r3, [pc, #128]	; (201e1c <rt_test_006_008_execute.lto_priv.134+0xcc>)
  201d9c:	4a16      	ldr	r2, [pc, #88]	; (201df8 <rt_test_006_008_execute.lto_priv.134+0xa8>)
  201d9e:	4820      	ldr	r0, [pc, #128]	; (201e20 <rt_test_006_008_execute.lto_priv.134+0xd0>)
  201da0:	f7fe fb66 	bl	200470 <chThdCreateStatic.constprop.61>
  test_set_step(2);
  201da4:	2202      	movs	r2, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
  201da6:	6120      	str	r0, [r4, #16]
  201da8:	2320      	movs	r3, #32
  test_set_step(2);
  201daa:	6032      	str	r2, [r6, #0]
  201dac:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
  201db0:	4c1c      	ldr	r4, [pc, #112]	; (201e24 <rt_test_006_008_execute.lto_priv.134+0xd4>)
  201db2:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
  201db4:	42a3      	cmp	r3, r4
  201db6:	d00b      	beq.n	201dd0 <rt_test_006_008_execute.lto_priv.134+0x80>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
  201db8:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
  201dbc:	681a      	ldr	r2, [r3, #0]
  201dbe:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
  201dc0:	6054      	str	r4, [r2, #4]
  tqp->next             = tp->queue.next;
  201dc2:	6022      	str	r2, [r4, #0]
  201dc4:	f004 ffd4 	bl	206d70 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
  201dc8:	6823      	ldr	r3, [r4, #0]
  201dca:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
  201dcc:	42a3      	cmp	r3, r4
  201dce:	d1f5      	bne.n	201dbc <rt_test_006_008_execute.lto_priv.134+0x6c>
  chSchRescheduleS();
  201dd0:	f004 fef6 	bl	206bc0 <chSchRescheduleS>
  201dd4:	2300      	movs	r3, #0
  201dd6:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
  201dda:	f000 f909 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
  201dde:	4912      	ldr	r1, [pc, #72]	; (201e28 <rt_test_006_008_execute.lto_priv.134+0xd8>)
  201de0:	4812      	ldr	r0, [pc, #72]	; (201e2c <rt_test_006_008_execute.lto_priv.134+0xdc>)
}
  201de2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
  201de6:	f000 bc13 	b.w	202610 <_test_assert_sequence>
  201dea:	bf00      	nop
  201dec:	20000860 	.word	0x20000860
  201df0:	200010d8 	.word	0x200010d8
  201df4:	2000098c 	.word	0x2000098c
  201df8:	00204b71 	.word	0x00204b71
  201dfc:	08007f10 	.word	0x08007f10
  201e00:	20000a70 	.word	0x20000a70
  201e04:	08007f08 	.word	0x08007f08
  201e08:	20000bb8 	.word	0x20000bb8
  201e0c:	08008000 	.word	0x08008000
  201e10:	20000d00 	.word	0x20000d00
  201e14:	08007ff4 	.word	0x08007ff4
  201e18:	20000e48 	.word	0x20000e48
  201e1c:	08007fd0 	.word	0x08007fd0
  201e20:	20000f90 	.word	0x20000f90
  201e24:	20020000 	.word	0x20020000
  201e28:	08007f38 	.word	0x08007f38
  201e2c:	08007f0c 	.word	0x08007f0c

00201e30 <rt_test_006_007_execute.lto_priv.132>:
  return ch.rlist.current;
  201e30:	4b29      	ldr	r3, [pc, #164]	; (201ed8 <rt_test_006_007_execute.lto_priv.132+0xa8>)
  return chThdGetSelfX()->prio;
  201e32:	699b      	ldr	r3, [r3, #24]
static void rt_test_006_007_execute(void) {
  201e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
  201e38:	f04f 0e01 	mov.w	lr, #1
  201e3c:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
  201e3e:	4e27      	ldr	r6, [pc, #156]	; (201edc <rt_test_006_007_execute.lto_priv.132+0xac>)
  201e40:	4d27      	ldr	r5, [pc, #156]	; (201ee0 <rt_test_006_007_execute.lto_priv.132+0xb0>)
  201e42:	eb07 010e 	add.w	r1, r7, lr
  201e46:	4c27      	ldr	r4, [pc, #156]	; (201ee4 <rt_test_006_007_execute.lto_priv.132+0xb4>)
  201e48:	4632      	mov	r2, r6
  test_set_step(1);
  201e4a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 201f04 <rt_test_006_007_execute.lto_priv.132+0xd4>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
  201e4e:	4628      	mov	r0, r5
  201e50:	4b25      	ldr	r3, [pc, #148]	; (201ee8 <rt_test_006_007_execute.lto_priv.132+0xb8>)
  test_set_step(1);
  201e52:	f8c8 e000 	str.w	lr, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
  201e56:	f7fe fb0b 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
  201e5a:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
  201e5c:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
  201e5e:	4632      	mov	r2, r6
  201e60:	f505 70a4 	add.w	r0, r5, #328	; 0x148
  201e64:	4b21      	ldr	r3, [pc, #132]	; (201eec <rt_test_006_007_execute.lto_priv.132+0xbc>)
  201e66:	f7fe fb03 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
  201e6a:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
  201e6c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
  201e6e:	4632      	mov	r2, r6
  201e70:	f505 7024 	add.w	r0, r5, #656	; 0x290
  201e74:	4b1e      	ldr	r3, [pc, #120]	; (201ef0 <rt_test_006_007_execute.lto_priv.132+0xc0>)
  201e76:	f7fe fafb 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
  201e7a:	1d39      	adds	r1, r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
  201e7c:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
  201e7e:	4632      	mov	r2, r6
  201e80:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
  201e84:	4b1b      	ldr	r3, [pc, #108]	; (201ef4 <rt_test_006_007_execute.lto_priv.132+0xc4>)
  201e86:	f7fe faf3 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
  201e8a:	4632      	mov	r2, r6
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
  201e8c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
  201e8e:	1d79      	adds	r1, r7, #5
  201e90:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
  201e94:	4b18      	ldr	r3, [pc, #96]	; (201ef8 <rt_test_006_007_execute.lto_priv.132+0xc8>)
  201e96:	f7fe faeb 	bl	200470 <chThdCreateStatic.constprop.61>
  test_set_step(2);
  201e9a:	2202      	movs	r2, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
  201e9c:	6120      	str	r0, [r4, #16]
  201e9e:	2320      	movs	r3, #32
  test_set_step(2);
  201ea0:	f8c8 2000 	str.w	r2, [r8]
  201ea4:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
  201ea8:	f7fe fbca 	bl	200640 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
  201eac:	f7fe fbc8 	bl	200640 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
  201eb0:	f7fe fbc6 	bl	200640 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
  201eb4:	f7fe fbc4 	bl	200640 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
  201eb8:	f7fe fbc2 	bl	200640 <chCondSignalI.constprop.50>
    chSchRescheduleS();
  201ebc:	f004 fe80 	bl	206bc0 <chSchRescheduleS>
  201ec0:	2300      	movs	r3, #0
  201ec2:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
  201ec6:	f000 f893 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
  201eca:	490c      	ldr	r1, [pc, #48]	; (201efc <rt_test_006_007_execute.lto_priv.132+0xcc>)
  201ecc:	480c      	ldr	r0, [pc, #48]	; (201f00 <rt_test_006_007_execute.lto_priv.132+0xd0>)
}
  201ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
  201ed2:	f000 bb9d 	b.w	202610 <_test_assert_sequence>
  201ed6:	bf00      	nop
  201ed8:	20000860 	.word	0x20000860
  201edc:	00204b71 	.word	0x00204b71
  201ee0:	20000a70 	.word	0x20000a70
  201ee4:	200010d8 	.word	0x200010d8
  201ee8:	08007f10 	.word	0x08007f10
  201eec:	08007f08 	.word	0x08007f08
  201ef0:	08008000 	.word	0x08008000
  201ef4:	08007ff4 	.word	0x08007ff4
  201ef8:	08007fd0 	.word	0x08007fd0
  201efc:	08007f38 	.word	0x08007f38
  201f00:	08007f0c 	.word	0x08007f0c
  201f04:	2000098c 	.word	0x2000098c
	...

00201f10 <test_printn.part.0>:
    streamPut(test_chp, '0');
  201f10:	4b02      	ldr	r3, [pc, #8]	; (201f1c <test_printn.part.0+0xc>)
  201f12:	2130      	movs	r1, #48	; 0x30
  201f14:	6818      	ldr	r0, [r3, #0]
  201f16:	6803      	ldr	r3, [r0, #0]
  201f18:	689b      	ldr	r3, [r3, #8]
  201f1a:	4718      	bx	r3
  201f1c:	20000980 	.word	0x20000980

00201f20 <chCoreAllocAlignedI.lto_priv.84>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
  201f20:	b4f0      	push	{r4, r5, r6, r7}

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  201f22:	4d0a      	ldr	r5, [pc, #40]	; (201f4c <chCoreAllocAlignedI.lto_priv.84+0x2c>)
  size = MEM_ALIGN_NEXT(size, align);
  201f24:	1e4b      	subs	r3, r1, #1
  201f26:	424e      	negs	r6, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  201f28:	682f      	ldr	r7, [r5, #0]
  size = MEM_ALIGN_NEXT(size, align);
  201f2a:	4403      	add	r3, r0
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  201f2c:	686c      	ldr	r4, [r5, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  201f2e:	1e7a      	subs	r2, r7, #1
  size = MEM_ALIGN_NEXT(size, align);
  201f30:	4033      	ands	r3, r6
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  201f32:	1850      	adds	r0, r2, r1
  201f34:	4030      	ands	r0, r6
  next = p + size;
  201f36:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  201f38:	42a3      	cmp	r3, r4
  201f3a:	d804      	bhi.n	201f46 <chCoreAllocAlignedI.lto_priv.84+0x26>
  201f3c:	429f      	cmp	r7, r3
  201f3e:	d802      	bhi.n	201f46 <chCoreAllocAlignedI.lto_priv.84+0x26>
    return NULL;
  }

  ch_memcore.nextmem = next;
  201f40:	602b      	str	r3, [r5, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
  201f42:	bcf0      	pop	{r4, r5, r6, r7}
  201f44:	4770      	bx	lr
    return NULL;
  201f46:	2000      	movs	r0, #0
  201f48:	bcf0      	pop	{r4, r5, r6, r7}
  201f4a:	4770      	bx	lr
  201f4c:	200012f0 	.word	0x200012f0

00201f50 <dyn_release_object_heap.part.3>:
    if (prev->next == element) {
  201f50:	460a      	mov	r2, r1
  201f52:	e002      	b.n	201f5a <dyn_release_object_heap.part.3+0xa>
  201f54:	4298      	cmp	r0, r3
  201f56:	d006      	beq.n	201f66 <dyn_release_object_heap.part.3+0x16>
  201f58:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
  201f5a:	6813      	ldr	r3, [r2, #0]
  201f5c:	428b      	cmp	r3, r1
  201f5e:	d1f9      	bne.n	201f54 <dyn_release_object_heap.part.3+0x4>
  return NULL;
  201f60:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
  201f62:	f005 b845 	b.w	206ff0 <chHeapFree>
      prev->next = element->next;
  201f66:	6803      	ldr	r3, [r0, #0]
  201f68:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
  201f6a:	f005 b841 	b.w	206ff0 <chHeapFree>
  201f6e:	bf00      	nop

00201f70 <test_printn>:
  if (!n)
  201f70:	b318      	cbz	r0, 201fba <test_printn+0x4a>
void test_printn(uint32_t n) {
  201f72:	b570      	push	{r4, r5, r6, lr}
  201f74:	b084      	sub	sp, #16
      *p++ = (n % 10) + '0', n /= 10;
  201f76:	4e12      	ldr	r6, [pc, #72]	; (201fc0 <test_printn+0x50>)
  if (!n)
  201f78:	466d      	mov	r5, sp
  201f7a:	466c      	mov	r4, sp
  201f7c:	e000      	b.n	201f80 <test_printn+0x10>
    while (n)
  201f7e:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
  201f80:	fba6 2300 	umull	r2, r3, r6, r0
  201f84:	4622      	mov	r2, r4
  201f86:	08db      	lsrs	r3, r3, #3
  201f88:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  201f8c:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
    while (n)
  201f90:	4618      	mov	r0, r3
      *p++ = (n % 10) + '0', n /= 10;
  201f92:	3130      	adds	r1, #48	; 0x30
  201f94:	b2c9      	uxtb	r1, r1
  201f96:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
  201f9a:	2b00      	cmp	r3, #0
  201f9c:	d1ef      	bne.n	201f7e <test_printn+0xe>
    while (p > buf)
  201f9e:	42aa      	cmp	r2, r5
  201fa0:	d909      	bls.n	201fb6 <test_printn+0x46>
  201fa2:	4e08      	ldr	r6, [pc, #32]	; (201fc4 <test_printn+0x54>)
  201fa4:	e001      	b.n	201faa <test_printn+0x3a>
  201fa6:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
  201faa:	6830      	ldr	r0, [r6, #0]
  201fac:	6803      	ldr	r3, [r0, #0]
  201fae:	689b      	ldr	r3, [r3, #8]
  201fb0:	4798      	blx	r3
    while (p > buf)
  201fb2:	42ac      	cmp	r4, r5
  201fb4:	d1f7      	bne.n	201fa6 <test_printn+0x36>
}
  201fb6:	b004      	add	sp, #16
  201fb8:	bd70      	pop	{r4, r5, r6, pc}
  201fba:	f7ff bfa9 	b.w	201f10 <test_printn.part.0>
  201fbe:	bf00      	nop
  201fc0:	cccccccd 	.word	0xcccccccd
  201fc4:	20000980 	.word	0x20000980
	...

00201fd0 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
  201fd0:	b508      	push	{r3, lr}

  chThdSleep(1);
  201fd2:	2001      	movs	r0, #1
  201fd4:	f005 f9e4 	bl	2073a0 <chThdSleep>
  201fd8:	2320      	movs	r3, #32
  201fda:	f383 8811 	msr	BASEPRI, r3
  201fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  201fe2:	2300      	movs	r3, #0
  201fe4:	6a50      	ldr	r0, [r2, #36]	; 0x24
  201fe6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
  201fea:	bd08      	pop	{r3, pc}
  201fec:	0000      	movs	r0, r0
	...

00201ff0 <test_wait_threads>:
void test_wait_threads(void) {
  201ff0:	b570      	push	{r4, r5, r6, lr}
  201ff2:	4c07      	ldr	r4, [pc, #28]	; (202010 <test_wait_threads+0x20>)
      threads[i] = NULL;
  201ff4:	2600      	movs	r6, #0
  201ff6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
  201ffa:	6823      	ldr	r3, [r4, #0]
      chThdWait(threads[i]);
  201ffc:	4618      	mov	r0, r3
    if (threads[i] != NULL) {
  201ffe:	b113      	cbz	r3, 202006 <test_wait_threads+0x16>
      chThdWait(threads[i]);
  202000:	f005 f87e 	bl	207100 <chThdWait>
      threads[i] = NULL;
  202004:	6026      	str	r6, [r4, #0]
  202006:	3404      	adds	r4, #4
  for (i = 0; i < MAX_THREADS; i++)
  202008:	42ac      	cmp	r4, r5
  20200a:	d1f6      	bne.n	201ffa <test_wait_threads+0xa>
}
  20200c:	bd70      	pop	{r4, r5, r6, pc}
  20200e:	bf00      	nop
  202010:	200010d8 	.word	0x200010d8
	...

00202020 <test_terminate_threads>:
void test_terminate_threads(void) {
  202020:	4b0b      	ldr	r3, [pc, #44]	; (202050 <test_terminate_threads+0x30>)
  202022:	b430      	push	{r4, r5}
  202024:	f103 0014 	add.w	r0, r3, #20
  202028:	2520      	movs	r5, #32
  20202a:	2400      	movs	r4, #0
    if (threads[i])
  20202c:	f853 2b04 	ldr.w	r2, [r3], #4
  202030:	b14a      	cbz	r2, 202046 <test_terminate_threads+0x26>
  202032:	f385 8811 	msr	BASEPRI, r5
  tp->flags |= CH_FLAG_TERMINATE;
  202036:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
  20203a:	f041 0104 	orr.w	r1, r1, #4
  20203e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
  202042:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
  202046:	4283      	cmp	r3, r0
  202048:	d1f0      	bne.n	20202c <test_terminate_threads+0xc>
}
  20204a:	bc30      	pop	{r4, r5}
  20204c:	4770      	bx	lr
  20204e:	bf00      	nop
  202050:	200010d8 	.word	0x200010d8
	...

00202060 <test_emit_token>:
  202060:	2320      	movs	r3, #32
  202062:	f383 8811 	msr	BASEPRI, r3
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
  202066:	4a06      	ldr	r2, [pc, #24]	; (202080 <test_emit_token+0x20>)
  202068:	4906      	ldr	r1, [pc, #24]	; (202084 <test_emit_token+0x24>)
  20206a:	6813      	ldr	r3, [r2, #0]
  20206c:	428b      	cmp	r3, r1
  20206e:	d202      	bcs.n	202076 <test_emit_token+0x16>
    *test_tokp++ = token;
  202070:	1c59      	adds	r1, r3, #1
  202072:	6011      	str	r1, [r2, #0]
  202074:	7018      	strb	r0, [r3, #0]
  202076:	2300      	movs	r3, #0
  202078:	f383 8811 	msr	BASEPRI, r3
  20207c:	4770      	bx	lr
  20207e:	bf00      	nop
  202080:	200009a0 	.word	0x200009a0
  202084:	200009a0 	.word	0x200009a0
	...

00202090 <test_println>:
void test_println(const char *msgp) {
  202090:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
  202092:	7801      	ldrb	r1, [r0, #0]
  202094:	b189      	cbz	r1, 2020ba <test_println+0x2a>
  202096:	4604      	mov	r4, r0
  202098:	4d09      	ldr	r5, [pc, #36]	; (2020c0 <test_println+0x30>)
    streamPut(test_chp, *msgp++);
  20209a:	6828      	ldr	r0, [r5, #0]
  20209c:	6803      	ldr	r3, [r0, #0]
  20209e:	689b      	ldr	r3, [r3, #8]
  2020a0:	4798      	blx	r3
  while (*msgp)
  2020a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  2020a6:	2900      	cmp	r1, #0
  2020a8:	d1f7      	bne.n	20209a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
  2020aa:	6828      	ldr	r0, [r5, #0]
  2020ac:	2202      	movs	r2, #2
  2020ae:	4905      	ldr	r1, [pc, #20]	; (2020c4 <test_println+0x34>)
  2020b0:	6803      	ldr	r3, [r0, #0]
}
  2020b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
  2020b6:	681b      	ldr	r3, [r3, #0]
  2020b8:	4718      	bx	r3
  2020ba:	4d01      	ldr	r5, [pc, #4]	; (2020c0 <test_println+0x30>)
  2020bc:	e7f5      	b.n	2020aa <test_println+0x1a>
  2020be:	bf00      	nop
  2020c0:	20000980 	.word	0x20000980
  2020c4:	08007ed4 	.word	0x08007ed4
	...

002020d0 <test_print>:
  while (*msgp)
  2020d0:	7801      	ldrb	r1, [r0, #0]
  2020d2:	b159      	cbz	r1, 2020ec <test_print+0x1c>
void test_print(const char *msgp) {
  2020d4:	b538      	push	{r3, r4, r5, lr}
  2020d6:	4604      	mov	r4, r0
  2020d8:	4d05      	ldr	r5, [pc, #20]	; (2020f0 <test_print+0x20>)
    streamPut(test_chp, *msgp++);
  2020da:	6828      	ldr	r0, [r5, #0]
  2020dc:	6803      	ldr	r3, [r0, #0]
  2020de:	689b      	ldr	r3, [r3, #8]
  2020e0:	4798      	blx	r3
  while (*msgp)
  2020e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  2020e6:	2900      	cmp	r1, #0
  2020e8:	d1f7      	bne.n	2020da <test_print+0xa>
  2020ea:	bd38      	pop	{r3, r4, r5, pc}
  2020ec:	4770      	bx	lr
  2020ee:	bf00      	nop
  2020f0:	20000980 	.word	0x20000980
	...

00202100 <rt_test_001_003_execute.lto_priv.99>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
  202100:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
  202102:	4bc3      	ldr	r3, [pc, #780]	; (202410 <rt_test_001_003_execute.lto_priv.99+0x310>)
  202104:	2501      	movs	r5, #1
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
  202106:	4cc3      	ldr	r4, [pc, #780]	; (202414 <rt_test_001_003_execute.lto_priv.99+0x314>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
  202108:	48c3      	ldr	r0, [pc, #780]	; (202418 <rt_test_001_003_execute.lto_priv.99+0x318>)
  test_set_step(1);
  20210a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
  20210c:	f7ff ffe0 	bl	2020d0 <test_print>
    test_printn(CH_CFG_ST_RESOLUTION);
  202110:	2020      	movs	r0, #32
  202112:	f7ff ff2d 	bl	201f70 <test_printn>
    test_println("");
  202116:	4620      	mov	r0, r4
  202118:	f7ff ffba 	bl	202090 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
  20211c:	48bf      	ldr	r0, [pc, #764]	; (20241c <rt_test_001_003_execute.lto_priv.99+0x31c>)
  20211e:	f7ff ffd7 	bl	2020d0 <test_print>
    test_printn(CH_CFG_ST_FREQUENCY);
  202122:	f242 7010 	movw	r0, #10000	; 0x2710
  202126:	f7ff ff23 	bl	201f70 <test_printn>
    test_println("");
  20212a:	4620      	mov	r0, r4
  20212c:	f7ff ffb0 	bl	202090 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
  202130:	48bb      	ldr	r0, [pc, #748]	; (202420 <rt_test_001_003_execute.lto_priv.99+0x320>)
  202132:	f7ff ffcd 	bl	2020d0 <test_print>
    test_printn(CH_CFG_INTERVALS_SIZE);
  202136:	2020      	movs	r0, #32
  202138:	f7ff ff1a 	bl	201f70 <test_printn>
    test_println("");
  20213c:	4620      	mov	r0, r4
  20213e:	f7ff ffa7 	bl	202090 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
  202142:	48b8      	ldr	r0, [pc, #736]	; (202424 <rt_test_001_003_execute.lto_priv.99+0x324>)
  202144:	f7ff ffc4 	bl	2020d0 <test_print>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
  202148:	2020      	movs	r0, #32
  20214a:	f7ff ff11 	bl	201f70 <test_printn>
    test_println("");
  20214e:	4620      	mov	r0, r4
  202150:	f7ff ff9e 	bl	202090 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
  202154:	48b4      	ldr	r0, [pc, #720]	; (202428 <rt_test_001_003_execute.lto_priv.99+0x328>)
  202156:	f7ff ffbb 	bl	2020d0 <test_print>
    test_printn(CH_CFG_ST_TIMEDELTA);
  20215a:	2002      	movs	r0, #2
  20215c:	f7ff ff08 	bl	201f70 <test_printn>
    test_println("");
  202160:	4620      	mov	r0, r4
  202162:	f7ff ff95 	bl	202090 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
  202166:	48b1      	ldr	r0, [pc, #708]	; (20242c <rt_test_001_003_execute.lto_priv.99+0x32c>)
  202168:	f7ff ffb2 	bl	2020d0 <test_print>
  20216c:	f7ff fed0 	bl	201f10 <test_printn.part.0>
    test_printn(CH_CFG_TIME_QUANTUM);
    test_println("");
  202170:	4620      	mov	r0, r4
  202172:	f7ff ff8d 	bl	202090 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
  202176:	48ae      	ldr	r0, [pc, #696]	; (202430 <rt_test_001_003_execute.lto_priv.99+0x330>)
  202178:	f7ff ffaa 	bl	2020d0 <test_print>
  20217c:	f7ff fec8 	bl	201f10 <test_printn.part.0>
    test_printn(CH_CFG_MEMCORE_SIZE);
    test_println("");
  202180:	4620      	mov	r0, r4
  202182:	f7ff ff85 	bl	202090 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
  202186:	48ab      	ldr	r0, [pc, #684]	; (202434 <rt_test_001_003_execute.lto_priv.99+0x334>)
  202188:	f7ff ffa2 	bl	2020d0 <test_print>
  20218c:	f7ff fec0 	bl	201f10 <test_printn.part.0>
    test_printn(CH_CFG_NO_IDLE_THREAD);
    test_println("");
  202190:	4620      	mov	r0, r4
  202192:	f7ff ff7d 	bl	202090 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
  202196:	48a8      	ldr	r0, [pc, #672]	; (202438 <rt_test_001_003_execute.lto_priv.99+0x338>)
  202198:	f7ff ff9a 	bl	2020d0 <test_print>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
  20219c:	4628      	mov	r0, r5
  20219e:	f7ff fee7 	bl	201f70 <test_printn>
    test_println("");
  2021a2:	4620      	mov	r0, r4
  2021a4:	f7ff ff74 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
  2021a8:	48a4      	ldr	r0, [pc, #656]	; (20243c <rt_test_001_003_execute.lto_priv.99+0x33c>)
  2021aa:	f7ff ff91 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_TM);
  2021ae:	4628      	mov	r0, r5
  2021b0:	f7ff fede 	bl	201f70 <test_printn>
    test_println("");
  2021b4:	4620      	mov	r0, r4
  2021b6:	f7ff ff6b 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
  2021ba:	48a1      	ldr	r0, [pc, #644]	; (202440 <rt_test_001_003_execute.lto_priv.99+0x340>)
  2021bc:	f7ff ff88 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_REGISTRY);
  2021c0:	4628      	mov	r0, r5
  2021c2:	f7ff fed5 	bl	201f70 <test_printn>
    test_println("");
  2021c6:	4620      	mov	r0, r4
  2021c8:	f7ff ff62 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
  2021cc:	489d      	ldr	r0, [pc, #628]	; (202444 <rt_test_001_003_execute.lto_priv.99+0x344>)
  2021ce:	f7ff ff7f 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_WAITEXIT);
  2021d2:	4628      	mov	r0, r5
  2021d4:	f7ff fecc 	bl	201f70 <test_printn>
    test_println("");
  2021d8:	4620      	mov	r0, r4
  2021da:	f7ff ff59 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
  2021de:	489a      	ldr	r0, [pc, #616]	; (202448 <rt_test_001_003_execute.lto_priv.99+0x348>)
  2021e0:	f7ff ff76 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES);
  2021e4:	4628      	mov	r0, r5
  2021e6:	f7ff fec3 	bl	201f70 <test_printn>
    test_println("");
  2021ea:	4620      	mov	r0, r4
  2021ec:	f7ff ff50 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRI:          ");
  2021f0:	4896      	ldr	r0, [pc, #600]	; (20244c <rt_test_001_003_execute.lto_priv.99+0x34c>)
  2021f2:	f7ff ff6d 	bl	2020d0 <test_print>
  2021f6:	f7ff fe8b 	bl	201f10 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
    test_println("");
  2021fa:	4620      	mov	r0, r4
  2021fc:	f7ff ff48 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
  202200:	4893      	ldr	r0, [pc, #588]	; (202450 <rt_test_001_003_execute.lto_priv.99+0x350>)
  202202:	f7ff ff65 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_MUTEXES);
  202206:	4628      	mov	r0, r5
  202208:	f7ff feb2 	bl	201f70 <test_printn>
    test_println("");
  20220c:	4620      	mov	r0, r4
  20220e:	f7ff ff3f 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURS:          ");
  202212:	4890      	ldr	r0, [pc, #576]	; (202454 <rt_test_001_003_execute.lto_priv.99+0x354>)
  202214:	f7ff ff5c 	bl	2020d0 <test_print>
  202218:	f7ff fe7a 	bl	201f10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
    test_println("");   
  20221c:	4620      	mov	r0, r4
  20221e:	f7ff ff37 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
  202222:	488d      	ldr	r0, [pc, #564]	; (202458 <rt_test_001_003_execute.lto_priv.99+0x358>)
  202224:	f7ff ff54 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_CONDVARS);
  202228:	4628      	mov	r0, r5
  20222a:	f7ff fea1 	bl	201f70 <test_printn>
    test_println("");
  20222e:	4620      	mov	r0, r4
  202230:	f7ff ff2e 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEO:          ");
  202234:	4889      	ldr	r0, [pc, #548]	; (20245c <rt_test_001_003_execute.lto_priv.99+0x35c>)
  202236:	f7ff ff4b 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
  20223a:	4628      	mov	r0, r5
  20223c:	f7ff fe98 	bl	201f70 <test_printn>
    test_println("");
  202240:	4620      	mov	r0, r4
  202242:	f7ff ff25 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
  202246:	4886      	ldr	r0, [pc, #536]	; (202460 <rt_test_001_003_execute.lto_priv.99+0x360>)
  202248:	f7ff ff42 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_EVENTS);
  20224c:	4628      	mov	r0, r5
  20224e:	f7ff fe8f 	bl	201f70 <test_printn>
    test_println("");
  202252:	4620      	mov	r0, r4
  202254:	f7ff ff1c 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
  202258:	4882      	ldr	r0, [pc, #520]	; (202464 <rt_test_001_003_execute.lto_priv.99+0x364>)
  20225a:	f7ff ff39 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
  20225e:	4628      	mov	r0, r5
  202260:	f7ff fe86 	bl	201f70 <test_printn>
    test_println("");
  202264:	4620      	mov	r0, r4
  202266:	f7ff ff13 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
  20226a:	487f      	ldr	r0, [pc, #508]	; (202468 <rt_test_001_003_execute.lto_priv.99+0x368>)
  20226c:	f7ff ff30 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_MESSAGES);
  202270:	4628      	mov	r0, r5
  202272:	f7ff fe7d 	bl	201f70 <test_printn>
    test_println("");
  202276:	4620      	mov	r0, r4
  202278:	f7ff ff0a 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRI:            ");
  20227c:	487b      	ldr	r0, [pc, #492]	; (20246c <rt_test_001_003_execute.lto_priv.99+0x36c>)
  20227e:	f7ff ff27 	bl	2020d0 <test_print>
  202282:	f7ff fe45 	bl	201f10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
    test_println("");
  202286:	4620      	mov	r0, r4
  202288:	f7ff ff02 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
  20228c:	4878      	ldr	r0, [pc, #480]	; (202470 <rt_test_001_003_execute.lto_priv.99+0x370>)
  20228e:	f7ff ff1f 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_MAILBOXES);
  202292:	4628      	mov	r0, r5
  202294:	f7ff fe6c 	bl	201f70 <test_printn>
    test_println("");
  202298:	4620      	mov	r0, r4
  20229a:	f7ff fef9 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
  20229e:	4875      	ldr	r0, [pc, #468]	; (202474 <rt_test_001_003_execute.lto_priv.99+0x374>)
  2022a0:	f7ff ff16 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_MEMCORE);
  2022a4:	4628      	mov	r0, r5
  2022a6:	f7ff fe63 	bl	201f70 <test_printn>
    test_println("");
  2022aa:	4620      	mov	r0, r4
  2022ac:	f7ff fef0 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
  2022b0:	4871      	ldr	r0, [pc, #452]	; (202478 <rt_test_001_003_execute.lto_priv.99+0x378>)
  2022b2:	f7ff ff0d 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_HEAP);
  2022b6:	4628      	mov	r0, r5
  2022b8:	f7ff fe5a 	bl	201f70 <test_printn>
    test_println("");
  2022bc:	4620      	mov	r0, r4
  2022be:	f7ff fee7 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
  2022c2:	486e      	ldr	r0, [pc, #440]	; (20247c <rt_test_001_003_execute.lto_priv.99+0x37c>)
  2022c4:	f7ff ff04 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_MEMPOOLS);
  2022c8:	4628      	mov	r0, r5
  2022ca:	f7ff fe51 	bl	201f70 <test_printn>
    test_println("");
  2022ce:	4620      	mov	r0, r4
  2022d0:	f7ff fede 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
  2022d4:	486a      	ldr	r0, [pc, #424]	; (202480 <rt_test_001_003_execute.lto_priv.99+0x380>)
  2022d6:	f7ff fefb 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
  2022da:	4628      	mov	r0, r5
  2022dc:	f7ff fe48 	bl	201f70 <test_printn>
    test_println("");
  2022e0:	4620      	mov	r0, r4
  2022e2:	f7ff fed5 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
  2022e6:	4867      	ldr	r0, [pc, #412]	; (202484 <rt_test_001_003_execute.lto_priv.99+0x384>)
  2022e8:	f7ff fef2 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_DYNAMIC);
  2022ec:	4628      	mov	r0, r5
  2022ee:	f7ff fe3f 	bl	201f70 <test_printn>
    test_println("");
  2022f2:	4620      	mov	r0, r4
  2022f4:	f7ff fecc 	bl	202090 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
  2022f8:	4863      	ldr	r0, [pc, #396]	; (202488 <rt_test_001_003_execute.lto_priv.99+0x388>)
  2022fa:	f7ff fee9 	bl	2020d0 <test_print>
    test_printn(CH_CFG_USE_FACTORY);
  2022fe:	4628      	mov	r0, r5
  202300:	f7ff fe36 	bl	201f70 <test_printn>
    test_println("");
  202304:	4620      	mov	r0, r4
  202306:	f7ff fec3 	bl	202090 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
  20230a:	4860      	ldr	r0, [pc, #384]	; (20248c <rt_test_001_003_execute.lto_priv.99+0x38c>)
  20230c:	f7ff fee0 	bl	2020d0 <test_print>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
  202310:	2008      	movs	r0, #8
  202312:	f7ff fe2d 	bl	201f70 <test_printn>
    test_println("");
  202316:	4620      	mov	r0, r4
  202318:	f7ff feba 	bl	202090 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
  20231c:	485c      	ldr	r0, [pc, #368]	; (202490 <rt_test_001_003_execute.lto_priv.99+0x390>)
  20231e:	f7ff fed7 	bl	2020d0 <test_print>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
  202322:	4628      	mov	r0, r5
  202324:	f7ff fe24 	bl	201f70 <test_printn>
    test_println("");
  202328:	4620      	mov	r0, r4
  20232a:	f7ff feb1 	bl	202090 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
  20232e:	4859      	ldr	r0, [pc, #356]	; (202494 <rt_test_001_003_execute.lto_priv.99+0x394>)
  202330:	f7ff fece 	bl	2020d0 <test_print>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
  202334:	4628      	mov	r0, r5
  202336:	f7ff fe1b 	bl	201f70 <test_printn>
    test_println("");
  20233a:	4620      	mov	r0, r4
  20233c:	f7ff fea8 	bl	202090 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
  202340:	4855      	ldr	r0, [pc, #340]	; (202498 <rt_test_001_003_execute.lto_priv.99+0x398>)
  202342:	f7ff fec5 	bl	2020d0 <test_print>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
  202346:	4628      	mov	r0, r5
  202348:	f7ff fe12 	bl	201f70 <test_printn>
    test_println("");
  20234c:	4620      	mov	r0, r4
  20234e:	f7ff fe9f 	bl	202090 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
  202352:	4852      	ldr	r0, [pc, #328]	; (20249c <rt_test_001_003_execute.lto_priv.99+0x39c>)
  202354:	f7ff febc 	bl	2020d0 <test_print>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
  202358:	4628      	mov	r0, r5
  20235a:	f7ff fe09 	bl	201f70 <test_printn>
    test_println("");
  20235e:	4620      	mov	r0, r4
  202360:	f7ff fe96 	bl	202090 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
  202364:	484e      	ldr	r0, [pc, #312]	; (2024a0 <rt_test_001_003_execute.lto_priv.99+0x3a0>)
  202366:	f7ff feb3 	bl	2020d0 <test_print>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
  20236a:	4628      	mov	r0, r5
  20236c:	f7ff fe00 	bl	201f70 <test_printn>
    test_println("");
  202370:	4620      	mov	r0, r4
  202372:	f7ff fe8d 	bl	202090 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
  202376:	484b      	ldr	r0, [pc, #300]	; (2024a4 <rt_test_001_003_execute.lto_priv.99+0x3a4>)
  202378:	f7ff feaa 	bl	2020d0 <test_print>
  20237c:	f7ff fdc8 	bl	201f10 <test_printn.part.0>
    test_printn(CH_DBG_STATISTICS);
    test_println("");
  202380:	4620      	mov	r0, r4
  202382:	f7ff fe85 	bl	202090 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
  202386:	4848      	ldr	r0, [pc, #288]	; (2024a8 <rt_test_001_003_execute.lto_priv.99+0x3a8>)
  202388:	f7ff fea2 	bl	2020d0 <test_print>
  20238c:	f7ff fdc0 	bl	201f10 <test_printn.part.0>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
    test_println("");
  202390:	4620      	mov	r0, r4
  202392:	f7ff fe7d 	bl	202090 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
  202396:	4845      	ldr	r0, [pc, #276]	; (2024ac <rt_test_001_003_execute.lto_priv.99+0x3ac>)
  202398:	f7ff fe9a 	bl	2020d0 <test_print>
  20239c:	f7ff fdb8 	bl	201f10 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_CHECKS);
    test_println("");
  2023a0:	4620      	mov	r0, r4
  2023a2:	f7ff fe75 	bl	202090 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
  2023a6:	4842      	ldr	r0, [pc, #264]	; (2024b0 <rt_test_001_003_execute.lto_priv.99+0x3b0>)
  2023a8:	f7ff fe92 	bl	2020d0 <test_print>
  2023ac:	f7ff fdb0 	bl	201f10 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_ASSERTS);
    test_println("");
  2023b0:	4620      	mov	r0, r4
  2023b2:	f7ff fe6d 	bl	202090 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
  2023b6:	483f      	ldr	r0, [pc, #252]	; (2024b4 <rt_test_001_003_execute.lto_priv.99+0x3b4>)
  2023b8:	f7ff fe8a 	bl	2020d0 <test_print>
    test_printn(CH_DBG_TRACE_MASK);
  2023bc:	20ff      	movs	r0, #255	; 0xff
  2023be:	f7ff fdd7 	bl	201f70 <test_printn>
    test_println("");
  2023c2:	4620      	mov	r0, r4
  2023c4:	f7ff fe64 	bl	202090 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
  2023c8:	483b      	ldr	r0, [pc, #236]	; (2024b8 <rt_test_001_003_execute.lto_priv.99+0x3b8>)
  2023ca:	f7ff fe81 	bl	2020d0 <test_print>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
  2023ce:	2080      	movs	r0, #128	; 0x80
  2023d0:	f7ff fdce 	bl	201f70 <test_printn>
    test_println("");
  2023d4:	4620      	mov	r0, r4
  2023d6:	f7ff fe5b 	bl	202090 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
  2023da:	4838      	ldr	r0, [pc, #224]	; (2024bc <rt_test_001_003_execute.lto_priv.99+0x3bc>)
  2023dc:	f7ff fe78 	bl	2020d0 <test_print>
  2023e0:	f7ff fd96 	bl	201f10 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
    test_println("");
  2023e4:	4620      	mov	r0, r4
  2023e6:	f7ff fe53 	bl	202090 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
  2023ea:	4835      	ldr	r0, [pc, #212]	; (2024c0 <rt_test_001_003_execute.lto_priv.99+0x3c0>)
  2023ec:	f7ff fe70 	bl	2020d0 <test_print>
  2023f0:	f7ff fd8e 	bl	201f10 <test_printn.part.0>
    test_printn(CH_DBG_FILL_THREADS);
    test_println("");
  2023f4:	4620      	mov	r0, r4
  2023f6:	f7ff fe4b 	bl	202090 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
  2023fa:	4832      	ldr	r0, [pc, #200]	; (2024c4 <rt_test_001_003_execute.lto_priv.99+0x3c4>)
  2023fc:	f7ff fe68 	bl	2020d0 <test_print>
  202400:	f7ff fd86 	bl	201f10 <test_printn.part.0>
    test_printn(CH_DBG_THREADS_PROFILING);
    test_println("");
  202404:	4620      	mov	r0, r4
  }
}
  202406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
  20240a:	f7ff be41 	b.w	202090 <test_println>
  20240e:	bf00      	nop
  202410:	2000098c 	.word	0x2000098c
  202414:	08008118 	.word	0x08008118
  202418:	08008344 	.word	0x08008344
  20241c:	08008370 	.word	0x08008370
  202420:	0800839c 	.word	0x0800839c
  202424:	080083c8 	.word	0x080083c8
  202428:	080083f4 	.word	0x080083f4
  20242c:	08008420 	.word	0x08008420
  202430:	0800844c 	.word	0x0800844c
  202434:	08008478 	.word	0x08008478
  202438:	080084a4 	.word	0x080084a4
  20243c:	080084d0 	.word	0x080084d0
  202440:	080084fc 	.word	0x080084fc
  202444:	08008528 	.word	0x08008528
  202448:	08008554 	.word	0x08008554
  20244c:	08008580 	.word	0x08008580
  202450:	080085ac 	.word	0x080085ac
  202454:	080085d8 	.word	0x080085d8
  202458:	08008604 	.word	0x08008604
  20245c:	08008630 	.word	0x08008630
  202460:	0800865c 	.word	0x0800865c
  202464:	08008688 	.word	0x08008688
  202468:	080086b4 	.word	0x080086b4
  20246c:	080086e0 	.word	0x080086e0
  202470:	0800870c 	.word	0x0800870c
  202474:	08008738 	.word	0x08008738
  202478:	08008764 	.word	0x08008764
  20247c:	08008790 	.word	0x08008790
  202480:	080087bc 	.word	0x080087bc
  202484:	080087e8 	.word	0x080087e8
  202488:	08008814 	.word	0x08008814
  20248c:	08008840 	.word	0x08008840
  202490:	0800886c 	.word	0x0800886c
  202494:	08008898 	.word	0x08008898
  202498:	080088c4 	.word	0x080088c4
  20249c:	080088f0 	.word	0x080088f0
  2024a0:	0800891c 	.word	0x0800891c
  2024a4:	08008948 	.word	0x08008948
  2024a8:	08008974 	.word	0x08008974
  2024ac:	080089a0 	.word	0x080089a0
  2024b0:	080089cc 	.word	0x080089cc
  2024b4:	080089f8 	.word	0x080089f8
  2024b8:	08008a24 	.word	0x08008a24
  2024bc:	08008a50 	.word	0x08008a50
  2024c0:	08008a7c 	.word	0x08008a7c
  2024c4:	08008aa8 	.word	0x08008aa8
	...

002024d0 <rt_test_001_002_execute.lto_priv.98>:
static void rt_test_001_002_execute(void) {
  2024d0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
  2024d2:	4b18      	ldr	r3, [pc, #96]	; (202534 <rt_test_001_002_execute.lto_priv.98+0x64>)
  2024d4:	2501      	movs	r5, #1
    test_println("--- Product:                            ChibiOS/RT");
  2024d6:	4818      	ldr	r0, [pc, #96]	; (202538 <rt_test_001_002_execute.lto_priv.98+0x68>)
  test_set_step(1);
  2024d8:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
  2024da:	f7ff fdd9 	bl	202090 <test_println>
    test_println("");
  2024de:	4c17      	ldr	r4, [pc, #92]	; (20253c <rt_test_001_002_execute.lto_priv.98+0x6c>)
    test_print("--- Stable Flag:                        ");
  2024e0:	4817      	ldr	r0, [pc, #92]	; (202540 <rt_test_001_002_execute.lto_priv.98+0x70>)
  2024e2:	f7ff fdf5 	bl	2020d0 <test_print>
    test_printn(CH_KERNEL_STABLE);
  2024e6:	4628      	mov	r0, r5
  2024e8:	f7ff fd42 	bl	201f70 <test_printn>
    test_println("");
  2024ec:	4620      	mov	r0, r4
  2024ee:	f7ff fdcf 	bl	202090 <test_println>
    test_print("--- Version String:                     ");
  2024f2:	4814      	ldr	r0, [pc, #80]	; (202544 <rt_test_001_002_execute.lto_priv.98+0x74>)
  2024f4:	f7ff fdec 	bl	2020d0 <test_print>
    test_println(CH_KERNEL_VERSION);
  2024f8:	4813      	ldr	r0, [pc, #76]	; (202548 <rt_test_001_002_execute.lto_priv.98+0x78>)
  2024fa:	f7ff fdc9 	bl	202090 <test_println>
    test_print("--- Major Number:                       ");
  2024fe:	4813      	ldr	r0, [pc, #76]	; (20254c <rt_test_001_002_execute.lto_priv.98+0x7c>)
  202500:	f7ff fde6 	bl	2020d0 <test_print>
    test_printn(CH_KERNEL_MAJOR);
  202504:	2005      	movs	r0, #5
  202506:	f7ff fd33 	bl	201f70 <test_printn>
    test_println("");
  20250a:	4620      	mov	r0, r4
  20250c:	f7ff fdc0 	bl	202090 <test_println>
    test_print("--- Minor Number:                       ");
  202510:	480f      	ldr	r0, [pc, #60]	; (202550 <rt_test_001_002_execute.lto_priv.98+0x80>)
  202512:	f7ff fddd 	bl	2020d0 <test_print>
  202516:	f7ff fcfb 	bl	201f10 <test_printn.part.0>
    test_println("");
  20251a:	4620      	mov	r0, r4
  20251c:	f7ff fdb8 	bl	202090 <test_println>
    test_print("--- Patch Number:                       ");
  202520:	480c      	ldr	r0, [pc, #48]	; (202554 <rt_test_001_002_execute.lto_priv.98+0x84>)
  202522:	f7ff fdd5 	bl	2020d0 <test_print>
  202526:	f7ff fcf3 	bl	201f10 <test_printn.part.0>
    test_println("");
  20252a:	4620      	mov	r0, r4
}
  20252c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
  202530:	f7ff bdae 	b.w	202090 <test_println>
  202534:	2000098c 	.word	0x2000098c
  202538:	0800822c 	.word	0x0800822c
  20253c:	08008118 	.word	0x08008118
  202540:	08008260 	.word	0x08008260
  202544:	0800828c 	.word	0x0800828c
  202548:	080082b8 	.word	0x080082b8
  20254c:	080082c0 	.word	0x080082c0
  202550:	080082ec 	.word	0x080082ec
  202554:	08008318 	.word	0x08008318
	...

00202560 <rt_test_001_001_execute.lto_priv.97>:
  test_set_step(1);
  202560:	4b1c      	ldr	r3, [pc, #112]	; (2025d4 <rt_test_001_001_execute.lto_priv.97+0x74>)
  202562:	2201      	movs	r2, #1
    test_print("--- Architecture:                       ");
  202564:	481c      	ldr	r0, [pc, #112]	; (2025d8 <rt_test_001_001_execute.lto_priv.97+0x78>)
static void rt_test_001_001_execute(void) {
  202566:	b510      	push	{r4, lr}
  test_set_step(1);
  202568:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
  20256a:	f7ff fdb1 	bl	2020d0 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
  20256e:	481b      	ldr	r0, [pc, #108]	; (2025dc <rt_test_001_001_execute.lto_priv.97+0x7c>)
  202570:	f7ff fd8e 	bl	202090 <test_println>
    test_print("--- Core Variant:                       ");
  202574:	481a      	ldr	r0, [pc, #104]	; (2025e0 <rt_test_001_001_execute.lto_priv.97+0x80>)
  202576:	f7ff fdab 	bl	2020d0 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
  20257a:	481a      	ldr	r0, [pc, #104]	; (2025e4 <rt_test_001_001_execute.lto_priv.97+0x84>)
  20257c:	f7ff fd88 	bl	202090 <test_println>
    test_print("--- Compiler:                           ");
  202580:	4819      	ldr	r0, [pc, #100]	; (2025e8 <rt_test_001_001_execute.lto_priv.97+0x88>)
  202582:	f7ff fda5 	bl	2020d0 <test_print>
    test_println(PORT_COMPILER_NAME);
  202586:	4819      	ldr	r0, [pc, #100]	; (2025ec <rt_test_001_001_execute.lto_priv.97+0x8c>)
  202588:	f7ff fd82 	bl	202090 <test_println>
    test_print("--- Port Info:                          ");
  20258c:	4818      	ldr	r0, [pc, #96]	; (2025f0 <rt_test_001_001_execute.lto_priv.97+0x90>)
  20258e:	f7ff fd9f 	bl	2020d0 <test_print>
    test_println(PORT_INFO);
  202592:	4818      	ldr	r0, [pc, #96]	; (2025f4 <rt_test_001_001_execute.lto_priv.97+0x94>)
    test_println("");
  202594:	4c18      	ldr	r4, [pc, #96]	; (2025f8 <rt_test_001_001_execute.lto_priv.97+0x98>)
    test_println(PORT_INFO);
  202596:	f7ff fd7b 	bl	202090 <test_println>
    test_print("--- Natural alignment:                  ");
  20259a:	4818      	ldr	r0, [pc, #96]	; (2025fc <rt_test_001_001_execute.lto_priv.97+0x9c>)
  20259c:	f7ff fd98 	bl	2020d0 <test_print>
    test_printn(PORT_NATURAL_ALIGN);
  2025a0:	2004      	movs	r0, #4
  2025a2:	f7ff fce5 	bl	201f70 <test_printn>
    test_println("");
  2025a6:	4620      	mov	r0, r4
  2025a8:	f7ff fd72 	bl	202090 <test_println>
    test_print("--- Stack alignment:                    ");
  2025ac:	4814      	ldr	r0, [pc, #80]	; (202600 <rt_test_001_001_execute.lto_priv.97+0xa0>)
  2025ae:	f7ff fd8f 	bl	2020d0 <test_print>
    test_printn(PORT_STACK_ALIGN);
  2025b2:	2008      	movs	r0, #8
  2025b4:	f7ff fcdc 	bl	201f70 <test_printn>
    test_println("");
  2025b8:	4620      	mov	r0, r4
  2025ba:	f7ff fd69 	bl	202090 <test_println>
    test_print("--- Working area alignment:             ");
  2025be:	4811      	ldr	r0, [pc, #68]	; (202604 <rt_test_001_001_execute.lto_priv.97+0xa4>)
  2025c0:	f7ff fd86 	bl	2020d0 <test_print>
    test_printn(PORT_WORKING_AREA_ALIGN);
  2025c4:	2008      	movs	r0, #8
  2025c6:	f7ff fcd3 	bl	201f70 <test_printn>
    test_println("");
  2025ca:	4620      	mov	r0, r4
}
  2025cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
  2025d0:	f7ff bd5e 	b.w	202090 <test_println>
  2025d4:	2000098c 	.word	0x2000098c
  2025d8:	08008080 	.word	0x08008080
  2025dc:	080080ac 	.word	0x080080ac
  2025e0:	080080b8 	.word	0x080080b8
  2025e4:	080080e4 	.word	0x080080e4
  2025e8:	080080f0 	.word	0x080080f0
  2025ec:	0800811c 	.word	0x0800811c
  2025f0:	08008164 	.word	0x08008164
  2025f4:	08008190 	.word	0x08008190
  2025f8:	08008118 	.word	0x08008118
  2025fc:	080081a8 	.word	0x080081a8
  202600:	080081d4 	.word	0x080081d4
  202604:	08008200 	.word	0x08008200
	...

00202610 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
  202610:	b4f0      	push	{r4, r5, r6, r7}
  202612:	4e0e      	ldr	r6, [pc, #56]	; (20264c <_test_assert_sequence+0x3c>)
  char *cp = test_tokens_buffer;
  202614:	4f0e      	ldr	r7, [pc, #56]	; (202650 <_test_assert_sequence+0x40>)
  202616:	6835      	ldr	r5, [r6, #0]
  202618:	463b      	mov	r3, r7
  20261a:	e005      	b.n	202628 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
  20261c:	f813 4b01 	ldrb.w	r4, [r3], #1
  202620:	f810 2b01 	ldrb.w	r2, [r0], #1
  202624:	4294      	cmp	r4, r2
  202626:	d106      	bne.n	202636 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
  202628:	42ab      	cmp	r3, r5
  20262a:	d3f7      	bcc.n	20261c <_test_assert_sequence+0xc>
  if (*expected)
  20262c:	7800      	ldrb	r0, [r0, #0]
  20262e:	b910      	cbnz	r0, 202636 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
  202630:	6037      	str	r7, [r6, #0]
}
  202632:	bcf0      	pop	{r4, r5, r6, r7}
  202634:	4770      	bx	lr
  test_local_fail      = true;
  202636:	2301      	movs	r3, #1
  202638:	4d06      	ldr	r5, [pc, #24]	; (202654 <_test_assert_sequence+0x44>)
  test_global_fail     = true;
  20263a:	4c07      	ldr	r4, [pc, #28]	; (202658 <_test_assert_sequence+0x48>)
  test_failure_message = msg;
  20263c:	4a07      	ldr	r2, [pc, #28]	; (20265c <_test_assert_sequence+0x4c>)
     return _test_fail(msg);
  20263e:	4618      	mov	r0, r3
  test_local_fail      = true;
  202640:	702b      	strb	r3, [r5, #0]
  test_global_fail     = true;
  202642:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
  202644:	6011      	str	r1, [r2, #0]
}
  202646:	bcf0      	pop	{r4, r5, r6, r7}
  202648:	4770      	bx	lr
  20264a:	bf00      	nop
  20264c:	200009a0 	.word	0x200009a0
  202650:	20000990 	.word	0x20000990
  202654:	20000989 	.word	0x20000989
  202658:	20000988 	.word	0x20000988
  20265c:	20000984 	.word	0x20000984

00202660 <_test_assert>:
  if (!condition)
  202660:	b950      	cbnz	r0, 202678 <_test_assert+0x18>
  test_local_fail      = true;
  202662:	2301      	movs	r3, #1
  test_failure_message = msg;
  202664:	4a05      	ldr	r2, [pc, #20]	; (20267c <_test_assert+0x1c>)
bool _test_assert(bool condition, const char *msg) {
  202666:	b430      	push	{r4, r5}
  test_local_fail      = true;
  202668:	4d05      	ldr	r5, [pc, #20]	; (202680 <_test_assert+0x20>)
    return _test_fail(msg);
  20266a:	4618      	mov	r0, r3
  test_global_fail     = true;
  20266c:	4c05      	ldr	r4, [pc, #20]	; (202684 <_test_assert+0x24>)
  test_local_fail      = true;
  20266e:	702b      	strb	r3, [r5, #0]
  test_global_fail     = true;
  202670:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
  202672:	6011      	str	r1, [r2, #0]
}
  202674:	bc30      	pop	{r4, r5}
  202676:	4770      	bx	lr
  return false;
  202678:	2000      	movs	r0, #0
  20267a:	4770      	bx	lr
  20267c:	20000984 	.word	0x20000984
  202680:	20000989 	.word	0x20000989
  202684:	20000988 	.word	0x20000988
	...

00202690 <print_line.lto_priv.83>:
static void print_line(void) {
  202690:	b570      	push	{r4, r5, r6, lr}
  202692:	244c      	movs	r4, #76	; 0x4c
  202694:	4d07      	ldr	r5, [pc, #28]	; (2026b4 <print_line.lto_priv.83+0x24>)
    streamPut(test_chp, '-');
  202696:	6828      	ldr	r0, [r5, #0]
  202698:	212d      	movs	r1, #45	; 0x2d
  20269a:	6803      	ldr	r3, [r0, #0]
  20269c:	689b      	ldr	r3, [r3, #8]
  20269e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
  2026a0:	3c01      	subs	r4, #1
  2026a2:	d1f8      	bne.n	202696 <print_line.lto_priv.83+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
  2026a4:	6828      	ldr	r0, [r5, #0]
  2026a6:	2202      	movs	r2, #2
  2026a8:	4903      	ldr	r1, [pc, #12]	; (2026b8 <print_line.lto_priv.83+0x28>)
  2026aa:	6803      	ldr	r3, [r0, #0]
}
  2026ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
  2026b0:	681b      	ldr	r3, [r3, #0]
  2026b2:	4718      	bx	r3
  2026b4:	20000980 	.word	0x20000980
  2026b8:	08007ed4 	.word	0x08007ed4
  2026bc:	00000000 	.word	0x00000000

002026c0 <_port_irq_epilogue>:
  2026c0:	2320      	movs	r3, #32
  2026c2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  2026c6:	4b0f      	ldr	r3, [pc, #60]	; (202704 <_port_irq_epilogue+0x44>)
  2026c8:	685b      	ldr	r3, [r3, #4]
  2026ca:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  2026ce:	d102      	bne.n	2026d6 <_port_irq_epilogue+0x16>
  2026d0:	f383 8811 	msr	BASEPRI, r3
  2026d4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  2026d6:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  2026da:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  2026de:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  2026e2:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  2026e6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  2026ea:	4a07      	ldr	r2, [pc, #28]	; (202708 <_port_irq_epilogue+0x48>)
  2026ec:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  2026ee:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  2026f0:	6889      	ldr	r1, [r1, #8]
  2026f2:	6892      	ldr	r2, [r2, #8]
  2026f4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  2026f6:	bf8c      	ite	hi
  2026f8:	4a04      	ldrhi	r2, [pc, #16]	; (20270c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  2026fa:	4a05      	ldrls	r2, [pc, #20]	; (202710 <_port_irq_epilogue+0x50>)
  2026fc:	f843 2c08 	str.w	r2, [r3, #-8]
  202700:	4770      	bx	lr
  202702:	bf00      	nop
  202704:	e000ed00 	.word	0xe000ed00
  202708:	20000860 	.word	0x20000860
  20270c:	00200301 	.word	0x00200301
  202710:	00200304 	.word	0x00200304
	...

00202720 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  202720:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  202724:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  202726:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20272a:	2300      	movs	r3, #0
  20272c:	f383 8811 	msr	BASEPRI, r3
  202730:	4770      	bx	lr
  202732:	bf00      	nop
	...

00202740 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
  202740:	b510      	push	{r4, lr}
  202742:	4604      	mov	r4, r0

  F_LOCK();
  202744:	4807      	ldr	r0, [pc, #28]	; (202764 <chFactoryReleaseObjectsFIFO+0x24>)
  202746:	f004 fc43 	bl	206fd0 <chMtxLock>
  dep->refs--;
  20274a:	6863      	ldr	r3, [r4, #4]
  20274c:	3b01      	subs	r3, #1
  20274e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
  202750:	b91b      	cbnz	r3, 20275a <chFactoryReleaseObjectsFIFO+0x1a>
  202752:	4620      	mov	r0, r4
  202754:	4904      	ldr	r1, [pc, #16]	; (202768 <chFactoryReleaseObjectsFIFO+0x28>)
  202756:	f7ff fbfb 	bl	201f50 <dyn_release_object_heap.part.3>

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);

  F_UNLOCK();
  20275a:	4802      	ldr	r0, [pc, #8]	; (202764 <chFactoryReleaseObjectsFIFO+0x24>)
}
  20275c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
  202760:	f004 bb96 	b.w	206e90 <chMtxUnlock>
  202764:	200008d8 	.word	0x200008d8
  202768:	20000918 	.word	0x20000918
  20276c:	00000000 	.word	0x00000000

00202770 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
  202770:	b510      	push	{r4, lr}
  202772:	4604      	mov	r4, r0
  F_LOCK();
  202774:	4807      	ldr	r0, [pc, #28]	; (202794 <chFactoryReleaseMailbox+0x24>)
  202776:	f004 fc2b 	bl	206fd0 <chMtxLock>
  dep->refs--;
  20277a:	6863      	ldr	r3, [r4, #4]
  20277c:	3b01      	subs	r3, #1
  20277e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
  202780:	b91b      	cbnz	r3, 20278a <chFactoryReleaseMailbox+0x1a>
  202782:	4620      	mov	r0, r4
  202784:	4904      	ldr	r1, [pc, #16]	; (202798 <chFactoryReleaseMailbox+0x28>)
  202786:	f7ff fbe3 	bl	201f50 <dyn_release_object_heap.part.3>
  F_UNLOCK();
  20278a:	4802      	ldr	r0, [pc, #8]	; (202794 <chFactoryReleaseMailbox+0x24>)
}
  20278c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
  202790:	f004 bb7e 	b.w	206e90 <chMtxUnlock>
  202794:	200008d8 	.word	0x200008d8
  202798:	20000914 	.word	0x20000914
  20279c:	00000000 	.word	0x00000000

002027a0 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
  2027a0:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
  2027a2:	4d17      	ldr	r5, [pc, #92]	; (202800 <chFactoryReleaseSemaphore+0x60>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
  2027a4:	4604      	mov	r4, r0
  F_LOCK();
  2027a6:	4628      	mov	r0, r5
  2027a8:	f004 fc12 	bl	206fd0 <chMtxLock>
  dep->refs--;
  2027ac:	6863      	ldr	r3, [r4, #4]
  2027ae:	3b01      	subs	r3, #1
  2027b0:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
  2027b2:	b123      	cbz	r3, 2027be <chFactoryReleaseSemaphore+0x1e>
  F_UNLOCK();
  2027b4:	4812      	ldr	r0, [pc, #72]	; (202800 <chFactoryReleaseSemaphore+0x60>)
}
  2027b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
  2027ba:	f004 bb69 	b.w	206e90 <chMtxUnlock>
  if (dep->refs == (ucnt_t)0) {
  2027be:	f105 0128 	add.w	r1, r5, #40	; 0x28
  2027c2:	460a      	mov	r2, r1
  2027c4:	e002      	b.n	2027cc <chFactoryReleaseSemaphore+0x2c>
    if (prev->next == element) {
  2027c6:	429c      	cmp	r4, r3
  2027c8:	d00a      	beq.n	2027e0 <chFactoryReleaseSemaphore+0x40>
  2027ca:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
  2027cc:	6813      	ldr	r3, [r2, #0]
  2027ce:	428b      	cmp	r3, r1
  2027d0:	d1f9      	bne.n	2027c6 <chFactoryReleaseSemaphore+0x26>
  2027d2:	2320      	movs	r3, #32
  2027d4:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
  2027d8:	2300      	movs	r3, #0
  2027da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  2027dc:	601a      	str	r2, [r3, #0]
  2027de:	deff      	udf	#255	; 0xff
      prev->next = element->next;
  2027e0:	6821      	ldr	r1, [r4, #0]
  2027e2:	2320      	movs	r3, #32
  2027e4:	6011      	str	r1, [r2, #0]
  2027e6:	f383 8811 	msr	BASEPRI, r3
  2027ea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  2027ec:	2300      	movs	r3, #0
  2027ee:	6022      	str	r2, [r4, #0]
  mp->next = php;
  2027f0:	62ec      	str	r4, [r5, #44]	; 0x2c
  2027f2:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
  2027f6:	4802      	ldr	r0, [pc, #8]	; (202800 <chFactoryReleaseSemaphore+0x60>)
}
  2027f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
  2027fc:	f004 bb48 	b.w	206e90 <chMtxUnlock>
  202800:	200008d8 	.word	0x200008d8
	...

00202810 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
  202810:	b510      	push	{r4, lr}
  202812:	4604      	mov	r4, r0
  F_LOCK();
  202814:	4807      	ldr	r0, [pc, #28]	; (202834 <chFactoryReleaseBuffer+0x24>)
  202816:	f004 fbdb 	bl	206fd0 <chMtxLock>
  dep->refs--;
  20281a:	6863      	ldr	r3, [r4, #4]
  20281c:	3b01      	subs	r3, #1
  20281e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
  202820:	b91b      	cbnz	r3, 20282a <chFactoryReleaseBuffer+0x1a>
  202822:	4620      	mov	r0, r4
  202824:	4904      	ldr	r1, [pc, #16]	; (202838 <chFactoryReleaseBuffer+0x28>)
  202826:	f7ff fb93 	bl	201f50 <dyn_release_object_heap.part.3>
  F_UNLOCK();
  20282a:	4802      	ldr	r0, [pc, #8]	; (202834 <chFactoryReleaseBuffer+0x24>)
}
  20282c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
  202830:	f004 bb2e 	b.w	206e90 <chMtxUnlock>
  202834:	200008d8 	.word	0x200008d8
  202838:	200008fc 	.word	0x200008fc
  20283c:	00000000 	.word	0x00000000

00202840 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop){
  202840:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
  202842:	4d17      	ldr	r5, [pc, #92]	; (2028a0 <chFactoryReleaseObject+0x60>)
void chFactoryReleaseObject(registered_object_t *rop){
  202844:	4604      	mov	r4, r0
  F_LOCK();
  202846:	4628      	mov	r0, r5
  202848:	f004 fbc2 	bl	206fd0 <chMtxLock>
  dep->refs--;
  20284c:	6863      	ldr	r3, [r4, #4]
  20284e:	3b01      	subs	r3, #1
  202850:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
  202852:	b123      	cbz	r3, 20285e <chFactoryReleaseObject+0x1e>
  F_UNLOCK();
  202854:	4812      	ldr	r0, [pc, #72]	; (2028a0 <chFactoryReleaseObject+0x60>)
}
  202856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
  20285a:	f004 bb19 	b.w	206e90 <chMtxUnlock>
  if (dep->refs == (ucnt_t)0) {
  20285e:	f105 0110 	add.w	r1, r5, #16
  202862:	460a      	mov	r2, r1
  202864:	e002      	b.n	20286c <chFactoryReleaseObject+0x2c>
    if (prev->next == element) {
  202866:	429c      	cmp	r4, r3
  202868:	d00a      	beq.n	202880 <chFactoryReleaseObject+0x40>
  20286a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
  20286c:	6813      	ldr	r3, [r2, #0]
  20286e:	428b      	cmp	r3, r1
  202870:	d1f9      	bne.n	202866 <chFactoryReleaseObject+0x26>
  202872:	2320      	movs	r3, #32
  202874:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
  202878:	2300      	movs	r3, #0
  20287a:	696a      	ldr	r2, [r5, #20]
  20287c:	601a      	str	r2, [r3, #0]
  20287e:	deff      	udf	#255	; 0xff
      prev->next = element->next;
  202880:	6821      	ldr	r1, [r4, #0]
  202882:	2320      	movs	r3, #32
  202884:	6011      	str	r1, [r2, #0]
  202886:	f383 8811 	msr	BASEPRI, r3
  20288a:	696a      	ldr	r2, [r5, #20]
  20288c:	2300      	movs	r3, #0
  20288e:	6022      	str	r2, [r4, #0]
  mp->next = php;
  202890:	616c      	str	r4, [r5, #20]
  202892:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
  202896:	4802      	ldr	r0, [pc, #8]	; (2028a0 <chFactoryReleaseObject+0x60>)
}
  202898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
  20289c:	f004 baf8 	b.w	206e90 <chMtxUnlock>
  2028a0:	200008d8 	.word	0x200008d8
	...

002028b0 <dyn_find_object.lto_priv.81>:
static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
  2028b0:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
  2028b2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
  2028b4:	42a1      	cmp	r1, r4
  2028b6:	d012      	beq.n	2028de <dyn_find_object.lto_priv.81+0x2e>
  2028b8:	460d      	mov	r5, r1
  2028ba:	4606      	mov	r6, r0
  2028bc:	e002      	b.n	2028c4 <dyn_find_object.lto_priv.81+0x14>
    p = p->next;
  2028be:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
  2028c0:	42a5      	cmp	r5, r4
  2028c2:	d00c      	beq.n	2028de <dyn_find_object.lto_priv.81+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
  2028c4:	2208      	movs	r2, #8
  2028c6:	4631      	mov	r1, r6
  2028c8:	18a0      	adds	r0, r4, r2
  2028ca:	f005 f9cb 	bl	207c64 <strncmp>
  2028ce:	2800      	cmp	r0, #0
  2028d0:	d1f5      	bne.n	2028be <dyn_find_object.lto_priv.81+0xe>
  if (dep != NULL) {
  2028d2:	b12c      	cbz	r4, 2028e0 <dyn_find_object.lto_priv.81+0x30>
    dep->refs++;
  2028d4:	6863      	ldr	r3, [r4, #4]
}
  2028d6:	4620      	mov	r0, r4
    dep->refs++;
  2028d8:	3301      	adds	r3, #1
  2028da:	6063      	str	r3, [r4, #4]
}
  2028dc:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
  2028de:	2400      	movs	r4, #0
}
  2028e0:	4620      	mov	r0, r4
  2028e2:	bd70      	pop	{r4, r5, r6, pc}
	...

002028f0 <dyn_create_object_heap.lto_priv.82>:
                                             size_t size) {
  2028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
  2028f2:	680c      	ldr	r4, [r1, #0]
                                             size_t size) {
  2028f4:	460d      	mov	r5, r1
  2028f6:	4606      	mov	r6, r0
  2028f8:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
  2028fa:	42a1      	cmp	r1, r4
  2028fc:	d103      	bne.n	202906 <dyn_create_object_heap.lto_priv.82+0x16>
  2028fe:	e00b      	b.n	202918 <dyn_create_object_heap.lto_priv.82+0x28>
    p = p->next;
  202900:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
  202902:	42a5      	cmp	r5, r4
  202904:	d008      	beq.n	202918 <dyn_create_object_heap.lto_priv.82+0x28>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
  202906:	2208      	movs	r2, #8
  202908:	4631      	mov	r1, r6
  20290a:	18a0      	adds	r0, r4, r2
  20290c:	f005 f9aa 	bl	207c64 <strncmp>
  202910:	2800      	cmp	r0, #0
  202912:	d1f5      	bne.n	202900 <dyn_create_object_heap.lto_priv.82+0x10>
  if (dep != NULL) {
  202914:	b104      	cbz	r4, 202918 <dyn_create_object_heap.lto_priv.82+0x28>
}
  202916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
  202918:	4639      	mov	r1, r7
  20291a:	2000      	movs	r0, #0
  20291c:	f7fd ff10 	bl	200740 <chHeapAllocAligned.constprop.33>
  if (dep == NULL) {
  202920:	4604      	mov	r4, r0
  202922:	b158      	cbz	r0, 20293c <dyn_create_object_heap.lto_priv.82+0x4c>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
  202924:	2208      	movs	r2, #8
  202926:	4631      	mov	r1, r6
  202928:	4410      	add	r0, r2
  20292a:	f005 f9ed 	bl	207d08 <strncpy>
  dep->next = dlp->next;
  20292e:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
  202930:	2201      	movs	r2, #1
  dlp->next = dep;
  202932:	4620      	mov	r0, r4
  dep->next = dlp->next;
  202934:	6023      	str	r3, [r4, #0]
  dep->refs = (ucnt_t)1;
  202936:	6062      	str	r2, [r4, #4]
  dlp->next = dep;
  202938:	602c      	str	r4, [r5, #0]
  20293a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20293c:	e7eb      	b.n	202916 <dyn_create_object_heap.lto_priv.82+0x26>
  20293e:	bf00      	nop

00202940 <chPoolAlloc>:
void *chPoolAlloc(memory_pool_t *mp) {
  202940:	b508      	push	{r3, lr}
  202942:	2220      	movs	r2, #32
  202944:	4603      	mov	r3, r0
  202946:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
  20294a:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
  20294c:	b128      	cbz	r0, 20295a <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
  20294e:	6802      	ldr	r2, [r0, #0]
  202950:	601a      	str	r2, [r3, #0]
  202952:	2300      	movs	r3, #0
  202954:	f383 8811 	msr	BASEPRI, r3
}
  202958:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
  20295a:	68da      	ldr	r2, [r3, #12]
  20295c:	2a00      	cmp	r2, #0
  20295e:	d0f8      	beq.n	202952 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
  202960:	6899      	ldr	r1, [r3, #8]
  202962:	6858      	ldr	r0, [r3, #4]
  202964:	4790      	blx	r2
  202966:	2300      	movs	r3, #0
  202968:	f383 8811 	msr	BASEPRI, r3
}
  20296c:	bd08      	pop	{r3, pc}
  20296e:	bf00      	nop

00202970 <dyn_create_object_pool.lto_priv.80>:
                                             memory_pool_t *mp) {
  202970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
  202972:	680c      	ldr	r4, [r1, #0]
                                             memory_pool_t *mp) {
  202974:	460d      	mov	r5, r1
  202976:	4606      	mov	r6, r0
  202978:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
  20297a:	42a1      	cmp	r1, r4
  20297c:	d103      	bne.n	202986 <dyn_create_object_pool.lto_priv.80+0x16>
  20297e:	e00d      	b.n	20299c <dyn_create_object_pool.lto_priv.80+0x2c>
    p = p->next;
  202980:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
  202982:	42a5      	cmp	r5, r4
  202984:	d00a      	beq.n	20299c <dyn_create_object_pool.lto_priv.80+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
  202986:	2208      	movs	r2, #8
  202988:	4631      	mov	r1, r6
  20298a:	18a0      	adds	r0, r4, r2
  20298c:	f005 f96a 	bl	207c64 <strncmp>
  202990:	2800      	cmp	r0, #0
  202992:	d1f5      	bne.n	202980 <dyn_create_object_pool.lto_priv.80+0x10>
  if (dep != NULL) {
  202994:	b114      	cbz	r4, 20299c <dyn_create_object_pool.lto_priv.80+0x2c>
    return NULL;
  202996:	4604      	mov	r4, r0
}
  202998:	4620      	mov	r0, r4
  20299a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
  20299c:	4638      	mov	r0, r7
  20299e:	f7ff ffcf 	bl	202940 <chPoolAlloc>
  if (dep == NULL) {
  2029a2:	4604      	mov	r4, r0
  2029a4:	2800      	cmp	r0, #0
  2029a6:	d0f7      	beq.n	202998 <dyn_create_object_pool.lto_priv.80+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
  2029a8:	2208      	movs	r2, #8
  2029aa:	4631      	mov	r1, r6
  2029ac:	4410      	add	r0, r2
  2029ae:	f005 f9ab 	bl	207d08 <strncpy>
  dep->next = dlp->next;
  2029b2:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
  2029b4:	2201      	movs	r2, #1
}
  2029b6:	4620      	mov	r0, r4
  dep->next = dlp->next;
  2029b8:	6023      	str	r3, [r4, #0]
  dep->refs = (ucnt_t)1;
  2029ba:	6062      	str	r2, [r4, #4]
  dlp->next = (dyn_element_t *)dep;
  2029bc:	602c      	str	r4, [r5, #0]
}
  2029be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

002029c0 <chHeapStatus>:
 *                      free free block found space or @ NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
  2029c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
  2029c4:	4c15      	ldr	r4, [pc, #84]	; (202a1c <chHeapStatus+0x5c>)
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
  2029c6:	4688      	mov	r8, r1
  2029c8:	4617      	mov	r7, r2
    heapp = &default_heap;
  2029ca:	2800      	cmp	r0, #0
  2029cc:	bf18      	it	ne
  2029ce:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
  2029d0:	f104 090c 	add.w	r9, r4, #12
  2029d4:	4648      	mov	r0, r9
  2029d6:	f004 fafb 	bl	206fd0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
  2029da:	6863      	ldr	r3, [r4, #4]
  2029dc:	b1d3      	cbz	r3, 202a14 <chHeapStatus+0x54>
  2029de:	2400      	movs	r4, #0
  2029e0:	4625      	mov	r5, r4
  2029e2:	4626      	mov	r6, r4
    size_t pages = H_PAGES(H_NEXT(qp));
  2029e4:	6858      	ldr	r0, [r3, #4]

    /* Updating counters.*/
    n++;
  2029e6:	3601      	adds	r6, #1
  while (H_NEXT(qp) != NULL) {
  2029e8:	681b      	ldr	r3, [r3, #0]
  2029ea:	4284      	cmp	r4, r0
    tpages += pages;
  2029ec:	4405      	add	r5, r0
  2029ee:	bf38      	it	cc
  2029f0:	4604      	movcc	r4, r0
  while (H_NEXT(qp) != NULL) {
  2029f2:	2b00      	cmp	r3, #0
  2029f4:	d1f6      	bne.n	2029e4 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
  2029f6:	f1b8 0f00 	cmp.w	r8, #0
  2029fa:	d002      	beq.n	202a02 <chHeapStatus+0x42>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
  2029fc:	00ed      	lsls	r5, r5, #3
  2029fe:	f8c8 5000 	str.w	r5, [r8]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
  202a02:	b10f      	cbz	r7, 202a08 <chHeapStatus+0x48>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
  202a04:	00e4      	lsls	r4, r4, #3
  202a06:	603c      	str	r4, [r7, #0]
  }
  H_UNLOCK(heapp);
  202a08:	4648      	mov	r0, r9
  202a0a:	f004 fa41 	bl	206e90 <chMtxUnlock>

  return n;
}
  202a0e:	4630      	mov	r0, r6
  202a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  lpages = 0U;
  202a14:	461c      	mov	r4, r3
  tpages = 0U;
  202a16:	461d      	mov	r5, r3
  n = 0U;
  202a18:	461e      	mov	r6, r3
  202a1a:	e7ec      	b.n	2029f6 <chHeapStatus+0x36>
  202a1c:	2000091c 	.word	0x2000091c

00202a20 <oslib_test_003_001_setup.lto_priv.185>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
  202a20:	4b0b      	ldr	r3, [pc, #44]	; (202a50 <oslib_test_003_001_setup.lto_priv.185+0x30>)
  heapp->provider = NULL;
  202a22:	2000      	movs	r0, #0
  202a24:	4a0b      	ldr	r2, [pc, #44]	; (202a54 <oslib_test_003_001_setup.lto_priv.185+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
  202a26:	1dd9      	adds	r1, r3, #7
  202a28:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  202a2c:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
  202a2e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [3.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_003_001_setup(void) {
  202a32:	b410      	push	{r4}
  202a34:	08db      	lsrs	r3, r3, #3
  tqp->next = (thread_t *)tqp;
  202a36:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(&heapp->header) = 0;
  202a3a:	6090      	str	r0, [r2, #8]
  H_NEXT(&heapp->header) = hp;
  202a3c:	6051      	str	r1, [r2, #4]
  202a3e:	6150      	str	r0, [r2, #20]
  heapp->provider = NULL;
  202a40:	6010      	str	r0, [r2, #0]
  H_NEXT(hp) = NULL;
  202a42:	6008      	str	r0, [r1, #0]
  202a44:	60d4      	str	r4, [r2, #12]
  tqp->prev = (thread_t *)tqp;
  202a46:	6114      	str	r4, [r2, #16]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
  202a48:	604b      	str	r3, [r1, #4]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
  202a4a:	bc10      	pop	{r4}
  202a4c:	4770      	bx	lr
  202a4e:	bf00      	nop
  202a50:	200009d0 	.word	0x200009d0
  202a54:	200009b4 	.word	0x200009b4
	...

00202a60 <oslib_test_002_003_setup.lto_priv.183>:
  mp->next = NULL;
  202a60:	4b05      	ldr	r3, [pc, #20]	; (202a78 <oslib_test_002_003_setup.lto_priv.183+0x18>)
  202a62:	2200      	movs	r2, #0
  mp->object_size = size;
  202a64:	2104      	movs	r1, #4
  tqp->next = (thread_t *)tqp;
  202a66:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  202a68:	605b      	str	r3, [r3, #4]
  mp->next = NULL;
  202a6a:	60da      	str	r2, [r3, #12]
  mp->provider = provider;
  202a6c:	619a      	str	r2, [r3, #24]
  202a6e:	609a      	str	r2, [r3, #8]
  mp->object_size = size;
  202a70:	6119      	str	r1, [r3, #16]
  mp->align = align;
  202a72:	6159      	str	r1, [r3, #20]
  202a74:	4770      	bx	lr
  202a76:	bf00      	nop
  202a78:	20020008 	.word	0x20020008
  202a7c:	00000000 	.word	0x00000000

00202a80 <oslib_test_002_002_setup.lto_priv.181>:
  202a80:	f7ff bfee 	b.w	202a60 <oslib_test_002_003_setup.lto_priv.183>
	...

00202a90 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
  202a90:	2000      	movs	r0, #0
  202a92:	4770      	bx	lr
	...

00202aa0 <oslib_test_002_001_setup.lto_priv.179>:
  mp->next = NULL;
  202aa0:	4b03      	ldr	r3, [pc, #12]	; (202ab0 <oslib_test_002_001_setup.lto_priv.179+0x10>)
  202aa2:	2100      	movs	r1, #0
  mp->object_size = size;
  202aa4:	2204      	movs	r2, #4
  mp->next = NULL;
  202aa6:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
  202aa8:	60d9      	str	r1, [r3, #12]
  mp->object_size = size;
  202aaa:	605a      	str	r2, [r3, #4]
  mp->align = align;
  202aac:	609a      	str	r2, [r3, #8]
  202aae:	4770      	bx	lr
  202ab0:	20020074 	.word	0x20020074
	...

00202ac0 <oslib_test_001_003_setup.lto_priv.176>:
  mbp->buffer = buf;
  202ac0:	4b0a      	ldr	r3, [pc, #40]	; (202aec <oslib_test_001_003_setup.lto_priv.176+0x2c>)
  mbp->cnt    = (size_t)0;
  202ac2:	2100      	movs	r1, #0
  mbp->buffer = buf;
  202ac4:	4a0a      	ldr	r2, [pc, #40]	; (202af0 <oslib_test_001_003_setup.lto_priv.176+0x30>)
  tqp->next = (thread_t *)tqp;
  202ac6:	f103 0020 	add.w	r0, r3, #32
 *   active state.
 * - [1.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_001_003_setup(void) {
  202aca:	b430      	push	{r4, r5}
  202acc:	f103 0418 	add.w	r4, r3, #24
  mbp->top    = &buf[n];
  202ad0:	f102 0510 	add.w	r5, r2, #16
  mbp->buffer = buf;
  202ad4:	601a      	str	r2, [r3, #0]
  mbp->top    = &buf[n];
  202ad6:	605d      	str	r5, [r3, #4]
  202ad8:	619c      	str	r4, [r3, #24]
  tqp->prev = (thread_t *)tqp;
  202ada:	61dc      	str	r4, [r3, #28]
  mbp->rdptr  = buf;
  202adc:	60da      	str	r2, [r3, #12]
  mbp->wrptr  = buf;
  202ade:	609a      	str	r2, [r3, #8]
  tqp->next = (thread_t *)tqp;
  202ae0:	6218      	str	r0, [r3, #32]
  tqp->prev = (thread_t *)tqp;
  202ae2:	6258      	str	r0, [r3, #36]	; 0x24
  mbp->cnt    = (size_t)0;
  202ae4:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
  202ae6:	7519      	strb	r1, [r3, #20]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
  202ae8:	bc30      	pop	{r4, r5}
  202aea:	4770      	bx	lr
  202aec:	20020034 	.word	0x20020034
  202af0:	20000954 	.word	0x20000954
	...

00202b00 <oslib_test_004_001_execute.lto_priv.189>:
      chFactoryReleaseObject(rop);
    }
  }
}

static void oslib_test_004_001_execute(void) {
  202b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  registered_object_t *rop;

  /* [4.1.1] Retrieving a registered object by name, must not exist.*/
  test_set_step(1);
  202b04:	4c51      	ldr	r4, [pc, #324]	; (202c4c <oslib_test_004_001_execute.lto_priv.189+0x14c>)
  202b06:	2501      	movs	r5, #1
  202b08:	6025      	str	r5, [r4, #0]
  {
    rop = chFactoryFindObject("myobj");
  202b0a:	f7fe f8a1 	bl	200c50 <chFactoryFindObject.constprop.11>
    test_assert(rop == NULL, "found");
  202b0e:	fab0 f080 	clz	r0, r0
  202b12:	494f      	ldr	r1, [pc, #316]	; (202c50 <oslib_test_004_001_execute.lto_priv.189+0x150>)
  202b14:	0940      	lsrs	r0, r0, #5
  202b16:	f7ff fda3 	bl	202660 <_test_assert>
  202b1a:	b108      	cbz	r0, 202b20 <oslib_test_004_001_execute.lto_priv.189+0x20>
  202b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* [4.1.2] Registering an object, it must not exists, must succeed.*/
  test_set_step(2);
  202b20:	2302      	movs	r3, #2
  {
    static uint32_t myobj = 0x55aa;

    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
  202b22:	484c      	ldr	r0, [pc, #304]	; (202c54 <oslib_test_004_001_execute.lto_priv.189+0x154>)
  test_set_step(2);
  202b24:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
  202b26:	f7fe f87b 	bl	200c20 <chFactoryRegisterObject.constprop.12>
    test_assert(rop != NULL, "cannot register");
  202b2a:	4606      	mov	r6, r0
  202b2c:	3000      	adds	r0, #0
  202b2e:	494a      	ldr	r1, [pc, #296]	; (202c58 <oslib_test_004_001_execute.lto_priv.189+0x158>)
  202b30:	bf18      	it	ne
  202b32:	2001      	movne	r0, #1
  202b34:	f7ff fd94 	bl	202660 <_test_assert>
  202b38:	2800      	cmp	r0, #0
  202b3a:	d1ef      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>
  }

  /* [4.1.3] Registering an object with the same name, must fail.*/
  test_set_step(3);
  202b3c:	2303      	movs	r3, #3
  {
    registered_object_t *rop1;
    static uint32_t myobj = 0x55aa;

    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
  202b3e:	4847      	ldr	r0, [pc, #284]	; (202c5c <oslib_test_004_001_execute.lto_priv.189+0x15c>)
  test_set_step(3);
  202b40:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
  202b42:	f7fe f86d 	bl	200c20 <chFactoryRegisterObject.constprop.12>
    test_assert(rop1 == NULL, "can register");
  202b46:	fab0 f080 	clz	r0, r0
  202b4a:	4945      	ldr	r1, [pc, #276]	; (202c60 <oslib_test_004_001_execute.lto_priv.189+0x160>)
  202b4c:	0940      	lsrs	r0, r0, #5
  202b4e:	f7ff fd87 	bl	202660 <_test_assert>
  202b52:	2800      	cmp	r0, #0
  202b54:	d1e2      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>
  }

  /* [4.1.4] Retrieving the registered object by name, must exist, then
     increasing the reference counter, finally releasing both
     references.*/
  test_set_step(4);
  202b56:	2304      	movs	r3, #4
  202b58:	6023      	str	r3, [r4, #0]
  {
    registered_object_t *rop1, *rop2;

    rop1 = chFactoryFindObject("myobj");
  202b5a:	f7fe f879 	bl	200c50 <chFactoryFindObject.constprop.11>
    test_assert(rop1 != NULL, "not found");
  202b5e:	4607      	mov	r7, r0
  202b60:	3000      	adds	r0, #0
  202b62:	4940      	ldr	r1, [pc, #256]	; (202c64 <oslib_test_004_001_execute.lto_priv.189+0x164>)
  202b64:	bf18      	it	ne
  202b66:	2001      	movne	r0, #1
  202b68:	f7ff fd7a 	bl	202660 <_test_assert>
  202b6c:	2800      	cmp	r0, #0
  202b6e:	d1d5      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
  202b70:	693b      	ldr	r3, [r7, #16]
  202b72:	f245 58aa 	movw	r8, #21930	; 0x55aa
  202b76:	493c      	ldr	r1, [pc, #240]	; (202c68 <oslib_test_004_001_execute.lto_priv.189+0x168>)
  202b78:	6818      	ldr	r0, [r3, #0]
  202b7a:	eba0 0008 	sub.w	r0, r0, r8
  202b7e:	fab0 f080 	clz	r0, r0
  202b82:	0940      	lsrs	r0, r0, #5
  202b84:	f7ff fd6c 	bl	202660 <_test_assert>
  202b88:	2800      	cmp	r0, #0
  202b8a:	d1c7      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
  202b8c:	1bf0      	subs	r0, r6, r7
  202b8e:	4937      	ldr	r1, [pc, #220]	; (202c6c <oslib_test_004_001_execute.lto_priv.189+0x16c>)
  202b90:	fab0 f080 	clz	r0, r0
  202b94:	0940      	lsrs	r0, r0, #5
  202b96:	f7ff fd63 	bl	202660 <_test_assert>
  202b9a:	2800      	cmp	r0, #0
  202b9c:	d1be      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
  202b9e:	6878      	ldr	r0, [r7, #4]
  202ba0:	4932      	ldr	r1, [pc, #200]	; (202c6c <oslib_test_004_001_execute.lto_priv.189+0x16c>)
  202ba2:	f1a0 0002 	sub.w	r0, r0, #2
  202ba6:	fab0 f080 	clz	r0, r0
  202baa:	0940      	lsrs	r0, r0, #5
  202bac:	f7ff fd58 	bl	202660 <_test_assert>
  202bb0:	2800      	cmp	r0, #0
  202bb2:	d1b3      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
  202bb4:	687b      	ldr	r3, [r7, #4]

    rop2 = (registered_object_t *)chFactoryDuplicateReference(&rop1->element);
    test_assert(rop1 == rop2, "object reference mismatch");
  202bb6:	4628      	mov	r0, r5
  202bb8:	492c      	ldr	r1, [pc, #176]	; (202c6c <oslib_test_004_001_execute.lto_priv.189+0x16c>)
  202bba:	442b      	add	r3, r5
  202bbc:	607b      	str	r3, [r7, #4]
  202bbe:	f7ff fd4f 	bl	202660 <_test_assert>
  202bc2:	2800      	cmp	r0, #0
  202bc4:	d1aa      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
  202bc6:	693b      	ldr	r3, [r7, #16]
  202bc8:	4927      	ldr	r1, [pc, #156]	; (202c68 <oslib_test_004_001_execute.lto_priv.189+0x168>)
  202bca:	6818      	ldr	r0, [r3, #0]
  202bcc:	eba0 0c08 	sub.w	ip, r0, r8
  202bd0:	f1dc 0000 	rsbs	r0, ip, #0
  202bd4:	eb40 000c 	adc.w	r0, r0, ip
  202bd8:	f7ff fd42 	bl	202660 <_test_assert>
  202bdc:	2800      	cmp	r0, #0
  202bde:	d19d      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
  202be0:	6878      	ldr	r0, [r7, #4]
  202be2:	4922      	ldr	r1, [pc, #136]	; (202c6c <oslib_test_004_001_execute.lto_priv.189+0x16c>)
  202be4:	f1a0 0e03 	sub.w	lr, r0, #3
  202be8:	f1de 0000 	rsbs	r0, lr, #0
  202bec:	eb40 000e 	adc.w	r0, r0, lr
  202bf0:	f7ff fd36 	bl	202660 <_test_assert>
  202bf4:	2800      	cmp	r0, #0
  202bf6:	d191      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>

    chFactoryReleaseObject(rop2);
  202bf8:	4638      	mov	r0, r7
  202bfa:	f7ff fe21 	bl	202840 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
  202bfe:	6878      	ldr	r0, [r7, #4]
  202c00:	491b      	ldr	r1, [pc, #108]	; (202c70 <oslib_test_004_001_execute.lto_priv.189+0x170>)
  202c02:	1e82      	subs	r2, r0, #2
  202c04:	4250      	negs	r0, r2
  202c06:	4150      	adcs	r0, r2
  202c08:	f7ff fd2a 	bl	202660 <_test_assert>
  202c0c:	2800      	cmp	r0, #0
  202c0e:	d185      	bne.n	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>

    chFactoryReleaseObject(rop1);
  202c10:	4638      	mov	r0, r7
  202c12:	f7ff fe15 	bl	202840 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
  202c16:	6870      	ldr	r0, [r6, #4]
  202c18:	4915      	ldr	r1, [pc, #84]	; (202c70 <oslib_test_004_001_execute.lto_priv.189+0x170>)
  202c1a:	1b43      	subs	r3, r0, r5
  202c1c:	4258      	negs	r0, r3
  202c1e:	4158      	adcs	r0, r3
  202c20:	f7ff fd1e 	bl	202660 <_test_assert>
  202c24:	2800      	cmp	r0, #0
  202c26:	f47f af79 	bne.w	202b1c <oslib_test_004_001_execute.lto_priv.189+0x1c>
  }

  /* [4.1.5] Releasing the first reference to the object, must not
     trigger an assertion.*/
  test_set_step(5);
  202c2a:	2305      	movs	r3, #5
  {
    chFactoryReleaseObject(rop);
  202c2c:	4630      	mov	r0, r6
  test_set_step(5);
  202c2e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
  202c30:	f7ff fe06 	bl	202840 <chFactoryReleaseObject>
  }

  /* [4.1.6] Retrieving the registered object by name again, must not
     exist.*/
  test_set_step(6);
  202c34:	2306      	movs	r3, #6
  202c36:	6023      	str	r3, [r4, #0]
  {
    rop = chFactoryFindObject("myobj");
  202c38:	f7fe f80a 	bl	200c50 <chFactoryFindObject.constprop.11>
    test_assert(rop == NULL, "found");
  202c3c:	fab0 f080 	clz	r0, r0
  202c40:	4903      	ldr	r1, [pc, #12]	; (202c50 <oslib_test_004_001_execute.lto_priv.189+0x150>)
  202c42:	0940      	lsrs	r0, r0, #5
  }
}
  202c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
  202c48:	f7ff bd0a 	b.w	202660 <_test_assert>
  202c4c:	2000098c 	.word	0x2000098c
  202c50:	08008c70 	.word	0x08008c70
  202c54:	20020084 	.word	0x20020084
  202c58:	08008c4c 	.word	0x08008c4c
  202c5c:	20020088 	.word	0x20020088
  202c60:	08008c5c 	.word	0x08008c5c
  202c64:	08008c6c 	.word	0x08008c6c
  202c68:	08008c78 	.word	0x08008c78
  202c6c:	08008c88 	.word	0x08008c88
  202c70:	08008ca4 	.word	0x08008ca4
	...

00202c80 <oslib_test_004_001_teardown.lto_priv.188>:
static void oslib_test_004_001_teardown(void) {
  202c80:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
  202c82:	f7fd ffe5 	bl	200c50 <chFactoryFindObject.constprop.11>
  if (rop != NULL) {
  202c86:	b140      	cbz	r0, 202c9a <oslib_test_004_001_teardown.lto_priv.188+0x1a>
    while (rop->element.refs > 0U) {
  202c88:	6843      	ldr	r3, [r0, #4]
  202c8a:	4604      	mov	r4, r0
  202c8c:	b12b      	cbz	r3, 202c9a <oslib_test_004_001_teardown.lto_priv.188+0x1a>
      chFactoryReleaseObject(rop);
  202c8e:	4620      	mov	r0, r4
  202c90:	f7ff fdd6 	bl	202840 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
  202c94:	6863      	ldr	r3, [r4, #4]
  202c96:	2b00      	cmp	r3, #0
  202c98:	d1f9      	bne.n	202c8e <oslib_test_004_001_teardown.lto_priv.188+0xe>
  202c9a:	bd10      	pop	{r4, pc}
  202c9c:	0000      	movs	r0, r0
	...

00202ca0 <oslib_test_003_002_execute.lto_priv.187>:
 *   is freed using chHeapFree(), must not fail.
 * - [3.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_003_002_execute(void) {
  202ca0:	b570      	push	{r4, r5, r6, lr}
  202ca2:	b082      	sub	sp, #8
  void *p1;
  size_t total_size, largest_size;

  /* [3.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
  202ca4:	2301      	movs	r3, #1
  202ca6:	4c13      	ldr	r4, [pc, #76]	; (202cf4 <oslib_test_003_002_execute.lto_priv.187+0x54>)
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
  202ca8:	2000      	movs	r0, #0
  202caa:	466a      	mov	r2, sp
  202cac:	a901      	add	r1, sp, #4
  test_set_step(1);
  202cae:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
  202cb0:	f7ff fe86 	bl	2029c0 <chHeapStatus>
  202cb4:	2110      	movs	r1, #16
  202cb6:	4810      	ldr	r0, [pc, #64]	; (202cf8 <oslib_test_003_002_execute.lto_priv.187+0x58>)
  202cb8:	f7fd fd42 	bl	200740 <chHeapAllocAligned.constprop.33>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
  202cbc:	4606      	mov	r6, r0
  202cbe:	3000      	adds	r0, #0
  202cc0:	490e      	ldr	r1, [pc, #56]	; (202cfc <oslib_test_003_002_execute.lto_priv.187+0x5c>)
  202cc2:	bf18      	it	ne
  202cc4:	2001      	movne	r0, #1
  202cc6:	f7ff fccb 	bl	202660 <_test_assert>
  202cca:	b980      	cbnz	r0, 202cee <oslib_test_003_002_execute.lto_priv.187+0x4e>
  202ccc:	4605      	mov	r5, r0
    chHeapFree(p1);
  202cce:	4630      	mov	r0, r6
  202cd0:	f004 f98e 	bl	206ff0 <chHeapFree>
  }

  /* [3.2.2] Testing allocation failure.*/
  test_set_step(2);
  202cd4:	2302      	movs	r3, #2
  202cd6:	f06f 01ff 	mvn.w	r1, #255	; 0xff
  202cda:	4628      	mov	r0, r5
  202cdc:	6023      	str	r3, [r4, #0]
  202cde:	f7fd fd2f 	bl	200740 <chHeapAllocAligned.constprop.33>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  202ce2:	fab0 f080 	clz	r0, r0
  202ce6:	4906      	ldr	r1, [pc, #24]	; (202d00 <oslib_test_003_002_execute.lto_priv.187+0x60>)
  202ce8:	0940      	lsrs	r0, r0, #5
  202cea:	f7ff fcb9 	bl	202660 <_test_assert>
  }
}
  202cee:	b002      	add	sp, #8
  202cf0:	bd70      	pop	{r4, r5, r6, pc}
  202cf2:	bf00      	nop
  202cf4:	2000098c 	.word	0x2000098c
  202cf8:	200009b4 	.word	0x200009b4
  202cfc:	08008c20 	.word	0x08008c20
  202d00:	08008c34 	.word	0x08008c34
	...

00202d10 <oslib_test_003_001_execute.lto_priv.186>:
static void oslib_test_003_001_execute(void) {
  202d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  202d14:	b084      	sub	sp, #16
  test_set_step(1);
  202d16:	2301      	movs	r3, #1
  202d18:	4cbf      	ldr	r4, [pc, #764]	; (203018 <oslib_test_003_001_execute.lto_priv.186+0x308>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
  202d1a:	2200      	movs	r2, #0
  202d1c:	4669      	mov	r1, sp
  202d1e:	48bf      	ldr	r0, [pc, #764]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  test_set_step(1);
  202d20:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
  202d22:	f7ff fe4d 	bl	2029c0 <chHeapStatus>
  202d26:	f1a0 0001 	sub.w	r0, r0, #1
  202d2a:	49bd      	ldr	r1, [pc, #756]	; (203020 <oslib_test_003_001_execute.lto_priv.186+0x310>)
  202d2c:	fab0 f080 	clz	r0, r0
  202d30:	0940      	lsrs	r0, r0, #5
  202d32:	f7ff fc95 	bl	202660 <_test_assert>
  202d36:	b110      	cbz	r0, 202d3e <oslib_test_003_001_execute.lto_priv.186+0x2e>
}
  202d38:	b004      	add	sp, #16
  202d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
  202d3e:	2302      	movs	r3, #2
  202d40:	f44f 7180 	mov.w	r1, #256	; 0x100
  202d44:	48b5      	ldr	r0, [pc, #724]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202d46:	6023      	str	r3, [r4, #0]
  202d48:	f7fd fcfa 	bl	200740 <chHeapAllocAligned.constprop.33>
    test_assert(p1 == NULL, "allocation not failed");
  202d4c:	fab0 f080 	clz	r0, r0
  202d50:	49b4      	ldr	r1, [pc, #720]	; (203024 <oslib_test_003_001_execute.lto_priv.186+0x314>)
  202d52:	0940      	lsrs	r0, r0, #5
  202d54:	f7ff fc84 	bl	202660 <_test_assert>
  202d58:	2800      	cmp	r0, #0
  202d5a:	d1ed      	bne.n	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
  test_set_step(3);
  202d5c:	2303      	movs	r3, #3
  202d5e:	2110      	movs	r1, #16
  202d60:	48ae      	ldr	r0, [pc, #696]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202d62:	6023      	str	r3, [r4, #0]
  202d64:	f7fd fcec 	bl	200740 <chHeapAllocAligned.constprop.33>
    test_assert(p1 != NULL, "allocation failed");
  202d68:	4605      	mov	r5, r0
  202d6a:	3000      	adds	r0, #0
  202d6c:	49ae      	ldr	r1, [pc, #696]	; (203028 <oslib_test_003_001_execute.lto_priv.186+0x318>)
  202d6e:	bf18      	it	ne
  202d70:	2001      	movne	r0, #1
  202d72:	f7ff fc75 	bl	202660 <_test_assert>
  202d76:	2800      	cmp	r0, #0
  202d78:	d1de      	bne.n	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
    chHeapFree(p1);
  202d7a:	4628      	mov	r0, r5
  202d7c:	f004 f938 	bl	206ff0 <chHeapFree>
  test_set_step(4);
  202d80:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
  202d82:	a902      	add	r1, sp, #8
  202d84:	aa03      	add	r2, sp, #12
  202d86:	48a5      	ldr	r0, [pc, #660]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  test_set_step(4);
  202d88:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
  202d8a:	f7ff fe19 	bl	2029c0 <chHeapStatus>
  202d8e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
  202d90:	f1a0 0001 	sub.w	r0, r0, #1
  202d94:	49a5      	ldr	r1, [pc, #660]	; (20302c <oslib_test_003_001_execute.lto_priv.186+0x31c>)
  202d96:	fab0 f080 	clz	r0, r0
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
  202d9a:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
  202d9c:	0940      	lsrs	r0, r0, #5
  202d9e:	f7ff fc5f 	bl	202660 <_test_assert>
  202da2:	2800      	cmp	r0, #0
  202da4:	d1c8      	bne.n	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
  202da6:	9802      	ldr	r0, [sp, #8]
  202da8:	49a1      	ldr	r1, [pc, #644]	; (203030 <oslib_test_003_001_execute.lto_priv.186+0x320>)
  202daa:	280f      	cmp	r0, #15
  202dac:	bf94      	ite	ls
  202dae:	2000      	movls	r0, #0
  202db0:	2001      	movhi	r0, #1
  202db2:	f7ff fc55 	bl	202660 <_test_assert>
  202db6:	2800      	cmp	r0, #0
  202db8:	d1be      	bne.n	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
  202dba:	9802      	ldr	r0, [sp, #8]
  202dbc:	9b03      	ldr	r3, [sp, #12]
  202dbe:	499c      	ldr	r1, [pc, #624]	; (203030 <oslib_test_003_001_execute.lto_priv.186+0x320>)
  202dc0:	1ac0      	subs	r0, r0, r3
  202dc2:	fab0 f080 	clz	r0, r0
  202dc6:	0940      	lsrs	r0, r0, #5
  202dc8:	f7ff fc4a 	bl	202660 <_test_assert>
  202dcc:	4605      	mov	r5, r0
  202dce:	2800      	cmp	r0, #0
  202dd0:	d1b2      	bne.n	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
  test_set_step(5);
  202dd2:	2305      	movs	r3, #5
  202dd4:	2110      	movs	r1, #16
  202dd6:	4891      	ldr	r0, [pc, #580]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202dd8:	6023      	str	r3, [r4, #0]
  202dda:	f7fd fcb1 	bl	200740 <chHeapAllocAligned.constprop.33>
  202dde:	2110      	movs	r1, #16
  202de0:	4680      	mov	r8, r0
  202de2:	488e      	ldr	r0, [pc, #568]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202de4:	f7fd fcac 	bl	200740 <chHeapAllocAligned.constprop.33>
  202de8:	2110      	movs	r1, #16
  202dea:	4607      	mov	r7, r0
  202dec:	488b      	ldr	r0, [pc, #556]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202dee:	f7fd fca7 	bl	200740 <chHeapAllocAligned.constprop.33>
  202df2:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
  202df4:	4640      	mov	r0, r8
  202df6:	f004 f8fb 	bl	206ff0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
  202dfa:	4638      	mov	r0, r7
  202dfc:	f004 f8f8 	bl	206ff0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
  202e00:	4630      	mov	r0, r6
  202e02:	f004 f8f5 	bl	206ff0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  202e06:	462a      	mov	r2, r5
  202e08:	a901      	add	r1, sp, #4
  202e0a:	4884      	ldr	r0, [pc, #528]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202e0c:	f7ff fdd8 	bl	2029c0 <chHeapStatus>
  202e10:	f1a0 0001 	sub.w	r0, r0, #1
  202e14:	4982      	ldr	r1, [pc, #520]	; (203020 <oslib_test_003_001_execute.lto_priv.186+0x310>)
  202e16:	fab0 f080 	clz	r0, r0
  202e1a:	0940      	lsrs	r0, r0, #5
  202e1c:	f7ff fc20 	bl	202660 <_test_assert>
  202e20:	4605      	mov	r5, r0
  202e22:	2800      	cmp	r0, #0
  202e24:	d188      	bne.n	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
  test_set_step(6);
  202e26:	2306      	movs	r3, #6
  202e28:	2110      	movs	r1, #16
  202e2a:	487c      	ldr	r0, [pc, #496]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202e2c:	6023      	str	r3, [r4, #0]
  202e2e:	f7fd fc87 	bl	200740 <chHeapAllocAligned.constprop.33>
  202e32:	2110      	movs	r1, #16
  202e34:	4606      	mov	r6, r0
  202e36:	4879      	ldr	r0, [pc, #484]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202e38:	f7fd fc82 	bl	200740 <chHeapAllocAligned.constprop.33>
  202e3c:	2110      	movs	r1, #16
  202e3e:	4607      	mov	r7, r0
  202e40:	4876      	ldr	r0, [pc, #472]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202e42:	f7fd fc7d 	bl	200740 <chHeapAllocAligned.constprop.33>
    chHeapFree(p3);                                 /* Merges forward.*/
  202e46:	f004 f8d3 	bl	206ff0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
  202e4a:	4638      	mov	r0, r7
  202e4c:	f004 f8d0 	bl	206ff0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
  202e50:	4630      	mov	r0, r6
  202e52:	f004 f8cd 	bl	206ff0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  202e56:	462a      	mov	r2, r5
  202e58:	a901      	add	r1, sp, #4
  202e5a:	4870      	ldr	r0, [pc, #448]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202e5c:	f7ff fdb0 	bl	2029c0 <chHeapStatus>
  202e60:	f1a0 0001 	sub.w	r0, r0, #1
  202e64:	496e      	ldr	r1, [pc, #440]	; (203020 <oslib_test_003_001_execute.lto_priv.186+0x310>)
  202e66:	fab0 f080 	clz	r0, r0
  202e6a:	0940      	lsrs	r0, r0, #5
  202e6c:	f7ff fbf8 	bl	202660 <_test_assert>
  202e70:	4605      	mov	r5, r0
  202e72:	2800      	cmp	r0, #0
  202e74:	f47f af60 	bne.w	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
  test_set_step(7);
  202e78:	2307      	movs	r3, #7
  202e7a:	2111      	movs	r1, #17
  202e7c:	4867      	ldr	r0, [pc, #412]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202e7e:	6023      	str	r3, [r4, #0]
  202e80:	f7fd fc5e 	bl	200740 <chHeapAllocAligned.constprop.33>
  202e84:	4606      	mov	r6, r0
  202e86:	2110      	movs	r1, #16
  202e88:	4864      	ldr	r0, [pc, #400]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202e8a:	f7fd fc59 	bl	200740 <chHeapAllocAligned.constprop.33>
  202e8e:	4607      	mov	r7, r0
    chHeapFree(p1);
  202e90:	4630      	mov	r0, r6
  202e92:	f004 f8ad 	bl	206ff0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
  202e96:	462a      	mov	r2, r5
  202e98:	a901      	add	r1, sp, #4
  202e9a:	4860      	ldr	r0, [pc, #384]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202e9c:	f7ff fd90 	bl	2029c0 <chHeapStatus>
  202ea0:	f1a0 0802 	sub.w	r8, r0, #2
  202ea4:	4963      	ldr	r1, [pc, #396]	; (203034 <oslib_test_003_001_execute.lto_priv.186+0x324>)
  202ea6:	f1d8 0000 	rsbs	r0, r8, #0
  202eaa:	eb40 0008 	adc.w	r0, r0, r8
  202eae:	f7ff fbd7 	bl	202660 <_test_assert>
  202eb2:	4605      	mov	r5, r0
  202eb4:	2800      	cmp	r0, #0
  202eb6:	f47f af3f 	bne.w	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
  202eba:	2110      	movs	r1, #16
  202ebc:	4857      	ldr	r0, [pc, #348]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202ebe:	f7fd fc3f 	bl	200740 <chHeapAllocAligned.constprop.33>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
  202ec2:	462a      	mov	r2, r5
  202ec4:	4606      	mov	r6, r0
  202ec6:	a901      	add	r1, sp, #4
  202ec8:	4854      	ldr	r0, [pc, #336]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202eca:	f7ff fd79 	bl	2029c0 <chHeapStatus>
  202ece:	2801      	cmp	r0, #1
  202ed0:	f000 809f 	beq.w	203012 <oslib_test_003_001_execute.lto_priv.186+0x302>
  202ed4:	2200      	movs	r2, #0
  202ed6:	a901      	add	r1, sp, #4
  202ed8:	4850      	ldr	r0, [pc, #320]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202eda:	f7ff fd71 	bl	2029c0 <chHeapStatus>
  202ede:	f1a0 0c02 	sub.w	ip, r0, #2
  202ee2:	f1dc 0000 	rsbs	r0, ip, #0
  202ee6:	eb40 000c 	adc.w	r0, r0, ip
  202eea:	494d      	ldr	r1, [pc, #308]	; (203020 <oslib_test_003_001_execute.lto_priv.186+0x310>)
  202eec:	f7ff fbb8 	bl	202660 <_test_assert>
  202ef0:	4605      	mov	r5, r0
  202ef2:	2800      	cmp	r0, #0
  202ef4:	f47f af20 	bne.w	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
    chHeapFree(p2);
  202ef8:	4638      	mov	r0, r7
  202efa:	f004 f879 	bl	206ff0 <chHeapFree>
    chHeapFree(p1);
  202efe:	4630      	mov	r0, r6
  202f00:	f004 f876 	bl	206ff0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  202f04:	462a      	mov	r2, r5
  202f06:	a901      	add	r1, sp, #4
  202f08:	4844      	ldr	r0, [pc, #272]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202f0a:	f7ff fd59 	bl	2029c0 <chHeapStatus>
  202f0e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
  202f12:	4943      	ldr	r1, [pc, #268]	; (203020 <oslib_test_003_001_execute.lto_priv.186+0x310>)
  202f14:	f1de 0000 	rsbs	r0, lr, #0
  202f18:	eb40 000e 	adc.w	r0, r0, lr
  202f1c:	f7ff fba0 	bl	202660 <_test_assert>
  202f20:	4605      	mov	r5, r0
  202f22:	2800      	cmp	r0, #0
  202f24:	f47f af08 	bne.w	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
  test_set_step(8);
  202f28:	2308      	movs	r3, #8
  202f2a:	2110      	movs	r1, #16
  202f2c:	483b      	ldr	r0, [pc, #236]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202f2e:	6023      	str	r3, [r4, #0]
  202f30:	f7fd fc06 	bl	200740 <chHeapAllocAligned.constprop.33>
  202f34:	4607      	mov	r7, r0
  202f36:	2110      	movs	r1, #16
  202f38:	4838      	ldr	r0, [pc, #224]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202f3a:	f7fd fc01 	bl	200740 <chHeapAllocAligned.constprop.33>
  202f3e:	4606      	mov	r6, r0
    chHeapFree(p1);
  202f40:	4638      	mov	r0, r7
  202f42:	f004 f855 	bl	206ff0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
  202f46:	462a      	mov	r2, r5
  202f48:	a901      	add	r1, sp, #4
  202f4a:	4834      	ldr	r0, [pc, #208]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202f4c:	f7ff fd38 	bl	2029c0 <chHeapStatus>
  202f50:	1e87      	subs	r7, r0, #2
  202f52:	4938      	ldr	r1, [pc, #224]	; (203034 <oslib_test_003_001_execute.lto_priv.186+0x324>)
  202f54:	4278      	negs	r0, r7
  202f56:	4178      	adcs	r0, r7
  202f58:	f7ff fb82 	bl	202660 <_test_assert>
  202f5c:	4605      	mov	r5, r0
  202f5e:	2800      	cmp	r0, #0
  202f60:	f47f aeea 	bne.w	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
  202f64:	2120      	movs	r1, #32
  202f66:	482d      	ldr	r0, [pc, #180]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202f68:	f7fd fbea 	bl	200740 <chHeapAllocAligned.constprop.33>
    chHeapFree(p1);
  202f6c:	f004 f840 	bl	206ff0 <chHeapFree>
    chHeapFree(p2);
  202f70:	4630      	mov	r0, r6
  202f72:	f004 f83d 	bl	206ff0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  202f76:	462a      	mov	r2, r5
  202f78:	a901      	add	r1, sp, #4
  202f7a:	4828      	ldr	r0, [pc, #160]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202f7c:	f7ff fd20 	bl	2029c0 <chHeapStatus>
  202f80:	1e45      	subs	r5, r0, #1
  202f82:	4927      	ldr	r1, [pc, #156]	; (203020 <oslib_test_003_001_execute.lto_priv.186+0x310>)
  202f84:	4268      	negs	r0, r5
  202f86:	4168      	adcs	r0, r5
  202f88:	f7ff fb6a 	bl	202660 <_test_assert>
  202f8c:	4602      	mov	r2, r0
  202f8e:	2800      	cmp	r0, #0
  202f90:	f47f aed2 	bne.w	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
  test_set_step(9);
  202f94:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
  202f96:	a901      	add	r1, sp, #4
  202f98:	4820      	ldr	r0, [pc, #128]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  test_set_step(9);
  202f9a:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
  202f9c:	f7ff fd10 	bl	2029c0 <chHeapStatus>
  202fa0:	9901      	ldr	r1, [sp, #4]
  202fa2:	481e      	ldr	r0, [pc, #120]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202fa4:	f7fd fbcc 	bl	200740 <chHeapAllocAligned.constprop.33>
    test_assert(p1 != NULL, "allocation failed");
  202fa8:	4606      	mov	r6, r0
  202faa:	3000      	adds	r0, #0
  202fac:	491e      	ldr	r1, [pc, #120]	; (203028 <oslib_test_003_001_execute.lto_priv.186+0x318>)
  202fae:	bf18      	it	ne
  202fb0:	2001      	movne	r0, #1
  202fb2:	f7ff fb55 	bl	202660 <_test_assert>
  202fb6:	4602      	mov	r2, r0
  202fb8:	2800      	cmp	r0, #0
  202fba:	f47f aebd 	bne.w	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
  202fbe:	4601      	mov	r1, r0
  202fc0:	4816      	ldr	r0, [pc, #88]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  202fc2:	f7ff fcfd 	bl	2029c0 <chHeapStatus>
  202fc6:	fab0 f080 	clz	r0, r0
  202fca:	491b      	ldr	r1, [pc, #108]	; (203038 <oslib_test_003_001_execute.lto_priv.186+0x328>)
  202fcc:	0940      	lsrs	r0, r0, #5
  202fce:	f7ff fb47 	bl	202660 <_test_assert>
  202fd2:	4605      	mov	r5, r0
  202fd4:	2800      	cmp	r0, #0
  202fd6:	f47f aeaf 	bne.w	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
    chHeapFree(p1);
  202fda:	4630      	mov	r0, r6
  202fdc:	f004 f808 	bl	206ff0 <chHeapFree>
  test_set_step(10);
  202fe0:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  202fe2:	462a      	mov	r2, r5
  202fe4:	a901      	add	r1, sp, #4
  202fe6:	480d      	ldr	r0, [pc, #52]	; (20301c <oslib_test_003_001_execute.lto_priv.186+0x30c>)
  test_set_step(10);
  202fe8:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  202fea:	f7ff fce9 	bl	2029c0 <chHeapStatus>
  202fee:	1e42      	subs	r2, r0, #1
  202ff0:	490b      	ldr	r1, [pc, #44]	; (203020 <oslib_test_003_001_execute.lto_priv.186+0x310>)
  202ff2:	4250      	negs	r0, r2
  202ff4:	4150      	adcs	r0, r2
  202ff6:	f7ff fb33 	bl	202660 <_test_assert>
  202ffa:	2800      	cmp	r0, #0
  202ffc:	f47f ae9c 	bne.w	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
    test_assert(n == sz, "size changed");
  203000:	9801      	ldr	r0, [sp, #4]
  203002:	9b00      	ldr	r3, [sp, #0]
  203004:	490d      	ldr	r1, [pc, #52]	; (20303c <oslib_test_003_001_execute.lto_priv.186+0x32c>)
  203006:	1ac3      	subs	r3, r0, r3
  203008:	4258      	negs	r0, r3
  20300a:	4158      	adcs	r0, r3
  20300c:	f7ff fb28 	bl	202660 <_test_assert>
  203010:	e692      	b.n	202d38 <oslib_test_003_001_execute.lto_priv.186+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
  203012:	2001      	movs	r0, #1
  203014:	e769      	b.n	202eea <oslib_test_003_001_execute.lto_priv.186+0x1da>
  203016:	bf00      	nop
  203018:	2000098c 	.word	0x2000098c
  20301c:	200009b4 	.word	0x200009b4
  203020:	08007fc0 	.word	0x08007fc0
  203024:	08008c34 	.word	0x08008c34
  203028:	08008c20 	.word	0x08008c20
  20302c:	08008bc8 	.word	0x08008bc8
  203030:	08008bdc 	.word	0x08008bdc
  203034:	08008bf4 	.word	0x08008bf4
  203038:	08008c04 	.word	0x08008c04
  20303c:	08008c10 	.word	0x08008c10

00203040 <oslib_test_002_003_execute.lto_priv.184>:

static void oslib_test_002_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}

static void oslib_test_002_003_execute(void) {
  203040:	b508      	push	{r3, lr}

  /* [2.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
  203042:	2201      	movs	r2, #1
  203044:	4b06      	ldr	r3, [pc, #24]	; (203060 <oslib_test_002_003_execute.lto_priv.184+0x20>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
  203046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(1);
  20304a:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
  20304c:	f7fd fdb0 	bl	200bb0 <chGuardedPoolAllocTimeout.constprop.15>
  203050:	fab0 f080 	clz	r0, r0
  203054:	4903      	ldr	r1, [pc, #12]	; (203064 <oslib_test_002_003_execute.lto_priv.184+0x24>)
  203056:	0940      	lsrs	r0, r0, #5
  }
}
  203058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
  20305c:	f7ff bb00 	b.w	202660 <_test_assert>
  203060:	2000098c 	.word	0x2000098c
  203064:	08008bb8 	.word	0x08008bb8
	...

00203070 <oslib_test_002_002_execute.lto_priv.182>:
static void oslib_test_002_002_execute(void) {
  203070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  203074:	4d38      	ldr	r5, [pc, #224]	; (203158 <oslib_test_002_002_execute.lto_priv.182+0xe8>)
  test_set_step(1);
  203076:	2301      	movs	r3, #1
  203078:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 203168 <oslib_test_002_002_execute.lto_priv.182+0xf8>
  20307c:	2604      	movs	r6, #4
  chSemSignalI(&gmp->sem);
  20307e:	46a9      	mov	r9, r5
  203080:	4c36      	ldr	r4, [pc, #216]	; (20315c <oslib_test_002_002_execute.lto_priv.182+0xec>)
  203082:	f04f 0820 	mov.w	r8, #32
  203086:	2700      	movs	r7, #0
  203088:	f8ca 3000 	str.w	r3, [sl]
  20308c:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
  203090:	68eb      	ldr	r3, [r5, #12]
  chSemSignalI(&gmp->sem);
  203092:	4648      	mov	r0, r9
  mp->next = php;
  203094:	60ec      	str	r4, [r5, #12]
  php->next = mp->next;
  203096:	6023      	str	r3, [r4, #0]
  chSemSignalI(&gmp->sem);
  203098:	f004 f852 	bl	207140 <chSemSignalI>
  chSchRescheduleS();
  20309c:	f003 fd90 	bl	206bc0 <chSchRescheduleS>
  2030a0:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
  2030a4:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
  2030a6:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
  2030a8:	441c      	add	r4, r3
  while (n != 0U) {
  2030aa:	d1ef      	bne.n	20308c <oslib_test_002_002_execute.lto_priv.182+0x1c>
  test_set_step(2);
  2030ac:	2302      	movs	r3, #2
  2030ae:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
  2030b0:	4e2b      	ldr	r6, [pc, #172]	; (203160 <oslib_test_002_002_execute.lto_priv.182+0xf0>)
  test_set_step(2);
  2030b2:	f8ca 3000 	str.w	r3, [sl]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
  2030b6:	2000      	movs	r0, #0
  2030b8:	f7fd fd7a 	bl	200bb0 <chGuardedPoolAllocTimeout.constprop.15>
  2030bc:	3000      	adds	r0, #0
  2030be:	4631      	mov	r1, r6
  2030c0:	bf18      	it	ne
  2030c2:	2001      	movne	r0, #1
  2030c4:	f7ff facc 	bl	202660 <_test_assert>
  2030c8:	2800      	cmp	r0, #0
  2030ca:	d143      	bne.n	203154 <oslib_test_002_002_execute.lto_priv.182+0xe4>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
  2030cc:	3c01      	subs	r4, #1
  2030ce:	d1f2      	bne.n	2030b6 <oslib_test_002_002_execute.lto_priv.182+0x46>
  test_set_step(3);
  2030d0:	2303      	movs	r3, #3
  2030d2:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
  2030d6:	f7fd fd6b 	bl	200bb0 <chGuardedPoolAllocTimeout.constprop.15>
  2030da:	fab0 f080 	clz	r0, r0
  2030de:	4921      	ldr	r1, [pc, #132]	; (203164 <oslib_test_002_002_execute.lto_priv.182+0xf4>)
  2030e0:	0940      	lsrs	r0, r0, #5
  2030e2:	f7ff fabd 	bl	202660 <_test_assert>
  2030e6:	bba8      	cbnz	r0, 203154 <oslib_test_002_002_execute.lto_priv.182+0xe4>
  2030e8:	4e1c      	ldr	r6, [pc, #112]	; (20315c <oslib_test_002_002_execute.lto_priv.182+0xec>)
  test_set_step(4);
  2030ea:	2304      	movs	r3, #4
  2030ec:	f04f 0920 	mov.w	r9, #32
  chSemSignalI(&gmp->sem);
  2030f0:	4f19      	ldr	r7, [pc, #100]	; (203158 <oslib_test_002_002_execute.lto_priv.182+0xe8>)
  2030f2:	f106 0810 	add.w	r8, r6, #16
  2030f6:	f8ca 3000 	str.w	r3, [sl]
  2030fa:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
  2030fe:	68eb      	ldr	r3, [r5, #12]
  chSemSignalI(&gmp->sem);
  203100:	4638      	mov	r0, r7
  mp->next = php;
  203102:	60ee      	str	r6, [r5, #12]
  php->next = mp->next;
  203104:	f846 3b04 	str.w	r3, [r6], #4
  chSemSignalI(&gmp->sem);
  203108:	f004 f81a 	bl	207140 <chSemSignalI>
  chSchRescheduleS();
  20310c:	f003 fd58 	bl	206bc0 <chSchRescheduleS>
  203110:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
  203114:	45b0      	cmp	r8, r6
  203116:	d1f0      	bne.n	2030fa <oslib_test_002_002_execute.lto_priv.182+0x8a>
  test_set_step(5);
  203118:	2305      	movs	r3, #5
  20311a:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
  20311c:	4d10      	ldr	r5, [pc, #64]	; (203160 <oslib_test_002_002_execute.lto_priv.182+0xf0>)
  test_set_step(5);
  20311e:	f8ca 3000 	str.w	r3, [sl]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
  203122:	2000      	movs	r0, #0
  203124:	f7fd fd44 	bl	200bb0 <chGuardedPoolAllocTimeout.constprop.15>
  203128:	3000      	adds	r0, #0
  20312a:	4629      	mov	r1, r5
  20312c:	bf18      	it	ne
  20312e:	2001      	movne	r0, #1
  203130:	f7ff fa96 	bl	202660 <_test_assert>
  203134:	b970      	cbnz	r0, 203154 <oslib_test_002_002_execute.lto_priv.182+0xe4>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
  203136:	3c01      	subs	r4, #1
  203138:	d1f3      	bne.n	203122 <oslib_test_002_002_execute.lto_priv.182+0xb2>
  test_set_step(6);
  20313a:	2306      	movs	r3, #6
  20313c:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
  203140:	f7fd fd36 	bl	200bb0 <chGuardedPoolAllocTimeout.constprop.15>
  203144:	fab0 f080 	clz	r0, r0
  203148:	4906      	ldr	r1, [pc, #24]	; (203164 <oslib_test_002_002_execute.lto_priv.182+0xf4>)
  20314a:	0940      	lsrs	r0, r0, #5
}
  20314c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
  203150:	f7ff ba86 	b.w	202660 <_test_assert>
  203154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  203158:	20020008 	.word	0x20020008
  20315c:	200009a4 	.word	0x200009a4
  203160:	08008bac 	.word	0x08008bac
  203164:	08008bb8 	.word	0x08008bb8
  203168:	2000098c 	.word	0x2000098c
  20316c:	00000000 	.word	0x00000000

00203170 <oslib_test_002_001_execute.lto_priv.180>:
static void oslib_test_002_001_execute(void) {
  203170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
  203174:	2101      	movs	r1, #1
  203176:	4e3a      	ldr	r6, [pc, #232]	; (203260 <oslib_test_002_001_execute.lto_priv.180+0xf0>)
  203178:	2204      	movs	r2, #4
  20317a:	4b3a      	ldr	r3, [pc, #232]	; (203264 <oslib_test_002_001_execute.lto_priv.180+0xf4>)
  20317c:	4c3a      	ldr	r4, [pc, #232]	; (203268 <oslib_test_002_001_execute.lto_priv.180+0xf8>)
  20317e:	2520      	movs	r5, #32
  203180:	2000      	movs	r0, #0
  203182:	6031      	str	r1, [r6, #0]
  203184:	f385 8811 	msr	BASEPRI, r5
  php->next = mp->next;
  203188:	6821      	ldr	r1, [r4, #0]
  mp->next = php;
  20318a:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
  20318c:	6019      	str	r1, [r3, #0]
  20318e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
  203192:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
  203194:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
  203196:	440b      	add	r3, r1
  while (n != 0U) {
  203198:	d1f4      	bne.n	203184 <oslib_test_002_001_execute.lto_priv.180+0x14>
  test_set_step(2);
  20319a:	2302      	movs	r3, #2
  20319c:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  20319e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 203268 <oslib_test_002_001_execute.lto_priv.180+0xf8>
  2031a2:	4f32      	ldr	r7, [pc, #200]	; (20326c <oslib_test_002_001_execute.lto_priv.180+0xfc>)
  test_set_step(2);
  2031a4:	6033      	str	r3, [r6, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  2031a6:	4640      	mov	r0, r8
  2031a8:	f7ff fbca 	bl	202940 <chPoolAlloc>
  2031ac:	3000      	adds	r0, #0
  2031ae:	4639      	mov	r1, r7
  2031b0:	bf18      	it	ne
  2031b2:	2001      	movne	r0, #1
  2031b4:	f7ff fa54 	bl	202660 <_test_assert>
  2031b8:	2800      	cmp	r0, #0
  2031ba:	d13b      	bne.n	203234 <oslib_test_002_001_execute.lto_priv.180+0xc4>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
  2031bc:	3d01      	subs	r5, #1
  2031be:	d1f2      	bne.n	2031a6 <oslib_test_002_001_execute.lto_priv.180+0x36>
  test_set_step(3);
  2031c0:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  2031c2:	4829      	ldr	r0, [pc, #164]	; (203268 <oslib_test_002_001_execute.lto_priv.180+0xf8>)
  test_set_step(3);
  2031c4:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  2031c6:	f7ff fbbb 	bl	202940 <chPoolAlloc>
  2031ca:	fab0 f080 	clz	r0, r0
  2031ce:	4928      	ldr	r1, [pc, #160]	; (203270 <oslib_test_002_001_execute.lto_priv.180+0x100>)
  2031d0:	0940      	lsrs	r0, r0, #5
  2031d2:	f7ff fa45 	bl	202660 <_test_assert>
  2031d6:	bb68      	cbnz	r0, 203234 <oslib_test_002_001_execute.lto_priv.180+0xc4>
  2031d8:	4b22      	ldr	r3, [pc, #136]	; (203264 <oslib_test_002_001_execute.lto_priv.180+0xf4>)
  test_set_step(4);
  2031da:	2204      	movs	r2, #4
  2031dc:	2720      	movs	r7, #32
  2031de:	f103 0010 	add.w	r0, r3, #16
  2031e2:	6032      	str	r2, [r6, #0]
  2031e4:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
  2031e8:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
  2031ea:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
  2031ec:	f843 2b04 	str.w	r2, [r3], #4
  2031f0:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
  2031f4:	4298      	cmp	r0, r3
  2031f6:	d1f5      	bne.n	2031e4 <oslib_test_002_001_execute.lto_priv.180+0x74>
  test_set_step(5);
  2031f8:	2305      	movs	r3, #5
  2031fa:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  2031fc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 203268 <oslib_test_002_001_execute.lto_priv.180+0xf8>
  203200:	4f1a      	ldr	r7, [pc, #104]	; (20326c <oslib_test_002_001_execute.lto_priv.180+0xfc>)
  test_set_step(5);
  203202:	6033      	str	r3, [r6, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  203204:	4640      	mov	r0, r8
  203206:	f7ff fb9b 	bl	202940 <chPoolAlloc>
  20320a:	3000      	adds	r0, #0
  20320c:	4639      	mov	r1, r7
  20320e:	bf18      	it	ne
  203210:	2001      	movne	r0, #1
  203212:	f7ff fa25 	bl	202660 <_test_assert>
  203216:	b968      	cbnz	r0, 203234 <oslib_test_002_001_execute.lto_priv.180+0xc4>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
  203218:	3d01      	subs	r5, #1
  20321a:	d1f3      	bne.n	203204 <oslib_test_002_001_execute.lto_priv.180+0x94>
  test_set_step(6);
  20321c:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  20321e:	4812      	ldr	r0, [pc, #72]	; (203268 <oslib_test_002_001_execute.lto_priv.180+0xf8>)
  test_set_step(6);
  203220:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  203222:	f7ff fb8d 	bl	202940 <chPoolAlloc>
  203226:	fab0 f080 	clz	r0, r0
  20322a:	4911      	ldr	r1, [pc, #68]	; (203270 <oslib_test_002_001_execute.lto_priv.180+0x100>)
  20322c:	0940      	lsrs	r0, r0, #5
  20322e:	f7ff fa17 	bl	202660 <_test_assert>
  203232:	b108      	cbz	r0, 203238 <oslib_test_002_001_execute.lto_priv.180+0xc8>
  203234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(7);
  203238:	2107      	movs	r1, #7
  mp->object_size = size;
  20323a:	2304      	movs	r3, #4
  mp->provider = provider;
  20323c:	4a0d      	ldr	r2, [pc, #52]	; (203274 <oslib_test_002_001_execute.lto_priv.180+0x104>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  20323e:	480a      	ldr	r0, [pc, #40]	; (203268 <oslib_test_002_001_execute.lto_priv.180+0xf8>)
  test_set_step(7);
  203240:	6031      	str	r1, [r6, #0]
  mp->next = NULL;
  203242:	6025      	str	r5, [r4, #0]
  mp->object_size = size;
  203244:	6063      	str	r3, [r4, #4]
  mp->align = align;
  203246:	60a3      	str	r3, [r4, #8]
  mp->provider = provider;
  203248:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  20324a:	f7ff fb79 	bl	202940 <chPoolAlloc>
  20324e:	fab0 f080 	clz	r0, r0
  203252:	4909      	ldr	r1, [pc, #36]	; (203278 <oslib_test_002_001_execute.lto_priv.180+0x108>)
  203254:	0940      	lsrs	r0, r0, #5
}
  203256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  20325a:	f7ff ba01 	b.w	202660 <_test_assert>
  20325e:	bf00      	nop
  203260:	2000098c 	.word	0x2000098c
  203264:	200009a4 	.word	0x200009a4
  203268:	20020074 	.word	0x20020074
  20326c:	08008bac 	.word	0x08008bac
  203270:	08008bb8 	.word	0x08008bb8
  203274:	00202a91 	.word	0x00202a91
  203278:	08008b90 	.word	0x08008b90
  20327c:	00000000 	.word	0x00000000

00203280 <oslib_test_001_003_teardown.lto_priv.177>:

static void oslib_test_001_003_teardown(void) {
  chMBReset(&mb1);
  203280:	f7fd bb46 	b.w	200910 <chMBReset.constprop.29>
	...

00203290 <oslib_test_001_003_execute.lto_priv.178>:
}

static void oslib_test_001_003_execute(void) {
  203290:	b570      	push	{r4, r5, r6, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [1.3.1] Filling the mailbox.*/
  test_set_step(1);
  203292:	2301      	movs	r3, #1
  203294:	4e40      	ldr	r6, [pc, #256]	; (203398 <oslib_test_001_003_execute.lto_priv.178+0x108>)
static void oslib_test_001_003_execute(void) {
  203296:	b082      	sub	sp, #8
  test_set_step(1);
  203298:	2442      	movs	r4, #66	; 0x42
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  20329a:	4d40      	ldr	r5, [pc, #256]	; (20339c <oslib_test_001_003_execute.lto_priv.178+0x10c>)
  test_set_step(1);
  20329c:	6033      	str	r3, [r6, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
  20329e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  2032a2:	4620      	mov	r0, r4
  2032a4:	f7fd fb54 	bl	200950 <chMBPostTimeout.constprop.27>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  2032a8:	fab0 f080 	clz	r0, r0
  2032ac:	4629      	mov	r1, r5
  2032ae:	3401      	adds	r4, #1
  2032b0:	0940      	lsrs	r0, r0, #5
  2032b2:	f7ff f9d5 	bl	202660 <_test_assert>
  2032b6:	b988      	cbnz	r0, 2032dc <oslib_test_001_003_execute.lto_priv.178+0x4c>
    for (i = 0; i < MB_SIZE; i++) {
  2032b8:	2c46      	cmp	r4, #70	; 0x46
  2032ba:	d1f0      	bne.n	20329e <oslib_test_001_003_execute.lto_priv.178+0xe>
    }
  }

  /* [1.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
  2032bc:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
  2032be:	2101      	movs	r1, #1
  2032c0:	2058      	movs	r0, #88	; 0x58
  test_set_step(2);
  2032c2:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
  2032c4:	f7fd fb44 	bl	200950 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  2032c8:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
  2032cc:	4933      	ldr	r1, [pc, #204]	; (20339c <oslib_test_001_003_execute.lto_priv.178+0x10c>)
  2032ce:	fab0 f080 	clz	r0, r0
  2032d2:	0940      	lsrs	r0, r0, #5
  2032d4:	f7ff f9c4 	bl	202660 <_test_assert>
  2032d8:	4604      	mov	r4, r0
  2032da:	b108      	cbz	r0, 2032e0 <oslib_test_001_003_execute.lto_priv.178+0x50>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
  2032dc:	b002      	add	sp, #8
  2032de:	bd70      	pop	{r4, r5, r6, pc}
  2032e0:	2520      	movs	r5, #32
  2032e2:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
  2032e6:	2058      	movs	r0, #88	; 0x58
  2032e8:	f7fd fb72 	bl	2009d0 <chMBPostI.constprop.26>
  2032ec:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  2032f0:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
  2032f4:	4929      	ldr	r1, [pc, #164]	; (20339c <oslib_test_001_003_execute.lto_priv.178+0x10c>)
  2032f6:	fab0 f080 	clz	r0, r0
  2032fa:	0940      	lsrs	r0, r0, #5
  2032fc:	f7ff f9b0 	bl	202660 <_test_assert>
  203300:	2800      	cmp	r0, #0
  203302:	d1eb      	bne.n	2032dc <oslib_test_001_003_execute.lto_priv.178+0x4c>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
  203304:	2101      	movs	r1, #1
  203306:	2058      	movs	r0, #88	; 0x58
  203308:	f7fd fb8a 	bl	200a20 <chMBPostAheadTimeout.constprop.24>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  20330c:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
  203310:	4922      	ldr	r1, [pc, #136]	; (20339c <oslib_test_001_003_execute.lto_priv.178+0x10c>)
  203312:	fab0 f080 	clz	r0, r0
  203316:	0940      	lsrs	r0, r0, #5
  203318:	f7ff f9a2 	bl	202660 <_test_assert>
  20331c:	4604      	mov	r4, r0
  20331e:	2800      	cmp	r0, #0
  203320:	d1dc      	bne.n	2032dc <oslib_test_001_003_execute.lto_priv.178+0x4c>
  203322:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
  203326:	2058      	movs	r0, #88	; 0x58
  203328:	f7fd fbba 	bl	200aa0 <chMBPostAheadI.constprop.23>
  20332c:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  203330:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
  203334:	4919      	ldr	r1, [pc, #100]	; (20339c <oslib_test_001_003_execute.lto_priv.178+0x10c>)
  203336:	fab0 f080 	clz	r0, r0
  20333a:	0940      	lsrs	r0, r0, #5
  20333c:	f7ff f990 	bl	202660 <_test_assert>
  203340:	4604      	mov	r4, r0
  203342:	2800      	cmp	r0, #0
  203344:	d1ca      	bne.n	2032dc <oslib_test_001_003_execute.lto_priv.178+0x4c>
  test_set_step(3);
  203346:	2303      	movs	r3, #3
  203348:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
  20334a:	f7fd fae1 	bl	200910 <chMBReset.constprop.29>
  test_set_step(4);
  20334e:	2304      	movs	r3, #4
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
  203350:	4a13      	ldr	r2, [pc, #76]	; (2033a0 <oslib_test_001_003_execute.lto_priv.178+0x110>)
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
  203352:	2101      	movs	r1, #1
  203354:	7514      	strb	r4, [r2, #20]
  203356:	eb0d 0003 	add.w	r0, sp, r3
  test_set_step(4);
  20335a:	6033      	str	r3, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
  20335c:	f7fd fbc8 	bl	200af0 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  203360:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
  203364:	490d      	ldr	r1, [pc, #52]	; (20339c <oslib_test_001_003_execute.lto_priv.178+0x10c>)
  203366:	fab0 f080 	clz	r0, r0
  20336a:	0940      	lsrs	r0, r0, #5
  20336c:	f7ff f978 	bl	202660 <_test_assert>
  203370:	4604      	mov	r4, r0
  203372:	2800      	cmp	r0, #0
  203374:	d1b2      	bne.n	2032dc <oslib_test_001_003_execute.lto_priv.178+0x4c>
  203376:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
  20337a:	a801      	add	r0, sp, #4
  20337c:	f7fd fbf0 	bl	200b60 <chMBFetchI.constprop.20>
  203380:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  203384:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
  203388:	4904      	ldr	r1, [pc, #16]	; (20339c <oslib_test_001_003_execute.lto_priv.178+0x10c>)
  20338a:	fab0 f080 	clz	r0, r0
  20338e:	0940      	lsrs	r0, r0, #5
  203390:	f7ff f966 	bl	202660 <_test_assert>
  203394:	e7a2      	b.n	2032dc <oslib_test_001_003_execute.lto_priv.178+0x4c>
  203396:	bf00      	nop
  203398:	2000098c 	.word	0x2000098c
  20339c:	08008b78 	.word	0x08008b78
  2033a0:	20020034 	.word	0x20020034
	...

002033b0 <oslib_test_001_002_execute.lto_priv.175>:
static void oslib_test_001_002_execute(void) {
  2033b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
  2033b4:	4fb0      	ldr	r7, [pc, #704]	; (203678 <oslib_test_001_002_execute.lto_priv.175+0x2c8>)
  2033b6:	f04f 0801 	mov.w	r8, #1
static void oslib_test_001_002_execute(void) {
  2033ba:	b082      	sub	sp, #8
  2033bc:	2620      	movs	r6, #32
  test_set_step(1);
  2033be:	f8c7 8000 	str.w	r8, [r7]
  2033c2:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
  2033c6:	4cad      	ldr	r4, [pc, #692]	; (20367c <oslib_test_001_002_execute.lto_priv.175+0x2cc>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
  2033c8:	49ad      	ldr	r1, [pc, #692]	; (203680 <oslib_test_001_002_execute.lto_priv.175+0x2d0>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  2033ca:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
  2033cc:	e894 000c 	ldmia.w	r4, {r2, r3}
  2033d0:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  2033d2:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
  2033d6:	f1a0 0004 	sub.w	r0, r0, #4
  2033da:	fab0 f080 	clz	r0, r0
  2033de:	0940      	lsrs	r0, r0, #5
  2033e0:	f7ff f93e 	bl	202660 <_test_assert>
  2033e4:	b128      	cbz	r0, 2033f2 <oslib_test_001_002_execute.lto_priv.175+0x42>
  2033e6:	2300      	movs	r3, #0
  2033e8:	f383 8811 	msr	BASEPRI, r3
}
  2033ec:	b002      	add	sp, #8
  2033ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  2033f2:	4605      	mov	r5, r0
  2033f4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
  2033f8:	2302      	movs	r3, #2
  2033fa:	603b      	str	r3, [r7, #0]
  2033fc:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
  203400:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
  203402:	f104 0018 	add.w	r0, r4, #24
  203406:	f06f 0101 	mvn.w	r1, #1
  mbp->cnt   = (size_t)0;
  20340a:	6125      	str	r5, [r4, #16]
  mbp->wrptr = mbp->buffer;
  20340c:	60a3      	str	r3, [r4, #8]
  mbp->rdptr = mbp->buffer;
  20340e:	60e3      	str	r3, [r4, #12]
  mbp->reset = true;
  203410:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
  203414:	f003 fecc 	bl	2071b0 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
  203418:	f104 0020 	add.w	r0, r4, #32
  20341c:	f06f 0101 	mvn.w	r1, #1
  203420:	f003 fec6 	bl	2071b0 <chThdDequeueAllI>
  203424:	f385 8811 	msr	BASEPRI, r5
  203428:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
  20342c:	e894 000c 	ldmia.w	r4, {r2, r3}
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  203430:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
  203432:	1a9b      	subs	r3, r3, r2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  203434:	4993      	ldr	r1, [pc, #588]	; (203684 <oslib_test_001_002_execute.lto_priv.175+0x2d4>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  203436:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
  20343a:	f1a0 0004 	sub.w	r0, r0, #4
  20343e:	fab0 f080 	clz	r0, r0
  203442:	0940      	lsrs	r0, r0, #5
  203444:	f7ff f90c 	bl	202660 <_test_assert>
  203448:	4680      	mov	r8, r0
  20344a:	b120      	cbz	r0, 203456 <oslib_test_001_002_execute.lto_priv.175+0xa6>
  20344c:	f385 8811 	msr	BASEPRI, r5
}
  203450:	b002      	add	sp, #8
  203452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  203456:	f380 8811 	msr	BASEPRI, r0
  20345a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
  20345e:	6920      	ldr	r0, [r4, #16]
  203460:	4989      	ldr	r1, [pc, #548]	; (203688 <oslib_test_001_002_execute.lto_priv.175+0x2d8>)
  203462:	fab0 f080 	clz	r0, r0
  203466:	0940      	lsrs	r0, r0, #5
  203468:	f7ff f8fa 	bl	202660 <_test_assert>
  20346c:	4605      	mov	r5, r0
  20346e:	b120      	cbz	r0, 20347a <oslib_test_001_002_execute.lto_priv.175+0xca>
  203470:	f388 8811 	msr	BASEPRI, r8
}
  203474:	b002      	add	sp, #8
  203476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20347a:	f380 8811 	msr	BASEPRI, r0
  20347e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
  203482:	6820      	ldr	r0, [r4, #0]
  203484:	68a3      	ldr	r3, [r4, #8]
  203486:	4981      	ldr	r1, [pc, #516]	; (20368c <oslib_test_001_002_execute.lto_priv.175+0x2dc>)
  203488:	1ac0      	subs	r0, r0, r3
  20348a:	fab0 f080 	clz	r0, r0
  20348e:	0940      	lsrs	r0, r0, #5
  203490:	f7ff f8e6 	bl	202660 <_test_assert>
  203494:	4680      	mov	r8, r0
  203496:	2800      	cmp	r0, #0
  203498:	d1d8      	bne.n	20344c <oslib_test_001_002_execute.lto_priv.175+0x9c>
  20349a:	f380 8811 	msr	BASEPRI, r0
  20349e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  2034a2:	6820      	ldr	r0, [r4, #0]
  2034a4:	68e3      	ldr	r3, [r4, #12]
  2034a6:	497a      	ldr	r1, [pc, #488]	; (203690 <oslib_test_001_002_execute.lto_priv.175+0x2e0>)
  2034a8:	1ac0      	subs	r0, r0, r3
  2034aa:	fab0 f080 	clz	r0, r0
  2034ae:	0940      	lsrs	r0, r0, #5
  2034b0:	f7ff f8d6 	bl	202660 <_test_assert>
  2034b4:	2800      	cmp	r0, #0
  2034b6:	d1db      	bne.n	203470 <oslib_test_001_002_execute.lto_priv.175+0xc0>
  2034b8:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
  2034bc:	2303      	movs	r3, #3
  2034be:	4682      	mov	sl, r0
  2034c0:	2542      	movs	r5, #66	; 0x42
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  2034c2:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 203694 <oslib_test_001_002_execute.lto_priv.175+0x2e4>
  mbp->reset = false;
  2034c6:	7520      	strb	r0, [r4, #20]
  test_set_step(3);
  2034c8:	603b      	str	r3, [r7, #0]
  2034ca:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
  2034ce:	4628      	mov	r0, r5
  2034d0:	f7fd fa7e 	bl	2009d0 <chMBPostI.constprop.26>
  2034d4:	f38a 8811 	msr	BASEPRI, sl
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  2034d8:	fab0 f080 	clz	r0, r0
  2034dc:	4649      	mov	r1, r9
  2034de:	3501      	adds	r5, #1
  2034e0:	0940      	lsrs	r0, r0, #5
  2034e2:	f7ff f8bd 	bl	202660 <_test_assert>
  2034e6:	4680      	mov	r8, r0
  2034e8:	2800      	cmp	r0, #0
  2034ea:	f47f af7f 	bne.w	2033ec <oslib_test_001_002_execute.lto_priv.175+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
  2034ee:	2d45      	cmp	r5, #69	; 0x45
  2034f0:	d1eb      	bne.n	2034ca <oslib_test_001_002_execute.lto_priv.175+0x11a>
  2034f2:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
  2034f6:	2041      	movs	r0, #65	; 0x41
  2034f8:	f7fd fad2 	bl	200aa0 <chMBPostAheadI.constprop.23>
  2034fc:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
  203500:	fab0 f080 	clz	r0, r0
  203504:	4963      	ldr	r1, [pc, #396]	; (203694 <oslib_test_001_002_execute.lto_priv.175+0x2e4>)
  203506:	0940      	lsrs	r0, r0, #5
  203508:	f7ff f8aa 	bl	202660 <_test_assert>
  20350c:	4605      	mov	r5, r0
  20350e:	2800      	cmp	r0, #0
  203510:	f47f af6c 	bne.w	2033ec <oslib_test_001_002_execute.lto_priv.175+0x3c>
  test_set_step(4);
  203514:	f04f 0804 	mov.w	r8, #4
  203518:	f8c7 8000 	str.w	r8, [r7]
  20351c:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
  203520:	e894 000a 	ldmia.w	r4, {r1, r3}
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
  203524:	6922      	ldr	r2, [r4, #16]
  203526:	1a5b      	subs	r3, r3, r1
  203528:	495b      	ldr	r1, [pc, #364]	; (203698 <oslib_test_001_002_execute.lto_priv.175+0x2e8>)
  20352a:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
  20352e:	bf0c      	ite	eq
  203530:	2001      	moveq	r0, #1
  203532:	2000      	movne	r0, #0
  203534:	f7ff f894 	bl	202660 <_test_assert>
  203538:	4681      	mov	r9, r0
  20353a:	2800      	cmp	r0, #0
  20353c:	d186      	bne.n	20344c <oslib_test_001_002_execute.lto_priv.175+0x9c>
  20353e:	f380 8811 	msr	BASEPRI, r0
  203542:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
  203546:	6920      	ldr	r0, [r4, #16]
  203548:	4954      	ldr	r1, [pc, #336]	; (20369c <oslib_test_001_002_execute.lto_priv.175+0x2ec>)
  20354a:	f1a0 0004 	sub.w	r0, r0, #4
  20354e:	fab0 f080 	clz	r0, r0
  203552:	0940      	lsrs	r0, r0, #5
  203554:	f7ff f884 	bl	202660 <_test_assert>
  203558:	4605      	mov	r5, r0
  20355a:	b110      	cbz	r0, 203562 <oslib_test_001_002_execute.lto_priv.175+0x1b2>
  20355c:	f389 8811 	msr	BASEPRI, r9
  203560:	e744      	b.n	2033ec <oslib_test_001_002_execute.lto_priv.175+0x3c>
  203562:	f380 8811 	msr	BASEPRI, r0
  203566:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
  20356a:	68e0      	ldr	r0, [r4, #12]
  20356c:	68a3      	ldr	r3, [r4, #8]
  20356e:	494c      	ldr	r1, [pc, #304]	; (2036a0 <oslib_test_001_002_execute.lto_priv.175+0x2f0>)
  203570:	1ac6      	subs	r6, r0, r3
  203572:	4270      	negs	r0, r6
  203574:	4170      	adcs	r0, r6
  203576:	f7ff f873 	bl	202660 <_test_assert>
  20357a:	2800      	cmp	r0, #0
  20357c:	f47f af66 	bne.w	20344c <oslib_test_001_002_execute.lto_priv.175+0x9c>
  203580:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
  203584:	2305      	movs	r3, #5
  203586:	4605      	mov	r5, r0
  203588:	2620      	movs	r6, #32
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  20358a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 203694 <oslib_test_001_002_execute.lto_priv.175+0x2e4>
  test_set_step(5);
  20358e:	603b      	str	r3, [r7, #0]
  203590:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBFetchI(&mb1, &msg2);
  203594:	a801      	add	r0, sp, #4
  203596:	f7fd fae3 	bl	200b60 <chMBFetchI.constprop.20>
  20359a:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  20359e:	fab0 f080 	clz	r0, r0
  2035a2:	4649      	mov	r1, r9
  2035a4:	0940      	lsrs	r0, r0, #5
  2035a6:	f7ff f85b 	bl	202660 <_test_assert>
  2035aa:	2800      	cmp	r0, #0
  2035ac:	f47f af1e 	bne.w	2033ec <oslib_test_001_002_execute.lto_priv.175+0x3c>
      test_emit_token(msg2);
  2035b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
  2035b4:	f7fe fd54 	bl	202060 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
  2035b8:	f1b8 0801 	subs.w	r8, r8, #1
  2035bc:	d1e8      	bne.n	203590 <oslib_test_001_002_execute.lto_priv.175+0x1e0>
    test_assert_sequence("ABCD", "wrong get sequence");
  2035be:	4939      	ldr	r1, [pc, #228]	; (2036a4 <oslib_test_001_002_execute.lto_priv.175+0x2f4>)
  2035c0:	4839      	ldr	r0, [pc, #228]	; (2036a8 <oslib_test_001_002_execute.lto_priv.175+0x2f8>)
  2035c2:	f7ff f825 	bl	202610 <_test_assert_sequence>
  2035c6:	2800      	cmp	r0, #0
  2035c8:	f47f af10 	bne.w	2033ec <oslib_test_001_002_execute.lto_priv.175+0x3c>
  test_set_step(6);
  2035cc:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
  2035ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  2035d2:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
  2035d4:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
  2035d6:	f7fd f9bb 	bl	200950 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
  2035da:	fab0 f080 	clz	r0, r0
  2035de:	492d      	ldr	r1, [pc, #180]	; (203694 <oslib_test_001_002_execute.lto_priv.175+0x2e4>)
  2035e0:	0940      	lsrs	r0, r0, #5
  2035e2:	f7ff f83d 	bl	202660 <_test_assert>
  2035e6:	2800      	cmp	r0, #0
  2035e8:	f47f af00 	bne.w	2033ec <oslib_test_001_002_execute.lto_priv.175+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
  2035ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  2035f0:	a801      	add	r0, sp, #4
  2035f2:	f7fd fa7d 	bl	200af0 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
  2035f6:	fab0 f080 	clz	r0, r0
  2035fa:	4926      	ldr	r1, [pc, #152]	; (203694 <oslib_test_001_002_execute.lto_priv.175+0x2e4>)
  2035fc:	0940      	lsrs	r0, r0, #5
  2035fe:	f7ff f82f 	bl	202660 <_test_assert>
  203602:	2800      	cmp	r0, #0
  203604:	f47f aef2 	bne.w	2033ec <oslib_test_001_002_execute.lto_priv.175+0x3c>
  test_set_step(7);
  203608:	2307      	movs	r3, #7
  20360a:	603b      	str	r3, [r7, #0]
  20360c:	f386 8811 	msr	BASEPRI, r6
  203610:	e894 0006 	ldmia.w	r4, {r1, r2}
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  203614:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
  203616:	1a52      	subs	r2, r2, r1
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  203618:	491a      	ldr	r1, [pc, #104]	; (203684 <oslib_test_001_002_execute.lto_priv.175+0x2d4>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  20361a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  20361e:	1f1d      	subs	r5, r3, #4
  203620:	4268      	negs	r0, r5
  203622:	4168      	adcs	r0, r5
  203624:	f7ff f81c 	bl	202660 <_test_assert>
  203628:	2800      	cmp	r0, #0
  20362a:	f47f af21 	bne.w	203470 <oslib_test_001_002_execute.lto_priv.175+0xc0>
  20362e:	f388 8811 	msr	BASEPRI, r8
  203632:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
  203636:	6920      	ldr	r0, [r4, #16]
  203638:	4913      	ldr	r1, [pc, #76]	; (203688 <oslib_test_001_002_execute.lto_priv.175+0x2d8>)
  20363a:	fab0 f080 	clz	r0, r0
  20363e:	0940      	lsrs	r0, r0, #5
  203640:	f7ff f80e 	bl	202660 <_test_assert>
  203644:	2800      	cmp	r0, #0
  203646:	f47f af13 	bne.w	203470 <oslib_test_001_002_execute.lto_priv.175+0xc0>
  20364a:	f388 8811 	msr	BASEPRI, r8
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
  20364e:	6820      	ldr	r0, [r4, #0]
  203650:	68a3      	ldr	r3, [r4, #8]
  203652:	490e      	ldr	r1, [pc, #56]	; (20368c <oslib_test_001_002_execute.lto_priv.175+0x2dc>)
  203654:	1ac2      	subs	r2, r0, r3
  203656:	4250      	negs	r0, r2
  203658:	4150      	adcs	r0, r2
  20365a:	f7ff f801 	bl	202660 <_test_assert>
  20365e:	2800      	cmp	r0, #0
  203660:	f47f aec4 	bne.w	2033ec <oslib_test_001_002_execute.lto_priv.175+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  203664:	6820      	ldr	r0, [r4, #0]
  203666:	68e3      	ldr	r3, [r4, #12]
  203668:	4909      	ldr	r1, [pc, #36]	; (203690 <oslib_test_001_002_execute.lto_priv.175+0x2e0>)
  20366a:	1ac3      	subs	r3, r0, r3
  20366c:	4258      	negs	r0, r3
  20366e:	4158      	adcs	r0, r3
  203670:	f7fe fff6 	bl	202660 <_test_assert>
  203674:	e6ba      	b.n	2033ec <oslib_test_001_002_execute.lto_priv.175+0x3c>
  203676:	bf00      	nop
  203678:	2000098c 	.word	0x2000098c
  20367c:	20020034 	.word	0x20020034
  203680:	08008ad4 	.word	0x08008ad4
  203684:	08008c04 	.word	0x08008c04
  203688:	08008ae0 	.word	0x08008ae0
  20368c:	08008aec 	.word	0x08008aec
  203690:	08008b10 	.word	0x08008b10
  203694:	08008b78 	.word	0x08008b78
  203698:	08008b34 	.word	0x08008b34
  20369c:	08008b40 	.word	0x08008b40
  2036a0:	08008b4c 	.word	0x08008b4c
  2036a4:	08008b64 	.word	0x08008b64
  2036a8:	08007f14 	.word	0x08007f14
  2036ac:	00000000 	.word	0x00000000

002036b0 <rt_test_010_011_setup.lto_priv.167>:
  tqp->next = (thread_t *)tqp;
  2036b0:	4b02      	ldr	r3, [pc, #8]	; (2036bc <rt_test_010_011_setup.lto_priv.167+0xc>)
  2036b2:	2200      	movs	r2, #0
  2036b4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  2036b6:	605b      	str	r3, [r3, #4]
  2036b8:	609a      	str	r2, [r3, #8]
  2036ba:	4770      	bx	lr
  2036bc:	20000a50 	.word	0x20000a50

002036c0 <rt_test_010_010_setup.lto_priv.165>:
  tqp->next = (thread_t *)tqp;
  2036c0:	4b02      	ldr	r3, [pc, #8]	; (2036cc <rt_test_010_010_setup.lto_priv.165+0xc>)
  2036c2:	2201      	movs	r2, #1
  2036c4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  2036c6:	605b      	str	r3, [r3, #4]
  2036c8:	609a      	str	r2, [r3, #8]
  2036ca:	4770      	bx	lr
  2036cc:	20000a60 	.word	0x20000a60

002036d0 <tmo>:
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
static mutex_t mtx1;
#endif

static void tmo(void *param) {(void)param;}
  2036d0:	4770      	bx	lr
  2036d2:	bf00      	nop
	...

002036e0 <rt_test_010_007_setup.lto_priv.161>:
  tqp->next = (thread_t *)tqp;
  2036e0:	4b02      	ldr	r3, [pc, #8]	; (2036ec <rt_test_010_007_setup.lto_priv.161+0xc>)
  2036e2:	2200      	movs	r2, #0
  2036e4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  2036e6:	605b      	str	r3, [r3, #4]
  2036e8:	609a      	str	r2, [r3, #8]
  2036ea:	4770      	bx	lr
  2036ec:	20000a60 	.word	0x20000a60

002036f0 <rt_test_009_002_setup.lto_priv.153>:
  mp->next = NULL;
  2036f0:	4b04      	ldr	r3, [pc, #16]	; (203704 <rt_test_009_002_setup.lto_priv.153+0x14>)
  2036f2:	2200      	movs	r2, #0
  mp->object_size = size;
  2036f4:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
  2036f8:	2104      	movs	r1, #4
  mp->next = NULL;
  2036fa:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
  2036fc:	6058      	str	r0, [r3, #4]
  mp->align = align;
  2036fe:	6099      	str	r1, [r3, #8]
  mp->provider = provider;
  203700:	60da      	str	r2, [r3, #12]
  203702:	4770      	bx	lr
  203704:	20000964 	.word	0x20000964
	...

00203710 <oslib_test_001_002_teardown.lto_priv.174>:
  203710:	f7ff bdb6 	b.w	203280 <oslib_test_001_003_teardown.lto_priv.177>
	...

00203720 <oslib_test_001_001_teardown.lto_priv.171>:
  203720:	f7ff bdae 	b.w	203280 <oslib_test_001_003_teardown.lto_priv.177>
	...

00203730 <oslib_test_001_002_setup.lto_priv.173>:
  203730:	f7ff b9c6 	b.w	202ac0 <oslib_test_001_003_setup.lto_priv.176>
	...

00203740 <oslib_test_001_001_setup.lto_priv.170>:
  203740:	f7ff b9be 	b.w	202ac0 <oslib_test_001_003_setup.lto_priv.176>
	...

00203750 <oslib_test_001_001_execute.lto_priv.172>:
static void oslib_test_001_001_execute(void) {
  203750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
  203754:	2301      	movs	r3, #1
  203756:	4fb6      	ldr	r7, [pc, #728]	; (203a30 <oslib_test_001_001_execute.lto_priv.172+0x2e0>)
static void oslib_test_001_001_execute(void) {
  203758:	b082      	sub	sp, #8
  20375a:	2620      	movs	r6, #32
  test_set_step(1);
  20375c:	603b      	str	r3, [r7, #0]
  20375e:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
  203762:	4cb4      	ldr	r4, [pc, #720]	; (203a34 <oslib_test_001_001_execute.lto_priv.172+0x2e4>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
  203764:	49b4      	ldr	r1, [pc, #720]	; (203a38 <oslib_test_001_001_execute.lto_priv.172+0x2e8>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  203766:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
  203768:	e894 000c 	ldmia.w	r4, {r2, r3}
  20376c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  20376e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
  203772:	f1a0 0004 	sub.w	r0, r0, #4
  203776:	fab0 f080 	clz	r0, r0
  20377a:	0940      	lsrs	r0, r0, #5
  20377c:	f7fe ff70 	bl	202660 <_test_assert>
  203780:	b128      	cbz	r0, 20378e <oslib_test_001_001_execute.lto_priv.172+0x3e>
  203782:	2300      	movs	r3, #0
  203784:	f383 8811 	msr	BASEPRI, r3
}
  203788:	b002      	add	sp, #8
  20378a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  20378e:	4605      	mov	r5, r0
  203790:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
  203794:	2302      	movs	r3, #2
  203796:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
  203798:	f7fd f8ba 	bl	200910 <chMBReset.constprop.29>
  20379c:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
  2037a0:	e894 000c 	ldmia.w	r4, {r2, r3}
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  2037a4:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
  2037a6:	1a9b      	subs	r3, r3, r2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  2037a8:	49a4      	ldr	r1, [pc, #656]	; (203a3c <oslib_test_001_001_execute.lto_priv.172+0x2ec>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  2037aa:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
  2037ae:	f1a0 0004 	sub.w	r0, r0, #4
  2037b2:	fab0 f080 	clz	r0, r0
  2037b6:	0940      	lsrs	r0, r0, #5
  2037b8:	f7fe ff52 	bl	202660 <_test_assert>
  2037bc:	4680      	mov	r8, r0
  2037be:	b120      	cbz	r0, 2037ca <oslib_test_001_001_execute.lto_priv.172+0x7a>
  2037c0:	f385 8811 	msr	BASEPRI, r5
}
  2037c4:	b002      	add	sp, #8
  2037c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  2037ca:	f380 8811 	msr	BASEPRI, r0
  2037ce:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
  2037d2:	6920      	ldr	r0, [r4, #16]
  2037d4:	499a      	ldr	r1, [pc, #616]	; (203a40 <oslib_test_001_001_execute.lto_priv.172+0x2f0>)
  2037d6:	fab0 f080 	clz	r0, r0
  2037da:	0940      	lsrs	r0, r0, #5
  2037dc:	f7fe ff40 	bl	202660 <_test_assert>
  2037e0:	4605      	mov	r5, r0
  2037e2:	b120      	cbz	r0, 2037ee <oslib_test_001_001_execute.lto_priv.172+0x9e>
  2037e4:	f388 8811 	msr	BASEPRI, r8
}
  2037e8:	b002      	add	sp, #8
  2037ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  2037ee:	f380 8811 	msr	BASEPRI, r0
  2037f2:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
  2037f6:	6820      	ldr	r0, [r4, #0]
  2037f8:	68a3      	ldr	r3, [r4, #8]
  2037fa:	4992      	ldr	r1, [pc, #584]	; (203a44 <oslib_test_001_001_execute.lto_priv.172+0x2f4>)
  2037fc:	1ac0      	subs	r0, r0, r3
  2037fe:	fab0 f080 	clz	r0, r0
  203802:	0940      	lsrs	r0, r0, #5
  203804:	f7fe ff2c 	bl	202660 <_test_assert>
  203808:	4680      	mov	r8, r0
  20380a:	2800      	cmp	r0, #0
  20380c:	d1d8      	bne.n	2037c0 <oslib_test_001_001_execute.lto_priv.172+0x70>
  20380e:	f380 8811 	msr	BASEPRI, r0
  203812:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  203816:	6820      	ldr	r0, [r4, #0]
  203818:	68e3      	ldr	r3, [r4, #12]
  20381a:	498b      	ldr	r1, [pc, #556]	; (203a48 <oslib_test_001_001_execute.lto_priv.172+0x2f8>)
  20381c:	1ac0      	subs	r0, r0, r3
  20381e:	fab0 f080 	clz	r0, r0
  203822:	0940      	lsrs	r0, r0, #5
  203824:	f7fe ff1c 	bl	202660 <_test_assert>
  203828:	2800      	cmp	r0, #0
  20382a:	d1db      	bne.n	2037e4 <oslib_test_001_001_execute.lto_priv.172+0x94>
  20382c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
  203830:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
  203832:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  test_set_step(3);
  203836:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
  203838:	f7fd f88a 	bl	200950 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_RESET, "not in reset state");
  20383c:	1c85      	adds	r5, r0, #2
  20383e:	4983      	ldr	r1, [pc, #524]	; (203a4c <oslib_test_001_001_execute.lto_priv.172+0x2fc>)
  203840:	bf14      	ite	ne
  203842:	2000      	movne	r0, #0
  203844:	2001      	moveq	r0, #1
  203846:	f7fe ff0b 	bl	202660 <_test_assert>
  20384a:	2800      	cmp	r0, #0
  20384c:	d19c      	bne.n	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
  20384e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  203852:	f7fd f8e5 	bl	200a20 <chMBPostAheadTimeout.constprop.24>
    test_assert(msg1 == MSG_RESET, "not in reset state");
  203856:	1c82      	adds	r2, r0, #2
  203858:	497c      	ldr	r1, [pc, #496]	; (203a4c <oslib_test_001_001_execute.lto_priv.172+0x2fc>)
  20385a:	bf14      	ite	ne
  20385c:	2000      	movne	r0, #0
  20385e:	2001      	moveq	r0, #1
  203860:	f7fe fefe 	bl	202660 <_test_assert>
  203864:	2800      	cmp	r0, #0
  203866:	d18f      	bne.n	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
  203868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  20386c:	a801      	add	r0, sp, #4
  20386e:	f7fd f93f 	bl	200af0 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_RESET, "not in reset state");
  203872:	1c83      	adds	r3, r0, #2
  203874:	4975      	ldr	r1, [pc, #468]	; (203a4c <oslib_test_001_001_execute.lto_priv.172+0x2fc>)
  203876:	bf14      	ite	ne
  203878:	2000      	movne	r0, #0
  20387a:	2001      	moveq	r0, #1
  20387c:	f7fe fef0 	bl	202660 <_test_assert>
  203880:	2800      	cmp	r0, #0
  203882:	d181      	bne.n	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
  test_set_step(4);
  203884:	2304      	movs	r3, #4
  203886:	2542      	movs	r5, #66	; 0x42
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  203888:	4e71      	ldr	r6, [pc, #452]	; (203a50 <oslib_test_001_001_execute.lto_priv.172+0x300>)
  mbp->reset = false;
  20388a:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
  20388c:	603b      	str	r3, [r7, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
  20388e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  203892:	4628      	mov	r0, r5
  203894:	f7fd f85c 	bl	200950 <chMBPostTimeout.constprop.27>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  203898:	fab0 f080 	clz	r0, r0
  20389c:	4631      	mov	r1, r6
  20389e:	3501      	adds	r5, #1
  2038a0:	0940      	lsrs	r0, r0, #5
  2038a2:	f7fe fedd 	bl	202660 <_test_assert>
  2038a6:	2800      	cmp	r0, #0
  2038a8:	f47f af6e 	bne.w	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
  2038ac:	2d45      	cmp	r5, #69	; 0x45
  2038ae:	d1ee      	bne.n	20388e <oslib_test_001_001_execute.lto_priv.172+0x13e>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
  2038b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  2038b4:	2041      	movs	r0, #65	; 0x41
  2038b6:	f7fd f8b3 	bl	200a20 <chMBPostAheadTimeout.constprop.24>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
  2038ba:	fab0 f080 	clz	r0, r0
  2038be:	4964      	ldr	r1, [pc, #400]	; (203a50 <oslib_test_001_001_execute.lto_priv.172+0x300>)
  2038c0:	0940      	lsrs	r0, r0, #5
  2038c2:	f7fe fecd 	bl	202660 <_test_assert>
  2038c6:	4605      	mov	r5, r0
  2038c8:	2800      	cmp	r0, #0
  2038ca:	f47f af5d 	bne.w	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
  test_set_step(5);
  2038ce:	2305      	movs	r3, #5
  2038d0:	2620      	movs	r6, #32
  2038d2:	603b      	str	r3, [r7, #0]
  2038d4:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
  2038d8:	e894 000a 	ldmia.w	r4, {r1, r3}
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
  2038dc:	6922      	ldr	r2, [r4, #16]
  2038de:	1a5b      	subs	r3, r3, r1
  2038e0:	495c      	ldr	r1, [pc, #368]	; (203a54 <oslib_test_001_001_execute.lto_priv.172+0x304>)
  2038e2:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
  2038e6:	bf0c      	ite	eq
  2038e8:	2001      	moveq	r0, #1
  2038ea:	2000      	movne	r0, #0
  2038ec:	f7fe feb8 	bl	202660 <_test_assert>
  2038f0:	4680      	mov	r8, r0
  2038f2:	2800      	cmp	r0, #0
  2038f4:	f47f af64 	bne.w	2037c0 <oslib_test_001_001_execute.lto_priv.172+0x70>
  2038f8:	f380 8811 	msr	BASEPRI, r0
  2038fc:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
  203900:	6920      	ldr	r0, [r4, #16]
  203902:	4955      	ldr	r1, [pc, #340]	; (203a58 <oslib_test_001_001_execute.lto_priv.172+0x308>)
  203904:	f1a0 0c04 	sub.w	ip, r0, #4
  203908:	f1dc 0000 	rsbs	r0, ip, #0
  20390c:	eb40 000c 	adc.w	r0, r0, ip
  203910:	f7fe fea6 	bl	202660 <_test_assert>
  203914:	4605      	mov	r5, r0
  203916:	2800      	cmp	r0, #0
  203918:	f47f af64 	bne.w	2037e4 <oslib_test_001_001_execute.lto_priv.172+0x94>
  20391c:	f380 8811 	msr	BASEPRI, r0
  203920:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
  203924:	68e0      	ldr	r0, [r4, #12]
  203926:	68a3      	ldr	r3, [r4, #8]
  203928:	494c      	ldr	r1, [pc, #304]	; (203a5c <oslib_test_001_001_execute.lto_priv.172+0x30c>)
  20392a:	eba0 0e03 	sub.w	lr, r0, r3
  20392e:	f1de 0000 	rsbs	r0, lr, #0
  203932:	eb40 000e 	adc.w	r0, r0, lr
  203936:	f7fe fe93 	bl	202660 <_test_assert>
  20393a:	2800      	cmp	r0, #0
  20393c:	f47f af40 	bne.w	2037c0 <oslib_test_001_001_execute.lto_priv.172+0x70>
  203940:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
  203944:	2306      	movs	r3, #6
  203946:	2504      	movs	r5, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  203948:	4e41      	ldr	r6, [pc, #260]	; (203a50 <oslib_test_001_001_execute.lto_priv.172+0x300>)
  test_set_step(6);
  20394a:	603b      	str	r3, [r7, #0]
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
  20394c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  203950:	a801      	add	r0, sp, #4
  203952:	f7fd f8cd 	bl	200af0 <chMBFetchTimeout.constprop.21>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
  203956:	fab0 f080 	clz	r0, r0
  20395a:	4631      	mov	r1, r6
  20395c:	0940      	lsrs	r0, r0, #5
  20395e:	f7fe fe7f 	bl	202660 <_test_assert>
  203962:	2800      	cmp	r0, #0
  203964:	f47f af10 	bne.w	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
      test_emit_token(msg2);
  203968:	f89d 0004 	ldrb.w	r0, [sp, #4]
  20396c:	f7fe fb78 	bl	202060 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
  203970:	3d01      	subs	r5, #1
  203972:	d1eb      	bne.n	20394c <oslib_test_001_001_execute.lto_priv.172+0x1fc>
    test_assert_sequence("ABCD", "wrong get sequence");
  203974:	493a      	ldr	r1, [pc, #232]	; (203a60 <oslib_test_001_001_execute.lto_priv.172+0x310>)
  203976:	483b      	ldr	r0, [pc, #236]	; (203a64 <oslib_test_001_001_execute.lto_priv.172+0x314>)
  203978:	f7fe fe4a 	bl	202610 <_test_assert_sequence>
  20397c:	2800      	cmp	r0, #0
  20397e:	f47f af03 	bne.w	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
  test_set_step(7);
  203982:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
  203984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  203988:	2046      	movs	r0, #70	; 0x46
  test_set_step(7);
  20398a:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
  20398c:	f7fc ffe0 	bl	200950 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
  203990:	fab0 f080 	clz	r0, r0
  203994:	492e      	ldr	r1, [pc, #184]	; (203a50 <oslib_test_001_001_execute.lto_priv.172+0x300>)
  203996:	0940      	lsrs	r0, r0, #5
  203998:	f7fe fe62 	bl	202660 <_test_assert>
  20399c:	2800      	cmp	r0, #0
  20399e:	f47f aef3 	bne.w	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
  2039a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  2039a6:	a801      	add	r0, sp, #4
  2039a8:	f7fd f8a2 	bl	200af0 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
  2039ac:	fab0 f080 	clz	r0, r0
  2039b0:	4927      	ldr	r1, [pc, #156]	; (203a50 <oslib_test_001_001_execute.lto_priv.172+0x300>)
  2039b2:	0940      	lsrs	r0, r0, #5
  2039b4:	f7fe fe54 	bl	202660 <_test_assert>
  2039b8:	2800      	cmp	r0, #0
  2039ba:	f47f aee5 	bne.w	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
  test_set_step(8);
  2039be:	2308      	movs	r3, #8
  2039c0:	2620      	movs	r6, #32
  2039c2:	603b      	str	r3, [r7, #0]
  2039c4:	f386 8811 	msr	BASEPRI, r6
  2039c8:	e894 0006 	ldmia.w	r4, {r1, r2}
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  2039cc:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
  2039ce:	1a52      	subs	r2, r2, r1
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  2039d0:	491a      	ldr	r1, [pc, #104]	; (203a3c <oslib_test_001_001_execute.lto_priv.172+0x2ec>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  2039d2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  2039d6:	1f1f      	subs	r7, r3, #4
  2039d8:	4278      	negs	r0, r7
  2039da:	4178      	adcs	r0, r7
  2039dc:	f7fe fe40 	bl	202660 <_test_assert>
  2039e0:	2800      	cmp	r0, #0
  2039e2:	f47f aeed 	bne.w	2037c0 <oslib_test_001_001_execute.lto_priv.172+0x70>
  2039e6:	f385 8811 	msr	BASEPRI, r5
  2039ea:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
  2039ee:	6920      	ldr	r0, [r4, #16]
  2039f0:	4913      	ldr	r1, [pc, #76]	; (203a40 <oslib_test_001_001_execute.lto_priv.172+0x2f0>)
  2039f2:	fab0 f080 	clz	r0, r0
  2039f6:	0940      	lsrs	r0, r0, #5
  2039f8:	f7fe fe32 	bl	202660 <_test_assert>
  2039fc:	2800      	cmp	r0, #0
  2039fe:	f47f aedf 	bne.w	2037c0 <oslib_test_001_001_execute.lto_priv.172+0x70>
  203a02:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
  203a06:	6820      	ldr	r0, [r4, #0]
  203a08:	68a3      	ldr	r3, [r4, #8]
  203a0a:	490e      	ldr	r1, [pc, #56]	; (203a44 <oslib_test_001_001_execute.lto_priv.172+0x2f4>)
  203a0c:	1ac2      	subs	r2, r0, r3
  203a0e:	4250      	negs	r0, r2
  203a10:	4150      	adcs	r0, r2
  203a12:	f7fe fe25 	bl	202660 <_test_assert>
  203a16:	2800      	cmp	r0, #0
  203a18:	f47f aeb6 	bne.w	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  203a1c:	6820      	ldr	r0, [r4, #0]
  203a1e:	68e3      	ldr	r3, [r4, #12]
  203a20:	4909      	ldr	r1, [pc, #36]	; (203a48 <oslib_test_001_001_execute.lto_priv.172+0x2f8>)
  203a22:	1ac3      	subs	r3, r0, r3
  203a24:	4258      	negs	r0, r3
  203a26:	4158      	adcs	r0, r3
  203a28:	f7fe fe1a 	bl	202660 <_test_assert>
  203a2c:	e6ac      	b.n	203788 <oslib_test_001_001_execute.lto_priv.172+0x38>
  203a2e:	bf00      	nop
  203a30:	2000098c 	.word	0x2000098c
  203a34:	20020034 	.word	0x20020034
  203a38:	08008ad4 	.word	0x08008ad4
  203a3c:	08008c04 	.word	0x08008c04
  203a40:	08008ae0 	.word	0x08008ae0
  203a44:	08008aec 	.word	0x08008aec
  203a48:	08008b10 	.word	0x08008b10
  203a4c:	08008cb8 	.word	0x08008cb8
  203a50:	08008b78 	.word	0x08008b78
  203a54:	08008b34 	.word	0x08008b34
  203a58:	08008b40 	.word	0x08008b40
  203a5c:	08008b4c 	.word	0x08008b4c
  203a60:	08008b64 	.word	0x08008b64
  203a64:	08007f14 	.word	0x08007f14
	...

00203a70 <rt_test_010_012_execute.lto_priv.169>:
 * - [10.12.8] The size of an event listener is printed.
 * - [10.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_010_012_execute(void) {
  203a70:	b570      	push	{r4, r5, r6, lr}

  /* [10.12.1] The size of the system area is printed.*/
  test_set_step(1);
  203a72:	2301      	movs	r3, #1
  203a74:	4d32      	ldr	r5, [pc, #200]	; (203b40 <rt_test_010_012_execute.lto_priv.169+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
  203a76:	4c33      	ldr	r4, [pc, #204]	; (203b44 <rt_test_010_012_execute.lto_priv.169+0xd4>)
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
  }

  /* [10.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
  203a78:	2604      	movs	r6, #4
    test_print("--- System: ");
  203a7a:	4833      	ldr	r0, [pc, #204]	; (203b48 <rt_test_010_012_execute.lto_priv.169+0xd8>)
  test_set_step(1);
  203a7c:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
  203a7e:	f7fe fb27 	bl	2020d0 <test_print>
    test_printn(sizeof(ch_system_t));
  203a82:	2078      	movs	r0, #120	; 0x78
  203a84:	f7fe fa74 	bl	201f70 <test_printn>
    test_println(" bytes");
  203a88:	4620      	mov	r0, r4
  203a8a:	f7fe fb01 	bl	202090 <test_println>
  test_set_step(2);
  203a8e:	2302      	movs	r3, #2
    test_print("--- Thread: ");
  203a90:	482e      	ldr	r0, [pc, #184]	; (203b4c <rt_test_010_012_execute.lto_priv.169+0xdc>)
  test_set_step(2);
  203a92:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
  203a94:	f7fe fb1c 	bl	2020d0 <test_print>
    test_printn(sizeof(thread_t));
  203a98:	2044      	movs	r0, #68	; 0x44
  203a9a:	f7fe fa69 	bl	201f70 <test_printn>
    test_println(" bytes");
  203a9e:	4620      	mov	r0, r4
  203aa0:	f7fe faf6 	bl	202090 <test_println>
  test_set_step(3);
  203aa4:	2303      	movs	r3, #3
    test_print("--- Timer : ");
  203aa6:	482a      	ldr	r0, [pc, #168]	; (203b50 <rt_test_010_012_execute.lto_priv.169+0xe0>)
  test_set_step(3);
  203aa8:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
  203aaa:	f7fe fb11 	bl	2020d0 <test_print>
    test_printn(sizeof(virtual_timer_t));
  203aae:	2014      	movs	r0, #20
  203ab0:	f7fe fa5e 	bl	201f70 <test_printn>
    test_println(" bytes");
  203ab4:	4620      	mov	r0, r4
  203ab6:	f7fe faeb 	bl	202090 <test_println>
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
  203aba:	4826      	ldr	r0, [pc, #152]	; (203b54 <rt_test_010_012_execute.lto_priv.169+0xe4>)
  test_set_step(4);
  203abc:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
  203abe:	f7fe fb07 	bl	2020d0 <test_print>
    test_printn(sizeof(semaphore_t));
  203ac2:	200c      	movs	r0, #12
  203ac4:	f7fe fa54 	bl	201f70 <test_printn>
    test_println(" bytes");
  203ac8:	4620      	mov	r0, r4
  203aca:	f7fe fae1 	bl	202090 <test_println>
#endif
  }

  /* [10.12.5] The size of a mutex is printed.*/
  test_set_step(5);
  203ace:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
  203ad0:	4821      	ldr	r0, [pc, #132]	; (203b58 <rt_test_010_012_execute.lto_priv.169+0xe8>)
  test_set_step(5);
  203ad2:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
  203ad4:	f7fe fafc 	bl	2020d0 <test_print>
    test_printn(sizeof(mutex_t));
  203ad8:	2010      	movs	r0, #16
  203ada:	f7fe fa49 	bl	201f70 <test_printn>
    test_println(" bytes");
  203ade:	4620      	mov	r0, r4
  203ae0:	f7fe fad6 	bl	202090 <test_println>
#endif
  }

  /* [10.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
  203ae4:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
  203ae6:	481d      	ldr	r0, [pc, #116]	; (203b5c <rt_test_010_012_execute.lto_priv.169+0xec>)
  test_set_step(6);
  203ae8:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
  203aea:	f7fe faf1 	bl	2020d0 <test_print>
    test_printn(sizeof(condition_variable_t));
  203aee:	2008      	movs	r0, #8
  203af0:	f7fe fa3e 	bl	201f70 <test_printn>
    test_println(" bytes");
  203af4:	4620      	mov	r0, r4
  203af6:	f7fe facb 	bl	202090 <test_println>
#endif
  }

  /* [10.12.7] The size of an event source is printed.*/
  test_set_step(7);
  203afa:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
  203afc:	4818      	ldr	r0, [pc, #96]	; (203b60 <rt_test_010_012_execute.lto_priv.169+0xf0>)
  test_set_step(7);
  203afe:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
  203b00:	f7fe fae6 	bl	2020d0 <test_print>
    test_printn(sizeof(event_source_t));
  203b04:	4630      	mov	r0, r6
  203b06:	f7fe fa33 	bl	201f70 <test_printn>
    test_println(" bytes");
  203b0a:	4620      	mov	r0, r4
  203b0c:	f7fe fac0 	bl	202090 <test_println>
#endif
  }

  /* [10.12.8] The size of an event listener is printed.*/
  test_set_step(8);
  203b10:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
  203b12:	4814      	ldr	r0, [pc, #80]	; (203b64 <rt_test_010_012_execute.lto_priv.169+0xf4>)
  test_set_step(8);
  203b14:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
  203b16:	f7fe fadb 	bl	2020d0 <test_print>
    test_printn(sizeof(event_listener_t));
  203b1a:	2014      	movs	r0, #20
  203b1c:	f7fe fa28 	bl	201f70 <test_printn>
    test_println(" bytes");
  203b20:	4620      	mov	r0, r4
  203b22:	f7fe fab5 	bl	202090 <test_println>
#endif
  }

  /* [10.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
  203b26:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
  203b28:	480f      	ldr	r0, [pc, #60]	; (203b68 <rt_test_010_012_execute.lto_priv.169+0xf8>)
  test_set_step(9);
  203b2a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
  203b2c:	f7fe fad0 	bl	2020d0 <test_print>
    test_printn(sizeof(mailbox_t));
  203b30:	2028      	movs	r0, #40	; 0x28
  203b32:	f7fe fa1d 	bl	201f70 <test_printn>
    test_println(" bytes");
  203b36:	4620      	mov	r0, r4
#endif
  }
}
  203b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
  203b3c:	f7fe baa8 	b.w	202090 <test_println>
  203b40:	2000098c 	.word	0x2000098c
  203b44:	08008d84 	.word	0x08008d84
  203b48:	08008d74 	.word	0x08008d74
  203b4c:	08008d8c 	.word	0x08008d8c
  203b50:	08008d9c 	.word	0x08008d9c
  203b54:	08008dac 	.word	0x08008dac
  203b58:	08008dbc 	.word	0x08008dbc
  203b5c:	08008dcc 	.word	0x08008dcc
  203b60:	08008ddc 	.word	0x08008ddc
  203b64:	08008dec 	.word	0x08008dec
  203b68:	08008dfc 	.word	0x08008dfc
  203b6c:	00000000 	.word	0x00000000

00203b70 <rt_test_010_011_execute.lto_priv.168>:
static void rt_test_010_011_execute(void) {
  203b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
  203b74:	2301      	movs	r3, #1
  203b76:	f8df 907c 	ldr.w	r9, [pc, #124]	; 203bf4 <rt_test_010_011_execute.lto_priv.168+0x84>
    n = 0;
  203b7a:	2500      	movs	r5, #0
      chMtxLock(&mtx1);
  203b7c:	4c1a      	ldr	r4, [pc, #104]	; (203be8 <rt_test_010_011_execute.lto_priv.168+0x78>)
  test_set_step(1);
  203b7e:	f8c9 3000 	str.w	r3, [r9]
  203b82:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    start = test_wait_tick();
  203b86:	f7fe fa23 	bl	201fd0 <test_wait_tick>
    } while (chVTIsSystemTimeWithinX(start, end));
  203b8a:	f242 760f 	movw	r6, #9999	; 0x270f
    start = test_wait_tick();
  203b8e:	4607      	mov	r7, r0
      chMtxLock(&mtx1);
  203b90:	4620      	mov	r0, r4
      n++;
  203b92:	3501      	adds	r5, #1
      chMtxLock(&mtx1);
  203b94:	f003 fa1c 	bl	206fd0 <chMtxLock>
      chMtxUnlock(&mtx1);
  203b98:	4620      	mov	r0, r4
  203b9a:	f003 f979 	bl	206e90 <chMtxUnlock>
      chMtxLock(&mtx1);
  203b9e:	4620      	mov	r0, r4
  203ba0:	f003 fa16 	bl	206fd0 <chMtxLock>
      chMtxUnlock(&mtx1);
  203ba4:	4620      	mov	r0, r4
  203ba6:	f003 f973 	bl	206e90 <chMtxUnlock>
      chMtxLock(&mtx1);
  203baa:	4620      	mov	r0, r4
  203bac:	f003 fa10 	bl	206fd0 <chMtxLock>
      chMtxUnlock(&mtx1);
  203bb0:	4620      	mov	r0, r4
  203bb2:	f003 f96d 	bl	206e90 <chMtxUnlock>
      chMtxLock(&mtx1);
  203bb6:	4620      	mov	r0, r4
  203bb8:	f003 fa0a 	bl	206fd0 <chMtxLock>
      chMtxUnlock(&mtx1);
  203bbc:	4620      	mov	r0, r4
  203bbe:	f003 f967 	bl	206e90 <chMtxUnlock>
  203bc2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  203bc6:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
  203bc8:	42b3      	cmp	r3, r6
  203bca:	d9e1      	bls.n	203b90 <rt_test_010_011_execute.lto_priv.168+0x20>
  test_set_step(2);
  203bcc:	2302      	movs	r3, #2
    test_print("--- Score : ");
  203bce:	4807      	ldr	r0, [pc, #28]	; (203bec <rt_test_010_011_execute.lto_priv.168+0x7c>)
  test_set_step(2);
  203bd0:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
  203bd4:	f7fe fa7c 	bl	2020d0 <test_print>
    test_printn(n * 4);
  203bd8:	00a8      	lsls	r0, r5, #2
  203bda:	f7fe f9c9 	bl	201f70 <test_printn>
    test_println(" lock+unlock/S");
  203bde:	4804      	ldr	r0, [pc, #16]	; (203bf0 <rt_test_010_011_execute.lto_priv.168+0x80>)
}
  203be0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
  203be4:	f7fe ba54 	b.w	202090 <test_println>
  203be8:	20000a50 	.word	0x20000a50
  203bec:	08008d54 	.word	0x08008d54
  203bf0:	08008d64 	.word	0x08008d64
  203bf4:	2000098c 	.word	0x2000098c
	...

00203c00 <rt_test_010_010_execute.lto_priv.166>:
static void rt_test_010_010_execute(void) {
  203c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
  203c04:	2301      	movs	r3, #1
  203c06:	f8df 907c 	ldr.w	r9, [pc, #124]	; 203c84 <rt_test_010_010_execute.lto_priv.166+0x84>
    n = 0;
  203c0a:	2500      	movs	r5, #0
      chSemWait(&sem1);
  203c0c:	4c1a      	ldr	r4, [pc, #104]	; (203c78 <rt_test_010_010_execute.lto_priv.166+0x78>)
  test_set_step(1);
  203c0e:	f8c9 3000 	str.w	r3, [r9]
  203c12:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    start = test_wait_tick();
  203c16:	f7fe f9db 	bl	201fd0 <test_wait_tick>
    } while (chVTIsSystemTimeWithinX(start, end));
  203c1a:	f242 760f 	movw	r6, #9999	; 0x270f
    start = test_wait_tick();
  203c1e:	4607      	mov	r7, r0
      chSemWait(&sem1);
  203c20:	4620      	mov	r0, r4
      n++;
  203c22:	3501      	adds	r5, #1
      chSemWait(&sem1);
  203c24:	f003 f87c 	bl	206d20 <chSemWait>
      chSemSignal(&sem1);
  203c28:	4620      	mov	r0, r4
  203c2a:	f003 f821 	bl	206c70 <chSemSignal>
      chSemWait(&sem1);
  203c2e:	4620      	mov	r0, r4
  203c30:	f003 f876 	bl	206d20 <chSemWait>
      chSemSignal(&sem1);
  203c34:	4620      	mov	r0, r4
  203c36:	f003 f81b 	bl	206c70 <chSemSignal>
      chSemWait(&sem1);
  203c3a:	4620      	mov	r0, r4
  203c3c:	f003 f870 	bl	206d20 <chSemWait>
      chSemSignal(&sem1);
  203c40:	4620      	mov	r0, r4
  203c42:	f003 f815 	bl	206c70 <chSemSignal>
      chSemWait(&sem1);
  203c46:	4620      	mov	r0, r4
  203c48:	f003 f86a 	bl	206d20 <chSemWait>
      chSemSignal(&sem1);
  203c4c:	4620      	mov	r0, r4
  203c4e:	f003 f80f 	bl	206c70 <chSemSignal>
  203c52:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  203c56:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
  203c58:	42b3      	cmp	r3, r6
  203c5a:	d9e1      	bls.n	203c20 <rt_test_010_010_execute.lto_priv.166+0x20>
  test_set_step(2);
  203c5c:	2302      	movs	r3, #2
    test_print("--- Score : ");
  203c5e:	4807      	ldr	r0, [pc, #28]	; (203c7c <rt_test_010_010_execute.lto_priv.166+0x7c>)
  test_set_step(2);
  203c60:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
  203c64:	f7fe fa34 	bl	2020d0 <test_print>
    test_printn(n * 4);
  203c68:	00a8      	lsls	r0, r5, #2
  203c6a:	f7fe f981 	bl	201f70 <test_printn>
    test_println(" wait+signal/S");
  203c6e:	4804      	ldr	r0, [pc, #16]	; (203c80 <rt_test_010_010_execute.lto_priv.166+0x80>)
}
  203c70:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
  203c74:	f7fe ba0c 	b.w	202090 <test_println>
  203c78:	20000a60 	.word	0x20000a60
  203c7c:	08008d54 	.word	0x08008d54
  203c80:	08008d44 	.word	0x08008d44
  203c84:	2000098c 	.word	0x2000098c
	...

00203c90 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
  203c90:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
  203c92:	4c08      	ldr	r4, [pc, #32]	; (203cb4 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
  203c94:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
  203c96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  203c9a:	075a      	lsls	r2, r3, #29
  203c9c:	d408      	bmi.n	203cb0 <bmk_thread7+0x20>
    chSemWait(&sem1);
  203c9e:	4d06      	ldr	r5, [pc, #24]	; (203cb8 <bmk_thread7+0x28>)
  203ca0:	4628      	mov	r0, r5
  203ca2:	f003 f83d 	bl	206d20 <chSemWait>
  203ca6:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
  203ca8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  203cac:	075b      	lsls	r3, r3, #29
  203cae:	d5f7      	bpl.n	203ca0 <bmk_thread7+0x10>
  203cb0:	bd38      	pop	{r3, r4, r5, pc}
  203cb2:	bf00      	nop
  203cb4:	20000860 	.word	0x20000860
  203cb8:	20000a60 	.word	0x20000a60
  203cbc:	00000000 	.word	0x00000000

00203cc0 <rt_test_010_009_execute.lto_priv.164>:
static void rt_test_010_009_execute(void) {
  203cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
  203cc4:	2301      	movs	r3, #1
  203cc6:	f8df b08c 	ldr.w	fp, [pc, #140]	; 203d54 <rt_test_010_009_execute.lto_priv.164+0x94>
    n = 0;
  203cca:	2400      	movs	r4, #0
  203ccc:	f04f 0a20 	mov.w	sl, #32
  test_set_step(1);
  203cd0:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
  203cd4:	f7fe f97c 	bl	201fd0 <test_wait_tick>
      chVTDoSetI(&vt1, 1, tmo, NULL);
  203cd8:	46a0      	mov	r8, r4
    start = test_wait_tick();
  203cda:	4681      	mov	r9, r0
      chVTDoSetI(&vt1, 1, tmo, NULL);
  203cdc:	4f18      	ldr	r7, [pc, #96]	; (203d40 <rt_test_010_009_execute.lto_priv.164+0x80>)
  203cde:	4e19      	ldr	r6, [pc, #100]	; (203d44 <rt_test_010_009_execute.lto_priv.164+0x84>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
  203ce0:	4d19      	ldr	r5, [pc, #100]	; (203d48 <rt_test_010_009_execute.lto_priv.164+0x88>)
  203ce2:	f38a 8811 	msr	BASEPRI, sl
      chVTDoSetI(&vt1, 1, tmo, NULL);
  203ce6:	2300      	movs	r3, #0
  203ce8:	463a      	mov	r2, r7
  203cea:	4630      	mov	r0, r6
  203cec:	2101      	movs	r1, #1
  203cee:	f003 fad7 	bl	2072a0 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
  203cf2:	463a      	mov	r2, r7
  203cf4:	2300      	movs	r3, #0
  203cf6:	f242 7110 	movw	r1, #10000	; 0x2710
  203cfa:	4628      	mov	r0, r5
  203cfc:	f003 fad0 	bl	2072a0 <chVTDoSetI>
      chVTDoResetI(&vt1);
  203d00:	4630      	mov	r0, r6
  203d02:	f003 fa95 	bl	207230 <chVTDoResetI>
      chVTDoResetI(&vt2);
  203d06:	4628      	mov	r0, r5
  203d08:	f003 fa92 	bl	207230 <chVTDoResetI>
  203d0c:	f388 8811 	msr	BASEPRI, r8
  203d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
  203d14:	f242 720f 	movw	r2, #9999	; 0x270f
      n++;
  203d18:	3401      	adds	r4, #1
  203d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  203d1c:	eba3 0309 	sub.w	r3, r3, r9
    } while (chVTIsSystemTimeWithinX(start, end));
  203d20:	4293      	cmp	r3, r2
  203d22:	d9de      	bls.n	203ce2 <rt_test_010_009_execute.lto_priv.164+0x22>
  test_set_step(2);
  203d24:	2302      	movs	r3, #2
    test_print("--- Score : ");
  203d26:	4809      	ldr	r0, [pc, #36]	; (203d4c <rt_test_010_009_execute.lto_priv.164+0x8c>)
  test_set_step(2);
  203d28:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
  203d2c:	f7fe f9d0 	bl	2020d0 <test_print>
    test_printn(n * 2);
  203d30:	0060      	lsls	r0, r4, #1
  203d32:	f7fe f91d 	bl	201f70 <test_printn>
    test_println(" timers/S");
  203d36:	4806      	ldr	r0, [pc, #24]	; (203d50 <rt_test_010_009_execute.lto_priv.164+0x90>)
}
  203d38:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
  203d3c:	f7fe b9a8 	b.w	202090 <test_println>
  203d40:	002036d1 	.word	0x002036d1
  203d44:	200010ec 	.word	0x200010ec
  203d48:	20001100 	.word	0x20001100
  203d4c:	08008d54 	.word	0x08008d54
  203d50:	08008d38 	.word	0x08008d38
  203d54:	2000098c 	.word	0x2000098c
	...

00203d60 <rt_test_010_008_execute.lto_priv.163>:
static void rt_test_010_008_execute(void) {
  203d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  203d64:	b083      	sub	sp, #12
  return ch.rlist.current;
  203d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 203e3c <rt_test_010_008_execute.lto_priv.163+0xdc>
  test_set_step(1);
  203d6a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 203e40 <rt_test_010_008_execute.lto_priv.163+0xe0>
  203d6e:	2201      	movs	r2, #1
    n = 0;
  203d70:	ac02      	add	r4, sp, #8
  203d72:	2300      	movs	r3, #0
  test_set_step(1);
  203d74:	f8c9 2000 	str.w	r2, [r9]
    n = 0;
  203d78:	f844 3d04 	str.w	r3, [r4, #-4]!
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
  203d7c:	f7fe f928 	bl	201fd0 <test_wait_tick>
  return chThdGetSelfX()->prio;
  203d80:	f8d8 2018 	ldr.w	r2, [r8, #24]
  203d84:	4623      	mov	r3, r4
  203d86:	4f28      	ldr	r7, [pc, #160]	; (203e28 <rt_test_010_008_execute.lto_priv.163+0xc8>)
  203d88:	4e28      	ldr	r6, [pc, #160]	; (203e2c <rt_test_010_008_execute.lto_priv.163+0xcc>)
  203d8a:	6891      	ldr	r1, [r2, #8]
  203d8c:	463a      	mov	r2, r7
  203d8e:	4630      	mov	r0, r6
  203d90:	4d27      	ldr	r5, [pc, #156]	; (203e30 <rt_test_010_008_execute.lto_priv.163+0xd0>)
  203d92:	3901      	subs	r1, #1
  203d94:	f7fc fb6c 	bl	200470 <chThdCreateStatic.constprop.61>
  203d98:	f8d8 2018 	ldr.w	r2, [r8, #24]
  203d9c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
  203d9e:	4623      	mov	r3, r4
  203da0:	6891      	ldr	r1, [r2, #8]
  203da2:	f506 70a4 	add.w	r0, r6, #328	; 0x148
  203da6:	463a      	mov	r2, r7
  203da8:	3901      	subs	r1, #1
  203daa:	f7fc fb61 	bl	200470 <chThdCreateStatic.constprop.61>
  203dae:	f8d8 2018 	ldr.w	r2, [r8, #24]
  203db2:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
  203db4:	4623      	mov	r3, r4
  203db6:	6891      	ldr	r1, [r2, #8]
  203db8:	f506 7024 	add.w	r0, r6, #656	; 0x290
  203dbc:	463a      	mov	r2, r7
  203dbe:	3901      	subs	r1, #1
  203dc0:	f7fc fb56 	bl	200470 <chThdCreateStatic.constprop.61>
  203dc4:	f8d8 2018 	ldr.w	r2, [r8, #24]
  203dc8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
  203dca:	4623      	mov	r3, r4
  203dcc:	6891      	ldr	r1, [r2, #8]
  203dce:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
  203dd2:	463a      	mov	r2, r7
  203dd4:	3901      	subs	r1, #1
  203dd6:	f7fc fb4b 	bl	200470 <chThdCreateStatic.constprop.61>
  203dda:	f8d8 2018 	ldr.w	r2, [r8, #24]
  203dde:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
  203de0:	4623      	mov	r3, r4
  203de2:	6891      	ldr	r1, [r2, #8]
  203de4:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
  203de8:	463a      	mov	r2, r7
  203dea:	3901      	subs	r1, #1
  203dec:	f7fc fb40 	bl	200470 <chThdCreateStatic.constprop.61>
  test_set_step(2);
  203df0:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
  203df2:	6128      	str	r0, [r5, #16]
    chThdSleepSeconds(1);
  203df4:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(2);
  203df8:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
  203dfc:	f003 fad0 	bl	2073a0 <chThdSleep>
    test_terminate_threads();
  203e00:	f7fe f90e 	bl	202020 <test_terminate_threads>
    test_wait_threads();
  203e04:	f7fe f8f4 	bl	201ff0 <test_wait_threads>
  test_set_step(3);
  203e08:	2303      	movs	r3, #3
    test_print("--- Score : ");
  203e0a:	480a      	ldr	r0, [pc, #40]	; (203e34 <rt_test_010_008_execute.lto_priv.163+0xd4>)
  test_set_step(3);
  203e0c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
  203e10:	f7fe f95e 	bl	2020d0 <test_print>
    test_printn(n);
  203e14:	9801      	ldr	r0, [sp, #4]
  203e16:	f7fe f8ab 	bl	201f70 <test_printn>
    test_println(" ctxswc/S");
  203e1a:	4807      	ldr	r0, [pc, #28]	; (203e38 <rt_test_010_008_execute.lto_priv.163+0xd8>)
  203e1c:	f7fe f938 	bl	202090 <test_println>
}
  203e20:	b003      	add	sp, #12
  203e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  203e26:	bf00      	nop
  203e28:	00203e51 	.word	0x00203e51
  203e2c:	20000a70 	.word	0x20000a70
  203e30:	200010d8 	.word	0x200010d8
  203e34:	08008d54 	.word	0x08008d54
  203e38:	08008d2c 	.word	0x08008d2c
  203e3c:	20000860 	.word	0x20000860
  203e40:	2000098c 	.word	0x2000098c
	...

00203e50 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
  203e50:	b538      	push	{r3, r4, r5, lr}
  203e52:	4604      	mov	r4, r0
  203e54:	4d08      	ldr	r5, [pc, #32]	; (203e78 <bmk_thread8+0x28>)
    chThdYield();
  203e56:	f002 fe1b 	bl	206a90 <chThdYield>
    chThdYield();
  203e5a:	f002 fe19 	bl	206a90 <chThdYield>
    chThdYield();
  203e5e:	f002 fe17 	bl	206a90 <chThdYield>
    chThdYield();
  203e62:	f002 fe15 	bl	206a90 <chThdYield>
    (*(uint32_t *)p) += 4;
  203e66:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
  203e68:	69aa      	ldr	r2, [r5, #24]
  203e6a:	3304      	adds	r3, #4
  203e6c:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
  203e6e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
  203e72:	075b      	lsls	r3, r3, #29
  203e74:	d5ef      	bpl.n	203e56 <bmk_thread8+0x6>
}
  203e76:	bd38      	pop	{r3, r4, r5, pc}
  203e78:	20000860 	.word	0x20000860
  203e7c:	00000000 	.word	0x00000000

00203e80 <rt_test_010_007_execute.lto_priv.162>:
static void rt_test_010_007_execute(void) {
  203e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
  203e84:	4e34      	ldr	r6, [pc, #208]	; (203f58 <rt_test_010_007_execute.lto_priv.162+0xd8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
  203e86:	2300      	movs	r3, #0
  test_set_step(1);
  203e88:	2501      	movs	r5, #1
  203e8a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 203f88 <rt_test_010_007_execute.lto_priv.162+0x108>
  return chThdGetSelfX()->prio;
  203e8e:	69b1      	ldr	r1, [r6, #24]
    n = 0;
  203e90:	461c      	mov	r4, r3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
  203e92:	4a32      	ldr	r2, [pc, #200]	; (203f5c <rt_test_010_007_execute.lto_priv.162+0xdc>)
  203e94:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  203e98:	6889      	ldr	r1, [r1, #8]
  203e9a:	4831      	ldr	r0, [pc, #196]	; (203f60 <rt_test_010_007_execute.lto_priv.162+0xe0>)
  203e9c:	3105      	adds	r1, #5
  test_set_step(1);
  203e9e:	f8c8 5000 	str.w	r5, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
  203ea2:	f7fc fae5 	bl	200470 <chThdCreateStatic.constprop.61>
  203ea6:	69b2      	ldr	r2, [r6, #24]
  203ea8:	4d2e      	ldr	r5, [pc, #184]	; (203f64 <rt_test_010_007_execute.lto_priv.162+0xe4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
  203eaa:	4623      	mov	r3, r4
  203eac:	6891      	ldr	r1, [r2, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
  203eae:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
  203eb0:	3104      	adds	r1, #4
  203eb2:	4a2a      	ldr	r2, [pc, #168]	; (203f5c <rt_test_010_007_execute.lto_priv.162+0xdc>)
  203eb4:	482c      	ldr	r0, [pc, #176]	; (203f68 <rt_test_010_007_execute.lto_priv.162+0xe8>)
  203eb6:	f7fc fadb 	bl	200470 <chThdCreateStatic.constprop.61>
  203eba:	69b2      	ldr	r2, [r6, #24]
  203ebc:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
  203ebe:	4623      	mov	r3, r4
  203ec0:	6891      	ldr	r1, [r2, #8]
  203ec2:	482a      	ldr	r0, [pc, #168]	; (203f6c <rt_test_010_007_execute.lto_priv.162+0xec>)
  203ec4:	4a25      	ldr	r2, [pc, #148]	; (203f5c <rt_test_010_007_execute.lto_priv.162+0xdc>)
  203ec6:	3103      	adds	r1, #3
  203ec8:	f7fc fad2 	bl	200470 <chThdCreateStatic.constprop.61>
  203ecc:	69b2      	ldr	r2, [r6, #24]
  203ece:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
  203ed0:	4623      	mov	r3, r4
  203ed2:	6891      	ldr	r1, [r2, #8]
  203ed4:	4826      	ldr	r0, [pc, #152]	; (203f70 <rt_test_010_007_execute.lto_priv.162+0xf0>)
  203ed6:	4a21      	ldr	r2, [pc, #132]	; (203f5c <rt_test_010_007_execute.lto_priv.162+0xdc>)
  203ed8:	3102      	adds	r1, #2
  203eda:	f7fc fac9 	bl	200470 <chThdCreateStatic.constprop.61>
  203ede:	69b2      	ldr	r2, [r6, #24]
  203ee0:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
  203ee2:	4623      	mov	r3, r4
  203ee4:	6891      	ldr	r1, [r2, #8]
  203ee6:	4823      	ldr	r0, [pc, #140]	; (203f74 <rt_test_010_007_execute.lto_priv.162+0xf4>)
  203ee8:	4a1c      	ldr	r2, [pc, #112]	; (203f5c <rt_test_010_007_execute.lto_priv.162+0xdc>)
  203eea:	3101      	adds	r1, #1
  203eec:	f7fc fac0 	bl	200470 <chThdCreateStatic.constprop.61>
  test_set_step(2);
  203ef0:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
  203ef2:	6128      	str	r0, [r5, #16]
  test_set_step(2);
  203ef4:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
  203ef8:	f7fe f86a 	bl	201fd0 <test_wait_tick>
      chSemReset(&sem1, 0);
  203efc:	4d1e      	ldr	r5, [pc, #120]	; (203f78 <rt_test_010_007_execute.lto_priv.162+0xf8>)
    start = test_wait_tick();
  203efe:	4606      	mov	r6, r0
      chSemReset(&sem1, 0);
  203f00:	2100      	movs	r1, #0
  203f02:	4628      	mov	r0, r5
  203f04:	f003 f934 	bl	207170 <chSemReset>
  203f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
  203f0a:	f242 720f 	movw	r2, #9999	; 0x270f
      n++;
  203f0e:	3401      	adds	r4, #1
  203f10:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
  203f12:	4293      	cmp	r3, r2
  203f14:	d9f4      	bls.n	203f00 <rt_test_010_007_execute.lto_priv.162+0x80>
  test_set_step(3);
  203f16:	2303      	movs	r3, #3
  203f18:	f8c8 3000 	str.w	r3, [r8]
    test_terminate_threads();
  203f1c:	f7fe f880 	bl	202020 <test_terminate_threads>
    chSemReset(&sem1, 0);
  203f20:	2100      	movs	r1, #0
  203f22:	4815      	ldr	r0, [pc, #84]	; (203f78 <rt_test_010_007_execute.lto_priv.162+0xf8>)
  203f24:	f003 f924 	bl	207170 <chSemReset>
    test_wait_threads();
  203f28:	f7fe f862 	bl	201ff0 <test_wait_threads>
  test_set_step(4);
  203f2c:	2304      	movs	r3, #4
    test_print("--- Score : ");
  203f2e:	4813      	ldr	r0, [pc, #76]	; (203f7c <rt_test_010_007_execute.lto_priv.162+0xfc>)
  test_set_step(4);
  203f30:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
  203f34:	f7fe f8cc 	bl	2020d0 <test_print>
    test_printn(n);
  203f38:	4620      	mov	r0, r4
    test_printn(n * 6);
  203f3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_printn(n);
  203f3e:	f7fe f817 	bl	201f70 <test_printn>
    test_print(" reschedules/S, ");
  203f42:	480f      	ldr	r0, [pc, #60]	; (203f80 <rt_test_010_007_execute.lto_priv.162+0x100>)
  203f44:	f7fe f8c4 	bl	2020d0 <test_print>
    test_printn(n * 6);
  203f48:	0060      	lsls	r0, r4, #1
  203f4a:	f7fe f811 	bl	201f70 <test_printn>
    test_println(" ctxswc/S");
  203f4e:	480d      	ldr	r0, [pc, #52]	; (203f84 <rt_test_010_007_execute.lto_priv.162+0x104>)
}
  203f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
  203f54:	f7fe b89c 	b.w	202090 <test_println>
  203f58:	20000860 	.word	0x20000860
  203f5c:	00203c91 	.word	0x00203c91
  203f60:	20000a70 	.word	0x20000a70
  203f64:	200010d8 	.word	0x200010d8
  203f68:	20000bb8 	.word	0x20000bb8
  203f6c:	20000d00 	.word	0x20000d00
  203f70:	20000e48 	.word	0x20000e48
  203f74:	20000f90 	.word	0x20000f90
  203f78:	20000a60 	.word	0x20000a60
  203f7c:	08008d54 	.word	0x08008d54
  203f80:	08008d18 	.word	0x08008d18
  203f84:	08008d2c 	.word	0x08008d2c
  203f88:	2000098c 	.word	0x2000098c
  203f8c:	00000000 	.word	0x00000000

00203f90 <rt_test_010_006_execute.lto_priv.160>:
static void rt_test_010_006_execute(void) {
  203f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
  203f94:	4b17      	ldr	r3, [pc, #92]	; (203ff4 <rt_test_010_006_execute.lto_priv.160+0x64>)
  test_set_step(1);
  203f96:	2201      	movs	r2, #1
  203f98:	f8df 9068 	ldr.w	r9, [pc, #104]	; 204004 <rt_test_010_006_execute.lto_priv.160+0x74>
    n = 0;
  203f9c:	2400      	movs	r4, #0
  return chThdGetSelfX()->prio;
  203f9e:	699b      	ldr	r3, [r3, #24]
  test_set_step(1);
  203fa0:	f8c9 2000 	str.w	r2, [r9]
  tprio_t prio = chThdGetPriorityX() + 1;
  203fa4:	689d      	ldr	r5, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
  203fa6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 204008 <rt_test_010_006_execute.lto_priv.160+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
  203faa:	4415      	add	r5, r2
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
  203fac:	4f12      	ldr	r7, [pc, #72]	; (203ff8 <rt_test_010_006_execute.lto_priv.160+0x68>)
    start = test_wait_tick();
  203fae:	f7fe f80f 	bl	201fd0 <test_wait_tick>
  203fb2:	4606      	mov	r6, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
  203fb4:	2300      	movs	r3, #0
  203fb6:	4642      	mov	r2, r8
  203fb8:	4629      	mov	r1, r5
  203fba:	4638      	mov	r0, r7
  203fbc:	f7fc fa58 	bl	200470 <chThdCreateStatic.constprop.61>
      n++;
  203fc0:	3401      	adds	r4, #1
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
  203fc2:	f003 f865 	bl	207090 <chThdRelease>
  203fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
  203fca:	f242 720f 	movw	r2, #9999	; 0x270f
  203fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  203fd0:	1b9b      	subs	r3, r3, r6
  203fd2:	4293      	cmp	r3, r2
  203fd4:	d9ee      	bls.n	203fb4 <rt_test_010_006_execute.lto_priv.160+0x24>
  test_set_step(2);
  203fd6:	2302      	movs	r3, #2
    test_print("--- Score : ");
  203fd8:	4808      	ldr	r0, [pc, #32]	; (203ffc <rt_test_010_006_execute.lto_priv.160+0x6c>)
  test_set_step(2);
  203fda:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
  203fde:	f7fe f877 	bl	2020d0 <test_print>
    test_printn(n);
  203fe2:	4620      	mov	r0, r4
  203fe4:	f7fd ffc4 	bl	201f70 <test_printn>
    test_println(" threads/S");
  203fe8:	4805      	ldr	r0, [pc, #20]	; (204000 <rt_test_010_006_execute.lto_priv.160+0x70>)
}
  203fea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
  203fee:	f7fe b84f 	b.w	202090 <test_println>
  203ff2:	bf00      	nop
  203ff4:	20000860 	.word	0x20000860
  203ff8:	20000a70 	.word	0x20000a70
  203ffc:	08008d54 	.word	0x08008d54
  204000:	08008d0c 	.word	0x08008d0c
  204004:	2000098c 	.word	0x2000098c
  204008:	00204531 	.word	0x00204531
  20400c:	00000000 	.word	0x00000000

00204010 <rt_test_010_005_execute.lto_priv.159>:
static void rt_test_010_005_execute(void) {
  204010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
  204014:	4b17      	ldr	r3, [pc, #92]	; (204074 <rt_test_010_005_execute.lto_priv.159+0x64>)
  test_set_step(1);
  204016:	2201      	movs	r2, #1
  204018:	f8df 9068 	ldr.w	r9, [pc, #104]	; 204084 <rt_test_010_005_execute.lto_priv.159+0x74>
    n = 0;
  20401c:	2400      	movs	r4, #0
  return chThdGetSelfX()->prio;
  20401e:	699b      	ldr	r3, [r3, #24]
  test_set_step(1);
  204020:	f8c9 2000 	str.w	r2, [r9]
  tprio_t prio = chThdGetPriorityX() - 1;
  204024:	689d      	ldr	r5, [r3, #8]
    start = test_wait_tick();
  204026:	f7fd ffd3 	bl	201fd0 <test_wait_tick>
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
  20402a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 204088 <rt_test_010_005_execute.lto_priv.159+0x78>
    start = test_wait_tick();
  20402e:	4606      	mov	r6, r0
  tprio_t prio = chThdGetPriorityX() - 1;
  204030:	3d01      	subs	r5, #1
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
  204032:	4f11      	ldr	r7, [pc, #68]	; (204078 <rt_test_010_005_execute.lto_priv.159+0x68>)
  204034:	2300      	movs	r3, #0
  204036:	4642      	mov	r2, r8
  204038:	4629      	mov	r1, r5
  20403a:	4638      	mov	r0, r7
  20403c:	f7fc fa18 	bl	200470 <chThdCreateStatic.constprop.61>
      n++;
  204040:	3401      	adds	r4, #1
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
  204042:	f003 f85d 	bl	207100 <chThdWait>
  204046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
  20404a:	f242 720f 	movw	r2, #9999	; 0x270f
  20404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  204050:	1b9b      	subs	r3, r3, r6
  204052:	4293      	cmp	r3, r2
  204054:	d9ee      	bls.n	204034 <rt_test_010_005_execute.lto_priv.159+0x24>
  test_set_step(2);
  204056:	2302      	movs	r3, #2
    test_print("--- Score : ");
  204058:	4808      	ldr	r0, [pc, #32]	; (20407c <rt_test_010_005_execute.lto_priv.159+0x6c>)
  test_set_step(2);
  20405a:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
  20405e:	f7fe f837 	bl	2020d0 <test_print>
    test_printn(n);
  204062:	4620      	mov	r0, r4
  204064:	f7fd ff84 	bl	201f70 <test_printn>
    test_println(" threads/S");
  204068:	4805      	ldr	r0, [pc, #20]	; (204080 <rt_test_010_005_execute.lto_priv.159+0x70>)
}
  20406a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
  20406e:	f7fe b80f 	b.w	202090 <test_println>
  204072:	bf00      	nop
  204074:	20000860 	.word	0x20000860
  204078:	20000a70 	.word	0x20000a70
  20407c:	08008d54 	.word	0x08008d54
  204080:	08008d0c 	.word	0x08008d0c
  204084:	2000098c 	.word	0x2000098c
  204088:	00204531 	.word	0x00204531
  20408c:	00000000 	.word	0x00000000

00204090 <rt_test_010_004_execute.lto_priv.158>:
  return ch.rlist.current;
  204090:	4a2b      	ldr	r2, [pc, #172]	; (204140 <rt_test_010_004_execute.lto_priv.158+0xb0>)
  test_set_step(1);
  204092:	2001      	movs	r0, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
  204094:	2300      	movs	r3, #0
  return chThdGetSelfX()->prio;
  204096:	6991      	ldr	r1, [r2, #24]
  204098:	4a2a      	ldr	r2, [pc, #168]	; (204144 <rt_test_010_004_execute.lto_priv.158+0xb4>)
  20409a:	6889      	ldr	r1, [r1, #8]
static void rt_test_010_004_execute(void) {
  20409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
  2040a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 204158 <rt_test_010_004_execute.lto_priv.158+0xc8>
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
  2040a4:	4401      	add	r1, r0
    n = 0;
  2040a6:	461d      	mov	r5, r3
      chSchWakeupS(tp, MSG_OK);
  2040a8:	461e      	mov	r6, r3
  test_set_step(1);
  2040aa:	f8ca 0000 	str.w	r0, [sl]
  2040ae:	2720      	movs	r7, #32
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
  2040b0:	4825      	ldr	r0, [pc, #148]	; (204148 <rt_test_010_004_execute.lto_priv.158+0xb8>)
  2040b2:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
  2040b6:	f7fc f9db 	bl	200470 <chThdCreateStatic.constprop.61>
  2040ba:	4a24      	ldr	r2, [pc, #144]	; (20414c <rt_test_010_004_execute.lto_priv.158+0xbc>)
  test_set_step(2);
  2040bc:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
  2040be:	4604      	mov	r4, r0
  2040c0:	6010      	str	r0, [r2, #0]
  test_set_step(2);
  2040c2:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
  2040c6:	f7fd ff83 	bl	201fd0 <test_wait_tick>
  2040ca:	4680      	mov	r8, r0
  2040cc:	f387 8811 	msr	BASEPRI, r7
      chSchWakeupS(tp, MSG_OK);
  2040d0:	2100      	movs	r1, #0
  2040d2:	4620      	mov	r0, r4
  2040d4:	f002 fd9c 	bl	206c10 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
  2040d8:	4620      	mov	r0, r4
  2040da:	2100      	movs	r1, #0
  2040dc:	f002 fd98 	bl	206c10 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
  2040e0:	4620      	mov	r0, r4
  2040e2:	2100      	movs	r1, #0
  2040e4:	f002 fd94 	bl	206c10 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
  2040e8:	4620      	mov	r0, r4
  2040ea:	2100      	movs	r1, #0
  2040ec:	f002 fd90 	bl	206c10 <chSchWakeupS>
  2040f0:	f386 8811 	msr	BASEPRI, r6
  2040f4:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
  2040f8:	f242 720f 	movw	r2, #9999	; 0x270f
      n += 4;
  2040fc:	3504      	adds	r5, #4
  2040fe:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
  204102:	4293      	cmp	r3, r2
  204104:	d9e2      	bls.n	2040cc <rt_test_010_004_execute.lto_priv.158+0x3c>
  test_set_step(3);
  204106:	2303      	movs	r3, #3
  204108:	f8ca 3000 	str.w	r3, [sl]
  20410c:	f387 8811 	msr	BASEPRI, r7
    chSchWakeupS(tp, MSG_TIMEOUT);
  204110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  204114:	4620      	mov	r0, r4
  204116:	f002 fd7b 	bl	206c10 <chSchWakeupS>
  20411a:	f386 8811 	msr	BASEPRI, r6
    test_wait_threads();
  20411e:	f7fd ff67 	bl	201ff0 <test_wait_threads>
  test_set_step(4);
  204122:	2304      	movs	r3, #4
    test_print("--- Score : ");
  204124:	480a      	ldr	r0, [pc, #40]	; (204150 <rt_test_010_004_execute.lto_priv.158+0xc0>)
  test_set_step(4);
  204126:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
  20412a:	f7fd ffd1 	bl	2020d0 <test_print>
    test_printn(n * 2);
  20412e:	0068      	lsls	r0, r5, #1
  204130:	f7fd ff1e 	bl	201f70 <test_printn>
    test_println(" ctxswc/S");
  204134:	4807      	ldr	r0, [pc, #28]	; (204154 <rt_test_010_004_execute.lto_priv.158+0xc4>)
}
  204136:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
  20413a:	f7fd bfa9 	b.w	202090 <test_println>
  20413e:	bf00      	nop
  204140:	20000860 	.word	0x20000860
  204144:	00204161 	.word	0x00204161
  204148:	20000a70 	.word	0x20000a70
  20414c:	200010d8 	.word	0x200010d8
  204150:	08008d54 	.word	0x08008d54
  204154:	08008d2c 	.word	0x08008d2c
  204158:	2000098c 	.word	0x2000098c
  20415c:	00000000 	.word	0x00000000

00204160 <bmk_thread4>:
  return ch.rlist.current;
  204160:	4a07      	ldr	r2, [pc, #28]	; (204180 <bmk_thread4+0x20>)
  204162:	2320      	movs	r3, #32
static THD_FUNCTION(bmk_thread4, p) {
  204164:	b510      	push	{r4, lr}
  204166:	6994      	ldr	r4, [r2, #24]
  204168:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
  20416c:	2003      	movs	r0, #3
  20416e:	f002 fd9f 	bl	206cb0 <chSchGoSleepS>
  } while (msg == MSG_OK);
  204172:	6a63      	ldr	r3, [r4, #36]	; 0x24
  204174:	2b00      	cmp	r3, #0
  204176:	d0f9      	beq.n	20416c <bmk_thread4+0xc>
  204178:	2300      	movs	r3, #0
  20417a:	f383 8811 	msr	BASEPRI, r3
  20417e:	bd10      	pop	{r4, pc}
  204180:	20000860 	.word	0x20000860
	...

00204190 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
  204190:	b570      	push	{r4, r5, r6, lr}
  204192:	2620      	movs	r6, #32
  204194:	2500      	movs	r5, #0
    tp = chMsgWait();
  204196:	f002 fda3 	bl	206ce0 <chMsgWait>
  20419a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  20419c:	f386 8811 	msr	BASEPRI, r6
  2041a0:	4621      	mov	r1, r4
  2041a2:	f002 fd35 	bl	206c10 <chSchWakeupS>
  2041a6:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
  2041aa:	2c00      	cmp	r4, #0
  2041ac:	d1f3      	bne.n	204196 <bmk_thread1+0x6>
}
  2041ae:	bd70      	pop	{r4, r5, r6, pc}

002041b0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
  2041b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  2041b4:	4605      	mov	r5, r0
  uint32_t n = 0;
  2041b6:	2400      	movs	r4, #0
  start = test_wait_tick();
  2041b8:	f7fd ff0a 	bl	201fd0 <test_wait_tick>
  2041bc:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  2041c0:	4680      	mov	r8, r0
  } while (chVTIsSystemTimeWithinX(start, end));
  2041c2:	f242 760f 	movw	r6, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
  2041c6:	2101      	movs	r1, #1
  2041c8:	4628      	mov	r0, r5
  2041ca:	f002 fde9 	bl	206da0 <chMsgSend>
  2041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    n++;
  2041d0:	3401      	adds	r4, #1
  2041d2:	eba3 0308 	sub.w	r3, r3, r8
  } while (chVTIsSystemTimeWithinX(start, end));
  2041d6:	42b3      	cmp	r3, r6
  2041d8:	d9f5      	bls.n	2041c6 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
  2041da:	4628      	mov	r0, r5
  2041dc:	2100      	movs	r1, #0
  2041de:	f002 fddf 	bl	206da0 <chMsgSend>
}
  2041e2:	4620      	mov	r0, r4
  2041e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

002041f0 <rt_test_010_003_execute.lto_priv.157>:
static void rt_test_010_003_execute(void) {
  2041f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  2041f4:	4e2b      	ldr	r6, [pc, #172]	; (2042a4 <rt_test_010_003_execute.lto_priv.157+0xb4>)
  test_set_step(1);
  2041f6:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  2041f8:	4d2b      	ldr	r5, [pc, #172]	; (2042a8 <rt_test_010_003_execute.lto_priv.157+0xb8>)
  2041fa:	2300      	movs	r3, #0
  return chThdGetSelfX()->prio;
  2041fc:	69b2      	ldr	r2, [r6, #24]
  test_set_step(1);
  2041fe:	4f2b      	ldr	r7, [pc, #172]	; (2042ac <rt_test_010_003_execute.lto_priv.157+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  204200:	4628      	mov	r0, r5
  204202:	6891      	ldr	r1, [r2, #8]
  204204:	4a2a      	ldr	r2, [pc, #168]	; (2042b0 <rt_test_010_003_execute.lto_priv.157+0xc0>)
  204206:	4421      	add	r1, r4
  test_set_step(1);
  204208:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  20420a:	f7fc f931 	bl	200470 <chThdCreateStatic.constprop.61>
  20420e:	69b3      	ldr	r3, [r6, #24]
  204210:	4c28      	ldr	r4, [pc, #160]	; (2042b4 <rt_test_010_003_execute.lto_priv.157+0xc4>)
  test_set_step(2);
  204212:	f04f 0e02 	mov.w	lr, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
  204216:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2042c4 <rt_test_010_003_execute.lto_priv.157+0xd4>
  20421a:	6899      	ldr	r1, [r3, #8]
  20421c:	2300      	movs	r3, #0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  20421e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
  204220:	4642      	mov	r2, r8
  204222:	3902      	subs	r1, #2
  204224:	f505 70a4 	add.w	r0, r5, #328	; 0x148
  test_set_step(2);
  204228:	f8c7 e000 	str.w	lr, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
  20422c:	f7fc f920 	bl	200470 <chThdCreateStatic.constprop.61>
  204230:	69b1      	ldr	r1, [r6, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
  204232:	4642      	mov	r2, r8
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
  204234:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
  204236:	2300      	movs	r3, #0
  204238:	6889      	ldr	r1, [r1, #8]
  20423a:	f505 7024 	add.w	r0, r5, #656	; 0x290
  20423e:	3903      	subs	r1, #3
  204240:	f7fc f916 	bl	200470 <chThdCreateStatic.constprop.61>
  204244:	69b3      	ldr	r3, [r6, #24]
  204246:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
  204248:	4642      	mov	r2, r8
  20424a:	6899      	ldr	r1, [r3, #8]
  20424c:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
  204250:	2300      	movs	r3, #0
  204252:	3904      	subs	r1, #4
  204254:	f7fc f90c 	bl	200470 <chThdCreateStatic.constprop.61>
  204258:	69b3      	ldr	r3, [r6, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
  20425a:	4642      	mov	r2, r8
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
  20425c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
  20425e:	6899      	ldr	r1, [r3, #8]
  204260:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
  204264:	2300      	movs	r3, #0
  204266:	3905      	subs	r1, #5
  204268:	f7fc f902 	bl	200470 <chThdCreateStatic.constprop.61>
  test_set_step(3);
  20426c:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
  20426e:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
  204270:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
  204272:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
  204274:	f7ff ff9c 	bl	2041b0 <msg_loop_test>
  204278:	4604      	mov	r4, r0
    test_wait_threads();
  20427a:	f7fd feb9 	bl	201ff0 <test_wait_threads>
  test_set_step(4);
  20427e:	2304      	movs	r3, #4
    test_print("--- Score : ");
  204280:	480d      	ldr	r0, [pc, #52]	; (2042b8 <rt_test_010_003_execute.lto_priv.157+0xc8>)
  test_set_step(4);
  204282:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
  204284:	f7fd ff24 	bl	2020d0 <test_print>
    test_printn(n);
  204288:	4620      	mov	r0, r4
  20428a:	f7fd fe71 	bl	201f70 <test_printn>
    test_print(" msgs/S, ");
  20428e:	480b      	ldr	r0, [pc, #44]	; (2042bc <rt_test_010_003_execute.lto_priv.157+0xcc>)
  204290:	f7fd ff1e 	bl	2020d0 <test_print>
    test_printn(n << 1);
  204294:	0060      	lsls	r0, r4, #1
  204296:	f7fd fe6b 	bl	201f70 <test_printn>
    test_println(" ctxswc/S");
  20429a:	4809      	ldr	r0, [pc, #36]	; (2042c0 <rt_test_010_003_execute.lto_priv.157+0xd0>)
}
  20429c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
  2042a0:	f7fd bef6 	b.w	202090 <test_println>
  2042a4:	20000860 	.word	0x20000860
  2042a8:	20000a70 	.word	0x20000a70
  2042ac:	2000098c 	.word	0x2000098c
  2042b0:	00204191 	.word	0x00204191
  2042b4:	200010d8 	.word	0x200010d8
  2042b8:	08008d54 	.word	0x08008d54
  2042bc:	08008d00 	.word	0x08008d00
  2042c0:	08008d2c 	.word	0x08008d2c
  2042c4:	00204531 	.word	0x00204531
	...

002042d0 <rt_test_010_002_execute.lto_priv.156>:
  return ch.rlist.current;
  2042d0:	4a14      	ldr	r2, [pc, #80]	; (204324 <rt_test_010_002_execute.lto_priv.156+0x54>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  2042d2:	4815      	ldr	r0, [pc, #84]	; (204328 <rt_test_010_002_execute.lto_priv.156+0x58>)
  return chThdGetSelfX()->prio;
  2042d4:	6991      	ldr	r1, [r2, #24]
  2042d6:	4a15      	ldr	r2, [pc, #84]	; (20432c <rt_test_010_002_execute.lto_priv.156+0x5c>)
  2042d8:	6889      	ldr	r1, [r1, #8]
static void rt_test_010_002_execute(void) {
  2042da:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
  2042dc:	2501      	movs	r5, #1
  2042de:	4c14      	ldr	r4, [pc, #80]	; (204330 <rt_test_010_002_execute.lto_priv.156+0x60>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  2042e0:	2300      	movs	r3, #0
  2042e2:	4429      	add	r1, r5
  test_set_step(1);
  2042e4:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  2042e6:	f7fc f8c3 	bl	200470 <chThdCreateStatic.constprop.61>
  2042ea:	4a12      	ldr	r2, [pc, #72]	; (204334 <rt_test_010_002_execute.lto_priv.156+0x64>)
  test_set_step(2);
  2042ec:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
  2042ee:	6010      	str	r0, [r2, #0]
  test_set_step(2);
  2042f0:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
  2042f2:	f7ff ff5d 	bl	2041b0 <msg_loop_test>
  2042f6:	4605      	mov	r5, r0
    test_wait_threads();
  2042f8:	f7fd fe7a 	bl	201ff0 <test_wait_threads>
  test_set_step(3);
  2042fc:	2303      	movs	r3, #3
    test_print("--- Score : ");
  2042fe:	480e      	ldr	r0, [pc, #56]	; (204338 <rt_test_010_002_execute.lto_priv.156+0x68>)
  test_set_step(3);
  204300:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
  204302:	f7fd fee5 	bl	2020d0 <test_print>
    test_printn(n);
  204306:	4628      	mov	r0, r5
  204308:	f7fd fe32 	bl	201f70 <test_printn>
    test_print(" msgs/S, ");
  20430c:	480b      	ldr	r0, [pc, #44]	; (20433c <rt_test_010_002_execute.lto_priv.156+0x6c>)
  20430e:	f7fd fedf 	bl	2020d0 <test_print>
    test_printn(n << 1);
  204312:	0068      	lsls	r0, r5, #1
  204314:	f7fd fe2c 	bl	201f70 <test_printn>
    test_println(" ctxswc/S");
  204318:	4809      	ldr	r0, [pc, #36]	; (204340 <rt_test_010_002_execute.lto_priv.156+0x70>)
}
  20431a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
  20431e:	f7fd beb7 	b.w	202090 <test_println>
  204322:	bf00      	nop
  204324:	20000860 	.word	0x20000860
  204328:	20000a70 	.word	0x20000a70
  20432c:	00204191 	.word	0x00204191
  204330:	2000098c 	.word	0x2000098c
  204334:	200010d8 	.word	0x200010d8
  204338:	08008d54 	.word	0x08008d54
  20433c:	08008d00 	.word	0x08008d00
  204340:	08008d2c 	.word	0x08008d2c
	...

00204350 <rt_test_010_001_execute.lto_priv.155>:
  return ch.rlist.current;
  204350:	4a14      	ldr	r2, [pc, #80]	; (2043a4 <rt_test_010_001_execute.lto_priv.155+0x54>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
  204352:	4815      	ldr	r0, [pc, #84]	; (2043a8 <rt_test_010_001_execute.lto_priv.155+0x58>)
  return chThdGetSelfX()->prio;
  204354:	6991      	ldr	r1, [r2, #24]
  204356:	4a15      	ldr	r2, [pc, #84]	; (2043ac <rt_test_010_001_execute.lto_priv.155+0x5c>)
  204358:	6889      	ldr	r1, [r1, #8]
static void rt_test_010_001_execute(void) {
  20435a:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
  20435c:	4c14      	ldr	r4, [pc, #80]	; (2043b0 <rt_test_010_001_execute.lto_priv.155+0x60>)
  20435e:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
  204360:	3901      	subs	r1, #1
  204362:	2300      	movs	r3, #0
  test_set_step(1);
  204364:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
  204366:	f7fc f883 	bl	200470 <chThdCreateStatic.constprop.61>
  20436a:	4a12      	ldr	r2, [pc, #72]	; (2043b4 <rt_test_010_001_execute.lto_priv.155+0x64>)
  test_set_step(2);
  20436c:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
  20436e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
  204370:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
  204372:	f7ff ff1d 	bl	2041b0 <msg_loop_test>
  204376:	4605      	mov	r5, r0
    test_wait_threads();
  204378:	f7fd fe3a 	bl	201ff0 <test_wait_threads>
  test_set_step(3);
  20437c:	2303      	movs	r3, #3
    test_print("--- Score : ");
  20437e:	480e      	ldr	r0, [pc, #56]	; (2043b8 <rt_test_010_001_execute.lto_priv.155+0x68>)
  test_set_step(3);
  204380:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
  204382:	f7fd fea5 	bl	2020d0 <test_print>
    test_printn(n);
  204386:	4628      	mov	r0, r5
  204388:	f7fd fdf2 	bl	201f70 <test_printn>
    test_print(" msgs/S, ");
  20438c:	480b      	ldr	r0, [pc, #44]	; (2043bc <rt_test_010_001_execute.lto_priv.155+0x6c>)
  20438e:	f7fd fe9f 	bl	2020d0 <test_print>
    test_printn(n << 1);
  204392:	0068      	lsls	r0, r5, #1
  204394:	f7fd fdec 	bl	201f70 <test_printn>
    test_println(" ctxswc/S");
  204398:	4809      	ldr	r0, [pc, #36]	; (2043c0 <rt_test_010_001_execute.lto_priv.155+0x70>)
}
  20439a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
  20439e:	f7fd be77 	b.w	202090 <test_println>
  2043a2:	bf00      	nop
  2043a4:	20000860 	.word	0x20000860
  2043a8:	20000a70 	.word	0x20000a70
  2043ac:	00204191 	.word	0x00204191
  2043b0:	2000098c 	.word	0x2000098c
  2043b4:	200010d8 	.word	0x200010d8
  2043b8:	08008d54 	.word	0x08008d54
  2043bc:	08008d00 	.word	0x08008d00
  2043c0:	08008d2c 	.word	0x08008d2c
	...

002043d0 <rt_test_009_002_execute.lto_priv.154>:

static void rt_test_009_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void rt_test_009_002_execute(void) {
  2043d0:	4a3f      	ldr	r2, [pc, #252]	; (2044d0 <rt_test_009_002_execute.lto_priv.154+0x100>)
  unsigned i;
  tprio_t prio;

  /* [9.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
  2043d2:	2001      	movs	r0, #1
  2043d4:	493f      	ldr	r1, [pc, #252]	; (2044d4 <rt_test_009_002_execute.lto_priv.154+0x104>)
static void rt_test_009_002_execute(void) {
  2043d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
  2043d8:	4d3f      	ldr	r5, [pc, #252]	; (2044d8 <rt_test_009_002_execute.lto_priv.154+0x108>)
  2043da:	2720      	movs	r7, #32
  2043dc:	f102 060c 	add.w	r6, r2, #12
  2043e0:	4b3e      	ldr	r3, [pc, #248]	; (2044dc <rt_test_009_002_execute.lto_priv.154+0x10c>)
  2043e2:	2400      	movs	r4, #0
  2043e4:	6028      	str	r0, [r5, #0]
  2043e6:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
  2043ea:	6808      	ldr	r0, [r1, #0]
  2043ec:	6018      	str	r0, [r3, #0]
  mp->next = php;
  2043ee:	600b      	str	r3, [r1, #0]
  2043f0:	f384 8811 	msr	BASEPRI, r4
  {
    for (i = 0; i < 4; i++)
  2043f4:	4296      	cmp	r6, r2
  2043f6:	d002      	beq.n	2043fe <rt_test_009_002_execute.lto_priv.154+0x2e>
  2043f8:	f852 3b04 	ldr.w	r3, [r2], #4
  2043fc:	e7f3      	b.n	2043e6 <rt_test_009_002_execute.lto_priv.154+0x16>
  return ch.rlist.current;
  2043fe:	4a38      	ldr	r2, [pc, #224]	; (2044e0 <rt_test_009_002_execute.lto_priv.154+0x110>)
  {
    prio = chThdGetPriorityX();
  }

  /* [9.2.3] Creating the five threads.*/
  test_set_step(3);
  204400:	2303      	movs	r3, #3
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
  204402:	4c38      	ldr	r4, [pc, #224]	; (2044e4 <rt_test_009_002_execute.lto_priv.154+0x114>)
  return chThdGetSelfX()->prio;
  204404:	6991      	ldr	r1, [r2, #24]
  204406:	4838      	ldr	r0, [pc, #224]	; (2044e8 <rt_test_009_002_execute.lto_priv.154+0x118>)
  204408:	688e      	ldr	r6, [r1, #8]
  20440a:	4a38      	ldr	r2, [pc, #224]	; (2044ec <rt_test_009_002_execute.lto_priv.154+0x11c>)
  20440c:	1e71      	subs	r1, r6, #1
  test_set_step(3);
  20440e:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
  204410:	f7fc fa4e 	bl	2008b0 <chThdCreateFromMemoryPool.constprop.31>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
  204414:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
  204416:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
  204418:	4a35      	ldr	r2, [pc, #212]	; (2044f0 <rt_test_009_002_execute.lto_priv.154+0x120>)
  20441a:	4836      	ldr	r0, [pc, #216]	; (2044f4 <rt_test_009_002_execute.lto_priv.154+0x124>)
  20441c:	f7fc fa48 	bl	2008b0 <chThdCreateFromMemoryPool.constprop.31>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
  204420:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
  204422:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
  204424:	4a34      	ldr	r2, [pc, #208]	; (2044f8 <rt_test_009_002_execute.lto_priv.154+0x128>)
  204426:	4835      	ldr	r0, [pc, #212]	; (2044fc <rt_test_009_002_execute.lto_priv.154+0x12c>)
  204428:	f7fc fa42 	bl	2008b0 <chThdCreateFromMemoryPool.constprop.31>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
  20442c:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
  20442e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
  204430:	4a33      	ldr	r2, [pc, #204]	; (204500 <rt_test_009_002_execute.lto_priv.154+0x130>)
  204432:	4834      	ldr	r0, [pc, #208]	; (204504 <rt_test_009_002_execute.lto_priv.154+0x134>)
  204434:	f7fc fa3c 	bl	2008b0 <chThdCreateFromMemoryPool.constprop.31>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
  204438:	4a33      	ldr	r2, [pc, #204]	; (204508 <rt_test_009_002_execute.lto_priv.154+0x138>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
  20443a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
  20443c:	1f71      	subs	r1, r6, #5
  20443e:	4833      	ldr	r0, [pc, #204]	; (20450c <rt_test_009_002_execute.lto_priv.154+0x13c>)
  204440:	f7fc fa36 	bl	2008b0 <chThdCreateFromMemoryPool.constprop.31>
  }

  /* [9.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  204444:	2204      	movs	r2, #4
  {
    test_assert((threads[0] != NULL) &&
  204446:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
  204448:	6120      	str	r0, [r4, #16]
  test_set_step(4);
  20444a:	602a      	str	r2, [r5, #0]
    test_assert((threads[0] != NULL) &&
  20444c:	2b00      	cmp	r3, #0
  20444e:	d03c      	beq.n	2044ca <rt_test_009_002_execute.lto_priv.154+0xfa>
  204450:	6860      	ldr	r0, [r4, #4]
  204452:	b128      	cbz	r0, 204460 <rt_test_009_002_execute.lto_priv.154+0x90>
  204454:	68a0      	ldr	r0, [r4, #8]
  204456:	b118      	cbz	r0, 204460 <rt_test_009_002_execute.lto_priv.154+0x90>
  204458:	68e0      	ldr	r0, [r4, #12]
  20445a:	3000      	adds	r0, #0
  20445c:	bf18      	it	ne
  20445e:	2001      	movne	r0, #1
  204460:	492b      	ldr	r1, [pc, #172]	; (204510 <rt_test_009_002_execute.lto_priv.154+0x140>)
  204462:	f7fe f8fd 	bl	202660 <_test_assert>
  204466:	b100      	cbz	r0, 20446a <rt_test_009_002_execute.lto_priv.154+0x9a>
  204468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                (threads[1] != NULL) &&
                (threads[2] != NULL) &&
                (threads[3] != NULL),
                "thread creation failed");
    test_assert(threads[4] == NULL,
  20446a:	6920      	ldr	r0, [r4, #16]
  20446c:	4929      	ldr	r1, [pc, #164]	; (204514 <rt_test_009_002_execute.lto_priv.154+0x144>)
  20446e:	fab0 f080 	clz	r0, r0
  204472:	0940      	lsrs	r0, r0, #5
  204474:	f7fe f8f4 	bl	202660 <_test_assert>
  204478:	2800      	cmp	r0, #0
  20447a:	d1f5      	bne.n	204468 <rt_test_009_002_execute.lto_priv.154+0x98>
                "thread creation not failed");
  }

  /* [9.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
  20447c:	2305      	movs	r3, #5
  20447e:	602b      	str	r3, [r5, #0]
  {
    test_wait_threads();
  204480:	f7fd fdb6 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  204484:	4924      	ldr	r1, [pc, #144]	; (204518 <rt_test_009_002_execute.lto_priv.154+0x148>)
  204486:	4825      	ldr	r0, [pc, #148]	; (20451c <rt_test_009_002_execute.lto_priv.154+0x14c>)
  204488:	f7fe f8c2 	bl	202610 <_test_assert_sequence>
  20448c:	2800      	cmp	r0, #0
  20448e:	d1eb      	bne.n	204468 <rt_test_009_002_execute.lto_priv.154+0x98>
  }

  /* [9.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
  204490:	2306      	movs	r3, #6
  204492:	2404      	movs	r4, #4
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
  204494:	4f0f      	ldr	r7, [pc, #60]	; (2044d4 <rt_test_009_002_execute.lto_priv.154+0x104>)
  204496:	4e22      	ldr	r6, [pc, #136]	; (204520 <rt_test_009_002_execute.lto_priv.154+0x150>)
  test_set_step(6);
  204498:	602b      	str	r3, [r5, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
  20449a:	4638      	mov	r0, r7
  20449c:	f7fe fa50 	bl	202940 <chPoolAlloc>
  2044a0:	3000      	adds	r0, #0
  2044a2:	4631      	mov	r1, r6
  2044a4:	bf18      	it	ne
  2044a6:	2001      	movne	r0, #1
  2044a8:	f7fe f8da 	bl	202660 <_test_assert>
  2044ac:	2800      	cmp	r0, #0
  2044ae:	d1db      	bne.n	204468 <rt_test_009_002_execute.lto_priv.154+0x98>
    for (i = 0; i < 4; i++)
  2044b0:	3c01      	subs	r4, #1
  2044b2:	d1f2      	bne.n	20449a <rt_test_009_002_execute.lto_priv.154+0xca>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  2044b4:	4807      	ldr	r0, [pc, #28]	; (2044d4 <rt_test_009_002_execute.lto_priv.154+0x104>)
  2044b6:	f7fe fa43 	bl	202940 <chPoolAlloc>
  2044ba:	fab0 f080 	clz	r0, r0
  2044be:	4919      	ldr	r1, [pc, #100]	; (204524 <rt_test_009_002_execute.lto_priv.154+0x154>)
  2044c0:	0940      	lsrs	r0, r0, #5
  }
}
  2044c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  2044c6:	f7fe b8cb 	b.w	202660 <_test_assert>
    test_assert((threads[0] != NULL) &&
  2044ca:	4618      	mov	r0, r3
  2044cc:	e7c8      	b.n	204460 <rt_test_009_002_execute.lto_priv.154+0x90>
  2044ce:	bf00      	nop
  2044d0:	08008e10 	.word	0x08008e10
  2044d4:	20000964 	.word	0x20000964
  2044d8:	2000098c 	.word	0x2000098c
  2044dc:	20000a70 	.word	0x20000a70
  2044e0:	20000860 	.word	0x20000860
  2044e4:	200010d8 	.word	0x200010d8
  2044e8:	08007fd4 	.word	0x08007fd4
  2044ec:	08007fd0 	.word	0x08007fd0
  2044f0:	08007ff4 	.word	0x08007ff4
  2044f4:	08007ff8 	.word	0x08007ff8
  2044f8:	08008000 	.word	0x08008000
  2044fc:	08008004 	.word	0x08008004
  204500:	08007f08 	.word	0x08007f08
  204504:	08008ccc 	.word	0x08008ccc
  204508:	08007f10 	.word	0x08007f10
  20450c:	08008cd4 	.word	0x08008cd4
  204510:	08007fdc 	.word	0x08007fdc
  204514:	0800800c 	.word	0x0800800c
  204518:	08007f38 	.word	0x08007f38
  20451c:	08007f14 	.word	0x08007f14
  204520:	08008cdc 	.word	0x08008cdc
  204524:	08008cec 	.word	0x08008cec
	...

00204530 <bmk_thread3>:
  chThdExit((msg_t)p);
  204530:	f002 be56 	b.w	2071e0 <chThdExit>
	...

00204540 <rt_test_006_005_setup.lto_priv.129>:
  tqp->next = (thread_t *)tqp;
  204540:	4b02      	ldr	r3, [pc, #8]	; (20454c <rt_test_006_005_setup.lto_priv.129+0xc>)
  204542:	2200      	movs	r2, #0
  204544:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  204546:	605b      	str	r3, [r3, #4]
  204548:	609a      	str	r2, [r3, #8]
  20454a:	4770      	bx	lr
  20454c:	20020024 	.word	0x20020024

00204550 <rt_test_006_004_setup.lto_priv.126>:
  tqp->next = (thread_t *)tqp;
  204550:	4a04      	ldr	r2, [pc, #16]	; (204564 <rt_test_006_004_setup.lto_priv.126+0x14>)
  204552:	2100      	movs	r1, #0
  204554:	4b04      	ldr	r3, [pc, #16]	; (204568 <rt_test_006_004_setup.lto_priv.126+0x18>)
  204556:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
  204558:	6052      	str	r2, [r2, #4]
  20455a:	6091      	str	r1, [r2, #8]
  20455c:	6099      	str	r1, [r3, #8]
  tqp->next = (thread_t *)tqp;
  20455e:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  204560:	605b      	str	r3, [r3, #4]
  204562:	4770      	bx	lr
  204564:	20020024 	.word	0x20020024
  204568:	20020064 	.word	0x20020064
  20456c:	00000000 	.word	0x00000000

00204570 <rt_test_006_001_setup.lto_priv.124>:
  204570:	f7ff bfe6 	b.w	204540 <rt_test_006_005_setup.lto_priv.129>
	...

00204580 <rt_test_005_005_setup.lto_priv.119>:
  tqp->next = (thread_t *)tqp;
  204580:	4b02      	ldr	r3, [pc, #8]	; (20458c <rt_test_005_005_setup.lto_priv.119+0xc>)
  204582:	2200      	movs	r2, #0
  204584:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  204586:	605b      	str	r3, [r3, #4]
  204588:	609a      	str	r2, [r3, #8]
  20458a:	4770      	bx	lr
  20458c:	20000974 	.word	0x20000974

00204590 <rt_test_005_004_setup.lto_priv.117>:
  204590:	f7ff bff6 	b.w	204580 <rt_test_005_005_setup.lto_priv.119>
	...

002045a0 <rt_test_005_003_setup.lto_priv.115>:
  2045a0:	f7ff bfee 	b.w	204580 <rt_test_005_005_setup.lto_priv.119>
	...

002045b0 <rt_test_005_002_setup.lto_priv.113>:
  2045b0:	f7ff bfe6 	b.w	204580 <rt_test_005_005_setup.lto_priv.119>
	...

002045c0 <rt_test_005_001_setup.lto_priv.110>:
  tqp->next = (thread_t *)tqp;
  2045c0:	4b02      	ldr	r3, [pc, #8]	; (2045cc <rt_test_005_001_setup.lto_priv.110+0xc>)
  2045c2:	2201      	movs	r2, #1
  2045c4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
  2045c6:	605b      	str	r3, [r3, #4]
  2045c8:	609a      	str	r2, [r3, #8]
  2045ca:	4770      	bx	lr
  2045cc:	20000974 	.word	0x20000974

002045d0 <rt_test_006_007_setup.lto_priv.131>:
  2045d0:	f7fc be7e 	b.w	2012d0 <rt_test_006_008_setup.lto_priv.133>
	...

002045e0 <rt_test_006_005_execute.lto_priv.130>:
static void rt_test_006_005_execute(void) {
  2045e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
  2045e4:	4d4e      	ldr	r5, [pc, #312]	; (204720 <rt_test_006_005_execute.lto_priv.130+0x140>)
  test_set_step(2);
  2045e6:	2202      	movs	r2, #2
  2045e8:	4c4e      	ldr	r4, [pc, #312]	; (204724 <rt_test_006_005_execute.lto_priv.130+0x144>)
  return chThdGetSelfX()->prio;
  2045ea:	69ab      	ldr	r3, [r5, #24]
  2045ec:	6022      	str	r2, [r4, #0]
  2045ee:	689e      	ldr	r6, [r3, #8]
    b = chMtxTryLock(&m1);
  2045f0:	f7fb ffee 	bl	2005d0 <chMtxTryLock.constprop.53>
    test_assert(b, "already locked");
  2045f4:	494c      	ldr	r1, [pc, #304]	; (204728 <rt_test_006_005_execute.lto_priv.130+0x148>)
  2045f6:	f7fe f833 	bl	202660 <_test_assert>
  2045fa:	b108      	cbz	r0, 204600 <rt_test_006_005_execute.lto_priv.130+0x20>
  2045fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
  204600:	2303      	movs	r3, #3
  204602:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
  204604:	f7fb ffe4 	bl	2005d0 <chMtxTryLock.constprop.53>
    test_assert(!b, "not locked");
  204608:	f080 0001 	eor.w	r0, r0, #1
  20460c:	4947      	ldr	r1, [pc, #284]	; (20472c <rt_test_006_005_execute.lto_priv.130+0x14c>)
  20460e:	b2c0      	uxtb	r0, r0
  204610:	f7fe f826 	bl	202660 <_test_assert>
  204614:	2800      	cmp	r0, #0
  204616:	d1f1      	bne.n	2045fc <rt_test_006_005_execute.lto_priv.130+0x1c>
    chMtxUnlock(&m1);
  204618:	4f45      	ldr	r7, [pc, #276]	; (204730 <rt_test_006_005_execute.lto_priv.130+0x150>)
  test_set_step(4);
  20461a:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
  20461c:	4638      	mov	r0, r7
  test_set_step(4);
  20461e:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
  204620:	f002 fc36 	bl	206e90 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
  204624:	68b8      	ldr	r0, [r7, #8]
  204626:	4943      	ldr	r1, [pc, #268]	; (204734 <rt_test_006_005_execute.lto_priv.130+0x154>)
  204628:	fab0 f080 	clz	r0, r0
  20462c:	0940      	lsrs	r0, r0, #5
  20462e:	f7fe f817 	bl	202660 <_test_assert>
  204632:	2800      	cmp	r0, #0
  204634:	d1e2      	bne.n	2045fc <rt_test_006_005_execute.lto_priv.130+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
  204636:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
  204638:	493f      	ldr	r1, [pc, #252]	; (204738 <rt_test_006_005_execute.lto_priv.130+0x158>)
  20463a:	1bc0      	subs	r0, r0, r7
  20463c:	fab0 f080 	clz	r0, r0
  204640:	0940      	lsrs	r0, r0, #5
  204642:	f7fe f80d 	bl	202660 <_test_assert>
  204646:	2800      	cmp	r0, #0
  204648:	d1d8      	bne.n	2045fc <rt_test_006_005_execute.lto_priv.130+0x1c>
  20464a:	69aa      	ldr	r2, [r5, #24]
  test_set_step(5);
  20464c:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
  20464e:	493b      	ldr	r1, [pc, #236]	; (20473c <rt_test_006_005_execute.lto_priv.130+0x15c>)
  204650:	6890      	ldr	r0, [r2, #8]
  test_set_step(5);
  204652:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
  204654:	1b80      	subs	r0, r0, r6
  204656:	fab0 f080 	clz	r0, r0
  20465a:	0940      	lsrs	r0, r0, #5
  20465c:	f7fe f800 	bl	202660 <_test_assert>
  204660:	2800      	cmp	r0, #0
  204662:	d1cb      	bne.n	2045fc <rt_test_006_005_execute.lto_priv.130+0x1c>
  test_set_step(6);
  204664:	2306      	movs	r3, #6
  204666:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
  204668:	f7fb ffb2 	bl	2005d0 <chMtxTryLock.constprop.53>
    test_assert(b, "already locked");
  20466c:	492e      	ldr	r1, [pc, #184]	; (204728 <rt_test_006_005_execute.lto_priv.130+0x148>)
  20466e:	f7fd fff7 	bl	202660 <_test_assert>
  204672:	2800      	cmp	r0, #0
  204674:	d1c2      	bne.n	2045fc <rt_test_006_005_execute.lto_priv.130+0x1c>
    b = chMtxTryLock(&m1);
  204676:	f7fb ffab 	bl	2005d0 <chMtxTryLock.constprop.53>
    test_assert(!b, "not locked");
  20467a:	f080 0001 	eor.w	r0, r0, #1
  20467e:	492b      	ldr	r1, [pc, #172]	; (20472c <rt_test_006_005_execute.lto_priv.130+0x14c>)
  204680:	b2c0      	uxtb	r0, r0
  204682:	f7fd ffed 	bl	202660 <_test_assert>
  204686:	2800      	cmp	r0, #0
  204688:	d1b8      	bne.n	2045fc <rt_test_006_005_execute.lto_priv.130+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
  20468a:	f8d5 9018 	ldr.w	r9, [r5, #24]
  20468e:	2320      	movs	r3, #32
  204690:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
  204694:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
  204698:	b1e3      	cbz	r3, 2046d4 <rt_test_006_005_execute.lto_priv.130+0xf4>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
  20469a:	4680      	mov	r8, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
  20469c:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
  20469e:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
  2046a0:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
  2046a2:	4610      	mov	r0, r2
      ctp->mtxlist = mp->next;
  2046a4:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
  2046a8:	d036      	beq.n	204718 <rt_test_006_005_execute.lto_priv.130+0x138>
        mp->next = tp->mtxlist;
  2046aa:	f8d2 e038 	ldr.w	lr, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
  2046ae:	6811      	ldr	r1, [r2, #0]
  2046b0:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2046b2:	604b      	str	r3, [r1, #4]
        mp->owner = tp;
  2046b4:	609a      	str	r2, [r3, #8]
        mp->next = tp->mtxlist;
  2046b6:	f8c3 e00c 	str.w	lr, [r3, #12]
        tp->mtxlist = mp;
  2046ba:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
  2046bc:	f002 fb58 	bl	206d70 <chSchReadyI>
  2046c0:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
  2046c4:	2b00      	cmp	r3, #0
  2046c6:	d1e9      	bne.n	20469c <rt_test_006_005_execute.lto_priv.130+0xbc>
    ctp->prio = ctp->realprio;
  2046c8:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
  2046cc:	f8c9 3008 	str.w	r3, [r9, #8]
    chSchRescheduleS();
  2046d0:	f002 fa76 	bl	206bc0 <chSchRescheduleS>
  2046d4:	2300      	movs	r3, #0
  2046d6:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
  2046da:	68b8      	ldr	r0, [r7, #8]
  2046dc:	4915      	ldr	r1, [pc, #84]	; (204734 <rt_test_006_005_execute.lto_priv.130+0x154>)
  2046de:	fab0 f080 	clz	r0, r0
  2046e2:	0940      	lsrs	r0, r0, #5
  2046e4:	f7fd ffbc 	bl	202660 <_test_assert>
  2046e8:	2800      	cmp	r0, #0
  2046ea:	d187      	bne.n	2045fc <rt_test_006_005_execute.lto_priv.130+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
  2046ec:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
  2046ee:	4912      	ldr	r1, [pc, #72]	; (204738 <rt_test_006_005_execute.lto_priv.130+0x158>)
  2046f0:	1bc2      	subs	r2, r0, r7
  2046f2:	4250      	negs	r0, r2
  2046f4:	4150      	adcs	r0, r2
  2046f6:	f7fd ffb3 	bl	202660 <_test_assert>
  2046fa:	2800      	cmp	r0, #0
  2046fc:	f47f af7e 	bne.w	2045fc <rt_test_006_005_execute.lto_priv.130+0x1c>
  204700:	69aa      	ldr	r2, [r5, #24]
  test_set_step(7);
  204702:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
  204704:	490d      	ldr	r1, [pc, #52]	; (20473c <rt_test_006_005_execute.lto_priv.130+0x15c>)
  204706:	6890      	ldr	r0, [r2, #8]
  test_set_step(7);
  204708:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
  20470a:	1b83      	subs	r3, r0, r6
  20470c:	4258      	negs	r0, r3
  20470e:	4158      	adcs	r0, r3
}
  204710:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
  204714:	f7fd bfa4 	b.w	202660 <_test_assert>
        mp->owner = NULL;
  204718:	f8c3 8008 	str.w	r8, [r3, #8]
  20471c:	460b      	mov	r3, r1
  20471e:	e7d1      	b.n	2046c4 <rt_test_006_005_execute.lto_priv.130+0xe4>
  204720:	20000860 	.word	0x20000860
  204724:	2000098c 	.word	0x2000098c
  204728:	08008eb0 	.word	0x08008eb0
  20472c:	08008ec0 	.word	0x08008ec0
  204730:	20020024 	.word	0x20020024
  204734:	08008ecc 	.word	0x08008ecc
  204738:	08008ed8 	.word	0x08008ed8
  20473c:	08008ee8 	.word	0x08008ee8

00204740 <thread4A>:
static THD_FUNCTION(thread4A, p) {
  204740:	b510      	push	{r4, lr}
  chMtxLock(&m1);
  204742:	4c06      	ldr	r4, [pc, #24]	; (20475c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
  204744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  204748:	f002 fe2a 	bl	2073a0 <chThdSleep>
  chMtxLock(&m1);
  20474c:	4620      	mov	r0, r4
  20474e:	f002 fc3f 	bl	206fd0 <chMtxLock>
  chMtxUnlock(&m1);
  204752:	4620      	mov	r0, r4
}
  204754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
  204758:	f002 bb9a 	b.w	206e90 <chMtxUnlock>
  20475c:	20020024 	.word	0x20020024

00204760 <rt_test_006_004_execute.lto_priv.128>:
static void rt_test_006_004_execute(void) {
  204760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
  204764:	4d40      	ldr	r5, [pc, #256]	; (204868 <rt_test_006_004_execute.lto_priv.128+0x108>)
  test_set_step(2);
  204766:	f04f 0e02 	mov.w	lr, #2
  20476a:	4e40      	ldr	r6, [pc, #256]	; (20486c <rt_test_006_004_execute.lto_priv.128+0x10c>)
  return chThdGetSelfX()->prio;
  20476c:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
  20476e:	4f40      	ldr	r7, [pc, #256]	; (204870 <rt_test_006_004_execute.lto_priv.128+0x110>)
  204770:	689c      	ldr	r4, [r3, #8]
  204772:	4a40      	ldr	r2, [pc, #256]	; (204874 <rt_test_006_004_execute.lto_priv.128+0x114>)
    pa = p + 1;
  204774:	f104 0801 	add.w	r8, r4, #1
    pb = p + 2;
  204778:	eb04 090e 	add.w	r9, r4, lr
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
  20477c:	4b3e      	ldr	r3, [pc, #248]	; (204878 <rt_test_006_004_execute.lto_priv.128+0x118>)
  20477e:	4641      	mov	r1, r8
  204780:	483e      	ldr	r0, [pc, #248]	; (20487c <rt_test_006_004_execute.lto_priv.128+0x11c>)
  test_set_step(2);
  204782:	f8c6 e000 	str.w	lr, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
  204786:	f7fb fe73 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
  20478a:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
  20478c:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
  20478e:	4b3c      	ldr	r3, [pc, #240]	; (204880 <rt_test_006_004_execute.lto_priv.128+0x120>)
  204790:	4a3c      	ldr	r2, [pc, #240]	; (204884 <rt_test_006_004_execute.lto_priv.128+0x124>)
  204792:	483d      	ldr	r0, [pc, #244]	; (204888 <rt_test_006_004_execute.lto_priv.128+0x128>)
  204794:	f7fb fe6c 	bl	200470 <chThdCreateStatic.constprop.61>
  test_set_step(3);
  204798:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
  20479a:	6078      	str	r0, [r7, #4]
    chMtxLock(&m1);
  20479c:	483b      	ldr	r0, [pc, #236]	; (20488c <rt_test_006_004_execute.lto_priv.128+0x12c>)
  test_set_step(3);
  20479e:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
  2047a0:	f002 fc16 	bl	206fd0 <chMtxLock>
  2047a4:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
  2047a6:	493a      	ldr	r1, [pc, #232]	; (204890 <rt_test_006_004_execute.lto_priv.128+0x130>)
  2047a8:	6898      	ldr	r0, [r3, #8]
  2047aa:	1b00      	subs	r0, r0, r4
  2047ac:	fab0 f080 	clz	r0, r0
  2047b0:	0940      	lsrs	r0, r0, #5
  2047b2:	f7fd ff55 	bl	202660 <_test_assert>
  2047b6:	b108      	cbz	r0, 2047bc <rt_test_006_004_execute.lto_priv.128+0x5c>
  2047b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
  2047bc:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
  2047be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
  2047c2:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
  2047c4:	f002 fdec 	bl	2073a0 <chThdSleep>
  2047c8:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
  2047ca:	4931      	ldr	r1, [pc, #196]	; (204890 <rt_test_006_004_execute.lto_priv.128+0x130>)
  2047cc:	6898      	ldr	r0, [r3, #8]
  2047ce:	eba0 0008 	sub.w	r0, r0, r8
  2047d2:	fab0 f080 	clz	r0, r0
  2047d6:	0940      	lsrs	r0, r0, #5
  2047d8:	f7fd ff42 	bl	202660 <_test_assert>
  2047dc:	2800      	cmp	r0, #0
  2047de:	d1eb      	bne.n	2047b8 <rt_test_006_004_execute.lto_priv.128+0x58>
  test_set_step(5);
  2047e0:	2305      	movs	r3, #5
    chMtxLock(&m2);
  2047e2:	482c      	ldr	r0, [pc, #176]	; (204894 <rt_test_006_004_execute.lto_priv.128+0x134>)
  test_set_step(5);
  2047e4:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
  2047e6:	f002 fbf3 	bl	206fd0 <chMtxLock>
  2047ea:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
  2047ec:	4928      	ldr	r1, [pc, #160]	; (204890 <rt_test_006_004_execute.lto_priv.128+0x130>)
  2047ee:	6898      	ldr	r0, [r3, #8]
  2047f0:	eba0 0008 	sub.w	r0, r0, r8
  2047f4:	fab0 f080 	clz	r0, r0
  2047f8:	0940      	lsrs	r0, r0, #5
  2047fa:	f7fd ff31 	bl	202660 <_test_assert>
  2047fe:	2800      	cmp	r0, #0
  204800:	d1da      	bne.n	2047b8 <rt_test_006_004_execute.lto_priv.128+0x58>
  test_set_step(6);
  204802:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
  204804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
  204808:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
  20480a:	f002 fdc9 	bl	2073a0 <chThdSleep>
  20480e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
  204810:	491f      	ldr	r1, [pc, #124]	; (204890 <rt_test_006_004_execute.lto_priv.128+0x130>)
  204812:	6898      	ldr	r0, [r3, #8]
  204814:	eba0 0009 	sub.w	r0, r0, r9
  204818:	fab0 f080 	clz	r0, r0
  20481c:	0940      	lsrs	r0, r0, #5
  20481e:	f7fd ff1f 	bl	202660 <_test_assert>
  204822:	2800      	cmp	r0, #0
  204824:	d1c8      	bne.n	2047b8 <rt_test_006_004_execute.lto_priv.128+0x58>
  test_set_step(7);
  204826:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
  204828:	481a      	ldr	r0, [pc, #104]	; (204894 <rt_test_006_004_execute.lto_priv.128+0x134>)
  test_set_step(7);
  20482a:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
  20482c:	f002 fb30 	bl	206e90 <chMtxUnlock>
  204830:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
  204832:	4917      	ldr	r1, [pc, #92]	; (204890 <rt_test_006_004_execute.lto_priv.128+0x130>)
  204834:	6898      	ldr	r0, [r3, #8]
  204836:	eba0 0008 	sub.w	r0, r0, r8
  20483a:	fab0 f080 	clz	r0, r0
  20483e:	0940      	lsrs	r0, r0, #5
  204840:	f7fd ff0e 	bl	202660 <_test_assert>
  204844:	2800      	cmp	r0, #0
  204846:	d1b7      	bne.n	2047b8 <rt_test_006_004_execute.lto_priv.128+0x58>
  test_set_step(8);
  204848:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
  20484a:	4810      	ldr	r0, [pc, #64]	; (20488c <rt_test_006_004_execute.lto_priv.128+0x12c>)
  test_set_step(8);
  20484c:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
  20484e:	f002 fb1f 	bl	206e90 <chMtxUnlock>
  204852:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
  204854:	490e      	ldr	r1, [pc, #56]	; (204890 <rt_test_006_004_execute.lto_priv.128+0x130>)
  204856:	6898      	ldr	r0, [r3, #8]
  204858:	1b00      	subs	r0, r0, r4
  20485a:	fab0 f080 	clz	r0, r0
}
  20485e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
  204862:	0940      	lsrs	r0, r0, #5
  204864:	f7fd befc 	b.w	202660 <_test_assert>
  204868:	20000860 	.word	0x20000860
  20486c:	2000098c 	.word	0x2000098c
  204870:	200010d8 	.word	0x200010d8
  204874:	00204741 	.word	0x00204741
  204878:	08007fd0 	.word	0x08007fd0
  20487c:	20000a70 	.word	0x20000a70
  204880:	08007ff4 	.word	0x08007ff4
  204884:	002048a1 	.word	0x002048a1
  204888:	20000bb8 	.word	0x20000bb8
  20488c:	20020024 	.word	0x20020024
  204890:	08008ee8 	.word	0x08008ee8
  204894:	20020064 	.word	0x20020064
	...

002048a0 <thread4B>:
static THD_FUNCTION(thread4B, p) {
  2048a0:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
  2048a2:	f240 50dc 	movw	r0, #1500	; 0x5dc
  2048a6:	f002 fd7b 	bl	2073a0 <chThdSleep>
  2048aa:	2320      	movs	r3, #32
  2048ac:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
  2048b0:	4c06      	ldr	r4, [pc, #24]	; (2048cc <thread4B+0x2c>)
  2048b2:	4620      	mov	r0, r4
  2048b4:	f002 fb24 	bl	206f00 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
  2048b8:	4620      	mov	r0, r4
  2048ba:	f002 fac1 	bl	206e40 <chMtxUnlockS>
  chSchRescheduleS();
  2048be:	f002 f97f 	bl	206bc0 <chSchRescheduleS>
  2048c2:	2300      	movs	r3, #0
  2048c4:	f383 8811 	msr	BASEPRI, r3
  2048c8:	bd10      	pop	{r4, pc}
  2048ca:	bf00      	nop
  2048cc:	20020064 	.word	0x20020064

002048d0 <rt_test_005_006_teardown.lto_priv.122>:
 *   must not change from "not taken".
 * .
 */

static void rt_test_005_006_teardown(void) {
  test_wait_threads();
  2048d0:	f7fd bb8e 	b.w	201ff0 <test_wait_threads>
	...

002048e0 <rt_test_006_004_teardown.lto_priv.127>:
  2048e0:	f7fd bb86 	b.w	201ff0 <test_wait_threads>
	...

002048f0 <rt_test_005_005_teardown.lto_priv.120>:
  2048f0:	f7fd bb7e 	b.w	201ff0 <test_wait_threads>
	...

00204900 <rt_test_006_001_execute.lto_priv.125>:
static void rt_test_006_001_execute(void) {
  204900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
  204902:	4f24      	ldr	r7, [pc, #144]	; (204994 <rt_test_006_001_execute.lto_priv.125+0x94>)
  test_set_step(2);
  204904:	2302      	movs	r3, #2
  204906:	4e24      	ldr	r6, [pc, #144]	; (204998 <rt_test_006_001_execute.lto_priv.125+0x98>)
  return chThdGetSelfX()->prio;
  204908:	69ba      	ldr	r2, [r7, #24]
    chMtxLock(&m1);
  20490a:	4824      	ldr	r0, [pc, #144]	; (20499c <rt_test_006_001_execute.lto_priv.125+0x9c>)
  20490c:	6894      	ldr	r4, [r2, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  20490e:	4d24      	ldr	r5, [pc, #144]	; (2049a0 <rt_test_006_001_execute.lto_priv.125+0xa0>)
  test_set_step(2);
  204910:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
  204912:	f002 fb5d 	bl	206fd0 <chMtxLock>
  test_set_step(3);
  204916:	f04f 0e03 	mov.w	lr, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  20491a:	1c61      	adds	r1, r4, #1
  20491c:	4b21      	ldr	r3, [pc, #132]	; (2049a4 <rt_test_006_001_execute.lto_priv.125+0xa4>)
  20491e:	4a22      	ldr	r2, [pc, #136]	; (2049a8 <rt_test_006_001_execute.lto_priv.125+0xa8>)
  204920:	4822      	ldr	r0, [pc, #136]	; (2049ac <rt_test_006_001_execute.lto_priv.125+0xac>)
  test_set_step(3);
  204922:	f8c6 e000 	str.w	lr, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  204926:	f7fb fda3 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  20492a:	1ca1      	adds	r1, r4, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  20492c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  20492e:	4b20      	ldr	r3, [pc, #128]	; (2049b0 <rt_test_006_001_execute.lto_priv.125+0xb0>)
  204930:	4a1d      	ldr	r2, [pc, #116]	; (2049a8 <rt_test_006_001_execute.lto_priv.125+0xa8>)
  204932:	4820      	ldr	r0, [pc, #128]	; (2049b4 <rt_test_006_001_execute.lto_priv.125+0xb4>)
  204934:	f7fb fd9c 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  204938:	1ce1      	adds	r1, r4, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  20493a:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  20493c:	4b1e      	ldr	r3, [pc, #120]	; (2049b8 <rt_test_006_001_execute.lto_priv.125+0xb8>)
  20493e:	4a1a      	ldr	r2, [pc, #104]	; (2049a8 <rt_test_006_001_execute.lto_priv.125+0xa8>)
  204940:	481e      	ldr	r0, [pc, #120]	; (2049bc <rt_test_006_001_execute.lto_priv.125+0xbc>)
  204942:	f7fb fd95 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  204946:	1d21      	adds	r1, r4, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  204948:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  20494a:	4b1d      	ldr	r3, [pc, #116]	; (2049c0 <rt_test_006_001_execute.lto_priv.125+0xc0>)
  20494c:	4a16      	ldr	r2, [pc, #88]	; (2049a8 <rt_test_006_001_execute.lto_priv.125+0xa8>)
  20494e:	481d      	ldr	r0, [pc, #116]	; (2049c4 <rt_test_006_001_execute.lto_priv.125+0xc4>)
  204950:	f7fb fd8e 	bl	200470 <chThdCreateStatic.constprop.61>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  204954:	1d61      	adds	r1, r4, #5
  204956:	4a14      	ldr	r2, [pc, #80]	; (2049a8 <rt_test_006_001_execute.lto_priv.125+0xa8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  204958:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  20495a:	4b1b      	ldr	r3, [pc, #108]	; (2049c8 <rt_test_006_001_execute.lto_priv.125+0xc8>)
  20495c:	481b      	ldr	r0, [pc, #108]	; (2049cc <rt_test_006_001_execute.lto_priv.125+0xcc>)
  20495e:	f7fb fd87 	bl	200470 <chThdCreateStatic.constprop.61>
  test_set_step(4);
  204962:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  204964:	6128      	str	r0, [r5, #16]
    chMtxUnlock(&m1);
  204966:	480d      	ldr	r0, [pc, #52]	; (20499c <rt_test_006_001_execute.lto_priv.125+0x9c>)
  test_set_step(4);
  204968:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
  20496a:	f002 fa91 	bl	206e90 <chMtxUnlock>
    test_wait_threads();
  20496e:	f7fd fb3f 	bl	201ff0 <test_wait_threads>
  204972:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
  204974:	4916      	ldr	r1, [pc, #88]	; (2049d0 <rt_test_006_001_execute.lto_priv.125+0xd0>)
  204976:	6898      	ldr	r0, [r3, #8]
  204978:	1b00      	subs	r0, r0, r4
  20497a:	fab0 f080 	clz	r0, r0
  20497e:	0940      	lsrs	r0, r0, #5
  204980:	f7fd fe6e 	bl	202660 <_test_assert>
  204984:	b100      	cbz	r0, 204988 <rt_test_006_001_execute.lto_priv.125+0x88>
  204986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
  204988:	4912      	ldr	r1, [pc, #72]	; (2049d4 <rt_test_006_001_execute.lto_priv.125+0xd4>)
  20498a:	4813      	ldr	r0, [pc, #76]	; (2049d8 <rt_test_006_001_execute.lto_priv.125+0xd8>)
}
  20498c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
  204990:	f7fd be3e 	b.w	202610 <_test_assert_sequence>
  204994:	20000860 	.word	0x20000860
  204998:	2000098c 	.word	0x2000098c
  20499c:	20020024 	.word	0x20020024
  2049a0:	200010d8 	.word	0x200010d8
  2049a4:	08007f10 	.word	0x08007f10
  2049a8:	00204aa1 	.word	0x00204aa1
  2049ac:	20000a70 	.word	0x20000a70
  2049b0:	08007f08 	.word	0x08007f08
  2049b4:	20000bb8 	.word	0x20000bb8
  2049b8:	08008000 	.word	0x08008000
  2049bc:	20000d00 	.word	0x20000d00
  2049c0:	08007ff4 	.word	0x08007ff4
  2049c4:	20000e48 	.word	0x20000e48
  2049c8:	08007fd0 	.word	0x08007fd0
  2049cc:	20000f90 	.word	0x20000f90
  2049d0:	08008ee8 	.word	0x08008ee8
  2049d4:	08007f38 	.word	0x08007f38
  2049d8:	08007f0c 	.word	0x08007f0c
  2049dc:	00000000 	.word	0x00000000

002049e0 <rt_test_005_004_execute.lto_priv.118>:
  return ch.rlist.current;
  2049e0:	4b24      	ldr	r3, [pc, #144]	; (204a74 <rt_test_005_004_execute.lto_priv.118+0x94>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
  2049e2:	4825      	ldr	r0, [pc, #148]	; (204a78 <rt_test_005_004_execute.lto_priv.118+0x98>)
  return chThdGetSelfX()->prio;
  2049e4:	699a      	ldr	r2, [r3, #24]
  2049e6:	4b25      	ldr	r3, [pc, #148]	; (204a7c <rt_test_005_004_execute.lto_priv.118+0x9c>)
  2049e8:	6891      	ldr	r1, [r2, #8]
  2049ea:	4a25      	ldr	r2, [pc, #148]	; (204a80 <rt_test_005_004_execute.lto_priv.118+0xa0>)
static void rt_test_005_004_execute(void) {
  2049ec:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
  2049ee:	2501      	movs	r5, #1
  2049f0:	4c24      	ldr	r4, [pc, #144]	; (204a84 <rt_test_005_004_execute.lto_priv.118+0xa4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
  2049f2:	4429      	add	r1, r5
  test_set_step(1);
  2049f4:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
  2049f6:	f7fb fd3b 	bl	200470 <chThdCreateStatic.constprop.61>
  test_set_step(2);
  2049fa:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
  2049fc:	4a22      	ldr	r2, [pc, #136]	; (204a88 <rt_test_005_004_execute.lto_priv.118+0xa8>)
  2049fe:	2320      	movs	r3, #32
  test_set_step(2);
  204a00:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
  204a02:	6010      	str	r0, [r2, #0]
  204a04:	f383 8811 	msr	BASEPRI, r3
  204a08:	4c20      	ldr	r4, [pc, #128]	; (204a8c <rt_test_005_004_execute.lto_priv.118+0xac>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
  204a0a:	2600      	movs	r6, #0
  204a0c:	e003      	b.n	204a16 <rt_test_005_004_execute.lto_priv.118+0x36>
  while (n > (cnt_t)0) {
  204a0e:	2d01      	cmp	r5, #1
    n--;
  204a10:	f04f 0501 	mov.w	r5, #1
  while (n > (cnt_t)0) {
  204a14:	d00f      	beq.n	204a36 <rt_test_005_004_execute.lto_priv.118+0x56>
    if (++sp->cnt <= (cnt_t)0) {
  204a16:	68a3      	ldr	r3, [r4, #8]
  204a18:	3301      	adds	r3, #1
  204a1a:	2b00      	cmp	r3, #0
  204a1c:	60a3      	str	r3, [r4, #8]
  204a1e:	dcf6      	bgt.n	204a0e <rt_test_005_004_execute.lto_priv.118+0x2e>
  thread_t *tp = tqp->next;
  204a20:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
  204a22:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  204a24:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
  204a26:	6023      	str	r3, [r4, #0]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
  204a28:	f002 f9a2 	bl	206d70 <chSchReadyI>
  while (n > (cnt_t)0) {
  204a2c:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
  204a2e:	6246      	str	r6, [r0, #36]	; 0x24
    n--;
  204a30:	f04f 0501 	mov.w	r5, #1
  while (n > (cnt_t)0) {
  204a34:	d1ef      	bne.n	204a16 <rt_test_005_004_execute.lto_priv.118+0x36>
    chSchRescheduleS();
  204a36:	f002 f8c3 	bl	206bc0 <chSchRescheduleS>
  204a3a:	2500      	movs	r5, #0
  204a3c:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
  204a40:	f7fd fad6 	bl	201ff0 <test_wait_threads>
  204a44:	2320      	movs	r3, #32
  204a46:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
  204a4a:	68a0      	ldr	r0, [r4, #8]
  204a4c:	4910      	ldr	r1, [pc, #64]	; (204a90 <rt_test_005_004_execute.lto_priv.118+0xb0>)
  204a4e:	f1a0 0001 	sub.w	r0, r0, #1
  204a52:	fab0 f080 	clz	r0, r0
  204a56:	0940      	lsrs	r0, r0, #5
  204a58:	f7fd fe02 	bl	202660 <_test_assert>
  204a5c:	b110      	cbz	r0, 204a64 <rt_test_005_004_execute.lto_priv.118+0x84>
  204a5e:	f385 8811 	msr	BASEPRI, r5
  204a62:	bd70      	pop	{r4, r5, r6, pc}
  204a64:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
  204a68:	490a      	ldr	r1, [pc, #40]	; (204a94 <rt_test_005_004_execute.lto_priv.118+0xb4>)
  204a6a:	4804      	ldr	r0, [pc, #16]	; (204a7c <rt_test_005_004_execute.lto_priv.118+0x9c>)
}
  204a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
  204a70:	f7fd bdce 	b.w	202610 <_test_assert_sequence>
  204a74:	20000860 	.word	0x20000860
  204a78:	20000a70 	.word	0x20000a70
  204a7c:	08007fd0 	.word	0x08007fd0
  204a80:	00204be1 	.word	0x00204be1
  204a84:	2000098c 	.word	0x2000098c
  204a88:	200010d8 	.word	0x200010d8
  204a8c:	20000974 	.word	0x20000974
  204a90:	08008e4c 	.word	0x08008e4c
  204a94:	08007f38 	.word	0x08007f38
	...

00204aa0 <thread1.lto_priv.203>:
static THD_FUNCTION(thread1, p) {
  204aa0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
  204aa2:	4c06      	ldr	r4, [pc, #24]	; (204abc <thread1.lto_priv.203+0x1c>)
static THD_FUNCTION(thread1, p) {
  204aa4:	4605      	mov	r5, r0
  chMtxLock(&m1);
  204aa6:	4620      	mov	r0, r4
  204aa8:	f002 fa92 	bl	206fd0 <chMtxLock>
  test_emit_token(*(char *)p);
  204aac:	7828      	ldrb	r0, [r5, #0]
  204aae:	f7fd fad7 	bl	202060 <test_emit_token>
  chMtxUnlock(&m1);
  204ab2:	4620      	mov	r0, r4
}
  204ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
  204ab8:	f002 b9ea 	b.w	206e90 <chMtxUnlock>
  204abc:	20020024 	.word	0x20020024

00204ac0 <thread9.lto_priv.197>:
static THD_FUNCTION(thread9, p) {
  204ac0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
  204ac2:	4c06      	ldr	r4, [pc, #24]	; (204adc <thread9.lto_priv.197+0x1c>)
static THD_FUNCTION(thread9, p) {
  204ac4:	4605      	mov	r5, r0
  chMtxLock(&m2);
  204ac6:	4620      	mov	r0, r4
  204ac8:	f002 fa82 	bl	206fd0 <chMtxLock>
  test_emit_token(*(char *)p);
  204acc:	7828      	ldrb	r0, [r5, #0]
  204ace:	f7fd fac7 	bl	202060 <test_emit_token>
  chMtxUnlock(&m2);
  204ad2:	4620      	mov	r0, r4
}
  204ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
  204ad8:	f002 b9da 	b.w	206e90 <chMtxUnlock>
  204adc:	20020064 	.word	0x20020064

00204ae0 <thread8.lto_priv.195>:
static THD_FUNCTION(thread8, p) {
  204ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  204ae2:	4607      	mov	r7, r0
  chMtxLock(&m2);
  204ae4:	481b      	ldr	r0, [pc, #108]	; (204b54 <thread8.lto_priv.195+0x74>)
  204ae6:	f002 fa73 	bl	206fd0 <chMtxLock>
  chMtxLock(&m1);
  204aea:	481b      	ldr	r0, [pc, #108]	; (204b58 <thread8.lto_priv.195+0x78>)
  204aec:	f002 fa70 	bl	206fd0 <chMtxLock>
  204af0:	2320      	movs	r3, #32
  204af2:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
  204af6:	4d19      	ldr	r5, [pc, #100]	; (204b5c <thread8.lto_priv.195+0x7c>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->mtxlist;
  204af8:	69ab      	ldr	r3, [r5, #24]
  204afa:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(currp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
  204afc:	4630      	mov	r0, r6
  204afe:	f002 f99f 	bl	206e40 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
  204b02:	4b17      	ldr	r3, [pc, #92]	; (204b60 <thread8.lto_priv.195+0x80>)
  204b04:	69ac      	ldr	r4, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
  204b06:	4618      	mov	r0, r3
  204b08:	6263      	str	r3, [r4, #36]	; 0x24
  204b0a:	e003      	b.n	204b14 <thread8.lto_priv.195+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  204b0c:	6899      	ldr	r1, [r3, #8]
  204b0e:	68a2      	ldr	r2, [r4, #8]
  204b10:	4291      	cmp	r1, r2
  204b12:	d302      	bcc.n	204b1a <thread8.lto_priv.195+0x3a>
    cp = cp->queue.next;
  204b14:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  204b16:	4283      	cmp	r3, r0
  204b18:	d1f8      	bne.n	204b0c <thread8.lto_priv.195+0x2c>
  tp->queue.prev             = cp->queue.prev;
  204b1a:	685a      	ldr	r2, [r3, #4]
    chSchGoSleepS(newstate);
  204b1c:	2007      	movs	r0, #7
  tp->queue.next             = cp;
  204b1e:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  204b20:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  204b22:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  204b24:	605c      	str	r4, [r3, #4]
  204b26:	f002 f8c3 	bl	206cb0 <chSchGoSleepS>
  return currp->u.rdymsg;
  204b2a:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
  204b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  204b2e:	3301      	adds	r3, #1
  204b30:	d002      	beq.n	204b38 <thread8.lto_priv.195+0x58>
    chMtxLockS(mp);
  204b32:	4630      	mov	r0, r6
  204b34:	f002 f9e4 	bl	206f00 <chMtxLockS>
  204b38:	2300      	movs	r3, #0
  204b3a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
  204b3e:	7838      	ldrb	r0, [r7, #0]
  204b40:	f7fd fa8e 	bl	202060 <test_emit_token>
  chMtxUnlock(&m1);
  204b44:	4804      	ldr	r0, [pc, #16]	; (204b58 <thread8.lto_priv.195+0x78>)
  204b46:	f002 f9a3 	bl	206e90 <chMtxUnlock>
  chMtxUnlock(&m2);
  204b4a:	4802      	ldr	r0, [pc, #8]	; (204b54 <thread8.lto_priv.195+0x74>)
}
  204b4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
  204b50:	f002 b99e 	b.w	206e90 <chMtxUnlock>
  204b54:	20020064 	.word	0x20020064
  204b58:	20020024 	.word	0x20020024
  204b5c:	20000860 	.word	0x20000860
  204b60:	20020000 	.word	0x20020000
	...

00204b70 <thread6.lto_priv.196>:
static THD_FUNCTION(thread6, p) {
  204b70:	b570      	push	{r4, r5, r6, lr}
  204b72:	4606      	mov	r6, r0
  chMtxLock(&m1);
  204b74:	4816      	ldr	r0, [pc, #88]	; (204bd0 <thread6.lto_priv.196+0x60>)
  204b76:	f002 fa2b 	bl	206fd0 <chMtxLock>
  204b7a:	2320      	movs	r3, #32
  204b7c:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
  204b80:	4b14      	ldr	r3, [pc, #80]	; (204bd4 <thread6.lto_priv.196+0x64>)
  204b82:	699c      	ldr	r4, [r3, #24]
  204b84:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
  204b86:	4628      	mov	r0, r5
  204b88:	f002 f95a 	bl	206e40 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
  204b8c:	4b12      	ldr	r3, [pc, #72]	; (204bd8 <thread6.lto_priv.196+0x68>)
  thread_t *cp = (thread_t *)tqp;
  204b8e:	4618      	mov	r0, r3
  204b90:	6263      	str	r3, [r4, #36]	; 0x24
  204b92:	e003      	b.n	204b9c <thread6.lto_priv.196+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  204b94:	6899      	ldr	r1, [r3, #8]
  204b96:	68a2      	ldr	r2, [r4, #8]
  204b98:	4291      	cmp	r1, r2
  204b9a:	d302      	bcc.n	204ba2 <thread6.lto_priv.196+0x32>
    cp = cp->queue.next;
  204b9c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  204b9e:	4283      	cmp	r3, r0
  204ba0:	d1f8      	bne.n	204b94 <thread6.lto_priv.196+0x24>
  tp->queue.prev             = cp->queue.prev;
  204ba2:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
  204ba4:	2007      	movs	r0, #7
  tp->queue.next             = cp;
  204ba6:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  204ba8:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  204baa:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  204bac:	605c      	str	r4, [r3, #4]
  204bae:	f002 f87f 	bl	206cb0 <chSchGoSleepS>
  chMtxLockS(mp);
  204bb2:	4628      	mov	r0, r5
  204bb4:	f002 f9a4 	bl	206f00 <chMtxLockS>
  204bb8:	2300      	movs	r3, #0
  204bba:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
  204bbe:	7830      	ldrb	r0, [r6, #0]
  204bc0:	f7fd fa4e 	bl	202060 <test_emit_token>
  chMtxUnlock(&m1);
  204bc4:	4802      	ldr	r0, [pc, #8]	; (204bd0 <thread6.lto_priv.196+0x60>)
}
  204bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
  204bca:	f002 b961 	b.w	206e90 <chMtxUnlock>
  204bce:	bf00      	nop
  204bd0:	20020024 	.word	0x20020024
  204bd4:	20000860 	.word	0x20000860
  204bd8:	20020000 	.word	0x20020000
  204bdc:	00000000 	.word	0x00000000

00204be0 <thread1.lto_priv.202>:
static THD_FUNCTION(thread1, p) {
  204be0:	b510      	push	{r4, lr}
  204be2:	4604      	mov	r4, r0
  chSemWait(&sem1);
  204be4:	4803      	ldr	r0, [pc, #12]	; (204bf4 <thread1.lto_priv.202+0x14>)
  204be6:	f002 f89b 	bl	206d20 <chSemWait>
  test_emit_token(*(char *)p);
  204bea:	7820      	ldrb	r0, [r4, #0]
}
  204bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
  204bf0:	f7fd ba36 	b.w	202060 <test_emit_token>
  204bf4:	20000974 	.word	0x20000974
	...

00204c00 <rt_test_005_001_teardown.lto_priv.111>:
  chSemReset(&sem1, 0);
  204c00:	2100      	movs	r1, #0
  204c02:	4801      	ldr	r0, [pc, #4]	; (204c08 <rt_test_005_001_teardown.lto_priv.111+0x8>)
  204c04:	f002 bab4 	b.w	207170 <chSemReset>
  204c08:	20000974 	.word	0x20000974
  204c0c:	00000000 	.word	0x00000000

00204c10 <rt_test_005_006_execute.lto_priv.123>:
}

static void rt_test_005_006_execute(void) {
  204c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  204c14:	b084      	sub	sp, #16
  binary_semaphore_t bsem;
  msg_t msg;

  /* [5.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
  204c16:	4f60      	ldr	r7, [pc, #384]	; (204d98 <rt_test_005_006_execute.lto_priv.123+0x188>)
  204c18:	2301      	movs	r3, #1
  sp->cnt = n;
  204c1a:	2600      	movs	r6, #0
  tqp->next = (thread_t *)tqp;
  204c1c:	ac01      	add	r4, sp, #4
  204c1e:	f04f 0820 	mov.w	r8, #32
  204c22:	603b      	str	r3, [r7, #0]
  204c24:	9401      	str	r4, [sp, #4]
  tqp->prev = (thread_t *)tqp;
  204c26:	9402      	str	r4, [sp, #8]
  204c28:	9603      	str	r6, [sp, #12]
  204c2a:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
  204c2e:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  204c30:	495a      	ldr	r1, [pc, #360]	; (204d9c <rt_test_005_006_execute.lto_priv.123+0x18c>)
  204c32:	42b0      	cmp	r0, r6
  204c34:	bfcc      	ite	gt
  204c36:	2000      	movgt	r0, #0
  204c38:	2001      	movle	r0, #1
  204c3a:	f7fd fd11 	bl	202660 <_test_assert>
  204c3e:	b120      	cbz	r0, 204c4a <rt_test_005_006_execute.lto_priv.123+0x3a>
  204c40:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
  204c44:	b004      	add	sp, #16
  204c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  204c4a:	4605      	mov	r5, r0
  204c4c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
  204c50:	2302      	movs	r3, #2
  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
  204c52:	4601      	mov	r1, r0
  204c54:	4620      	mov	r0, r4
  204c56:	603b      	str	r3, [r7, #0]
  204c58:	f002 fa8a 	bl	207170 <chSemReset>
  204c5c:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
  204c60:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  204c62:	494e      	ldr	r1, [pc, #312]	; (204d9c <rt_test_005_006_execute.lto_priv.123+0x18c>)
  204c64:	2800      	cmp	r0, #0
  204c66:	bfcc      	ite	gt
  204c68:	2000      	movgt	r0, #0
  204c6a:	2001      	movle	r0, #1
  204c6c:	f7fd fcf8 	bl	202660 <_test_assert>
  204c70:	4606      	mov	r6, r0
  204c72:	b120      	cbz	r0, 204c7e <rt_test_005_006_execute.lto_priv.123+0x6e>
  204c74:	f385 8811 	msr	BASEPRI, r5
}
  204c78:	b004      	add	sp, #16
  204c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  204c7e:	f380 8811 	msr	BASEPRI, r0
  204c82:	4947      	ldr	r1, [pc, #284]	; (204da0 <rt_test_005_006_execute.lto_priv.123+0x190>)
  test_set_step(3);
  204c84:	2003      	movs	r0, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
  204c86:	4623      	mov	r3, r4
  204c88:	4a46      	ldr	r2, [pc, #280]	; (204da4 <rt_test_005_006_execute.lto_priv.123+0x194>)
  return chThdGetSelfX()->prio;
  204c8a:	6989      	ldr	r1, [r1, #24]
  test_set_step(3);
  204c8c:	6038      	str	r0, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
  204c8e:	6889      	ldr	r1, [r1, #8]
  204c90:	4845      	ldr	r0, [pc, #276]	; (204da8 <rt_test_005_006_execute.lto_priv.123+0x198>)
  204c92:	3901      	subs	r1, #1
  204c94:	f7fb fbec 	bl	200470 <chThdCreateStatic.constprop.61>
  204c98:	4a44      	ldr	r2, [pc, #272]	; (204dac <rt_test_005_006_execute.lto_priv.123+0x19c>)
  test_set_step(4);
  204c9a:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
  204c9c:	6010      	str	r0, [r2, #0]
  return chSemWait(&bsp->sem);
  204c9e:	4620      	mov	r0, r4
  test_set_step(4);
  204ca0:	603b      	str	r3, [r7, #0]
  204ca2:	f002 f83d 	bl	206d20 <chSemWait>
  204ca6:	4605      	mov	r5, r0
  204ca8:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
  204cac:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  204cae:	493b      	ldr	r1, [pc, #236]	; (204d9c <rt_test_005_006_execute.lto_priv.123+0x18c>)
  204cb0:	2800      	cmp	r0, #0
  204cb2:	bfcc      	ite	gt
  204cb4:	2000      	movgt	r0, #0
  204cb6:	2001      	movle	r0, #1
  204cb8:	f7fd fcd2 	bl	202660 <_test_assert>
  204cbc:	2800      	cmp	r0, #0
  204cbe:	d1bf      	bne.n	204c40 <rt_test_005_006_execute.lto_priv.123+0x30>
  204cc0:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
  204cc4:	fab5 f085 	clz	r0, r5
  204cc8:	4939      	ldr	r1, [pc, #228]	; (204db0 <rt_test_005_006_execute.lto_priv.123+0x1a0>)
  204cca:	0940      	lsrs	r0, r0, #5
  204ccc:	f7fd fcc8 	bl	202660 <_test_assert>
  204cd0:	2800      	cmp	r0, #0
  204cd2:	d1b7      	bne.n	204c44 <rt_test_005_006_execute.lto_priv.123+0x34>
  test_set_step(5);
  204cd4:	2305      	movs	r3, #5
  204cd6:	603b      	str	r3, [r7, #0]
  204cd8:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
  204cdc:	9b03      	ldr	r3, [sp, #12]
  204cde:	2b00      	cmp	r3, #0
  204ce0:	dd23      	ble.n	204d2a <rt_test_005_006_execute.lto_priv.123+0x11a>
  chSchRescheduleS();
  204ce2:	f001 ff6d 	bl	206bc0 <chSchRescheduleS>
  204ce6:	2500      	movs	r5, #0
  204ce8:	f385 8811 	msr	BASEPRI, r5
  204cec:	2620      	movs	r6, #32
  204cee:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
  204cf2:	9803      	ldr	r0, [sp, #12]
  204cf4:	492f      	ldr	r1, [pc, #188]	; (204db4 <rt_test_005_006_execute.lto_priv.123+0x1a4>)
  204cf6:	42a8      	cmp	r0, r5
  204cf8:	bfd4      	ite	le
  204cfa:	2000      	movle	r0, #0
  204cfc:	2001      	movgt	r0, #1
  204cfe:	f7fd fcaf 	bl	202660 <_test_assert>
  204d02:	4680      	mov	r8, r0
  204d04:	2800      	cmp	r0, #0
  204d06:	d1b5      	bne.n	204c74 <rt_test_005_006_execute.lto_priv.123+0x64>
  204d08:	f380 8811 	msr	BASEPRI, r0
  204d0c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  204d10:	9803      	ldr	r0, [sp, #12]
  204d12:	4929      	ldr	r1, [pc, #164]	; (204db8 <rt_test_005_006_execute.lto_priv.123+0x1a8>)
  204d14:	f1a0 0001 	sub.w	r0, r0, #1
  204d18:	fab0 f080 	clz	r0, r0
  204d1c:	0940      	lsrs	r0, r0, #5
  204d1e:	f7fd fc9f 	bl	202660 <_test_assert>
  204d22:	b130      	cbz	r0, 204d32 <rt_test_005_006_execute.lto_priv.123+0x122>
  204d24:	f388 8811 	msr	BASEPRI, r8
  204d28:	e78c      	b.n	204c44 <rt_test_005_006_execute.lto_priv.123+0x34>
    chSemSignalI(&bsp->sem);
  204d2a:	4620      	mov	r0, r4
  204d2c:	f002 fa08 	bl	207140 <chSemSignalI>
  204d30:	e7d7      	b.n	204ce2 <rt_test_005_006_execute.lto_priv.123+0xd2>
  204d32:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
  204d36:	2306      	movs	r3, #6
  204d38:	603b      	str	r3, [r7, #0]
  204d3a:	f386 8811 	msr	BASEPRI, r6
  if (bsp->sem.cnt < (cnt_t)1) {
  204d3e:	9b03      	ldr	r3, [sp, #12]
  204d40:	2b00      	cmp	r3, #0
  204d42:	dd22      	ble.n	204d8a <rt_test_005_006_execute.lto_priv.123+0x17a>
  chSchRescheduleS();
  204d44:	f001 ff3c 	bl	206bc0 <chSchRescheduleS>
  204d48:	2600      	movs	r6, #0
  204d4a:	f386 8811 	msr	BASEPRI, r6
  204d4e:	2520      	movs	r5, #32
  204d50:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
  204d54:	9803      	ldr	r0, [sp, #12]
  204d56:	4919      	ldr	r1, [pc, #100]	; (204dbc <rt_test_005_006_execute.lto_priv.123+0x1ac>)
  204d58:	42b0      	cmp	r0, r6
  204d5a:	bfd4      	ite	le
  204d5c:	2000      	movle	r0, #0
  204d5e:	2001      	movgt	r0, #1
  204d60:	f7fd fc7e 	bl	202660 <_test_assert>
  204d64:	4604      	mov	r4, r0
  204d66:	2800      	cmp	r0, #0
  204d68:	f47f af6a 	bne.w	204c40 <rt_test_005_006_execute.lto_priv.123+0x30>
  204d6c:	f380 8811 	msr	BASEPRI, r0
  204d70:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  204d74:	9803      	ldr	r0, [sp, #12]
  204d76:	4910      	ldr	r1, [pc, #64]	; (204db8 <rt_test_005_006_execute.lto_priv.123+0x1a8>)
  204d78:	1e43      	subs	r3, r0, #1
  204d7a:	4258      	negs	r0, r3
  204d7c:	4158      	adcs	r0, r3
  204d7e:	f7fd fc6f 	bl	202660 <_test_assert>
  204d82:	b130      	cbz	r0, 204d92 <rt_test_005_006_execute.lto_priv.123+0x182>
  204d84:	f384 8811 	msr	BASEPRI, r4
  204d88:	e75c      	b.n	204c44 <rt_test_005_006_execute.lto_priv.123+0x34>
    chSemSignalI(&bsp->sem);
  204d8a:	4620      	mov	r0, r4
  204d8c:	f002 f9d8 	bl	207140 <chSemSignalI>
  204d90:	e7d8      	b.n	204d44 <rt_test_005_006_execute.lto_priv.123+0x134>
  204d92:	f380 8811 	msr	BASEPRI, r0
  204d96:	e755      	b.n	204c44 <rt_test_005_006_execute.lto_priv.123+0x34>
  204d98:	2000098c 	.word	0x2000098c
  204d9c:	08008e70 	.word	0x08008e70
  204da0:	20000860 	.word	0x20000860
  204da4:	00204df1 	.word	0x00204df1
  204da8:	20000a70 	.word	0x20000a70
  204dac:	200010d8 	.word	0x200010d8
  204db0:	08008e7c 	.word	0x08008e7c
  204db4:	08008e90 	.word	0x08008e90
  204db8:	08008e9c 	.word	0x08008e9c
  204dbc:	08008e74 	.word	0x08008e74

00204dc0 <thread2>:
static THD_FUNCTION(thread2, p) {
  204dc0:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
  204dc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  204dc6:	f002 faeb 	bl	2073a0 <chThdSleep>
  204dca:	2320      	movs	r3, #32
  204dcc:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
  204dd0:	4804      	ldr	r0, [pc, #16]	; (204de4 <thread2+0x24>)
  204dd2:	f002 f9b5 	bl	207140 <chSemSignalI>
  chSchRescheduleS();
  204dd6:	f001 fef3 	bl	206bc0 <chSchRescheduleS>
  204dda:	2300      	movs	r3, #0
  204ddc:	f383 8811 	msr	BASEPRI, r3
  204de0:	bd08      	pop	{r3, pc}
  204de2:	bf00      	nop
  204de4:	20000974 	.word	0x20000974
	...

00204df0 <thread4>:
static THD_FUNCTION(thread4, p) {
  204df0:	b508      	push	{r3, lr}
  204df2:	2220      	movs	r2, #32
  204df4:	f382 8811 	msr	BASEPRI, r2
  if (bsp->sem.cnt < (cnt_t)1) {
  204df8:	6883      	ldr	r3, [r0, #8]
  204dfa:	2b00      	cmp	r3, #0
  204dfc:	dd05      	ble.n	204e0a <thread4+0x1a>
  chSchRescheduleS();
  204dfe:	f001 fedf 	bl	206bc0 <chSchRescheduleS>
  204e02:	2300      	movs	r3, #0
  204e04:	f383 8811 	msr	BASEPRI, r3
  204e08:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
  204e0a:	f002 f999 	bl	207140 <chSemSignalI>
  chSchRescheduleS();
  204e0e:	f001 fed7 	bl	206bc0 <chSchRescheduleS>
  204e12:	2300      	movs	r3, #0
  204e14:	f383 8811 	msr	BASEPRI, r3
  204e18:	bd08      	pop	{r3, pc}
  204e1a:	bf00      	nop
  204e1c:	0000      	movs	r0, r0
	...

00204e20 <rt_test_005_005_execute.lto_priv.121>:
  return ch.rlist.current;
  204e20:	4a1e      	ldr	r2, [pc, #120]	; (204e9c <rt_test_005_005_execute.lto_priv.121+0x7c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  204e22:	481f      	ldr	r0, [pc, #124]	; (204ea0 <rt_test_005_005_execute.lto_priv.121+0x80>)
  return chThdGetSelfX()->prio;
  204e24:	6991      	ldr	r1, [r2, #24]
  204e26:	4a1f      	ldr	r2, [pc, #124]	; (204ea4 <rt_test_005_005_execute.lto_priv.121+0x84>)
  204e28:	6889      	ldr	r1, [r1, #8]
static void rt_test_005_005_execute(void) {
  204e2a:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
  204e2c:	2401      	movs	r4, #1
  204e2e:	4d1e      	ldr	r5, [pc, #120]	; (204ea8 <rt_test_005_005_execute.lto_priv.121+0x88>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  204e30:	2300      	movs	r3, #0
  204e32:	4421      	add	r1, r4
  test_set_step(1);
  204e34:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  204e36:	f7fb fb1b 	bl	200470 <chThdCreateStatic.constprop.61>
  return (bool)(tqp->next == (const thread_t *)tqp);
  204e3a:	4c1c      	ldr	r4, [pc, #112]	; (204eac <rt_test_005_005_execute.lto_priv.121+0x8c>)
  204e3c:	4a1c      	ldr	r2, [pc, #112]	; (204eb0 <rt_test_005_005_execute.lto_priv.121+0x90>)
  test_set_step(2);
  204e3e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  204e40:	6010      	str	r0, [r2, #0]
  test_set_step(2);
  204e42:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
  204e44:	f7fb fb8c 	bl	200560 <chSemSignalWait.constprop.55>
  204e48:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
  204e4a:	491a      	ldr	r1, [pc, #104]	; (204eb4 <rt_test_005_005_execute.lto_priv.121+0x94>)
  204e4c:	1b00      	subs	r0, r0, r4
  204e4e:	fab0 f080 	clz	r0, r0
  204e52:	0940      	lsrs	r0, r0, #5
  204e54:	f7fd fc04 	bl	202660 <_test_assert>
  204e58:	b100      	cbz	r0, 204e5c <rt_test_005_005_execute.lto_priv.121+0x3c>
  204e5a:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
  204e5c:	68a0      	ldr	r0, [r4, #8]
  204e5e:	4916      	ldr	r1, [pc, #88]	; (204eb8 <rt_test_005_005_execute.lto_priv.121+0x98>)
  204e60:	fab0 f080 	clz	r0, r0
  204e64:	0940      	lsrs	r0, r0, #5
  204e66:	f7fd fbfb 	bl	202660 <_test_assert>
  204e6a:	2800      	cmp	r0, #0
  204e6c:	d1f5      	bne.n	204e5a <rt_test_005_005_execute.lto_priv.121+0x3a>
  test_set_step(3);
  204e6e:	2303      	movs	r3, #3
  204e70:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
  204e72:	f7fb fb75 	bl	200560 <chSemSignalWait.constprop.55>
  204e76:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
  204e78:	490e      	ldr	r1, [pc, #56]	; (204eb4 <rt_test_005_005_execute.lto_priv.121+0x94>)
  204e7a:	1b00      	subs	r0, r0, r4
  204e7c:	fab0 f080 	clz	r0, r0
  204e80:	0940      	lsrs	r0, r0, #5
  204e82:	f7fd fbed 	bl	202660 <_test_assert>
  204e86:	2800      	cmp	r0, #0
  204e88:	d1e7      	bne.n	204e5a <rt_test_005_005_execute.lto_priv.121+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
  204e8a:	68a0      	ldr	r0, [r4, #8]
  204e8c:	490a      	ldr	r1, [pc, #40]	; (204eb8 <rt_test_005_005_execute.lto_priv.121+0x98>)
  204e8e:	fab0 f080 	clz	r0, r0
}
  204e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
  204e96:	0940      	lsrs	r0, r0, #5
  204e98:	f7fd bbe2 	b.w	202660 <_test_assert>
  204e9c:	20000860 	.word	0x20000860
  204ea0:	20000a70 	.word	0x20000a70
  204ea4:	00204ec1 	.word	0x00204ec1
  204ea8:	2000098c 	.word	0x2000098c
  204eac:	20000974 	.word	0x20000974
  204eb0:	200010d8 	.word	0x200010d8
  204eb4:	08008ed8 	.word	0x08008ed8
  204eb8:	08008e5c 	.word	0x08008e5c
  204ebc:	00000000 	.word	0x00000000

00204ec0 <thread3>:
static THD_FUNCTION(thread3, p) {
  204ec0:	b510      	push	{r4, lr}
  chSemWait(&sem1);
  204ec2:	4c04      	ldr	r4, [pc, #16]	; (204ed4 <thread3+0x14>)
  204ec4:	4620      	mov	r0, r4
  204ec6:	f001 ff2b 	bl	206d20 <chSemWait>
  chSemSignal(&sem1);
  204eca:	4620      	mov	r0, r4
}
  204ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
  204ed0:	f001 bece 	b.w	206c70 <chSemSignal>
  204ed4:	20000974 	.word	0x20000974
	...

00204ee0 <rt_test_005_002_execute.lto_priv.114>:
static void rt_test_005_002_execute(void) {
  204ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
  204ee4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 204fc8 <rt_test_005_002_execute.lto_priv.114+0xe8>
  test_set_step(1);
  204ee8:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  204eea:	4f2c      	ldr	r7, [pc, #176]	; (204f9c <rt_test_005_002_execute.lto_priv.114+0xbc>)
  return chThdGetSelfX()->prio;
  204eec:	f8d8 3018 	ldr.w	r3, [r8, #24]
  204ef0:	4e2b      	ldr	r6, [pc, #172]	; (204fa0 <rt_test_005_002_execute.lto_priv.114+0xc0>)
  204ef2:	463a      	mov	r2, r7
  204ef4:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
  204ef6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 204fcc <rt_test_005_002_execute.lto_priv.114+0xec>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  204efa:	4630      	mov	r0, r6
  204efc:	3105      	adds	r1, #5
  204efe:	4b29      	ldr	r3, [pc, #164]	; (204fa4 <rt_test_005_002_execute.lto_priv.114+0xc4>)
  test_set_step(1);
  204f00:	f8c9 4000 	str.w	r4, [r9]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  204f04:	f7fb fab4 	bl	200470 <chThdCreateStatic.constprop.61>
  204f08:	f8d8 3018 	ldr.w	r3, [r8, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  204f0c:	463a      	mov	r2, r7
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  204f0e:	4d26      	ldr	r5, [pc, #152]	; (204fa8 <rt_test_005_002_execute.lto_priv.114+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  204f10:	6899      	ldr	r1, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  204f12:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  204f14:	f506 70a4 	add.w	r0, r6, #328	; 0x148
  204f18:	4421      	add	r1, r4
  204f1a:	4b24      	ldr	r3, [pc, #144]	; (204fac <rt_test_005_002_execute.lto_priv.114+0xcc>)
  204f1c:	f7fb faa8 	bl	200470 <chThdCreateStatic.constprop.61>
  204f20:	f8d8 3018 	ldr.w	r3, [r8, #24]
  204f24:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  204f26:	463a      	mov	r2, r7
  204f28:	6899      	ldr	r1, [r3, #8]
  204f2a:	f506 7024 	add.w	r0, r6, #656	; 0x290
  204f2e:	4b20      	ldr	r3, [pc, #128]	; (204fb0 <rt_test_005_002_execute.lto_priv.114+0xd0>)
  204f30:	3103      	adds	r1, #3
    chSemSignal(&sem1);
  204f32:	4c20      	ldr	r4, [pc, #128]	; (204fb4 <rt_test_005_002_execute.lto_priv.114+0xd4>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  204f34:	f7fb fa9c 	bl	200470 <chThdCreateStatic.constprop.61>
  204f38:	f8d8 3018 	ldr.w	r3, [r8, #24]
  204f3c:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
  204f3e:	463a      	mov	r2, r7
  204f40:	6899      	ldr	r1, [r3, #8]
  204f42:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
  204f46:	4b1c      	ldr	r3, [pc, #112]	; (204fb8 <rt_test_005_002_execute.lto_priv.114+0xd8>)
  204f48:	3104      	adds	r1, #4
  204f4a:	f7fb fa91 	bl	200470 <chThdCreateStatic.constprop.61>
  204f4e:	f8d8 3018 	ldr.w	r3, [r8, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  204f52:	463a      	mov	r2, r7
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
  204f54:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  204f56:	6899      	ldr	r1, [r3, #8]
  204f58:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
  204f5c:	4b17      	ldr	r3, [pc, #92]	; (204fbc <rt_test_005_002_execute.lto_priv.114+0xdc>)
  204f5e:	3102      	adds	r1, #2
  204f60:	f7fb fa86 	bl	200470 <chThdCreateStatic.constprop.61>
  test_set_step(2);
  204f64:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  204f66:	6128      	str	r0, [r5, #16]
    chSemSignal(&sem1);
  204f68:	4620      	mov	r0, r4
  test_set_step(2);
  204f6a:	f8c9 3000 	str.w	r3, [r9]
    chSemSignal(&sem1);
  204f6e:	f001 fe7f 	bl	206c70 <chSemSignal>
    chSemSignal(&sem1);
  204f72:	4620      	mov	r0, r4
  204f74:	f001 fe7c 	bl	206c70 <chSemSignal>
    chSemSignal(&sem1);
  204f78:	4620      	mov	r0, r4
  204f7a:	f001 fe79 	bl	206c70 <chSemSignal>
    chSemSignal(&sem1);
  204f7e:	4620      	mov	r0, r4
  204f80:	f001 fe76 	bl	206c70 <chSemSignal>
    chSemSignal(&sem1);
  204f84:	4620      	mov	r0, r4
  204f86:	f001 fe73 	bl	206c70 <chSemSignal>
    test_wait_threads();
  204f8a:	f7fd f831 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
  204f8e:	490c      	ldr	r1, [pc, #48]	; (204fc0 <rt_test_005_002_execute.lto_priv.114+0xe0>)
  204f90:	480c      	ldr	r0, [pc, #48]	; (204fc4 <rt_test_005_002_execute.lto_priv.114+0xe4>)
}
  204f92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
  204f96:	f7fd bb3b 	b.w	202610 <_test_assert_sequence>
  204f9a:	bf00      	nop
  204f9c:	00204be1 	.word	0x00204be1
  204fa0:	20000a70 	.word	0x20000a70
  204fa4:	08007fd0 	.word	0x08007fd0
  204fa8:	200010d8 	.word	0x200010d8
  204fac:	08007ff4 	.word	0x08007ff4
  204fb0:	08008000 	.word	0x08008000
  204fb4:	20000974 	.word	0x20000974
  204fb8:	08007f08 	.word	0x08007f08
  204fbc:	08007f10 	.word	0x08007f10
  204fc0:	08007f38 	.word	0x08007f38
  204fc4:	08007f0c 	.word	0x08007f0c
  204fc8:	20000860 	.word	0x20000860
  204fcc:	2000098c 	.word	0x2000098c

00204fd0 <rt_test_005_001_execute.lto_priv.112>:
static void rt_test_005_001_execute(void) {
  204fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
  204fd4:	4c2b      	ldr	r4, [pc, #172]	; (205084 <rt_test_005_001_execute.lto_priv.112+0xb4>)
  test_set_step(1);
  204fd6:	2301      	movs	r3, #1
  204fd8:	4e2b      	ldr	r6, [pc, #172]	; (205088 <rt_test_005_001_execute.lto_priv.112+0xb8>)
  204fda:	2520      	movs	r5, #32
    msg = chSemWait(&sem1);
  204fdc:	4620      	mov	r0, r4
  test_set_step(1);
  204fde:	6033      	str	r3, [r6, #0]
    msg = chSemWait(&sem1);
  204fe0:	f001 fe9e 	bl	206d20 <chSemWait>
  204fe4:	4607      	mov	r7, r0
  204fe6:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
  204fea:	68a0      	ldr	r0, [r4, #8]
  204fec:	4927      	ldr	r1, [pc, #156]	; (20508c <rt_test_005_001_execute.lto_priv.112+0xbc>)
  204fee:	fab0 f080 	clz	r0, r0
  204ff2:	0940      	lsrs	r0, r0, #5
  204ff4:	f7fd fb34 	bl	202660 <_test_assert>
  204ff8:	b120      	cbz	r0, 205004 <rt_test_005_001_execute.lto_priv.112+0x34>
  204ffa:	2300      	movs	r3, #0
  204ffc:	f383 8811 	msr	BASEPRI, r3
  205000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  205004:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
  205008:	fab7 f087 	clz	r0, r7
  20500c:	4920      	ldr	r1, [pc, #128]	; (205090 <rt_test_005_001_execute.lto_priv.112+0xc0>)
  20500e:	0940      	lsrs	r0, r0, #5
  205010:	f7fd fb26 	bl	202660 <_test_assert>
  205014:	4607      	mov	r7, r0
  205016:	b108      	cbz	r0, 20501c <rt_test_005_001_execute.lto_priv.112+0x4c>
  205018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(2);
  20501c:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
  205020:	4620      	mov	r0, r4
  test_set_step(2);
  205022:	f8c6 9000 	str.w	r9, [r6]
    chSemSignal(&sem1);
  205026:	f001 fe23 	bl	206c70 <chSemSignal>
  20502a:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
  20502e:	68a0      	ldr	r0, [r4, #8]
  205030:	4916      	ldr	r1, [pc, #88]	; (20508c <rt_test_005_001_execute.lto_priv.112+0xbc>)
  205032:	f1a0 0001 	sub.w	r0, r0, #1
  205036:	fab0 f080 	clz	r0, r0
  20503a:	0940      	lsrs	r0, r0, #5
  20503c:	f7fd fb10 	bl	202660 <_test_assert>
  205040:	4680      	mov	r8, r0
  205042:	b118      	cbz	r0, 20504c <rt_test_005_001_execute.lto_priv.112+0x7c>
  205044:	f387 8811 	msr	BASEPRI, r7
  205048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  20504c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
  205050:	2303      	movs	r3, #3
    chSemReset(&sem1, 2);
  205052:	4649      	mov	r1, r9
  205054:	4620      	mov	r0, r4
  test_set_step(3);
  205056:	6033      	str	r3, [r6, #0]
    chSemReset(&sem1, 2);
  205058:	f002 f88a 	bl	207170 <chSemReset>
  20505c:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
  205060:	68a0      	ldr	r0, [r4, #8]
  205062:	490a      	ldr	r1, [pc, #40]	; (20508c <rt_test_005_001_execute.lto_priv.112+0xbc>)
  205064:	f1a0 0002 	sub.w	r0, r0, #2
  205068:	fab0 f080 	clz	r0, r0
  20506c:	0940      	lsrs	r0, r0, #5
  20506e:	f7fd faf7 	bl	202660 <_test_assert>
  205072:	b910      	cbnz	r0, 20507a <rt_test_005_001_execute.lto_priv.112+0xaa>
  205074:	f380 8811 	msr	BASEPRI, r0
  205078:	e7ce      	b.n	205018 <rt_test_005_001_execute.lto_priv.112+0x48>
  20507a:	f388 8811 	msr	BASEPRI, r8
  20507e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  205082:	bf00      	nop
  205084:	20000974 	.word	0x20000974
  205088:	2000098c 	.word	0x2000098c
  20508c:	08008e20 	.word	0x08008e20
  205090:	08008e34 	.word	0x08008e34
	...

002050a0 <rt_test_005_003_execute.lto_priv.116>:
static void rt_test_005_003_execute(void) {
  2050a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
  2050a4:	2001      	movs	r0, #1
  2050a6:	4d4b      	ldr	r5, [pc, #300]	; (2051d4 <rt_test_005_003_execute.lto_priv.116+0x134>)
  2050a8:	2320      	movs	r3, #32
  2050aa:	6028      	str	r0, [r5, #0]
  2050ac:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
  2050b0:	4c49      	ldr	r4, [pc, #292]	; (2051d8 <rt_test_005_003_execute.lto_priv.116+0x138>)
  2050b2:	68a3      	ldr	r3, [r4, #8]
  2050b4:	3b01      	subs	r3, #1
  2050b6:	d401      	bmi.n	2050bc <rt_test_005_003_execute.lto_priv.116+0x1c>
  2050b8:	2000      	movs	r0, #0
  2050ba:	60a3      	str	r3, [r4, #8]
  2050bc:	2300      	movs	r3, #0
  2050be:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
  2050c2:	4946      	ldr	r1, [pc, #280]	; (2051dc <rt_test_005_003_execute.lto_priv.116+0x13c>)
  2050c4:	f7fd facc 	bl	202660 <_test_assert>
  2050c8:	b108      	cbz	r0, 2050ce <rt_test_005_003_execute.lto_priv.116+0x2e>
  2050ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  2050ce:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
  2050d0:	4943      	ldr	r1, [pc, #268]	; (2051e0 <rt_test_005_003_execute.lto_priv.116+0x140>)
  2050d2:	1b00      	subs	r0, r0, r4
  2050d4:	fab0 f080 	clz	r0, r0
  2050d8:	0940      	lsrs	r0, r0, #5
  2050da:	f7fd fac1 	bl	202660 <_test_assert>
  2050de:	2800      	cmp	r0, #0
  2050e0:	d1f3      	bne.n	2050ca <rt_test_005_003_execute.lto_priv.116+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
  2050e2:	68a0      	ldr	r0, [r4, #8]
  2050e4:	493f      	ldr	r1, [pc, #252]	; (2051e4 <rt_test_005_003_execute.lto_priv.116+0x144>)
  2050e6:	fab0 f080 	clz	r0, r0
  2050ea:	0940      	lsrs	r0, r0, #5
  2050ec:	f7fd fab8 	bl	202660 <_test_assert>
  2050f0:	2800      	cmp	r0, #0
  2050f2:	d1ea      	bne.n	2050ca <rt_test_005_003_execute.lto_priv.116+0x2a>
  return ch.rlist.current;
  2050f4:	493c      	ldr	r1, [pc, #240]	; (2051e8 <rt_test_005_003_execute.lto_priv.116+0x148>)
  test_set_step(2);
  2050f6:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  2050f8:	4603      	mov	r3, r0
  2050fa:	4a3c      	ldr	r2, [pc, #240]	; (2051ec <rt_test_005_003_execute.lto_priv.116+0x14c>)
  return chThdGetSelfX()->prio;
  2050fc:	6989      	ldr	r1, [r1, #24]
  2050fe:	483c      	ldr	r0, [pc, #240]	; (2051f0 <rt_test_005_003_execute.lto_priv.116+0x150>)
  205100:	6889      	ldr	r1, [r1, #8]
  test_set_step(2);
  205102:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
  205104:	3901      	subs	r1, #1
  205106:	f7fb f9b3 	bl	200470 <chThdCreateStatic.constprop.61>
  20510a:	4b3a      	ldr	r3, [pc, #232]	; (2051f4 <rt_test_005_003_execute.lto_priv.116+0x154>)
  20510c:	6018      	str	r0, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
  20510e:	f241 3088 	movw	r0, #5000	; 0x1388
  205112:	f7fb f9fd 	bl	200510 <chSemWaitTimeout.constprop.58>
  205116:	4606      	mov	r6, r0
    test_wait_threads();
  205118:	f7fc ff6a 	bl	201ff0 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
  20511c:	492f      	ldr	r1, [pc, #188]	; (2051dc <rt_test_005_003_execute.lto_priv.116+0x13c>)
  20511e:	fab6 f086 	clz	r0, r6
  205122:	0940      	lsrs	r0, r0, #5
  205124:	f7fd fa9c 	bl	202660 <_test_assert>
  205128:	2800      	cmp	r0, #0
  20512a:	d1ce      	bne.n	2050ca <rt_test_005_003_execute.lto_priv.116+0x2a>
  20512c:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
  20512e:	492c      	ldr	r1, [pc, #176]	; (2051e0 <rt_test_005_003_execute.lto_priv.116+0x140>)
  205130:	1b00      	subs	r0, r0, r4
  205132:	fab0 f080 	clz	r0, r0
  205136:	0940      	lsrs	r0, r0, #5
  205138:	f7fd fa92 	bl	202660 <_test_assert>
  20513c:	2800      	cmp	r0, #0
  20513e:	d1c4      	bne.n	2050ca <rt_test_005_003_execute.lto_priv.116+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
  205140:	68a0      	ldr	r0, [r4, #8]
  205142:	4928      	ldr	r1, [pc, #160]	; (2051e4 <rt_test_005_003_execute.lto_priv.116+0x144>)
  205144:	fab0 f080 	clz	r0, r0
  205148:	0940      	lsrs	r0, r0, #5
  20514a:	f7fd fa89 	bl	202660 <_test_assert>
  20514e:	2800      	cmp	r0, #0
  205150:	d1bb      	bne.n	2050ca <rt_test_005_003_execute.lto_priv.116+0x2a>
  test_set_step(3);
  205152:	2303      	movs	r3, #3
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
  205154:	2641      	movs	r6, #65	; 0x41
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
  205156:	4f21      	ldr	r7, [pc, #132]	; (2051dc <rt_test_005_003_execute.lto_priv.116+0x13c>)
  test_set_step(3);
  205158:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
  20515a:	f7fc ff39 	bl	201fd0 <test_wait_tick>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
  20515e:	4d20      	ldr	r5, [pc, #128]	; (2051e0 <rt_test_005_003_execute.lto_priv.116+0x140>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
  205160:	4681      	mov	r9, r0
      test_assert(sem1.cnt == 0, "counter not zero");
  205162:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2051e4 <rt_test_005_003_execute.lto_priv.116+0x144>
      test_emit_token('A' + i);
  205166:	4630      	mov	r0, r6
  205168:	f7fc ff7a 	bl	202060 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
  20516c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  205170:	f7fb f9ce 	bl	200510 <chSemWaitTimeout.constprop.58>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
  205174:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
  205178:	4639      	mov	r1, r7
  20517a:	fab0 f080 	clz	r0, r0
  20517e:	0940      	lsrs	r0, r0, #5
  205180:	f7fd fa6e 	bl	202660 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
  205184:	4629      	mov	r1, r5
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
  205186:	2800      	cmp	r0, #0
  205188:	d19f      	bne.n	2050ca <rt_test_005_003_execute.lto_priv.116+0x2a>
  20518a:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
  20518c:	1b00      	subs	r0, r0, r4
  20518e:	fab0 f080 	clz	r0, r0
  205192:	0940      	lsrs	r0, r0, #5
  205194:	f7fd fa64 	bl	202660 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
  205198:	4641      	mov	r1, r8
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
  20519a:	2800      	cmp	r0, #0
  20519c:	d195      	bne.n	2050ca <rt_test_005_003_execute.lto_priv.116+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
  20519e:	68a0      	ldr	r0, [r4, #8]
  2051a0:	3601      	adds	r6, #1
  2051a2:	fab0 f080 	clz	r0, r0
  2051a6:	0940      	lsrs	r0, r0, #5
  2051a8:	f7fd fa5a 	bl	202660 <_test_assert>
  2051ac:	2800      	cmp	r0, #0
  2051ae:	d18c      	bne.n	2050ca <rt_test_005_003_execute.lto_priv.116+0x2a>
  2051b0:	b2f6      	uxtb	r6, r6
    for (i = 0; i < 5; i++) {
  2051b2:	2e46      	cmp	r6, #70	; 0x46
  2051b4:	d1d7      	bne.n	205166 <rt_test_005_003_execute.lto_priv.116+0xc6>
    test_assert_sequence("ABCDE", "invalid sequence");
  2051b6:	4910      	ldr	r1, [pc, #64]	; (2051f8 <rt_test_005_003_execute.lto_priv.116+0x158>)
  2051b8:	4810      	ldr	r0, [pc, #64]	; (2051fc <rt_test_005_003_execute.lto_priv.116+0x15c>)
  2051ba:	f7fd fa29 	bl	202610 <_test_assert_sequence>
  2051be:	2800      	cmp	r0, #0
  2051c0:	d183      	bne.n	2050ca <rt_test_005_003_execute.lto_priv.116+0x2a>
    test_assert_time_window(target_time,
  2051c2:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
  2051c6:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
  2051ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
  2051ce:	f7fb be7f 	b.w	200ed0 <_test_assert_time_window.constprop.2>
  2051d2:	bf00      	nop
  2051d4:	2000098c 	.word	0x2000098c
  2051d8:	20000974 	.word	0x20000974
  2051dc:	08008b78 	.word	0x08008b78
  2051e0:	08008ed8 	.word	0x08008ed8
  2051e4:	08008e5c 	.word	0x08008e5c
  2051e8:	20000860 	.word	0x20000860
  2051ec:	00204dc1 	.word	0x00204dc1
  2051f0:	20000a70 	.word	0x20000a70
  2051f4:	200010d8 	.word	0x200010d8
  2051f8:	08007f38 	.word	0x08007f38
  2051fc:	08007f0c 	.word	0x08007f0c

00205200 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
  205200:	b508      	push	{r3, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetLine(LINE_LED2_GREEN);
  205202:	2520      	movs	r5, #32
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
  205204:	4b08      	ldr	r3, [pc, #32]	; (205228 <Thread1+0x28>)
  205206:	4a09      	ldr	r2, [pc, #36]	; (20522c <Thread1+0x2c>)
  205208:	699b      	ldr	r3, [r3, #24]
  20520a:	462e      	mov	r6, r5
  20520c:	4c08      	ldr	r4, [pc, #32]	; (205230 <Thread1+0x30>)
  20520e:	619a      	str	r2, [r3, #24]
  205210:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(500);
  205212:	f241 3088 	movw	r0, #5000	; 0x1388
  205216:	f002 f8c3 	bl	2073a0 <chThdSleep>
    palClearLine(LINE_LED2_GREEN);
  20521a:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
  20521c:	f241 3088 	movw	r0, #5000	; 0x1388
  205220:	f002 f8be 	bl	2073a0 <chThdSleep>
  205224:	e7f4      	b.n	205210 <Thread1+0x10>
  205226:	bf00      	nop
  205228:	20000860 	.word	0x20000860
  20522c:	08008f00 	.word	0x08008f00
  205230:	40022400 	.word	0x40022400
	...

00205240 <oslib_test_004_005_execute>:
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}

static void oslib_test_004_005_execute(void) {
  205240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_objects_fifo_t *dofp;

  /* [4.5.1] Retrieving a dynamic objects FIFO by name, must not
     exist.*/
  test_set_step(1);
  205242:	4c42      	ldr	r4, [pc, #264]	; (20534c <oslib_test_004_005_execute+0x10c>)
  205244:	2501      	movs	r5, #1
  205246:	6025      	str	r5, [r4, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
  205248:	f7fb fe2a 	bl	200ea0 <chFactoryFindObjectsFIFO.constprop.3>
    test_assert(dofp == NULL, "found");
  20524c:	fab0 f080 	clz	r0, r0
  205250:	493f      	ldr	r1, [pc, #252]	; (205350 <oslib_test_004_005_execute+0x110>)
  205252:	0940      	lsrs	r0, r0, #5
  205254:	f7fd fa04 	bl	202660 <_test_assert>
  205258:	b100      	cbz	r0, 20525c <oslib_test_004_005_execute+0x1c>
  20525a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  /* [4.5.2] Creating a dynamic objects FIFO it must not exists, must
     succeed.*/
  test_set_step(2);
  20525c:	2302      	movs	r3, #2
  20525e:	6023      	str	r3, [r4, #0]
  {
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
  205260:	f7fb fdc6 	bl	200df0 <chFactoryCreateObjectsFIFO.constprop.4>
    test_assert(dofp != NULL, "cannot create");
  205264:	4606      	mov	r6, r0
  205266:	3000      	adds	r0, #0
  205268:	493a      	ldr	r1, [pc, #232]	; (205354 <oslib_test_004_005_execute+0x114>)
  20526a:	bf18      	it	ne
  20526c:	2001      	movne	r0, #1
  20526e:	f7fd f9f7 	bl	202660 <_test_assert>
  205272:	2800      	cmp	r0, #0
  205274:	d1f1      	bne.n	20525a <oslib_test_004_005_execute+0x1a>
  }

  /* [4.5.3] Creating a dynamic objects FIFO with the same name, must
     fail.*/
  test_set_step(3);
  205276:	2303      	movs	r3, #3
  205278:	6023      	str	r3, [r4, #0]
  {
    dyn_objects_fifo_t *dofp1;

    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
  20527a:	f7fb fdb9 	bl	200df0 <chFactoryCreateObjectsFIFO.constprop.4>
    test_assert(dofp1 == NULL, "can create");
  20527e:	fab0 f080 	clz	r0, r0
  205282:	4935      	ldr	r1, [pc, #212]	; (205358 <oslib_test_004_005_execute+0x118>)
  205284:	0940      	lsrs	r0, r0, #5
  205286:	f7fd f9eb 	bl	202660 <_test_assert>
  20528a:	2800      	cmp	r0, #0
  20528c:	d1e5      	bne.n	20525a <oslib_test_004_005_execute+0x1a>
  }

  /* [4.5.4] Retrieving the dynamic objects FIFO by name, must exist,
     then increasing the reference counter, finally releasing both
     references.*/
  test_set_step(4);
  20528e:	2304      	movs	r3, #4
  205290:	6023      	str	r3, [r4, #0]
  {
    dyn_objects_fifo_t *dofp1, *dofp2;

    dofp1 = chFactoryFindObjectsFIFO("myfifo");
  205292:	f7fb fe05 	bl	200ea0 <chFactoryFindObjectsFIFO.constprop.3>
    test_assert(dofp1 != NULL, "not found");
  205296:	4607      	mov	r7, r0
  205298:	3000      	adds	r0, #0
  20529a:	4930      	ldr	r1, [pc, #192]	; (20535c <oslib_test_004_005_execute+0x11c>)
  20529c:	bf18      	it	ne
  20529e:	2001      	movne	r0, #1
  2052a0:	f7fd f9de 	bl	202660 <_test_assert>
  2052a4:	2800      	cmp	r0, #0
  2052a6:	d1d8      	bne.n	20525a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
  2052a8:	1bf0      	subs	r0, r6, r7
  2052aa:	492d      	ldr	r1, [pc, #180]	; (205360 <oslib_test_004_005_execute+0x120>)
  2052ac:	fab0 f080 	clz	r0, r0
  2052b0:	0940      	lsrs	r0, r0, #5
  2052b2:	f7fd f9d5 	bl	202660 <_test_assert>
  2052b6:	2800      	cmp	r0, #0
  2052b8:	d1cf      	bne.n	20525a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
  2052ba:	6878      	ldr	r0, [r7, #4]
  2052bc:	4928      	ldr	r1, [pc, #160]	; (205360 <oslib_test_004_005_execute+0x120>)
  2052be:	f1a0 0002 	sub.w	r0, r0, #2
  2052c2:	fab0 f080 	clz	r0, r0
  2052c6:	0940      	lsrs	r0, r0, #5
  2052c8:	f7fd f9ca 	bl	202660 <_test_assert>
  2052cc:	2800      	cmp	r0, #0
  2052ce:	d1c4      	bne.n	20525a <oslib_test_004_005_execute+0x1a>
  2052d0:	687b      	ldr	r3, [r7, #4]

    dofp2 = (dyn_objects_fifo_t *)chFactoryDuplicateReference(&dofp1->element);
    test_assert(dofp1 == dofp2, "object reference mismatch");
  2052d2:	4628      	mov	r0, r5
  2052d4:	4922      	ldr	r1, [pc, #136]	; (205360 <oslib_test_004_005_execute+0x120>)
  2052d6:	442b      	add	r3, r5
  2052d8:	607b      	str	r3, [r7, #4]
  2052da:	f7fd f9c1 	bl	202660 <_test_assert>
  2052de:	2800      	cmp	r0, #0
  2052e0:	d1bb      	bne.n	20525a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
  2052e2:	6878      	ldr	r0, [r7, #4]
  2052e4:	491e      	ldr	r1, [pc, #120]	; (205360 <oslib_test_004_005_execute+0x120>)
  2052e6:	f1a0 0003 	sub.w	r0, r0, #3
  2052ea:	fab0 f080 	clz	r0, r0
  2052ee:	0940      	lsrs	r0, r0, #5
  2052f0:	f7fd f9b6 	bl	202660 <_test_assert>
  2052f4:	2800      	cmp	r0, #0
  2052f6:	d1b0      	bne.n	20525a <oslib_test_004_005_execute+0x1a>

    chFactoryReleaseObjectsFIFO(dofp2);
  2052f8:	4638      	mov	r0, r7
  2052fa:	f7fd fa21 	bl	202740 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
  2052fe:	6878      	ldr	r0, [r7, #4]
  205300:	4918      	ldr	r1, [pc, #96]	; (205364 <oslib_test_004_005_execute+0x124>)
  205302:	1e82      	subs	r2, r0, #2
  205304:	4250      	negs	r0, r2
  205306:	4150      	adcs	r0, r2
  205308:	f7fd f9aa 	bl	202660 <_test_assert>
  20530c:	2800      	cmp	r0, #0
  20530e:	d1a4      	bne.n	20525a <oslib_test_004_005_execute+0x1a>

    chFactoryReleaseObjectsFIFO(dofp1);
  205310:	4638      	mov	r0, r7
  205312:	f7fd fa15 	bl	202740 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
  205316:	6870      	ldr	r0, [r6, #4]
  205318:	4912      	ldr	r1, [pc, #72]	; (205364 <oslib_test_004_005_execute+0x124>)
  20531a:	1b43      	subs	r3, r0, r5
  20531c:	4258      	negs	r0, r3
  20531e:	4158      	adcs	r0, r3
  205320:	f7fd f99e 	bl	202660 <_test_assert>
  205324:	2800      	cmp	r0, #0
  205326:	d198      	bne.n	20525a <oslib_test_004_005_execute+0x1a>
  }

  /* [4.5.5] Releasing the first reference to the dynamic objects FIFO
     must not trigger an assertion.*/
  test_set_step(5);
  205328:	2305      	movs	r3, #5
  {
    chFactoryReleaseObjectsFIFO(dofp);
  20532a:	4630      	mov	r0, r6
  test_set_step(5);
  20532c:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
  20532e:	f7fd fa07 	bl	202740 <chFactoryReleaseObjectsFIFO>
  }

  /* [4.5.6] Retrieving the dynamic objects FIFO by name again, must
     not exist.*/
  test_set_step(6);
  205332:	2306      	movs	r3, #6
  205334:	6023      	str	r3, [r4, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
  205336:	f7fb fdb3 	bl	200ea0 <chFactoryFindObjectsFIFO.constprop.3>
    test_assert(dofp == NULL, "found");
  20533a:	fab0 f080 	clz	r0, r0
  20533e:	4904      	ldr	r1, [pc, #16]	; (205350 <oslib_test_004_005_execute+0x110>)
  205340:	0940      	lsrs	r0, r0, #5
  }
}
  205342:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
  205346:	f7fd b98b 	b.w	202660 <_test_assert>
  20534a:	bf00      	nop
  20534c:	2000098c 	.word	0x2000098c
  205350:	08008c70 	.word	0x08008c70
  205354:	08009008 	.word	0x08009008
  205358:	08009018 	.word	0x08009018
  20535c:	08008c6c 	.word	0x08008c6c
  205360:	08008c88 	.word	0x08008c88
  205364:	08008ca4 	.word	0x08008ca4
	...

00205370 <oslib_test_004_005_teardown>:
static void oslib_test_004_005_teardown(void) {
  205370:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
  205372:	f7fb fd95 	bl	200ea0 <chFactoryFindObjectsFIFO.constprop.3>
  if (dofp != NULL) {
  205376:	b140      	cbz	r0, 20538a <oslib_test_004_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
  205378:	6843      	ldr	r3, [r0, #4]
  20537a:	4604      	mov	r4, r0
  20537c:	b12b      	cbz	r3, 20538a <oslib_test_004_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
  20537e:	4620      	mov	r0, r4
  205380:	f7fd f9de 	bl	202740 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
  205384:	6863      	ldr	r3, [r4, #4]
  205386:	2b00      	cmp	r3, #0
  205388:	d1f9      	bne.n	20537e <oslib_test_004_005_teardown+0xe>
  20538a:	bd10      	pop	{r4, pc}
  20538c:	0000      	movs	r0, r0
	...

00205390 <oslib_test_004_004_execute>:
static void oslib_test_004_004_execute(void) {
  205390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
  205392:	4c42      	ldr	r4, [pc, #264]	; (20549c <oslib_test_004_004_execute+0x10c>)
  205394:	2501      	movs	r5, #1
  205396:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
  205398:	f7fb fd12 	bl	200dc0 <chFactoryFindMailbox.constprop.5>
    test_assert(dmp == NULL, "found");
  20539c:	fab0 f080 	clz	r0, r0
  2053a0:	493f      	ldr	r1, [pc, #252]	; (2054a0 <oslib_test_004_004_execute+0x110>)
  2053a2:	0940      	lsrs	r0, r0, #5
  2053a4:	f7fd f95c 	bl	202660 <_test_assert>
  2053a8:	b100      	cbz	r0, 2053ac <oslib_test_004_004_execute+0x1c>
  2053aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
  2053ac:	2302      	movs	r3, #2
  2053ae:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
  2053b0:	f7fb fcd6 	bl	200d60 <chFactoryCreateMailbox.constprop.6>
    test_assert(dmp != NULL, "cannot create");
  2053b4:	4606      	mov	r6, r0
  2053b6:	3000      	adds	r0, #0
  2053b8:	493a      	ldr	r1, [pc, #232]	; (2054a4 <oslib_test_004_004_execute+0x114>)
  2053ba:	bf18      	it	ne
  2053bc:	2001      	movne	r0, #1
  2053be:	f7fd f94f 	bl	202660 <_test_assert>
  2053c2:	2800      	cmp	r0, #0
  2053c4:	d1f1      	bne.n	2053aa <oslib_test_004_004_execute+0x1a>
  test_set_step(3);
  2053c6:	2303      	movs	r3, #3
  2053c8:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
  2053ca:	f7fb fcc9 	bl	200d60 <chFactoryCreateMailbox.constprop.6>
    test_assert(dmp1 == NULL, "can create");
  2053ce:	fab0 f080 	clz	r0, r0
  2053d2:	4935      	ldr	r1, [pc, #212]	; (2054a8 <oslib_test_004_004_execute+0x118>)
  2053d4:	0940      	lsrs	r0, r0, #5
  2053d6:	f7fd f943 	bl	202660 <_test_assert>
  2053da:	2800      	cmp	r0, #0
  2053dc:	d1e5      	bne.n	2053aa <oslib_test_004_004_execute+0x1a>
  test_set_step(4);
  2053de:	2304      	movs	r3, #4
  2053e0:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
  2053e2:	f7fb fced 	bl	200dc0 <chFactoryFindMailbox.constprop.5>
    test_assert(dmp1 != NULL, "not found");
  2053e6:	4607      	mov	r7, r0
  2053e8:	3000      	adds	r0, #0
  2053ea:	4930      	ldr	r1, [pc, #192]	; (2054ac <oslib_test_004_004_execute+0x11c>)
  2053ec:	bf18      	it	ne
  2053ee:	2001      	movne	r0, #1
  2053f0:	f7fd f936 	bl	202660 <_test_assert>
  2053f4:	2800      	cmp	r0, #0
  2053f6:	d1d8      	bne.n	2053aa <oslib_test_004_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
  2053f8:	1bf0      	subs	r0, r6, r7
  2053fa:	492d      	ldr	r1, [pc, #180]	; (2054b0 <oslib_test_004_004_execute+0x120>)
  2053fc:	fab0 f080 	clz	r0, r0
  205400:	0940      	lsrs	r0, r0, #5
  205402:	f7fd f92d 	bl	202660 <_test_assert>
  205406:	2800      	cmp	r0, #0
  205408:	d1cf      	bne.n	2053aa <oslib_test_004_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
  20540a:	6878      	ldr	r0, [r7, #4]
  20540c:	4928      	ldr	r1, [pc, #160]	; (2054b0 <oslib_test_004_004_execute+0x120>)
  20540e:	f1a0 0002 	sub.w	r0, r0, #2
  205412:	fab0 f080 	clz	r0, r0
  205416:	0940      	lsrs	r0, r0, #5
  205418:	f7fd f922 	bl	202660 <_test_assert>
  20541c:	2800      	cmp	r0, #0
  20541e:	d1c4      	bne.n	2053aa <oslib_test_004_004_execute+0x1a>
  205420:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
  205422:	4628      	mov	r0, r5
  205424:	4922      	ldr	r1, [pc, #136]	; (2054b0 <oslib_test_004_004_execute+0x120>)
  205426:	442b      	add	r3, r5
  205428:	607b      	str	r3, [r7, #4]
  20542a:	f7fd f919 	bl	202660 <_test_assert>
  20542e:	2800      	cmp	r0, #0
  205430:	d1bb      	bne.n	2053aa <oslib_test_004_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
  205432:	6878      	ldr	r0, [r7, #4]
  205434:	491e      	ldr	r1, [pc, #120]	; (2054b0 <oslib_test_004_004_execute+0x120>)
  205436:	f1a0 0003 	sub.w	r0, r0, #3
  20543a:	fab0 f080 	clz	r0, r0
  20543e:	0940      	lsrs	r0, r0, #5
  205440:	f7fd f90e 	bl	202660 <_test_assert>
  205444:	2800      	cmp	r0, #0
  205446:	d1b0      	bne.n	2053aa <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
  205448:	4638      	mov	r0, r7
  20544a:	f7fd f991 	bl	202770 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
  20544e:	6878      	ldr	r0, [r7, #4]
  205450:	4918      	ldr	r1, [pc, #96]	; (2054b4 <oslib_test_004_004_execute+0x124>)
  205452:	1e82      	subs	r2, r0, #2
  205454:	4250      	negs	r0, r2
  205456:	4150      	adcs	r0, r2
  205458:	f7fd f902 	bl	202660 <_test_assert>
  20545c:	2800      	cmp	r0, #0
  20545e:	d1a4      	bne.n	2053aa <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
  205460:	4638      	mov	r0, r7
  205462:	f7fd f985 	bl	202770 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
  205466:	6870      	ldr	r0, [r6, #4]
  205468:	4912      	ldr	r1, [pc, #72]	; (2054b4 <oslib_test_004_004_execute+0x124>)
  20546a:	1b43      	subs	r3, r0, r5
  20546c:	4258      	negs	r0, r3
  20546e:	4158      	adcs	r0, r3
  205470:	f7fd f8f6 	bl	202660 <_test_assert>
  205474:	2800      	cmp	r0, #0
  205476:	d198      	bne.n	2053aa <oslib_test_004_004_execute+0x1a>
  test_set_step(5);
  205478:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
  20547a:	4630      	mov	r0, r6
  test_set_step(5);
  20547c:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
  20547e:	f7fd f977 	bl	202770 <chFactoryReleaseMailbox>
  test_set_step(6);
  205482:	2306      	movs	r3, #6
  205484:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
  205486:	f7fb fc9b 	bl	200dc0 <chFactoryFindMailbox.constprop.5>
    test_assert(dmp == NULL, "found");
  20548a:	fab0 f080 	clz	r0, r0
  20548e:	4904      	ldr	r1, [pc, #16]	; (2054a0 <oslib_test_004_004_execute+0x110>)
  205490:	0940      	lsrs	r0, r0, #5
}
  205492:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
  205496:	f7fd b8e3 	b.w	202660 <_test_assert>
  20549a:	bf00      	nop
  20549c:	2000098c 	.word	0x2000098c
  2054a0:	08008c70 	.word	0x08008c70
  2054a4:	08009008 	.word	0x08009008
  2054a8:	08009018 	.word	0x08009018
  2054ac:	08008c6c 	.word	0x08008c6c
  2054b0:	08008c88 	.word	0x08008c88
  2054b4:	08008ca4 	.word	0x08008ca4
	...

002054c0 <oslib_test_004_004_teardown>:
static void oslib_test_004_004_teardown(void) {
  2054c0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
  2054c2:	f7fb fc7d 	bl	200dc0 <chFactoryFindMailbox.constprop.5>
  if (dmp != NULL) {
  2054c6:	b140      	cbz	r0, 2054da <oslib_test_004_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
  2054c8:	6843      	ldr	r3, [r0, #4]
  2054ca:	4604      	mov	r4, r0
  2054cc:	b12b      	cbz	r3, 2054da <oslib_test_004_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
  2054ce:	4620      	mov	r0, r4
  2054d0:	f7fd f94e 	bl	202770 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
  2054d4:	6863      	ldr	r3, [r4, #4]
  2054d6:	2b00      	cmp	r3, #0
  2054d8:	d1f9      	bne.n	2054ce <oslib_test_004_004_teardown+0xe>
  2054da:	bd10      	pop	{r4, pc}
  2054dc:	0000      	movs	r0, r0
	...

002054e0 <oslib_test_004_003_execute>:
static void oslib_test_004_003_execute(void) {
  2054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
  2054e2:	4c42      	ldr	r4, [pc, #264]	; (2055ec <oslib_test_004_003_execute+0x10c>)
  2054e4:	2501      	movs	r5, #1
  2054e6:	6025      	str	r5, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
  2054e8:	f7fb fc22 	bl	200d30 <chFactoryFindSemaphore.constprop.7>
    test_assert(dsp == NULL, "found");
  2054ec:	fab0 f080 	clz	r0, r0
  2054f0:	493f      	ldr	r1, [pc, #252]	; (2055f0 <oslib_test_004_003_execute+0x110>)
  2054f2:	0940      	lsrs	r0, r0, #5
  2054f4:	f7fd f8b4 	bl	202660 <_test_assert>
  2054f8:	b100      	cbz	r0, 2054fc <oslib_test_004_003_execute+0x1c>
  2054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
  2054fc:	2302      	movs	r3, #2
  2054fe:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
  205500:	f7fb fbf6 	bl	200cf0 <chFactoryCreateSemaphore.constprop.8>
    test_assert(dsp != NULL, "cannot create");
  205504:	4606      	mov	r6, r0
  205506:	3000      	adds	r0, #0
  205508:	493a      	ldr	r1, [pc, #232]	; (2055f4 <oslib_test_004_003_execute+0x114>)
  20550a:	bf18      	it	ne
  20550c:	2001      	movne	r0, #1
  20550e:	f7fd f8a7 	bl	202660 <_test_assert>
  205512:	2800      	cmp	r0, #0
  205514:	d1f1      	bne.n	2054fa <oslib_test_004_003_execute+0x1a>
  test_set_step(3);
  205516:	2303      	movs	r3, #3
  205518:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
  20551a:	f7fb fbe9 	bl	200cf0 <chFactoryCreateSemaphore.constprop.8>
    test_assert(dsp1 == NULL, "can create");
  20551e:	fab0 f080 	clz	r0, r0
  205522:	4935      	ldr	r1, [pc, #212]	; (2055f8 <oslib_test_004_003_execute+0x118>)
  205524:	0940      	lsrs	r0, r0, #5
  205526:	f7fd f89b 	bl	202660 <_test_assert>
  20552a:	2800      	cmp	r0, #0
  20552c:	d1e5      	bne.n	2054fa <oslib_test_004_003_execute+0x1a>
  test_set_step(4);
  20552e:	2304      	movs	r3, #4
  205530:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
  205532:	f7fb fbfd 	bl	200d30 <chFactoryFindSemaphore.constprop.7>
    test_assert(dsp1 != NULL, "not found");
  205536:	4607      	mov	r7, r0
  205538:	3000      	adds	r0, #0
  20553a:	4930      	ldr	r1, [pc, #192]	; (2055fc <oslib_test_004_003_execute+0x11c>)
  20553c:	bf18      	it	ne
  20553e:	2001      	movne	r0, #1
  205540:	f7fd f88e 	bl	202660 <_test_assert>
  205544:	2800      	cmp	r0, #0
  205546:	d1d8      	bne.n	2054fa <oslib_test_004_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
  205548:	1bf0      	subs	r0, r6, r7
  20554a:	492d      	ldr	r1, [pc, #180]	; (205600 <oslib_test_004_003_execute+0x120>)
  20554c:	fab0 f080 	clz	r0, r0
  205550:	0940      	lsrs	r0, r0, #5
  205552:	f7fd f885 	bl	202660 <_test_assert>
  205556:	2800      	cmp	r0, #0
  205558:	d1cf      	bne.n	2054fa <oslib_test_004_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
  20555a:	6878      	ldr	r0, [r7, #4]
  20555c:	4928      	ldr	r1, [pc, #160]	; (205600 <oslib_test_004_003_execute+0x120>)
  20555e:	f1a0 0002 	sub.w	r0, r0, #2
  205562:	fab0 f080 	clz	r0, r0
  205566:	0940      	lsrs	r0, r0, #5
  205568:	f7fd f87a 	bl	202660 <_test_assert>
  20556c:	2800      	cmp	r0, #0
  20556e:	d1c4      	bne.n	2054fa <oslib_test_004_003_execute+0x1a>
  205570:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
  205572:	4628      	mov	r0, r5
  205574:	4922      	ldr	r1, [pc, #136]	; (205600 <oslib_test_004_003_execute+0x120>)
  205576:	442b      	add	r3, r5
  205578:	607b      	str	r3, [r7, #4]
  20557a:	f7fd f871 	bl	202660 <_test_assert>
  20557e:	2800      	cmp	r0, #0
  205580:	d1bb      	bne.n	2054fa <oslib_test_004_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
  205582:	6878      	ldr	r0, [r7, #4]
  205584:	491e      	ldr	r1, [pc, #120]	; (205600 <oslib_test_004_003_execute+0x120>)
  205586:	f1a0 0003 	sub.w	r0, r0, #3
  20558a:	fab0 f080 	clz	r0, r0
  20558e:	0940      	lsrs	r0, r0, #5
  205590:	f7fd f866 	bl	202660 <_test_assert>
  205594:	2800      	cmp	r0, #0
  205596:	d1b0      	bne.n	2054fa <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
  205598:	4638      	mov	r0, r7
  20559a:	f7fd f901 	bl	2027a0 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
  20559e:	6878      	ldr	r0, [r7, #4]
  2055a0:	4918      	ldr	r1, [pc, #96]	; (205604 <oslib_test_004_003_execute+0x124>)
  2055a2:	1e82      	subs	r2, r0, #2
  2055a4:	4250      	negs	r0, r2
  2055a6:	4150      	adcs	r0, r2
  2055a8:	f7fd f85a 	bl	202660 <_test_assert>
  2055ac:	2800      	cmp	r0, #0
  2055ae:	d1a4      	bne.n	2054fa <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
  2055b0:	4638      	mov	r0, r7
  2055b2:	f7fd f8f5 	bl	2027a0 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
  2055b6:	6870      	ldr	r0, [r6, #4]
  2055b8:	4912      	ldr	r1, [pc, #72]	; (205604 <oslib_test_004_003_execute+0x124>)
  2055ba:	1b43      	subs	r3, r0, r5
  2055bc:	4258      	negs	r0, r3
  2055be:	4158      	adcs	r0, r3
  2055c0:	f7fd f84e 	bl	202660 <_test_assert>
  2055c4:	2800      	cmp	r0, #0
  2055c6:	d198      	bne.n	2054fa <oslib_test_004_003_execute+0x1a>
  test_set_step(5);
  2055c8:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
  2055ca:	4630      	mov	r0, r6
  test_set_step(5);
  2055cc:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
  2055ce:	f7fd f8e7 	bl	2027a0 <chFactoryReleaseSemaphore>
  test_set_step(6);
  2055d2:	2306      	movs	r3, #6
  2055d4:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
  2055d6:	f7fb fbab 	bl	200d30 <chFactoryFindSemaphore.constprop.7>
    test_assert(dsp == NULL, "found");
  2055da:	fab0 f080 	clz	r0, r0
  2055de:	4904      	ldr	r1, [pc, #16]	; (2055f0 <oslib_test_004_003_execute+0x110>)
  2055e0:	0940      	lsrs	r0, r0, #5
}
  2055e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
  2055e6:	f7fd b83b 	b.w	202660 <_test_assert>
  2055ea:	bf00      	nop
  2055ec:	2000098c 	.word	0x2000098c
  2055f0:	08008c70 	.word	0x08008c70
  2055f4:	08009008 	.word	0x08009008
  2055f8:	08009018 	.word	0x08009018
  2055fc:	08008c6c 	.word	0x08008c6c
  205600:	08008c88 	.word	0x08008c88
  205604:	08008ca4 	.word	0x08008ca4
	...

00205610 <oslib_test_004_003_teardown>:
static void oslib_test_004_003_teardown(void) {
  205610:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
  205612:	f7fb fb8d 	bl	200d30 <chFactoryFindSemaphore.constprop.7>
  if (dsp != NULL) {
  205616:	b140      	cbz	r0, 20562a <oslib_test_004_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
  205618:	6843      	ldr	r3, [r0, #4]
  20561a:	4604      	mov	r4, r0
  20561c:	b12b      	cbz	r3, 20562a <oslib_test_004_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
  20561e:	4620      	mov	r0, r4
  205620:	f7fd f8be 	bl	2027a0 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
  205624:	6863      	ldr	r3, [r4, #4]
  205626:	2b00      	cmp	r3, #0
  205628:	d1f9      	bne.n	20561e <oslib_test_004_003_teardown+0xe>
  20562a:	bd10      	pop	{r4, pc}
  20562c:	0000      	movs	r0, r0
	...

00205630 <oslib_test_004_002_execute>:
static void oslib_test_004_002_execute(void) {
  205630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
  205632:	4c42      	ldr	r4, [pc, #264]	; (20573c <oslib_test_004_002_execute+0x10c>)
  205634:	2501      	movs	r5, #1
  205636:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
  205638:	f7fb fb42 	bl	200cc0 <chFactoryFindBuffer.constprop.9>
    test_assert(dbp == NULL, "found");
  20563c:	fab0 f080 	clz	r0, r0
  205640:	493f      	ldr	r1, [pc, #252]	; (205740 <oslib_test_004_002_execute+0x110>)
  205642:	0940      	lsrs	r0, r0, #5
  205644:	f7fd f80c 	bl	202660 <_test_assert>
  205648:	b100      	cbz	r0, 20564c <oslib_test_004_002_execute+0x1c>
  20564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
  20564c:	2302      	movs	r3, #2
  20564e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
  205650:	f7fb fb16 	bl	200c80 <chFactoryCreateBuffer.constprop.10>
    test_assert(dbp != NULL, "cannot create");
  205654:	4606      	mov	r6, r0
  205656:	3000      	adds	r0, #0
  205658:	493a      	ldr	r1, [pc, #232]	; (205744 <oslib_test_004_002_execute+0x114>)
  20565a:	bf18      	it	ne
  20565c:	2001      	movne	r0, #1
  20565e:	f7fc ffff 	bl	202660 <_test_assert>
  205662:	2800      	cmp	r0, #0
  205664:	d1f1      	bne.n	20564a <oslib_test_004_002_execute+0x1a>
  test_set_step(3);
  205666:	2303      	movs	r3, #3
  205668:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
  20566a:	f7fb fb09 	bl	200c80 <chFactoryCreateBuffer.constprop.10>
    test_assert(dbp1 == NULL, "can create");
  20566e:	fab0 f080 	clz	r0, r0
  205672:	4935      	ldr	r1, [pc, #212]	; (205748 <oslib_test_004_002_execute+0x118>)
  205674:	0940      	lsrs	r0, r0, #5
  205676:	f7fc fff3 	bl	202660 <_test_assert>
  20567a:	2800      	cmp	r0, #0
  20567c:	d1e5      	bne.n	20564a <oslib_test_004_002_execute+0x1a>
  test_set_step(4);
  20567e:	2304      	movs	r3, #4
  205680:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
  205682:	f7fb fb1d 	bl	200cc0 <chFactoryFindBuffer.constprop.9>
    test_assert(dbp1 != NULL, "not found");
  205686:	4607      	mov	r7, r0
  205688:	3000      	adds	r0, #0
  20568a:	4930      	ldr	r1, [pc, #192]	; (20574c <oslib_test_004_002_execute+0x11c>)
  20568c:	bf18      	it	ne
  20568e:	2001      	movne	r0, #1
  205690:	f7fc ffe6 	bl	202660 <_test_assert>
  205694:	2800      	cmp	r0, #0
  205696:	d1d8      	bne.n	20564a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
  205698:	1bf0      	subs	r0, r6, r7
  20569a:	492d      	ldr	r1, [pc, #180]	; (205750 <oslib_test_004_002_execute+0x120>)
  20569c:	fab0 f080 	clz	r0, r0
  2056a0:	0940      	lsrs	r0, r0, #5
  2056a2:	f7fc ffdd 	bl	202660 <_test_assert>
  2056a6:	2800      	cmp	r0, #0
  2056a8:	d1cf      	bne.n	20564a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
  2056aa:	6878      	ldr	r0, [r7, #4]
  2056ac:	4928      	ldr	r1, [pc, #160]	; (205750 <oslib_test_004_002_execute+0x120>)
  2056ae:	f1a0 0002 	sub.w	r0, r0, #2
  2056b2:	fab0 f080 	clz	r0, r0
  2056b6:	0940      	lsrs	r0, r0, #5
  2056b8:	f7fc ffd2 	bl	202660 <_test_assert>
  2056bc:	2800      	cmp	r0, #0
  2056be:	d1c4      	bne.n	20564a <oslib_test_004_002_execute+0x1a>
  2056c0:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
  2056c2:	4628      	mov	r0, r5
  2056c4:	4922      	ldr	r1, [pc, #136]	; (205750 <oslib_test_004_002_execute+0x120>)
  2056c6:	442b      	add	r3, r5
  2056c8:	607b      	str	r3, [r7, #4]
  2056ca:	f7fc ffc9 	bl	202660 <_test_assert>
  2056ce:	2800      	cmp	r0, #0
  2056d0:	d1bb      	bne.n	20564a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
  2056d2:	6878      	ldr	r0, [r7, #4]
  2056d4:	491e      	ldr	r1, [pc, #120]	; (205750 <oslib_test_004_002_execute+0x120>)
  2056d6:	f1a0 0003 	sub.w	r0, r0, #3
  2056da:	fab0 f080 	clz	r0, r0
  2056de:	0940      	lsrs	r0, r0, #5
  2056e0:	f7fc ffbe 	bl	202660 <_test_assert>
  2056e4:	2800      	cmp	r0, #0
  2056e6:	d1b0      	bne.n	20564a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
  2056e8:	4638      	mov	r0, r7
  2056ea:	f7fd f891 	bl	202810 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
  2056ee:	6878      	ldr	r0, [r7, #4]
  2056f0:	4918      	ldr	r1, [pc, #96]	; (205754 <oslib_test_004_002_execute+0x124>)
  2056f2:	1e82      	subs	r2, r0, #2
  2056f4:	4250      	negs	r0, r2
  2056f6:	4150      	adcs	r0, r2
  2056f8:	f7fc ffb2 	bl	202660 <_test_assert>
  2056fc:	2800      	cmp	r0, #0
  2056fe:	d1a4      	bne.n	20564a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
  205700:	4638      	mov	r0, r7
  205702:	f7fd f885 	bl	202810 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
  205706:	6870      	ldr	r0, [r6, #4]
  205708:	4912      	ldr	r1, [pc, #72]	; (205754 <oslib_test_004_002_execute+0x124>)
  20570a:	1b43      	subs	r3, r0, r5
  20570c:	4258      	negs	r0, r3
  20570e:	4158      	adcs	r0, r3
  205710:	f7fc ffa6 	bl	202660 <_test_assert>
  205714:	2800      	cmp	r0, #0
  205716:	d198      	bne.n	20564a <oslib_test_004_002_execute+0x1a>
  test_set_step(5);
  205718:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
  20571a:	4630      	mov	r0, r6
  test_set_step(5);
  20571c:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
  20571e:	f7fd f877 	bl	202810 <chFactoryReleaseBuffer>
  test_set_step(6);
  205722:	2306      	movs	r3, #6
  205724:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
  205726:	f7fb facb 	bl	200cc0 <chFactoryFindBuffer.constprop.9>
    test_assert(dbp == NULL, "found");
  20572a:	fab0 f080 	clz	r0, r0
  20572e:	4904      	ldr	r1, [pc, #16]	; (205740 <oslib_test_004_002_execute+0x110>)
  205730:	0940      	lsrs	r0, r0, #5
}
  205732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
  205736:	f7fc bf93 	b.w	202660 <_test_assert>
  20573a:	bf00      	nop
  20573c:	2000098c 	.word	0x2000098c
  205740:	08008c70 	.word	0x08008c70
  205744:	08009008 	.word	0x08009008
  205748:	08009018 	.word	0x08009018
  20574c:	08008c6c 	.word	0x08008c6c
  205750:	08008c88 	.word	0x08008c88
  205754:	08008ca4 	.word	0x08008ca4
	...

00205760 <oslib_test_004_002_teardown>:
static void oslib_test_004_002_teardown(void) {
  205760:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
  205762:	f7fb faad 	bl	200cc0 <chFactoryFindBuffer.constprop.9>
  if (dbp != NULL) {
  205766:	b140      	cbz	r0, 20577a <oslib_test_004_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
  205768:	6843      	ldr	r3, [r0, #4]
  20576a:	4604      	mov	r4, r0
  20576c:	b12b      	cbz	r3, 20577a <oslib_test_004_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
  20576e:	4620      	mov	r0, r4
  205770:	f7fd f84e 	bl	202810 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
  205774:	6863      	ldr	r3, [r4, #4]
  205776:	2b00      	cmp	r3, #0
  205778:	d1f9      	bne.n	20576e <oslib_test_004_002_teardown+0xe>
  20577a:	bd10      	pop	{r4, pc}
  20577c:	0000      	movs	r0, r0
	...

00205780 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  205780:	4bc0      	ldr	r3, [pc, #768]	; (205a84 <main+0x304>)
  205782:	2200      	movs	r2, #0
  205784:	49c0      	ldr	r1, [pc, #768]	; (205a88 <main+0x308>)
  rccResetAHB2(~0);
  205786:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  20578a:	691d      	ldr	r5, [r3, #16]
  PWR->CR1 |= PWR_CR1_DBP;
  20578c:	48bf      	ldr	r0, [pc, #764]	; (205a8c <main+0x30c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  20578e:	4329      	orrs	r1, r5
}

/*
 * Application entry point.
 */
int main(void) {
  205790:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  205794:	6119      	str	r1, [r3, #16]
  205796:	b087      	sub	sp, #28
  205798:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  20579a:	6959      	ldr	r1, [r3, #20]
  20579c:	615c      	str	r4, [r3, #20]
  20579e:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  2057a0:	6a19      	ldr	r1, [r3, #32]
  2057a2:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
  2057a6:	6219      	str	r1, [r3, #32]
  2057a8:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  2057aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
  2057ac:	625c      	str	r4, [r3, #36]	; 0x24
  2057ae:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  2057b0:	6801      	ldr	r1, [r0, #0]
  2057b2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  2057b6:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  2057b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  2057ba:	f401 7140 	and.w	r1, r1, #768	; 0x300
  2057be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  2057c2:	d003      	beq.n	2057cc <main+0x4c>
    RCC->BDCR = RCC_BDCR_BDRST;
  2057c4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  2057c8:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  2057ca:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2057cc:	4bad      	ldr	r3, [pc, #692]	; (205a84 <main+0x304>)
  2057ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2057d0:	4619      	mov	r1, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2057d2:	f042 0219 	orr.w	r2, r2, #25
  2057d6:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2057d8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  2057da:	079a      	lsls	r2, r3, #30
  2057dc:	d5fc      	bpl.n	2057d8 <main+0x58>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  2057de:	4dab      	ldr	r5, [pc, #684]	; (205a8c <main+0x30c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2057e0:	2160      	movs	r1, #96	; 0x60
  2057e2:	4bab      	ldr	r3, [pc, #684]	; (205a90 <main+0x310>)
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2057e4:	f44f 7080 	mov.w	r0, #256	; 0x100
  2057e8:	686c      	ldr	r4, [r5, #4]
  2057ea:	2640      	movs	r6, #64	; 0x40
  2057ec:	4aa9      	ldr	r2, [pc, #676]	; (205a94 <main+0x314>)
  2057ee:	f04f 0e80 	mov.w	lr, #128	; 0x80
  2057f2:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  2057f6:	f44f 7700 	mov.w	r7, #512	; 0x200
  2057fa:	eb02 0c00 	add.w	ip, r2, r0
  2057fe:	606c      	str	r4, [r5, #4]
  205800:	f44f 6580 	mov.w	r5, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  205804:	f883 1306 	strb.w	r1, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  205808:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
  20580c:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  205810:	601e      	str	r6, [r3, #0]

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  205812:	2600      	movs	r6, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  205814:	f883 1307 	strb.w	r1, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  205818:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20581c:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  205820:	f883 1308 	strb.w	r1, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  205824:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  205828:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20582a:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20582e:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  205832:	601f      	str	r7, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  205834:	f883 130a 	strb.w	r1, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  205838:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20583c:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20583e:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  205842:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  205846:	601c      	str	r4, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  205848:	f883 1328 	strb.w	r1, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20584c:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  205850:	6058      	str	r0, [r3, #4]
  205852:	6096      	str	r6, [r2, #8]
  205854:	60d6      	str	r6, [r2, #12]
  tqp->next = (thread_t *)tqp;
  205856:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
  205858:	6052      	str	r2, [r2, #4]
  20585a:	3210      	adds	r2, #16
  for (i = 0; i < 16; i++) {
  20585c:	4594      	cmp	ip, r2
  20585e:	d1f8      	bne.n	205852 <main+0xd2>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
  205860:	4d8d      	ldr	r5, [pc, #564]	; (205a98 <main+0x318>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  205862:	f04f 0a20 	mov.w	sl, #32
  205866:	4c8d      	ldr	r4, [pc, #564]	; (205a9c <main+0x31c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  205868:	23c0      	movs	r3, #192	; 0xc0
  20586a:	4628      	mov	r0, r5
  20586c:	4a88      	ldr	r2, [pc, #544]	; (205a90 <main+0x310>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
  20586e:	4985      	ldr	r1, [pc, #532]	; (205a84 <main+0x304>)
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  205870:	2701      	movs	r7, #1
  sdp->vmt = &vmt;
  205872:	f840 4b04 	str.w	r4, [r0], #4
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  205876:	2410      	movs	r4, #16
  iqp->q_counter = 0;
  205878:	616e      	str	r6, [r5, #20]
  tqp->next = (thread_t *)tqp;
  20587a:	f105 080c 	add.w	r8, r5, #12
  oqp->q_counter = size;
  20587e:	63ac      	str	r4, [r5, #56]	; 0x38
  205880:	f105 0c30 	add.w	ip, r5, #48	; 0x30
  205884:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  205888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20588c:	f8c2 a184 	str.w	sl, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  205890:	f8c2 a004 	str.w	sl, [r2, #4]
  ST_ENABLE_CLOCK();
  205894:	6c0c      	ldr	r4, [r1, #64]	; 0x40
  iqp->q_buffer  = bp;
  205896:	f8df e240 	ldr.w	lr, [pc, #576]	; 205ad8 <main+0x358>
  20589a:	433c      	orrs	r4, r7
  iqp->q_notify  = infy;
  20589c:	62ae      	str	r6, [r5, #40]	; 0x28
  iqp->q_link    = link;
  20589e:	62ed      	str	r5, [r5, #44]	; 0x2c
  2058a0:	640c      	str	r4, [r1, #64]	; 0x40
  iqp->q_top     = bp + size;
  2058a2:	f10e 0410 	add.w	r4, lr, #16
  2058a6:	f8d1 b060 	ldr.w	fp, [r1, #96]	; 0x60
  ST_ENABLE_STOP();
  2058aa:	f8df 9230 	ldr.w	r9, [pc, #560]	; 205adc <main+0x35c>
  ST_ENABLE_CLOCK();
  2058ae:	ea4b 0b07 	orr.w	fp, fp, r7
  iqp->q_buffer  = bp;
  2058b2:	f8c5 e018 	str.w	lr, [r5, #24]
  iqp->q_rdptr   = bp;
  2058b6:	f8c5 e024 	str.w	lr, [r5, #36]	; 0x24
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
  2058ba:	652d      	str	r5, [r5, #80]	; 0x50
  2058bc:	f8c1 b060 	str.w	fp, [r1, #96]	; 0x60
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  2058c0:	f642 212f 	movw	r1, #10799	; 0x2a2f
  iqp->q_top     = bp + size;
  2058c4:	61ec      	str	r4, [r5, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2058c6:	f04f 0b80 	mov.w	fp, #128	; 0x80
  oqp->q_buffer  = bp;
  2058ca:	4c75      	ldr	r4, [pc, #468]	; (205aa0 <main+0x320>)
  2058cc:	6068      	str	r0, [r5, #4]
  ST_ENABLE_STOP();
  2058ce:	f8d9 0008 	ldr.w	r0, [r9, #8]
  2058d2:	63ec      	str	r4, [r5, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  2058d4:	64ac      	str	r4, [r5, #72]	; 0x48
  2058d6:	4338      	orrs	r0, r7
  oqp->q_wrptr   = bp;
  2058d8:	646c      	str	r4, [r5, #68]	; 0x44
  oqp->q_top     = bp + size;
  2058da:	3410      	adds	r4, #16
  iqp->q_wrptr   = bp;
  2058dc:	f8c5 e020 	str.w	lr, [r5, #32]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  2058e0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
  ST_ENABLE_STOP();
  2058e4:	f8c9 0008 	str.w	r0, [r9, #8]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2058e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  oqp->q_top     = bp + size;
  2058ec:	642c      	str	r4, [r5, #64]	; 0x40
  tmp->cumulative = (rttime_t)0;
  2058ee:	f04f 0900 	mov.w	r9, #0
  oqp->q_notify  = onfy;
  2058f2:	4c6c      	ldr	r4, [pc, #432]	; (205aa4 <main+0x324>)
  2058f4:	f8c5 800c 	str.w	r8, [r5, #12]
  2058f8:	64ec      	str	r4, [r5, #76]	; 0x4c

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1);
  iqObjectInit(&SD1.iqueue, sd_in_buf1, sizeof sd_in_buf1, NULL, &SD1);
  oqObjectInit(&SD1.oqueue, sd_out_buf1, sizeof sd_out_buf1, notify1, &SD1);
  SD1.usart = USART1;
  2058fa:	4c6b      	ldr	r4, [pc, #428]	; (205aa8 <main+0x328>)
  tqp->prev = (thread_t *)tqp;
  2058fc:	f8c5 8010 	str.w	r8, [r5, #16]
  205900:	f04f 0800 	mov.w	r8, #0
  205904:	656c      	str	r4, [r5, #84]	; 0x54
  SD1.clock = STM32_USART1CLK;
  205906:	4c69      	ldr	r4, [pc, #420]	; (205aac <main+0x32c>)
  tqp->next = (thread_t *)tqp;
  205908:	f8c5 c030 	str.w	ip, [r5, #48]	; 0x30
  20590c:	65ac      	str	r4, [r5, #88]	; 0x58
  20590e:	4c68      	ldr	r4, [pc, #416]	; (205ab0 <main+0x330>)
  tqp->prev = (thread_t *)tqp;
  205910:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  205914:	f104 0c1c 	add.w	ip, r4, #28
  sdp->state = SD_STOP;
  205918:	722f      	strb	r7, [r5, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  20591a:	6299      	str	r1, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  20591c:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
  205920:	619e      	str	r6, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
  205922:	635e      	str	r6, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
  205924:	60de      	str	r6, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
  205926:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  205928:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  20592a:	601f      	str	r7, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20592c:	f882 b31c 	strb.w	fp, [r2, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  205930:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  205934:	6010      	str	r0, [r2, #0]
  chTMStartMeasurementX(&tm);
  205936:	4668      	mov	r0, sp
  tqp->next = (thread_t *)tqp;
  205938:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
  20593a:	6064      	str	r4, [r4, #4]
  tmp->best       = (rtcnt_t)-1;
  20593c:	f8cd e000 	str.w	lr, [sp]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
  205940:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  205944:	f8c4 c01c 	str.w	ip, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  205948:	f8c4 c020 	str.w	ip, [r4, #32]
  tmp->worst      = (rtcnt_t)0;
  20594c:	9601      	str	r6, [sp, #4]
  tmp->last       = (rtcnt_t)0;
  20594e:	9602      	str	r6, [sp, #8]
  tmp->n          = (ucnt_t)0;
  205950:	9603      	str	r6, [sp, #12]
  ch.rlist.prio = NOPRIO;
  205952:	60a6      	str	r6, [r4, #8]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  205954:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  205956:	6164      	str	r4, [r4, #20]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
  205958:	62a6      	str	r6, [r4, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
  20595a:	6766      	str	r6, [r4, #116]	; 0x74
  tmp->cumulative = (rttime_t)0;
  20595c:	e9cd 8904 	strd	r8, r9, [sp, #16]
  chTMStartMeasurementX(&tm);
  205960:	f7fa fd7e 	bl	200460 <chTMStartMeasurementX.constprop.62>
  chTMStopMeasurementX(&tm);
  205964:	4668      	mov	r0, sp
  205966:	f001 f86b 	bl	206a40 <chTMStopMeasurementX>
  tqp->next = (thread_t *)tqp;
  20596a:	4a52      	ldr	r2, [pc, #328]	; (205ab4 <main+0x334>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
  20596c:	4852      	ldr	r0, [pc, #328]	; (205ab8 <main+0x338>)
  mp->object_size = size;
  20596e:	f04f 0814 	mov.w	r8, #20
  ch.tm.offset = tm.last;
  205972:	9b02      	ldr	r3, [sp, #8]
  dlp->next = (dyn_element_t *)dlp;
  205974:	f102 0910 	add.w	r9, r2, #16
  205978:	f100 0e0c 	add.w	lr, r0, #12
  tp->prio      = prio;
  20597c:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
  tp->realprio  = prio;
  205980:	f8c4 b06c 	str.w	fp, [r4, #108]	; 0x6c
  205984:	f102 0b28 	add.w	fp, r2, #40	; 0x28
  205988:	6763      	str	r3, [r4, #116]	; 0x74
  20598a:	f102 0c24 	add.w	ip, r2, #36	; 0x24
  20598e:	4b4b      	ldr	r3, [pc, #300]	; (205abc <main+0x33c>)
  H_NEXT(&default_heap.header) = NULL;
  205990:	6046      	str	r6, [r0, #4]
  H_PAGES(&default_heap.header) = 0;
  205992:	6086      	str	r6, [r0, #8]
  mp->owner = NULL;
  205994:	6146      	str	r6, [r0, #20]
  default_heap.provider = chCoreAllocAlignedWithOffset;
  205996:	6003      	str	r3, [r0, #0]
  205998:	231c      	movs	r3, #28
  20599a:	f8c0 e00c 	str.w	lr, [r0, #12]
  tqp->prev = (thread_t *)tqp;
  20599e:	f8c0 e010 	str.w	lr, [r0, #16]
  2059a2:	f102 0e3c 	add.w	lr, r2, #60	; 0x3c
  2059a6:	f102 0040 	add.w	r0, r2, #64	; 0x40
  2059aa:	f8c2 9010 	str.w	r9, [r2, #16]
  2059ae:	f8c2 b028 	str.w	fp, [r2, #40]	; 0x28
  mp->align = align;
  2059b2:	f04f 0904 	mov.w	r9, #4
  mp->provider = provider;
  2059b6:	f8df b128 	ldr.w	fp, [pc, #296]	; 205ae0 <main+0x360>
  2059ba:	6096      	str	r6, [r2, #8]
  mp->next = NULL;
  2059bc:	6156      	str	r6, [r2, #20]
  2059be:	62d6      	str	r6, [r2, #44]	; 0x2c
  mp->object_size = size;
  2059c0:	f8c2 8018 	str.w	r8, [r2, #24]
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2059c4:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
  2059c8:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
  REG_INSERT(tp);
  2059cc:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  2059d0:	6313      	str	r3, [r2, #48]	; 0x30
  2059d2:	f8c2 e03c 	str.w	lr, [r2, #60]	; 0x3c
  tlp->next = (thread_t *)tlp;
  2059d6:	f104 0e58 	add.w	lr, r4, #88	; 0x58
  2059da:	6410      	str	r0, [r2, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
  2059dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  mp->align = align;
  2059e0:	f8c2 901c 	str.w	r9, [r2, #28]
  2059e4:	f8c2 9034 	str.w	r9, [r2, #52]	; 0x34
  ch_memcore.nextmem = __heap_base__;
  2059e8:	4b35      	ldr	r3, [pc, #212]	; (205ac0 <main+0x340>)
  mp->provider = provider;
  2059ea:	f8c2 b020 	str.w	fp, [r2, #32]
  2059ee:	f8c2 b038 	str.w	fp, [r2, #56]	; 0x38
  2059f2:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
  2059f4:	6052      	str	r2, [r2, #4]
  2059f6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 205ae4 <main+0x364>
  ch_memcore.endmem  = __heap_end__;
  2059fa:	4a32      	ldr	r2, [pc, #200]	; (205ac4 <main+0x344>)
  ch_memcore.nextmem = __heap_base__;
  2059fc:	f8c3 9000 	str.w	r9, [r3]
  ch_memcore.endmem  = __heap_end__;
  205a00:	605a      	str	r2, [r3, #4]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  205a02:	4b31      	ldr	r3, [pc, #196]	; (205ac8 <main+0x348>)
  tp->name      = name;
  205a04:	4a31      	ldr	r2, [pc, #196]	; (205acc <main+0x34c>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  205a06:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  tp->mtxlist   = NULL;
  205a0a:	66a6      	str	r6, [r4, #104]	; 0x68
  tp->epending  = (eventmask_t)0;
  205a0c:	6666      	str	r6, [r4, #100]	; 0x64
  tp->refs      = (trefs_t)1;
  205a0e:	f884 7052 	strb.w	r7, [r4, #82]	; 0x52
  tp->name      = name;
  205a12:	64a2      	str	r2, [r4, #72]	; 0x48
  205a14:	68da      	ldr	r2, [r3, #12]
  REG_INSERT(tp);
  205a16:	f8d4 b014 	ldr.w	fp, [r4, #20]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  205a1a:	ea02 0808 	and.w	r8, r2, r8
  reg_value  =  (reg_value                                   |
  205a1e:	4a2c      	ldr	r2, [pc, #176]	; (205ad0 <main+0x350>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  205a20:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 205ae8 <main+0x368>
  205a24:	ea48 0202 	orr.w	r2, r8, r2
  205a28:	6424      	str	r4, [r4, #64]	; 0x40
  205a2a:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
  205a2e:	f8cb c010 	str.w	ip, [fp, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  205a32:	60da      	str	r2, [r3, #12]
  205a34:	f8d9 200c 	ldr.w	r2, [r9, #12]
  205a38:	f8c4 c014 	str.w	ip, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  205a3c:	f8c4 c018 	str.w	ip, [r4, #24]
  205a40:	f042 7880 	orr.w	r8, r2, #16777216	; 0x1000000
  DWT->LAR = 0xC5ACCE55U;
  205a44:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 205aec <main+0x36c>
  205a48:	4a22      	ldr	r2, [pc, #136]	; (205ad4 <main+0x354>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  205a4a:	f8c9 800c 	str.w	r8, [r9, #12]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  205a4e:	64e6      	str	r6, [r4, #76]	; 0x4c
  DWT->LAR = 0xC5ACCE55U;
  205a50:	f8c2 cfb0 	str.w	ip, [r2, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  205a54:	f8d2 c000 	ldr.w	ip, [r2]
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  205a58:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
  205a5c:	ea4c 0c07 	orr.w	ip, ip, r7
  tlp->next = (thread_t *)tlp;
  205a60:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
  tqp->next = (thread_t *)tqp;
  205a64:	65e0      	str	r0, [r4, #92]	; 0x5c
  205a66:	f8c2 c000 	str.w	ip, [r2]
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  205a6a:	f04f 0210 	mov.w	r2, #16
  tqp->prev = (thread_t *)tqp;
  205a6e:	6620      	str	r0, [r4, #96]	; 0x60
  205a70:	77da      	strb	r2, [r3, #31]
  205a72:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
  205a76:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
  205a7a:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  205a7c:	f38a 8811 	msr	BASEPRI, sl
  205a80:	e036      	b.n	205af0 <main+0x370>
  205a82:	bf00      	nop
  205a84:	40023800 	.word	0x40023800
  205a88:	fffff800 	.word	0xfffff800
  205a8c:	40007000 	.word	0x40007000
  205a90:	e000e100 	.word	0xe000e100
  205a94:	20001114 	.word	0x20001114
  205a98:	20000800 	.word	0x20000800
  205a9c:	08009dac 	.word	0x08009dac
  205aa0:	20001308 	.word	0x20001308
  205aa4:	00205c41 	.word	0x00205c41
  205aa8:	40011000 	.word	0x40011000
  205aac:	066ff300 	.word	0x066ff300
  205ab0:	20000860 	.word	0x20000860
  205ab4:	200008d8 	.word	0x200008d8
  205ab8:	2000091c 	.word	0x2000091c
  205abc:	00206921 	.word	0x00206921
  205ac0:	200012f0 	.word	0x200012f0
  205ac4:	20080000 	.word	0x20080000
  205ac8:	e000ed00 	.word	0xe000ed00
  205acc:	08008f08 	.word	0x08008f08
  205ad0:	05fa0300 	.word	0x05fa0300
  205ad4:	e0001000 	.word	0xe0001000
  205ad8:	200012f8 	.word	0x200012f8
  205adc:	e0042000 	.word	0xe0042000
  205ae0:	00201f21 	.word	0x00201f21
  205ae4:	20020090 	.word	0x20020090
  205ae8:	e000edf0 	.word	0xe000edf0
  205aec:	c5acce55 	.word	0xc5acce55
  tp = chThdCreateSuspendedI(tdp);
  205af0:	484b      	ldr	r0, [pc, #300]	; (205c20 <main+0x4a0>)
  205af2:	f000 fffd 	bl	206af0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
  205af6:	2100      	movs	r1, #0
  205af8:	f001 f88a 	bl	206c10 <chSchWakeupS>
  205afc:	f386 8811 	msr	BASEPRI, r6
  chSysInit();

  /*
   * ARD_D13 is programmed as output (board LED).
   */
  palClearLine(LINE_ARD_D13);
  205b00:	4b48      	ldr	r3, [pc, #288]	; (205c24 <main+0x4a4>)
  205b02:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  205b06:	2000      	movs	r0, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
  205b08:	46bc      	mov	ip, r7
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  205b0a:	4619      	mov	r1, r3
      m4 = 15 << ((bit & 7) * 4);
  205b0c:	f04f 0e0f 	mov.w	lr, #15
      m2 = 3 << (bit * 2);
  205b10:	2603      	movs	r6, #3
  205b12:	835c      	strh	r4, [r3, #26]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  205b14:	280c      	cmp	r0, #12
    mask >>= 1;
  205b16:	ea4f 0454 	mov.w	r4, r4, lsr #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
  205b1a:	ea4f 0787 	mov.w	r7, r7, lsl #2
    bit++;
  205b1e:	f100 0001 	add.w	r0, r0, #1
    if (!mask)
  205b22:	d036      	beq.n	205b92 <main+0x412>
      m2 = 3 << (bit * 2);
  205b24:	0042      	lsls	r2, r0, #1
      altrmask = altr << ((bit & 7) * 4);
  205b26:	f000 0307 	and.w	r3, r0, #7
    if ((mask & 1) != 0) {
  205b2a:	f014 0f01 	tst.w	r4, #1
      m1 = 1 << bit;
  205b2e:	fa0c f800 	lsl.w	r8, ip, r0
      m2 = 3 << (bit * 2);
  205b32:	fa06 f202 	lsl.w	r2, r6, r2
      altrmask = altr << ((bit & 7) * 4);
  205b36:	ea4f 0383 	mov.w	r3, r3, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  205b3a:	ea6f 0202 	mvn.w	r2, r2
    if ((mask & 1) != 0) {
  205b3e:	d0e9      	beq.n	205b14 <main+0x394>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  205b40:	f8d1 9004 	ldr.w	r9, [r1, #4]
        if (bit < 8)
  205b44:	2807      	cmp	r0, #7
      m4 = 15 << ((bit & 7) * 4);
  205b46:	fa0e f303 	lsl.w	r3, lr, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  205b4a:	ea29 0808 	bic.w	r8, r9, r8
  205b4e:	f8c1 8004 	str.w	r8, [r1, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  205b52:	f8d1 8008 	ldr.w	r8, [r1, #8]
  205b56:	ea08 0802 	and.w	r8, r8, r2
  205b5a:	f8c1 8008 	str.w	r8, [r1, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  205b5e:	f8d1 800c 	ldr.w	r8, [r1, #12]
  205b62:	ea02 0808 	and.w	r8, r2, r8
  205b66:	f8c1 800c 	str.w	r8, [r1, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
  205b6a:	f8d1 8000 	ldr.w	r8, [r1]
  205b6e:	ea02 0208 	and.w	r2, r2, r8
  205b72:	ea42 0207 	orr.w	r2, r2, r7
  205b76:	600a      	str	r2, [r1, #0]
        if (bit < 8)
  205b78:	d842      	bhi.n	205c00 <main+0x480>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  205b7a:	6a0a      	ldr	r2, [r1, #32]
    if (!mask)
  205b7c:	280c      	cmp	r0, #12
    mask >>= 1;
  205b7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
    bit++;
  205b82:	f100 0001 	add.w	r0, r0, #1
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  205b86:	ea22 0303 	bic.w	r3, r2, r3
    moder <<= 2;
  205b8a:	ea4f 0787 	mov.w	r7, r7, lsl #2
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  205b8e:	620b      	str	r3, [r1, #32]
    if (!mask)
  205b90:	d1c8      	bne.n	205b24 <main+0x3a4>
  205b92:	2320      	movs	r3, #32
  205b94:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  205b98:	7a2b      	ldrb	r3, [r5, #8]
  205b9a:	2b01      	cmp	r3, #1
  205b9c:	d035      	beq.n	205c0a <main+0x48a>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  205b9e:	6dab      	ldr	r3, [r5, #88]	; 0x58
  u->ICR = 0xFFFFFFFFU;
  205ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  205ba4:	4920      	ldr	r1, [pc, #128]	; (205c28 <main+0x4a8>)
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  205ba6:	f04f 0e40 	mov.w	lr, #64	; 0x40
  USART_TypeDef *u = sdp->usart;
  205baa:	6d6a      	ldr	r2, [r5, #84]	; 0x54
  u->CR3 = config->cr3 | USART_CR3_EIE;
  205bac:	2701      	movs	r7, #1
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  205bae:	fba1 1303 	umull	r1, r3, r1, r3
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  205bb2:	f240 162d 	movw	r6, #301	; 0x12d

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
  205bb6:	2402      	movs	r4, #2
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  205bb8:	0b19      	lsrs	r1, r3, #12
  205bba:	2300      	movs	r3, #0
  205bbc:	60d1      	str	r1, [r2, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  205bbe:	f8c2 e004 	str.w	lr, [r2, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  205bc2:	6097      	str	r7, [r2, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  205bc4:	6016      	str	r6, [r2, #0]
  u->ICR = 0xFFFFFFFFU;
  205bc6:	6210      	str	r0, [r2, #32]
  205bc8:	722c      	strb	r4, [r5, #8]
    sdp->rxmask = 0xFF;
  205bca:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
  205bce:	f383 8811 	msr	BASEPRI, r3
  sdStart(&SD1, NULL);

  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
  205bd2:	2180      	movs	r1, #128	; 0x80
  205bd4:	4a15      	ldr	r2, [pc, #84]	; (205c2c <main+0x4ac>)
  205bd6:	4816      	ldr	r0, [pc, #88]	; (205c30 <main+0x4b0>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadLine(LINE_BUTTON_USER)) {
  205bd8:	4c12      	ldr	r4, [pc, #72]	; (205c24 <main+0x4a4>)
      test_execute((BaseSequentialStream *)&SD1, &rt_test_suite);
  205bda:	4e16      	ldr	r6, [pc, #88]	; (205c34 <main+0x4b4>)
      test_execute((BaseSequentialStream *)&SD1, &oslib_test_suite);
  205bdc:	4d16      	ldr	r5, [pc, #88]	; (205c38 <main+0x4b8>)
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
  205bde:	f7fa fc47 	bl	200470 <chThdCreateStatic.constprop.61>
  205be2:	e003      	b.n	205bec <main+0x46c>
    }
    chThdSleepMilliseconds(500);
  205be4:	f241 3088 	movw	r0, #5000	; 0x1388
  205be8:	f001 fbda 	bl	2073a0 <chThdSleep>
    if (palReadLine(LINE_BUTTON_USER)) {
  205bec:	6923      	ldr	r3, [r4, #16]
  205bee:	07db      	lsls	r3, r3, #31
  205bf0:	d5f8      	bpl.n	205be4 <main+0x464>
      test_execute((BaseSequentialStream *)&SD1, &rt_test_suite);
  205bf2:	4630      	mov	r0, r6
  205bf4:	f7fb f98c 	bl	200f10 <test_execute.constprop.1>
      test_execute((BaseSequentialStream *)&SD1, &oslib_test_suite);
  205bf8:	4628      	mov	r0, r5
  205bfa:	f7fb f989 	bl	200f10 <test_execute.constprop.1>
  205bfe:	e7f1      	b.n	205be4 <main+0x464>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  205c00:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  205c02:	ea22 0303 	bic.w	r3, r2, r3
  205c06:	624b      	str	r3, [r1, #36]	; 0x24
  205c08:	e784      	b.n	205b14 <main+0x394>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
  205c0a:	4b0c      	ldr	r3, [pc, #48]	; (205c3c <main+0x4bc>)
  205c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  205c0e:	f042 0210 	orr.w	r2, r2, #16
  205c12:	645a      	str	r2, [r3, #68]	; 0x44
  205c14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  205c16:	f042 0210 	orr.w	r2, r2, #16
  205c1a:	665a      	str	r2, [r3, #100]	; 0x64
  205c1c:	e7bf      	b.n	205b9e <main+0x41e>
  205c1e:	bf00      	nop
  205c20:	08008f20 	.word	0x08008f20
  205c24:	40020000 	.word	0x40020000
  205c28:	1b4e81b5 	.word	0x1b4e81b5
  205c2c:	00205201 	.word	0x00205201
  205c30:	20001318 	.word	0x20001318
  205c34:	080094b4 	.word	0x080094b4
  205c38:	08009088 	.word	0x08009088
  205c3c:	40023800 	.word	0x40023800

00205c40 <notify1.lto_priv.86>:
  USART1->CR1 |= USART_CR1_TXEIE;
  205c40:	4a02      	ldr	r2, [pc, #8]	; (205c4c <notify1.lto_priv.86+0xc>)
  205c42:	6813      	ldr	r3, [r2, #0]
  205c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  205c48:	6013      	str	r3, [r2, #0]
  205c4a:	4770      	bx	lr
  205c4c:	40011000 	.word	0x40011000

00205c50 <_ctl.lto_priv.96>:
}
  205c50:	2000      	movs	r0, #0
  205c52:	4770      	bx	lr
	...

00205c60 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
  205c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  205c62:	4604      	mov	r4, r0
  205c64:	460f      	mov	r7, r1
  205c66:	4616      	mov	r6, r2
  205c68:	2320      	movs	r3, #32
  205c6a:	f383 8811 	msr	BASEPRI, r3
  205c6e:	e003      	b.n	205c78 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
  205c70:	f001 fb7e 	bl	207370 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
  205c74:	2800      	cmp	r0, #0
  205c76:	db19      	blt.n	205cac <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  205c78:	68a5      	ldr	r5, [r4, #8]
  205c7a:	4631      	mov	r1, r6
  205c7c:	4620      	mov	r0, r4
  205c7e:	2d00      	cmp	r5, #0
  205c80:	d0f6      	beq.n	205c70 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
  205c82:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  205c84:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  205c86:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  205c88:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  205c8a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  205c8c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  205c8e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  205c90:	6962      	ldr	r2, [r4, #20]
  205c92:	6923      	ldr	r3, [r4, #16]
  205c94:	429a      	cmp	r2, r3
  205c96:	d301      	bcc.n	205c9c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  205c98:	68e3      	ldr	r3, [r4, #12]
  205c9a:	6163      	str	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
  205c9c:	69e3      	ldr	r3, [r4, #28]
  205c9e:	b10b      	cbz	r3, 205ca4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  205ca0:	4620      	mov	r0, r4
  205ca2:	4798      	blx	r3
  205ca4:	2000      	movs	r0, #0
  205ca6:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
  205caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  205cac:	f385 8811 	msr	BASEPRI, r5
  205cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  205cb2:	bf00      	nop
	...

00205cc0 <_putt.lto_priv.92>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  205cc0:	3030      	adds	r0, #48	; 0x30
  205cc2:	f7ff bfcd 	b.w	205c60 <oqPutTimeout>
  205cc6:	bf00      	nop
	...

00205cd0 <_put.lto_priv.90>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  205cd0:	3030      	adds	r0, #48	; 0x30
  205cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  205cd6:	f7ff bfc3 	b.w	205c60 <oqPutTimeout>
  205cda:	bf00      	nop
  205cdc:	0000      	movs	r0, r0
	...

00205ce0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
  205ce0:	b570      	push	{r4, r5, r6, lr}
  205ce2:	2320      	movs	r3, #32
  205ce4:	4604      	mov	r4, r0
  205ce6:	460e      	mov	r6, r1
  205ce8:	f383 8811 	msr	BASEPRI, r3
  205cec:	e003      	b.n	205cf6 <iqGetTimeout+0x16>
  205cee:	f001 fb3f 	bl	207370 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  205cf2:	2800      	cmp	r0, #0
  205cf4:	db19      	blt.n	205d2a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  205cf6:	68a5      	ldr	r5, [r4, #8]
  205cf8:	4631      	mov	r1, r6
  205cfa:	4620      	mov	r0, r4
  205cfc:	2d00      	cmp	r5, #0
  205cfe:	d0f6      	beq.n	205cee <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  205d00:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  205d02:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  205d04:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  205d06:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  205d08:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  205d0a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  205d0c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  205d0e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  205d10:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  205d12:	d301      	bcc.n	205d18 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  205d14:	68e3      	ldr	r3, [r4, #12]
  205d16:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  205d18:	69e3      	ldr	r3, [r4, #28]
  205d1a:	b10b      	cbz	r3, 205d20 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  205d1c:	4620      	mov	r0, r4
  205d1e:	4798      	blx	r3
  205d20:	2300      	movs	r3, #0
  205d22:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  205d26:	4628      	mov	r0, r5
}
  205d28:	bd70      	pop	{r4, r5, r6, pc}
  205d2a:	f385 8811 	msr	BASEPRI, r5
  205d2e:	bd70      	pop	{r4, r5, r6, pc}

00205d30 <_gett.lto_priv.93>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  205d30:	300c      	adds	r0, #12
  205d32:	f7ff bfd5 	b.w	205ce0 <iqGetTimeout>
  205d36:	bf00      	nop
	...

00205d40 <_get.lto_priv.91>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  205d40:	300c      	adds	r0, #12
  205d42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  205d46:	f7ff bfcb 	b.w	205ce0 <iqGetTimeout>
  205d4a:	bf00      	nop
  205d4c:	0000      	movs	r0, r0
	...

00205d50 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
  205d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  205d54:	b083      	sub	sp, #12
  205d56:	4617      	mov	r7, r2
  qnotify_t nfy = oqp->q_notify;
  205d58:	f8d0 a01c 	ldr.w	sl, [r0, #28]
  205d5c:	f04f 0b20 	mov.w	fp, #32
                      size_t n, sysinterval_t timeout) {
  205d60:	9301      	str	r3, [sp, #4]
  205d62:	f38b 8811 	msr	BASEPRI, fp

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
  205d66:	2a00      	cmp	r2, #0
  205d68:	d056      	beq.n	205e18 <oqWriteTimeout+0xc8>
  205d6a:	4604      	mov	r4, r0
  205d6c:	460e      	mov	r6, r1
  205d6e:	f04f 0800 	mov.w	r8, #0
  205d72:	e01e      	b.n	205db2 <oqWriteTimeout+0x62>
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  205d74:	6960      	ldr	r0, [r4, #20]
  205d76:	6923      	ldr	r3, [r4, #16]
    n = oqGetEmptyI(oqp);
  205d78:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  205d7a:	1a1b      	subs	r3, r3, r0
  if (n < s1) {
  205d7c:	42ab      	cmp	r3, r5
  205d7e:	d821      	bhi.n	205dc4 <oqWriteTimeout+0x74>
  else if (n > s1) {
  205d80:	d339      	bcc.n	205df6 <oqWriteTimeout+0xa6>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
  205d82:	462a      	mov	r2, r5
  205d84:	4631      	mov	r1, r6
  205d86:	f7fa fabf 	bl	200308 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
  205d8a:	68e3      	ldr	r3, [r4, #12]
  205d8c:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
  205d8e:	68a3      	ldr	r3, [r4, #8]
  205d90:	1b5b      	subs	r3, r3, r5
  205d92:	60a3      	str	r3, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
  205d94:	b315      	cbz	r5, 205ddc <oqWriteTimeout+0x8c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
  205d96:	f1ba 0f00 	cmp.w	sl, #0
  205d9a:	d001      	beq.n	205da0 <oqWriteTimeout+0x50>
        nfy(oqp);
  205d9c:	4620      	mov	r0, r4
  205d9e:	47d0      	blx	sl
  205da0:	2300      	movs	r3, #0
  205da2:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
  205da6:	44a8      	add	r8, r5
      bp += done;
  205da8:	442e      	add	r6, r5
  205daa:	f38b 8811 	msr	BASEPRI, fp
  while (wr < n) {
  205dae:	4547      	cmp	r7, r8
  205db0:	d91a      	bls.n	205de8 <oqWriteTimeout+0x98>
  if (n > oqGetEmptyI(oqp)) {
  205db2:	68a3      	ldr	r3, [r4, #8]
  205db4:	429f      	cmp	r7, r3
  205db6:	d8dd      	bhi.n	205d74 <oqWriteTimeout+0x24>
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  205db8:	6960      	ldr	r0, [r4, #20]
  if (n > oqGetEmptyI(oqp)) {
  205dba:	463d      	mov	r5, r7
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  205dbc:	6923      	ldr	r3, [r4, #16]
  205dbe:	1a1b      	subs	r3, r3, r0
  if (n < s1) {
  205dc0:	42ab      	cmp	r3, r5
  205dc2:	d9dd      	bls.n	205d80 <oqWriteTimeout+0x30>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
  205dc4:	462a      	mov	r2, r5
  205dc6:	4631      	mov	r1, r6
  205dc8:	f7fa fa9e 	bl	200308 <memcpy>
    oqp->q_wrptr += n;
  205dcc:	6963      	ldr	r3, [r4, #20]
  205dce:	442b      	add	r3, r5
  205dd0:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
  205dd2:	68a3      	ldr	r3, [r4, #8]
  205dd4:	1b5b      	subs	r3, r3, r5
  205dd6:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
  205dd8:	2d00      	cmp	r5, #0
  205dda:	d1dc      	bne.n	205d96 <oqWriteTimeout+0x46>
  205ddc:	9901      	ldr	r1, [sp, #4]
  205dde:	4620      	mov	r0, r4
  205de0:	f001 fac6 	bl	207370 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  205de4:	2800      	cmp	r0, #0
  205de6:	d0e2      	beq.n	205dae <oqWriteTimeout+0x5e>
  205de8:	2300      	movs	r3, #0
  205dea:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return wr;
}
  205dee:	4640      	mov	r0, r8
  205df0:	b003      	add	sp, #12
  205df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
  205df6:	461a      	mov	r2, r3
  205df8:	4631      	mov	r1, r6
    s2 = n - s1;
  205dfa:	eba5 0903 	sub.w	r9, r5, r3
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
  205dfe:	9300      	str	r3, [sp, #0]
  205e00:	f7fa fa82 	bl	200308 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
  205e04:	9b00      	ldr	r3, [sp, #0]
  205e06:	464a      	mov	r2, r9
  205e08:	68e0      	ldr	r0, [r4, #12]
  205e0a:	18f1      	adds	r1, r6, r3
  205e0c:	f7fa fa7c 	bl	200308 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
  205e10:	68e3      	ldr	r3, [r4, #12]
  205e12:	444b      	add	r3, r9
  205e14:	6163      	str	r3, [r4, #20]
  205e16:	e7ba      	b.n	205d8e <oqWriteTimeout+0x3e>
  size_t wr = 0;
  205e18:	4690      	mov	r8, r2
  205e1a:	e7e5      	b.n	205de8 <oqWriteTimeout+0x98>
  205e1c:	0000      	movs	r0, r0
	...

00205e20 <_writet.lto_priv.94>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  205e20:	3030      	adds	r0, #48	; 0x30
  205e22:	f7ff bf95 	b.w	205d50 <oqWriteTimeout>
  205e26:	bf00      	nop
	...

00205e30 <_write.lto_priv.88>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  205e30:	3030      	adds	r0, #48	; 0x30
  205e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  205e36:	f7ff bf8b 	b.w	205d50 <oqWriteTimeout>
  205e3a:	bf00      	nop
  205e3c:	0000      	movs	r0, r0
	...

00205e40 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
  205e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  205e44:	b083      	sub	sp, #12
  205e46:	4617      	mov	r7, r2
  qnotify_t nfy = iqp->q_notify;
  205e48:	f8d0 a01c 	ldr.w	sl, [r0, #28]
  205e4c:	f04f 0b20 	mov.w	fp, #32
                     size_t n, sysinterval_t timeout) {
  205e50:	9301      	str	r3, [sp, #4]
  205e52:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
  205e56:	2a00      	cmp	r2, #0
  205e58:	d056      	beq.n	205f08 <iqReadTimeout+0xc8>
  205e5a:	4604      	mov	r4, r0
  205e5c:	460e      	mov	r6, r1
  205e5e:	f04f 0800 	mov.w	r8, #0
  205e62:	e01e      	b.n	205ea2 <iqReadTimeout+0x62>
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  205e64:	69a1      	ldr	r1, [r4, #24]
  205e66:	6923      	ldr	r3, [r4, #16]
    n = iqGetFullI(iqp);
  205e68:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  205e6a:	1a5b      	subs	r3, r3, r1
  if (n < s1) {
  205e6c:	42ab      	cmp	r3, r5
  205e6e:	d821      	bhi.n	205eb4 <iqReadTimeout+0x74>
  else if (n > s1) {
  205e70:	d339      	bcc.n	205ee6 <iqReadTimeout+0xa6>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  205e72:	462a      	mov	r2, r5
  205e74:	4630      	mov	r0, r6
  205e76:	f7fa fa47 	bl	200308 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
  205e7a:	68e3      	ldr	r3, [r4, #12]
  205e7c:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
  205e7e:	68a3      	ldr	r3, [r4, #8]
  205e80:	1b5b      	subs	r3, r3, r5
  205e82:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
  205e84:	b315      	cbz	r5, 205ecc <iqReadTimeout+0x8c>
      if (nfy != NULL) {
  205e86:	f1ba 0f00 	cmp.w	sl, #0
  205e8a:	d001      	beq.n	205e90 <iqReadTimeout+0x50>
        nfy(iqp);
  205e8c:	4620      	mov	r0, r4
  205e8e:	47d0      	blx	sl
  205e90:	2300      	movs	r3, #0
  205e92:	f383 8811 	msr	BASEPRI, r3
      rd += done;
  205e96:	44a8      	add	r8, r5
      bp += done;
  205e98:	442e      	add	r6, r5
  205e9a:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
  205e9e:	4547      	cmp	r7, r8
  205ea0:	d91a      	bls.n	205ed8 <iqReadTimeout+0x98>
  if (n > iqGetFullI(iqp)) {
  205ea2:	68a3      	ldr	r3, [r4, #8]
  205ea4:	429f      	cmp	r7, r3
  205ea6:	d8dd      	bhi.n	205e64 <iqReadTimeout+0x24>
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  205ea8:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
  205eaa:	463d      	mov	r5, r7
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  205eac:	6923      	ldr	r3, [r4, #16]
  205eae:	1a5b      	subs	r3, r3, r1
  if (n < s1) {
  205eb0:	42ab      	cmp	r3, r5
  205eb2:	d9dd      	bls.n	205e70 <iqReadTimeout+0x30>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  205eb4:	462a      	mov	r2, r5
  205eb6:	4630      	mov	r0, r6
  205eb8:	f7fa fa26 	bl	200308 <memcpy>
    iqp->q_rdptr += n;
  205ebc:	69a3      	ldr	r3, [r4, #24]
  205ebe:	442b      	add	r3, r5
  205ec0:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
  205ec2:	68a3      	ldr	r3, [r4, #8]
  205ec4:	1b5b      	subs	r3, r3, r5
  205ec6:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
  205ec8:	2d00      	cmp	r5, #0
  205eca:	d1dc      	bne.n	205e86 <iqReadTimeout+0x46>
  205ecc:	9901      	ldr	r1, [sp, #4]
  205ece:	4620      	mov	r0, r4
  205ed0:	f001 fa4e 	bl	207370 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  205ed4:	2800      	cmp	r0, #0
  205ed6:	d0e2      	beq.n	205e9e <iqReadTimeout+0x5e>
  205ed8:	2300      	movs	r3, #0
  205eda:	f383 8811 	msr	BASEPRI, r3
}
  205ede:	4640      	mov	r0, r8
  205ee0:	b003      	add	sp, #12
  205ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  205ee6:	461a      	mov	r2, r3
  205ee8:	4630      	mov	r0, r6
    s2 = n - s1;
  205eea:	eba5 0903 	sub.w	r9, r5, r3
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  205eee:	9300      	str	r3, [sp, #0]
  205ef0:	f7fa fa0a 	bl	200308 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
  205ef4:	9b00      	ldr	r3, [sp, #0]
  205ef6:	464a      	mov	r2, r9
  205ef8:	68e1      	ldr	r1, [r4, #12]
  205efa:	18f0      	adds	r0, r6, r3
  205efc:	f7fa fa04 	bl	200308 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
  205f00:	68e3      	ldr	r3, [r4, #12]
  205f02:	444b      	add	r3, r9
  205f04:	61a3      	str	r3, [r4, #24]
  205f06:	e7ba      	b.n	205e7e <iqReadTimeout+0x3e>
  size_t rd = 0;
  205f08:	4690      	mov	r8, r2
  205f0a:	e7e5      	b.n	205ed8 <iqReadTimeout+0x98>
  205f0c:	0000      	movs	r0, r0
	...

00205f10 <_readt.lto_priv.95>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  205f10:	300c      	adds	r0, #12
  205f12:	f7ff bf95 	b.w	205e40 <iqReadTimeout>
  205f16:	bf00      	nop
	...

00205f20 <_read.lto_priv.89>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  205f20:	300c      	adds	r0, #12
  205f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  205f26:	f7ff bf8b 	b.w	205e40 <iqReadTimeout>
  205f2a:	bf00      	nop
  205f2c:	0000      	movs	r0, r0
	...

00205f30 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
  205f30:	4aa4      	ldr	r2, [pc, #656]	; (2061c4 <__early_init+0x294>)
  205f32:	2300      	movs	r3, #0
  gpiop->OTYPER  = config->otyper;
  205f34:	49a4      	ldr	r1, [pc, #656]	; (2061c8 <__early_init+0x298>)
  gpiop->ODR     = config->odr;
  205f36:	f64f 70ff 	movw	r0, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
  205f3a:	f46f 4c40 	mvn.w	ip, #49152	; 0xc000
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
  205f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
  205f42:	6914      	ldr	r4, [r2, #16]
  205f44:	f240 76ff 	movw	r6, #2047	; 0x7ff
  gpiop->PUPDR   = config->pupdr;
  205f48:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 206224 <__early_init+0x2f4>
  gpiop->OSPEEDR = config->ospeedr;
  205f4c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  rccResetAHB1(STM32_GPIO_EN_MASK);
  205f50:	4334      	orrs	r4, r6
  gpiop->AFRL    = config->afrl;
  205f52:	4f9e      	ldr	r7, [pc, #632]	; (2061cc <__early_init+0x29c>)
  gpiop->AFRH    = config->afrh;
  205f54:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 206228 <__early_init+0x2f8>
  rccResetAHB1(STM32_GPIO_EN_MASK);
  205f58:	6114      	str	r4, [r2, #16]
  205f5a:	6113      	str	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
  205f5c:	6b14      	ldr	r4, [r2, #48]	; 0x30
  205f5e:	4334      	orrs	r4, r6
  205f60:	6314      	str	r4, [r2, #48]	; 0x30
  gpiop->OSPEEDR = config->ospeedr;
  205f62:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
  205f66:	6d15      	ldr	r5, [r2, #80]	; 0x50
  205f68:	4335      	orrs	r5, r6
  gpiop->AFRH    = config->afrh;
  205f6a:	4e99      	ldr	r6, [pc, #612]	; (2061d0 <__early_init+0x2a0>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
  205f6c:	6515      	str	r5, [r2, #80]	; 0x50
  gpiop->AFRH    = config->afrh;
  205f6e:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
  gpiop->OTYPER  = config->otyper;
  205f72:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
  205f74:	f8c1 c008 	str.w	ip, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
  205f78:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
  205f7c:	f8c1 e00c 	str.w	lr, [r1, #12]
  gpiop->ODR     = config->odr;
  205f80:	f641 7eff 	movw	lr, #8191	; 0x1fff
  205f84:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
  205f86:	620f      	str	r7, [r1, #32]
  gpiop->PUPDR   = config->pupdr;
  205f88:	2710      	movs	r7, #16
  gpiop->AFRH    = config->afrh;
  205f8a:	624e      	str	r6, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
  205f8c:	4e91      	ldr	r6, [pc, #580]	; (2061d4 <__early_init+0x2a4>)
  205f8e:	600e      	str	r6, [r1, #0]
  gpiop->PUPDR   = config->pupdr;
  205f90:	4e91      	ldr	r6, [pc, #580]	; (2061d8 <__early_init+0x2a8>)
  gpiop->OTYPER  = config->otyper;
  205f92:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  205f96:	f8c1 4408 	str.w	r4, [r1, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  205f9a:	f8c1 640c 	str.w	r6, [r1, #1036]	; 0x40c
  gpiop->AFRL    = config->afrl;
  205f9e:	4e8f      	ldr	r6, [pc, #572]	; (2061dc <__early_init+0x2ac>)
  gpiop->ODR     = config->odr;
  205fa0:	f8c1 0414 	str.w	r0, [r1, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  205fa4:	f8c1 6420 	str.w	r6, [r1, #1056]	; 0x420
  gpiop->PUPDR   = config->pupdr;
  205fa8:	f245 0640 	movw	r6, #20544	; 0x5040
  gpiop->AFRH    = config->afrh;
  205fac:	f8c1 9424 	str.w	r9, [r1, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  205fb0:	f8df 9278 	ldr.w	r9, [pc, #632]	; 20622c <__early_init+0x2fc>
  205fb4:	f8c1 9400 	str.w	r9, [r1, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  205fb8:	f04f 0980 	mov.w	r9, #128	; 0x80
  205fbc:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  205fc0:	f8c1 8808 	str.w	r8, [r1, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  205fc4:	f8df 8268 	ldr.w	r8, [pc, #616]	; 206230 <__early_init+0x300>
  205fc8:	f8c1 880c 	str.w	r8, [r1, #2060]	; 0x80c
  gpiop->AFRL    = config->afrl;
  205fcc:	f8df 8264 	ldr.w	r8, [pc, #612]	; 206234 <__early_init+0x304>
  gpiop->ODR     = config->odr;
  205fd0:	f8c1 0814 	str.w	r0, [r1, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  205fd4:	f8c1 8820 	str.w	r8, [r1, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  205fd8:	f8df 825c 	ldr.w	r8, [pc, #604]	; 206238 <__early_init+0x308>
  205fdc:	f8c1 8824 	str.w	r8, [r1, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  205fe0:	f8df 8258 	ldr.w	r8, [pc, #600]	; 20623c <__early_init+0x30c>
  205fe4:	f8c1 8800 	str.w	r8, [r1, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
  205fe8:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
  205fec:	604b      	str	r3, [r1, #4]
  gpiop->PUPDR   = config->pupdr;
  205fee:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  gpiop->OSPEEDR = config->ospeedr;
  205ff2:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
  205ff4:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->OSPEEDR = config->ospeedr;
  205ff8:	f04f 2c0c 	mov.w	ip, #201329664	; 0xc000c00
  gpiop->ODR     = config->odr;
  205ffc:	f8c1 e014 	str.w	lr, [r1, #20]
  gpiop->AFRL    = config->afrl;
  206000:	f8df e23c 	ldr.w	lr, [pc, #572]	; 206240 <__early_init+0x310>
  206004:	f8c1 e020 	str.w	lr, [r1, #32]
  gpiop->AFRH    = config->afrh;
  206008:	f8df e238 	ldr.w	lr, [pc, #568]	; 206244 <__early_init+0x314>
  20600c:	f8c1 e024 	str.w	lr, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
  206010:	f8df e234 	ldr.w	lr, [pc, #564]	; 206248 <__early_init+0x318>
  206014:	f8c1 e000 	str.w	lr, [r1]
  gpiop->ODR     = config->odr;
  206018:	f64d 7edf 	movw	lr, #57311	; 0xdfdf
  gpiop->OTYPER  = config->otyper;
  20601c:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  206020:	f8c1 4408 	str.w	r4, [r1, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  206024:	f8c1 740c 	str.w	r7, [r1, #1036]	; 0x40c
  gpiop->AFRL    = config->afrl;
  206028:	4f6d      	ldr	r7, [pc, #436]	; (2061e0 <__early_init+0x2b0>)
  gpiop->ODR     = config->odr;
  20602a:	f8c1 0414 	str.w	r0, [r1, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  20602e:	f8c1 7420 	str.w	r7, [r1, #1056]	; 0x420
  gpiop->MODER   = config->moder;
  206032:	4f6c      	ldr	r7, [pc, #432]	; (2061e4 <__early_init+0x2b4>)
  gpiop->AFRH    = config->afrh;
  206034:	f8c1 5424 	str.w	r5, [r1, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  206038:	f8c1 7400 	str.w	r7, [r1, #1024]	; 0x400
  gpiop->PUPDR   = config->pupdr;
  20603c:	4f6a      	ldr	r7, [pc, #424]	; (2061e8 <__early_init+0x2b8>)
  gpiop->OTYPER  = config->otyper;
  20603e:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  206042:	f8c1 4808 	str.w	r4, [r1, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  206046:	f8c1 780c 	str.w	r7, [r1, #2060]	; 0x80c
  gpiop->AFRL    = config->afrl;
  20604a:	4f68      	ldr	r7, [pc, #416]	; (2061ec <__early_init+0x2bc>)
  gpiop->ODR     = config->odr;
  20604c:	f8c1 0814 	str.w	r0, [r1, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  206050:	f8c1 7820 	str.w	r7, [r1, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  206054:	4f66      	ldr	r7, [pc, #408]	; (2061f0 <__early_init+0x2c0>)
  206056:	f8c1 7824 	str.w	r7, [r1, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  20605a:	4f66      	ldr	r7, [pc, #408]	; (2061f4 <__early_init+0x2c4>)
  20605c:	f8c1 7800 	str.w	r7, [r1, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
  206060:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
  206064:	604b      	str	r3, [r1, #4]
  gpiop->AFRL    = config->afrl;
  206066:	f44f 6750 	mov.w	r7, #3328	; 0xd00
  gpiop->OSPEEDR = config->ospeedr;
  20606a:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
  20606c:	60ce      	str	r6, [r1, #12]
  gpiop->AFRL    = config->afrl;
  20606e:	4e62      	ldr	r6, [pc, #392]	; (2061f8 <__early_init+0x2c8>)
  gpiop->ODR     = config->odr;
  206070:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
  206072:	620e      	str	r6, [r1, #32]
  gpiop->AFRH    = config->afrh;
  206074:	4e61      	ldr	r6, [pc, #388]	; (2061fc <__early_init+0x2cc>)
  206076:	624e      	str	r6, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
  206078:	f106 465f 	add.w	r6, r6, #3741319168	; 0xdf000000
  20607c:	f5a6 2673 	sub.w	r6, r6, #995328	; 0xf3000
  206080:	f5a6 76c3 	sub.w	r6, r6, #390	; 0x186
  206084:	600e      	str	r6, [r1, #0]
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  206086:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
  20608a:	f8c1 9404 	str.w	r9, [r1, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20608e:	f8c1 4408 	str.w	r4, [r1, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  206092:	f8c1 840c 	str.w	r8, [r1, #1036]	; 0x40c
  gpiop->AFRL    = config->afrl;
  206096:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 20624c <__early_init+0x31c>
  gpiop->ODR     = config->odr;
  20609a:	f8c1 0414 	str.w	r0, [r1, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  20609e:	f8c1 8420 	str.w	r8, [r1, #1056]	; 0x420
  gpiop->MODER   = config->moder;
  2060a2:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 206250 <__early_init+0x320>
  gpiop->AFRH    = config->afrh;
  2060a6:	f8c1 5424 	str.w	r5, [r1, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2060aa:	f8c1 8400 	str.w	r8, [r1, #1024]	; 0x400
  gpiop->PUPDR   = config->pupdr;
  2060ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 206254 <__early_init+0x324>
  gpiop->OTYPER  = config->otyper;
  2060b2:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  2060b6:	f8c1 4808 	str.w	r4, [r1, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2060ba:	f8c1 880c 	str.w	r8, [r1, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  2060be:	f8c1 0814 	str.w	r0, [r1, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  2060c2:	f8c1 5820 	str.w	r5, [r1, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2060c6:	4d4e      	ldr	r5, [pc, #312]	; (206200 <__early_init+0x2d0>)
  gpiop->MODER   = config->moder;
  2060c8:	4c4e      	ldr	r4, [pc, #312]	; (206204 <__early_init+0x2d4>)
  gpiop->AFRH    = config->afrh;
  2060ca:	f8c1 5824 	str.w	r5, [r1, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2060ce:	f8df 8188 	ldr.w	r8, [pc, #392]	; 206258 <__early_init+0x328>
  gpiop->OTYPER  = config->otyper;
  2060d2:	4d4d      	ldr	r5, [pc, #308]	; (206208 <__early_init+0x2d8>)
  gpiop->MODER   = config->moder;
  2060d4:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2060d8:	4611      	mov	r1, r2
  gpiop->OTYPER  = config->otyper;
  2060da:	606b      	str	r3, [r5, #4]
  2060dc:	4c4b      	ldr	r4, [pc, #300]	; (20620c <__early_init+0x2dc>)
  gpiop->OSPEEDR = config->ospeedr;
  2060de:	f8c5 c008 	str.w	ip, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  2060e2:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
  2060e4:	f8c5 e014 	str.w	lr, [r5, #20]
  gpiop->AFRL    = config->afrl;
  2060e8:	622f      	str	r7, [r5, #32]
  gpiop->AFRH    = config->afrh;
  2060ea:	626b      	str	r3, [r5, #36]	; 0x24
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2060ec:	4f48      	ldr	r7, [pc, #288]	; (206210 <__early_init+0x2e0>)
  gpiop->MODER   = config->moder;
  2060ee:	f8c5 8000 	str.w	r8, [r5]
  PWR->CR1 = STM32_VOS;
  2060f2:	f5a5 35da 	sub.w	r5, r5, #111616	; 0x1b400
  gpiop->OTYPER  = config->otyper;
  2060f6:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2060f8:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  2060fa:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
  2060fc:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  2060fe:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  206100:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  206102:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  206104:	6417      	str	r7, [r2, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  206106:	602e      	str	r6, [r5, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  206108:	6813      	ldr	r3, [r2, #0]
  20610a:	f043 0301 	orr.w	r3, r3, #1
  20610e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  206110:	680b      	ldr	r3, [r1, #0]
  206112:	079e      	lsls	r6, r3, #30
  206114:	d5fc      	bpl.n	206110 <__early_init+0x1e0>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  206116:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  206118:	4a2a      	ldr	r2, [pc, #168]	; (2061c4 <__early_init+0x294>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  20611a:	f023 0303 	bic.w	r3, r3, #3
  20611e:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  206120:	688b      	ldr	r3, [r1, #8]
  206122:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  206124:	6893      	ldr	r3, [r2, #8]
  206126:	f013 030c 	ands.w	r3, r3, #12
  20612a:	d1fb      	bne.n	206124 <__early_init+0x1f4>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  20612c:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  20612e:	4925      	ldr	r1, [pc, #148]	; (2061c4 <__early_init+0x294>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  206130:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  206134:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  206136:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  206138:	6813      	ldr	r3, [r2, #0]
  20613a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  20613e:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  206140:	680b      	ldr	r3, [r1, #0]
  206142:	039d      	lsls	r5, r3, #14
  206144:	d5fc      	bpl.n	206140 <__early_init+0x210>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  206146:	4b33      	ldr	r3, [pc, #204]	; (206214 <__early_init+0x2e4>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  206148:	4833      	ldr	r0, [pc, #204]	; (206218 <__early_init+0x2e8>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  20614a:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  20614c:	680b      	ldr	r3, [r1, #0]
  20614e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  206152:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  206154:	6843      	ldr	r3, [r0, #4]
  206156:	045c      	lsls	r4, r3, #17
  206158:	d5fc      	bpl.n	206154 <__early_init+0x224>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  20615a:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  20615c:	4a2e      	ldr	r2, [pc, #184]	; (206218 <__early_init+0x2e8>)
  PWR->CR1 |= PWR_CR1_ODEN;
  20615e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  206162:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  206164:	6853      	ldr	r3, [r2, #4]
  206166:	03d9      	lsls	r1, r3, #15
  206168:	d5fc      	bpl.n	206164 <__early_init+0x234>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  20616a:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20616c:	492a      	ldr	r1, [pc, #168]	; (206218 <__early_init+0x2e8>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  20616e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  206172:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  206174:	684b      	ldr	r3, [r1, #4]
  206176:	039a      	lsls	r2, r3, #14
  206178:	d5fc      	bpl.n	206174 <__early_init+0x244>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  20617a:	4a12      	ldr	r2, [pc, #72]	; (2061c4 <__early_init+0x294>)
  20617c:	6813      	ldr	r3, [r2, #0]
  20617e:	019b      	lsls	r3, r3, #6
  206180:	d5fc      	bpl.n	20617c <__early_init+0x24c>
                  STM32_UART8SEL  | STM32_UART7SEL  | STM32_USART6SEL |
                  STM32_UART5SEL  | STM32_UART4SEL  | STM32_USART3SEL |
                  STM32_USART2SEL | STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  206182:	4b26      	ldr	r3, [pc, #152]	; (20621c <__early_init+0x2ec>)
  206184:	f240 3107 	movw	r1, #775	; 0x307
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  206188:	4d25      	ldr	r5, [pc, #148]	; (206220 <__early_init+0x2f0>)
    RCC->DCKCFGR1 = dckcfgr1;
  20618a:	f240 1401 	movw	r4, #257	; 0x101
  RCC->DCKCFGR2 = STM32_SDMMC2SEL | STM32_SDMMC1SEL | STM32_CK48MSEL  |
  20618e:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  206190:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  206192:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMC2SEL | STM32_SDMMC1SEL | STM32_CK48MSEL  |
  206196:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20619a:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20619c:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  20619e:	4909      	ldr	r1, [pc, #36]	; (2061c4 <__early_init+0x294>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  2061a0:	f043 0302 	orr.w	r3, r3, #2
  2061a4:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  2061a6:	688b      	ldr	r3, [r1, #8]
  2061a8:	f003 030c 	and.w	r3, r3, #12
  2061ac:	2b08      	cmp	r3, #8
  2061ae:	d1fa      	bne.n	2061a6 <__early_init+0x276>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
  2061b0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  2061b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  2061b6:	644b      	str	r3, [r1, #68]	; 0x44
  2061b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  2061ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  2061be:	664b      	str	r3, [r1, #100]	; 0x64
  2061c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  2061c4:	40023800 	.word	0x40023800
  2061c8:	40020000 	.word	0x40020000
  2061cc:	b0a0abb0 	.word	0xb0a0abb0
  2061d0:	30000770 	.word	0x30000770
  2061d4:	a82a88a8 	.word	0xa82a88a8
  2061d8:	50051411 	.word	0x50051411
  2061dc:	b0aaa0aa 	.word	0xb0aaa0aa
  2061e0:	c66660cc 	.word	0xc66660cc
  2061e4:	aaaaaa8a 	.word	0xaaaaaa8a
  2061e8:	00155000 	.word	0x00155000
  2061ec:	00cccccc 	.word	0x00cccccc
  2061f0:	ccccc000 	.word	0xccccc000
  2061f4:	aa800aaa 	.word	0xaa800aaa
  2061f8:	60cc0ccc 	.word	0x60cc0ccc
  2061fc:	cbb7bbb0 	.word	0xcbb7bbb0
  206200:	0ee0acc0 	.word	0x0ee0acc0
  206204:	28a8aaaa 	.word	0x28a8aaaa
  206208:	40022400 	.word	0x40022400
  20620c:	40022800 	.word	0x40022800
  206210:	10000400 	.word	0x10000400
  206214:	09406c19 	.word	0x09406c19
  206218:	40007000 	.word	0x40007000
  20621c:	40023c00 	.word	0x40023c00
  206220:	30999400 	.word	0x30999400
  206224:	01401110 	.word	0x01401110
  206228:	00aaaa00 	.word	0x00aaaa00
  20622c:	0aa08a8a 	.word	0x0aa08a8a
  206230:	04001010 	.word	0x04001010
  206234:	00bb30ba 	.word	0x00bb30ba
  206238:	00083990 	.word	0x00083990
  20623c:	02a80a8a 	.word	0x02a80a8a
  206240:	bb7038cc 	.word	0xbb7038cc
  206244:	cc04accc 	.word	0xcc04accc
  206248:	a2aaa8aa 	.word	0xa2aaa8aa
  20624c:	00cacc00 	.word	0x00cacc00
  206250:	aaaa0aa0 	.word	0xaaaa0aa0
  206254:	41010000 	.word	0x41010000
  206258:	04000420 	.word	0x04000420
  20625c:	00000000 	.word	0x00000000

00206260 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
  206260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  206264:	4d56      	ldr	r5, [pc, #344]	; (2063c0 <VectorD4+0x160>)
  206266:	6d6e      	ldr	r6, [r5, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  206268:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20626a:	69f4      	ldr	r4, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20626c:	0722      	lsls	r2, r4, #28
  u->ICR = isr;
  20626e:	6234      	str	r4, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  206270:	d147      	bne.n	206302 <VectorD4+0xa2>
  if (isr & USART_ISR_LBDF) {
  206272:	05e3      	lsls	r3, r4, #23
  206274:	d439      	bmi.n	2062ea <VectorD4+0x8a>
  if (isr & USART_ISR_RXNE) {
  206276:	06a0      	lsls	r0, r4, #26
  206278:	d416      	bmi.n	2062a8 <VectorD4+0x48>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20627a:	0639      	lsls	r1, r7, #24
  20627c:	d501      	bpl.n	206282 <VectorD4+0x22>
  20627e:	0622      	lsls	r2, r4, #24
  206280:	d45b      	bmi.n	20633a <VectorD4+0xda>
  if (isr & USART_ISR_TC) {
  206282:	0663      	lsls	r3, r4, #25
  206284:	d50c      	bpl.n	2062a0 <VectorD4+0x40>
  206286:	2320      	movs	r3, #32
  206288:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  20628c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  20628e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  206290:	429a      	cmp	r2, r3
  206292:	d071      	beq.n	206378 <VectorD4+0x118>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  206294:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  206298:	2300      	movs	r3, #0
  20629a:	6037      	str	r7, [r6, #0]
  20629c:	f383 8811 	msr	BASEPRI, r3
}
  2062a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  2062a4:	f7fc ba0c 	b.w	2026c0 <_port_irq_epilogue>
  2062a8:	2320      	movs	r3, #32
  2062aa:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  2062ae:	6a72      	ldr	r2, [r6, #36]	; 0x24
  2062b0:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  2062b4:	696b      	ldr	r3, [r5, #20]
  2062b6:	ea01 0802 	and.w	r8, r1, r2
  2062ba:	2b00      	cmp	r3, #0
  2062bc:	d064      	beq.n	206388 <VectorD4+0x128>
  if (!iqIsFullI(iqp)) {
  2062be:	6a2b      	ldr	r3, [r5, #32]
  2062c0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  2062c2:	4293      	cmp	r3, r2
  2062c4:	d065      	beq.n	206392 <VectorD4+0x132>
    iqp->q_counter++;
  2062c6:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
  2062c8:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
  2062ca:	3201      	adds	r2, #1
    *iqp->q_wrptr++ = b;
  2062cc:	6229      	str	r1, [r5, #32]
    iqp->q_counter++;
  2062ce:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
  2062d0:	f883 8000 	strb.w	r8, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
  2062d4:	6a2a      	ldr	r2, [r5, #32]
  2062d6:	69eb      	ldr	r3, [r5, #28]
  2062d8:	429a      	cmp	r2, r3
  2062da:	d24a      	bcs.n	206372 <VectorD4+0x112>
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
  2062dc:	4839      	ldr	r0, [pc, #228]	; (2063c4 <VectorD4+0x164>)
  2062de:	f7fa f8af 	bl	200440 <chThdDequeueNextI.constprop.75>
  2062e2:	2300      	movs	r3, #0
  2062e4:	f383 8811 	msr	BASEPRI, r3
  2062e8:	e7c7      	b.n	20627a <VectorD4+0x1a>
  2062ea:	2320      	movs	r3, #32
  2062ec:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  2062f0:	f44f 7100 	mov.w	r1, #512	; 0x200
  2062f4:	4834      	ldr	r0, [pc, #208]	; (2063c8 <VectorD4+0x168>)
  2062f6:	f000 fd8b 	bl	206e10 <chEvtBroadcastFlagsI>
  2062fa:	2300      	movs	r3, #0
  2062fc:	f383 8811 	msr	BASEPRI, r3
  206300:	e7b9      	b.n	206276 <VectorD4+0x16>
    sts |= SD_OVERRUN_ERROR;
  206302:	f014 0f08 	tst.w	r4, #8
  206306:	bf0c      	ite	eq
  206308:	2100      	moveq	r1, #0
  20630a:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
  20630c:	07e3      	lsls	r3, r4, #31
  20630e:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  206312:	bf48      	it	mi
  206314:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
  206318:	07a0      	lsls	r0, r4, #30
    sts |= SD_FRAMING_ERROR;
  20631a:	bf48      	it	mi
  20631c:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
  206320:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
  206322:	bf48      	it	mi
  206324:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  206328:	f383 8811 	msr	BASEPRI, r3
  20632c:	4826      	ldr	r0, [pc, #152]	; (2063c8 <VectorD4+0x168>)
  20632e:	f000 fd6f 	bl	206e10 <chEvtBroadcastFlagsI>
  206332:	2300      	movs	r3, #0
  206334:	f383 8811 	msr	BASEPRI, r3
  206338:	e79b      	b.n	206272 <VectorD4+0x12>
  20633a:	2320      	movs	r3, #32
  20633c:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
  206340:	6cab      	ldr	r3, [r5, #72]	; 0x48
  206342:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  206344:	429a      	cmp	r2, r3
  206346:	d02d      	beq.n	2063a4 <VectorD4+0x144>
    oqp->q_counter++;
  206348:	6baa      	ldr	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
  20634a:	1c58      	adds	r0, r3, #1
    if (oqp->q_rdptr >= oqp->q_top) {
  20634c:	6c29      	ldr	r1, [r5, #64]	; 0x40
    oqp->q_counter++;
  20634e:	3201      	adds	r2, #1
    b = *oqp->q_rdptr++;
  206350:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
  206352:	4288      	cmp	r0, r1
    oqp->q_counter++;
  206354:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
  206356:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
  20635a:	d301      	bcc.n	206360 <VectorD4+0x100>
      oqp->q_rdptr = oqp->q_buffer;
  20635c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  20635e:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
  206360:	481a      	ldr	r0, [pc, #104]	; (2063cc <VectorD4+0x16c>)
  206362:	f7fa f86d 	bl	200440 <chThdDequeueNextI.constprop.75>
      u->TDR = b;
  206366:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  20636a:	2300      	movs	r3, #0
  20636c:	f383 8811 	msr	BASEPRI, r3
  206370:	e787      	b.n	206282 <VectorD4+0x22>
      iqp->q_wrptr = iqp->q_buffer;
  206372:	69ab      	ldr	r3, [r5, #24]
  206374:	622b      	str	r3, [r5, #32]
  206376:	e7b1      	b.n	2062dc <VectorD4+0x7c>
    if (oqIsEmptyI(&sdp->oqueue))
  206378:	6bab      	ldr	r3, [r5, #56]	; 0x38
  20637a:	2b00      	cmp	r3, #0
  20637c:	d08a      	beq.n	206294 <VectorD4+0x34>
  chEvtBroadcastFlagsI(esp, flags);
  20637e:	2110      	movs	r1, #16
  206380:	4811      	ldr	r0, [pc, #68]	; (2063c8 <VectorD4+0x168>)
  206382:	f000 fd45 	bl	206e10 <chEvtBroadcastFlagsI>
  206386:	e785      	b.n	206294 <VectorD4+0x34>
  206388:	2104      	movs	r1, #4
  20638a:	480f      	ldr	r0, [pc, #60]	; (2063c8 <VectorD4+0x168>)
  20638c:	f000 fd40 	bl	206e10 <chEvtBroadcastFlagsI>
  206390:	e795      	b.n	2062be <VectorD4+0x5e>
  if (!iqIsFullI(iqp)) {
  206392:	696a      	ldr	r2, [r5, #20]
  206394:	2a00      	cmp	r2, #0
  206396:	d096      	beq.n	2062c6 <VectorD4+0x66>
  206398:	f44f 6180 	mov.w	r1, #1024	; 0x400
  20639c:	480a      	ldr	r0, [pc, #40]	; (2063c8 <VectorD4+0x168>)
  20639e:	f000 fd37 	bl	206e10 <chEvtBroadcastFlagsI>
  2063a2:	e79e      	b.n	2062e2 <VectorD4+0x82>
  if (!oqIsEmptyI(oqp)) {
  2063a4:	6baa      	ldr	r2, [r5, #56]	; 0x38
  2063a6:	2a00      	cmp	r2, #0
  2063a8:	d0ce      	beq.n	206348 <VectorD4+0xe8>
  2063aa:	2108      	movs	r1, #8
  2063ac:	4806      	ldr	r0, [pc, #24]	; (2063c8 <VectorD4+0x168>)
  2063ae:	f000 fd2f 	bl	206e10 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  2063b2:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  2063b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  2063ba:	6033      	str	r3, [r6, #0]
  2063bc:	e7d5      	b.n	20636a <VectorD4+0x10a>
  2063be:	bf00      	nop
  2063c0:	20000800 	.word	0x20000800
  2063c4:	2000080c 	.word	0x2000080c
  2063c8:	20000804 	.word	0x20000804
  2063cc:	20000830 	.word	0x20000830

002063d0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
  2063d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
  2063d4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  2063d8:	6933      	ldr	r3, [r6, #16]
  2063da:	079b      	lsls	r3, r3, #30
  2063dc:	d403      	bmi.n	2063e6 <VectorB0+0x16>
}
  2063de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  2063e2:	f7fc b96d 	b.w	2026c0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
  2063e6:	2300      	movs	r3, #0
  2063e8:	2220      	movs	r2, #32
  2063ea:	6133      	str	r3, [r6, #16]
  2063ec:	f382 8811 	msr	BASEPRI, r2
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
  2063f0:	4c1e      	ldr	r4, [pc, #120]	; (20646c <VectorB0+0x9c>)
  2063f2:	46b1      	mov	r9, r6
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
  2063f4:	4698      	mov	r8, r3
  vtp = ch.vtlist.next;
  2063f6:	4626      	mov	r6, r4
  2063f8:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  2063fc:	689a      	ldr	r2, [r3, #8]
  2063fe:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
  206402:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
  206404:	1a47      	subs	r7, r0, r1
    if (nowdelta < vtp->delta) {
  206406:	4297      	cmp	r7, r2
  206408:	d31a      	bcc.n	206440 <VectorB0+0x70>
  20640a:	2520      	movs	r5, #32
  20640c:	e00a      	b.n	206424 <VectorB0+0x54>
  20640e:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
  206412:	6918      	ldr	r0, [r3, #16]
  206414:	4790      	blx	r2
  206416:	f385 8811 	msr	BASEPRI, r5
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
  20641a:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
  20641c:	689a      	ldr	r2, [r3, #8]
  20641e:	4297      	cmp	r7, r2
  206420:	d3ed      	bcc.n	2063fe <VectorB0+0x2e>
  206422:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  206424:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
  206426:	4411      	add	r1, r2
      nowdelta -= vtp->delta;
  206428:	1abf      	subs	r7, r7, r2
      fn = vtp->func;
  20642a:	68da      	ldr	r2, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  20642c:	42b0      	cmp	r0, r6
      ch.vtlist.lasttime += vtp->delta;
  20642e:	62a1      	str	r1, [r4, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  206430:	6046      	str	r6, [r0, #4]
      ch.vtlist.next = vtp->next;
  206432:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
  206434:	f8c3 800c 	str.w	r8, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  206438:	d1e9      	bne.n	20640e <VectorB0+0x3e>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
  20643a:	f8c9 800c 	str.w	r8, [r9, #12]
  20643e:	e7e6      	b.n	20640e <VectorB0+0x3e>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  206440:	69e2      	ldr	r2, [r4, #28]
  206442:	42b2      	cmp	r2, r6
  206444:	d00a      	beq.n	20645c <VectorB0+0x8c>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
  206446:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
  206448:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
  20644a:	1bcf      	subs	r7, r1, r7
  20644c:	6097      	str	r7, [r2, #8]
  return systime + (systime_t)interval;
  20644e:	689b      	ldr	r3, [r3, #8]
  206450:	2b02      	cmp	r3, #2
  206452:	bf2c      	ite	cs
  206454:	18c0      	addcs	r0, r0, r3
  206456:	3002      	addcc	r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  206458:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
  20645c:	2300      	movs	r3, #0
  20645e:	f383 8811 	msr	BASEPRI, r3
}
  206462:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  206466:	f7fc b92b 	b.w	2026c0 <_port_irq_epilogue>
  20646a:	bf00      	nop
  20646c:	20000860 	.word	0x20000860

00206470 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  206470:	4b3e      	ldr	r3, [pc, #248]	; (20656c <VectorE0+0xfc>)
OSAL_IRQ_HANDLER(VectorE0) {
  206472:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  206474:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
  206476:	681a      	ldr	r2, [r3, #0]
  206478:	4014      	ands	r4, r2
  20647a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  20647e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
  206480:	0562      	lsls	r2, r4, #21
  206482:	d510      	bpl.n	2064a6 <VectorE0+0x36>
  206484:	4a3a      	ldr	r2, [pc, #232]	; (206570 <VectorE0+0x100>)
  206486:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
  20648a:	b113      	cbz	r3, 206492 <VectorE0+0x22>
  20648c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
  206490:	4798      	blx	r3
  206492:	2320      	movs	r3, #32
  206494:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
  206498:	2100      	movs	r1, #0
  20649a:	4836      	ldr	r0, [pc, #216]	; (206574 <VectorE0+0x104>)
  20649c:	f000 fe88 	bl	2071b0 <chThdDequeueAllI>
  2064a0:	2300      	movs	r3, #0
  2064a2:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
  2064a6:	0523      	lsls	r3, r4, #20
  2064a8:	d510      	bpl.n	2064cc <VectorE0+0x5c>
  2064aa:	4a31      	ldr	r2, [pc, #196]	; (206570 <VectorE0+0x100>)
  2064ac:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
  2064b0:	b113      	cbz	r3, 2064b8 <VectorE0+0x48>
  2064b2:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
  2064b6:	4798      	blx	r3
  2064b8:	2320      	movs	r3, #32
  2064ba:	f383 8811 	msr	BASEPRI, r3
  2064be:	2100      	movs	r1, #0
  2064c0:	482d      	ldr	r0, [pc, #180]	; (206578 <VectorE0+0x108>)
  2064c2:	f000 fe75 	bl	2071b0 <chThdDequeueAllI>
  2064c6:	2300      	movs	r3, #0
  2064c8:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
  2064cc:	04e0      	lsls	r0, r4, #19
  2064ce:	d510      	bpl.n	2064f2 <VectorE0+0x82>
  2064d0:	4a27      	ldr	r2, [pc, #156]	; (206570 <VectorE0+0x100>)
  2064d2:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
  2064d6:	b113      	cbz	r3, 2064de <VectorE0+0x6e>
  2064d8:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
  2064dc:	4798      	blx	r3
  2064de:	2320      	movs	r3, #32
  2064e0:	f383 8811 	msr	BASEPRI, r3
  2064e4:	2100      	movs	r1, #0
  2064e6:	4825      	ldr	r0, [pc, #148]	; (20657c <VectorE0+0x10c>)
  2064e8:	f000 fe62 	bl	2071b0 <chThdDequeueAllI>
  2064ec:	2300      	movs	r3, #0
  2064ee:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
  2064f2:	04a1      	lsls	r1, r4, #18
  2064f4:	d510      	bpl.n	206518 <VectorE0+0xa8>
  2064f6:	4a1e      	ldr	r2, [pc, #120]	; (206570 <VectorE0+0x100>)
  2064f8:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
  2064fc:	b113      	cbz	r3, 206504 <VectorE0+0x94>
  2064fe:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
  206502:	4798      	blx	r3
  206504:	2320      	movs	r3, #32
  206506:	f383 8811 	msr	BASEPRI, r3
  20650a:	2100      	movs	r1, #0
  20650c:	481c      	ldr	r0, [pc, #112]	; (206580 <VectorE0+0x110>)
  20650e:	f000 fe4f 	bl	2071b0 <chThdDequeueAllI>
  206512:	2300      	movs	r3, #0
  206514:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
  206518:	0462      	lsls	r2, r4, #17
  20651a:	d510      	bpl.n	20653e <VectorE0+0xce>
  20651c:	4a14      	ldr	r2, [pc, #80]	; (206570 <VectorE0+0x100>)
  20651e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
  206522:	b113      	cbz	r3, 20652a <VectorE0+0xba>
  206524:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
  206528:	4798      	blx	r3
  20652a:	2320      	movs	r3, #32
  20652c:	f383 8811 	msr	BASEPRI, r3
  206530:	2100      	movs	r1, #0
  206532:	4814      	ldr	r0, [pc, #80]	; (206584 <VectorE0+0x114>)
  206534:	f000 fe3c 	bl	2071b0 <chThdDequeueAllI>
  206538:	2300      	movs	r3, #0
  20653a:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
  20653e:	0423      	lsls	r3, r4, #16
  206540:	d510      	bpl.n	206564 <VectorE0+0xf4>
  206542:	4a0b      	ldr	r2, [pc, #44]	; (206570 <VectorE0+0x100>)
  206544:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
  206548:	b113      	cbz	r3, 206550 <VectorE0+0xe0>
  20654a:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
  20654e:	4798      	blx	r3
  206550:	2320      	movs	r3, #32
  206552:	f383 8811 	msr	BASEPRI, r3
  206556:	2100      	movs	r1, #0
  206558:	480b      	ldr	r0, [pc, #44]	; (206588 <VectorE0+0x118>)
  20655a:	f000 fe29 	bl	2071b0 <chThdDequeueAllI>
  20655e:	2300      	movs	r3, #0
  206560:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
  206564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  206568:	f7fc b8aa 	b.w	2026c0 <_port_irq_epilogue>
  20656c:	40013c00 	.word	0x40013c00
  206570:	20001114 	.word	0x20001114
  206574:	200011b4 	.word	0x200011b4
  206578:	200011c4 	.word	0x200011c4
  20657c:	200011d4 	.word	0x200011d4
  206580:	200011e4 	.word	0x200011e4
  206584:	200011f4 	.word	0x200011f4
  206588:	20001204 	.word	0x20001204
  20658c:	00000000 	.word	0x00000000

00206590 <Vector9C>:
  pr = EXTI->PR;
  206590:	4b32      	ldr	r3, [pc, #200]	; (20665c <Vector9C+0xcc>)
OSAL_IRQ_HANDLER(Vector9C) {
  206592:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  206594:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
  206596:	681a      	ldr	r2, [r3, #0]
  206598:	4014      	ands	r4, r2
  20659a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
  20659e:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
  2065a0:	06a3      	lsls	r3, r4, #26
  2065a2:	d50e      	bpl.n	2065c2 <Vector9C+0x32>
  2065a4:	4a2e      	ldr	r2, [pc, #184]	; (206660 <Vector9C+0xd0>)
  2065a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
  2065a8:	b10b      	cbz	r3, 2065ae <Vector9C+0x1e>
  2065aa:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
  2065ac:	4798      	blx	r3
  2065ae:	2320      	movs	r3, #32
  2065b0:	f383 8811 	msr	BASEPRI, r3
  2065b4:	2100      	movs	r1, #0
  2065b6:	482b      	ldr	r0, [pc, #172]	; (206664 <Vector9C+0xd4>)
  2065b8:	f000 fdfa 	bl	2071b0 <chThdDequeueAllI>
  2065bc:	2300      	movs	r3, #0
  2065be:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
  2065c2:	0660      	lsls	r0, r4, #25
  2065c4:	d50e      	bpl.n	2065e4 <Vector9C+0x54>
  2065c6:	4a26      	ldr	r2, [pc, #152]	; (206660 <Vector9C+0xd0>)
  2065c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  2065ca:	b10b      	cbz	r3, 2065d0 <Vector9C+0x40>
  2065cc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
  2065ce:	4798      	blx	r3
  2065d0:	2320      	movs	r3, #32
  2065d2:	f383 8811 	msr	BASEPRI, r3
  2065d6:	2100      	movs	r1, #0
  2065d8:	4823      	ldr	r0, [pc, #140]	; (206668 <Vector9C+0xd8>)
  2065da:	f000 fde9 	bl	2071b0 <chThdDequeueAllI>
  2065de:	2300      	movs	r3, #0
  2065e0:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
  2065e4:	0621      	lsls	r1, r4, #24
  2065e6:	d50e      	bpl.n	206606 <Vector9C+0x76>
  2065e8:	4a1d      	ldr	r2, [pc, #116]	; (206660 <Vector9C+0xd0>)
  2065ea:	6f93      	ldr	r3, [r2, #120]	; 0x78
  2065ec:	b10b      	cbz	r3, 2065f2 <Vector9C+0x62>
  2065ee:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  2065f0:	4798      	blx	r3
  2065f2:	2320      	movs	r3, #32
  2065f4:	f383 8811 	msr	BASEPRI, r3
  2065f8:	2100      	movs	r1, #0
  2065fa:	481c      	ldr	r0, [pc, #112]	; (20666c <Vector9C+0xdc>)
  2065fc:	f000 fdd8 	bl	2071b0 <chThdDequeueAllI>
  206600:	2300      	movs	r3, #0
  206602:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
  206606:	05e2      	lsls	r2, r4, #23
  206608:	d510      	bpl.n	20662c <Vector9C+0x9c>
  20660a:	4a15      	ldr	r2, [pc, #84]	; (206660 <Vector9C+0xd0>)
  20660c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  206610:	b113      	cbz	r3, 206618 <Vector9C+0x88>
  206612:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
  206616:	4798      	blx	r3
  206618:	2320      	movs	r3, #32
  20661a:	f383 8811 	msr	BASEPRI, r3
  20661e:	2100      	movs	r1, #0
  206620:	4813      	ldr	r0, [pc, #76]	; (206670 <Vector9C+0xe0>)
  206622:	f000 fdc5 	bl	2071b0 <chThdDequeueAllI>
  206626:	2300      	movs	r3, #0
  206628:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
  20662c:	05a3      	lsls	r3, r4, #22
  20662e:	d510      	bpl.n	206652 <Vector9C+0xc2>
  206630:	4a0b      	ldr	r2, [pc, #44]	; (206660 <Vector9C+0xd0>)
  206632:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
  206636:	b113      	cbz	r3, 20663e <Vector9C+0xae>
  206638:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
  20663c:	4798      	blx	r3
  20663e:	2320      	movs	r3, #32
  206640:	f383 8811 	msr	BASEPRI, r3
  206644:	2100      	movs	r1, #0
  206646:	480b      	ldr	r0, [pc, #44]	; (206674 <Vector9C+0xe4>)
  206648:	f000 fdb2 	bl	2071b0 <chThdDequeueAllI>
  20664c:	2300      	movs	r3, #0
  20664e:	f383 8811 	msr	BASEPRI, r3
}
  206652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  206656:	f7fc b833 	b.w	2026c0 <_port_irq_epilogue>
  20665a:	bf00      	nop
  20665c:	40013c00 	.word	0x40013c00
  206660:	20001114 	.word	0x20001114
  206664:	20001164 	.word	0x20001164
  206668:	20001174 	.word	0x20001174
  20666c:	20001184 	.word	0x20001184
  206670:	20001194 	.word	0x20001194
  206674:	200011a4 	.word	0x200011a4
	...

00206680 <Vector68>:
  pr = EXTI->PR;
  206680:	4a0d      	ldr	r2, [pc, #52]	; (2066b8 <Vector68+0x38>)
OSAL_IRQ_HANDLER(Vector68) {
  206682:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  206684:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
  206686:	6811      	ldr	r1, [r2, #0]
  206688:	400b      	ands	r3, r1
  20668a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
  20668e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
  206690:	b173      	cbz	r3, 2066b0 <Vector68+0x30>
  206692:	4a0a      	ldr	r2, [pc, #40]	; (2066bc <Vector68+0x3c>)
  206694:	6c93      	ldr	r3, [r2, #72]	; 0x48
  206696:	b10b      	cbz	r3, 20669c <Vector68+0x1c>
  206698:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  20669a:	4798      	blx	r3
  20669c:	2320      	movs	r3, #32
  20669e:	f383 8811 	msr	BASEPRI, r3
  2066a2:	2100      	movs	r1, #0
  2066a4:	4806      	ldr	r0, [pc, #24]	; (2066c0 <Vector68+0x40>)
  2066a6:	f000 fd83 	bl	2071b0 <chThdDequeueAllI>
  2066aa:	2300      	movs	r3, #0
  2066ac:	f383 8811 	msr	BASEPRI, r3
}
  2066b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2066b4:	f7fc b804 	b.w	2026c0 <_port_irq_epilogue>
  2066b8:	40013c00 	.word	0x40013c00
  2066bc:	20001114 	.word	0x20001114
  2066c0:	20001154 	.word	0x20001154
	...

002066d0 <Vector64>:
  pr = EXTI->PR;
  2066d0:	4a0d      	ldr	r2, [pc, #52]	; (206708 <Vector64+0x38>)
OSAL_IRQ_HANDLER(Vector64) {
  2066d2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2066d4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
  2066d6:	6811      	ldr	r1, [r2, #0]
  2066d8:	400b      	ands	r3, r1
  2066da:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
  2066de:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
  2066e0:	b173      	cbz	r3, 206700 <Vector64+0x30>
  2066e2:	4a0a      	ldr	r2, [pc, #40]	; (20670c <Vector64+0x3c>)
  2066e4:	6b93      	ldr	r3, [r2, #56]	; 0x38
  2066e6:	b10b      	cbz	r3, 2066ec <Vector64+0x1c>
  2066e8:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
  2066ea:	4798      	blx	r3
  2066ec:	2320      	movs	r3, #32
  2066ee:	f383 8811 	msr	BASEPRI, r3
  2066f2:	2100      	movs	r1, #0
  2066f4:	4806      	ldr	r0, [pc, #24]	; (206710 <Vector64+0x40>)
  2066f6:	f000 fd5b 	bl	2071b0 <chThdDequeueAllI>
  2066fa:	2300      	movs	r3, #0
  2066fc:	f383 8811 	msr	BASEPRI, r3
}
  206700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  206704:	f7fb bfdc 	b.w	2026c0 <_port_irq_epilogue>
  206708:	40013c00 	.word	0x40013c00
  20670c:	20001114 	.word	0x20001114
  206710:	20001144 	.word	0x20001144
	...

00206720 <Vector60>:
  pr = EXTI->PR;
  206720:	4a0d      	ldr	r2, [pc, #52]	; (206758 <Vector60+0x38>)
OSAL_IRQ_HANDLER(Vector60) {
  206722:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  206724:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
  206726:	6811      	ldr	r1, [r2, #0]
  206728:	400b      	ands	r3, r1
  20672a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
  20672e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
  206730:	b173      	cbz	r3, 206750 <Vector60+0x30>
  206732:	4a0a      	ldr	r2, [pc, #40]	; (20675c <Vector60+0x3c>)
  206734:	6a93      	ldr	r3, [r2, #40]	; 0x28
  206736:	b10b      	cbz	r3, 20673c <Vector60+0x1c>
  206738:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  20673a:	4798      	blx	r3
  20673c:	2320      	movs	r3, #32
  20673e:	f383 8811 	msr	BASEPRI, r3
  206742:	2100      	movs	r1, #0
  206744:	4806      	ldr	r0, [pc, #24]	; (206760 <Vector60+0x40>)
  206746:	f000 fd33 	bl	2071b0 <chThdDequeueAllI>
  20674a:	2300      	movs	r3, #0
  20674c:	f383 8811 	msr	BASEPRI, r3
}
  206750:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  206754:	f7fb bfb4 	b.w	2026c0 <_port_irq_epilogue>
  206758:	40013c00 	.word	0x40013c00
  20675c:	20001114 	.word	0x20001114
  206760:	20001134 	.word	0x20001134
	...

00206770 <Vector5C>:
  pr = EXTI->PR;
  206770:	4a0d      	ldr	r2, [pc, #52]	; (2067a8 <Vector5C+0x38>)
OSAL_IRQ_HANDLER(Vector5C) {
  206772:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  206774:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
  206776:	6811      	ldr	r1, [r2, #0]
  206778:	400b      	ands	r3, r1
  20677a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
  20677e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
  206780:	b173      	cbz	r3, 2067a0 <Vector5C+0x30>
  206782:	4a0a      	ldr	r2, [pc, #40]	; (2067ac <Vector5C+0x3c>)
  206784:	6993      	ldr	r3, [r2, #24]
  206786:	b10b      	cbz	r3, 20678c <Vector5C+0x1c>
  206788:	69d0      	ldr	r0, [r2, #28]
  20678a:	4798      	blx	r3
  20678c:	2320      	movs	r3, #32
  20678e:	f383 8811 	msr	BASEPRI, r3
  206792:	2100      	movs	r1, #0
  206794:	4806      	ldr	r0, [pc, #24]	; (2067b0 <Vector5C+0x40>)
  206796:	f000 fd0b 	bl	2071b0 <chThdDequeueAllI>
  20679a:	2300      	movs	r3, #0
  20679c:	f383 8811 	msr	BASEPRI, r3
}
  2067a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2067a4:	f7fb bf8c 	b.w	2026c0 <_port_irq_epilogue>
  2067a8:	40013c00 	.word	0x40013c00
  2067ac:	20001114 	.word	0x20001114
  2067b0:	20001124 	.word	0x20001124
	...

002067c0 <Vector58>:
  pr = EXTI->PR;
  2067c0:	4a0d      	ldr	r2, [pc, #52]	; (2067f8 <Vector58+0x38>)
OSAL_IRQ_HANDLER(Vector58) {
  2067c2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2067c4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
  2067c6:	6811      	ldr	r1, [r2, #0]
  2067c8:	400b      	ands	r3, r1
  2067ca:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
  2067ce:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
  2067d0:	b173      	cbz	r3, 2067f0 <Vector58+0x30>
  2067d2:	4a0a      	ldr	r2, [pc, #40]	; (2067fc <Vector58+0x3c>)
  2067d4:	6893      	ldr	r3, [r2, #8]
  2067d6:	b10b      	cbz	r3, 2067dc <Vector58+0x1c>
  2067d8:	68d0      	ldr	r0, [r2, #12]
  2067da:	4798      	blx	r3
  2067dc:	2320      	movs	r3, #32
  2067de:	f383 8811 	msr	BASEPRI, r3
  2067e2:	2100      	movs	r1, #0
  2067e4:	4805      	ldr	r0, [pc, #20]	; (2067fc <Vector58+0x3c>)
  2067e6:	f000 fce3 	bl	2071b0 <chThdDequeueAllI>
  2067ea:	2300      	movs	r3, #0
  2067ec:	f383 8811 	msr	BASEPRI, r3
}
  2067f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2067f4:	f7fb bf64 	b.w	2026c0 <_port_irq_epilogue>
  2067f8:	40013c00 	.word	0x40013c00
  2067fc:	20001114 	.word	0x20001114

00206800 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  206800:	b5f0      	push	{r4, r5, r6, r7, lr}
  206802:	4f13      	ldr	r7, [pc, #76]	; (206850 <__init_ram_areas+0x50>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  206804:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  206806:	4d13      	ldr	r5, [pc, #76]	; (206854 <__init_ram_areas+0x54>)
  206808:	f107 0e70 	add.w	lr, r7, #112	; 0x70
  20680c:	4c12      	ldr	r4, [pc, #72]	; (206858 <__init_ram_areas+0x58>)
  20680e:	4b13      	ldr	r3, [pc, #76]	; (20685c <__init_ram_areas+0x5c>)
  206810:	4913      	ldr	r1, [pc, #76]	; (206860 <__init_ram_areas+0x60>)
    while (p < rap->clear_area) {
  206812:	429c      	cmp	r4, r3
  206814:	d911      	bls.n	20683a <__init_ram_areas+0x3a>
  206816:	3904      	subs	r1, #4
  206818:	461a      	mov	r2, r3
      *p = *tp;
  20681a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20681e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  206822:	4294      	cmp	r4, r2
  206824:	d8f9      	bhi.n	20681a <__init_ram_areas+0x1a>
  206826:	43da      	mvns	r2, r3
  206828:	4414      	add	r4, r2
  20682a:	f024 0403 	bic.w	r4, r4, #3
  20682e:	3404      	adds	r4, #4
  206830:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  206832:	429d      	cmp	r5, r3
  206834:	d903      	bls.n	20683e <__init_ram_areas+0x3e>
      *p = 0;
  206836:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20683a:	429d      	cmp	r5, r3
  20683c:	d8fb      	bhi.n	206836 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  20683e:	4577      	cmp	r7, lr
  206840:	d004      	beq.n	20684c <__init_ram_areas+0x4c>
  206842:	f107 0110 	add.w	r1, r7, #16
  206846:	3710      	adds	r7, #16
  206848:	c93a      	ldmia	r1, {r1, r3, r4, r5}
  20684a:	e7e2      	b.n	206812 <__init_ram_areas+0x12>
  20684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20684e:	bf00      	nop
  206850:	08009dd0 	.word	0x08009dd0
  206854:	2002008c 	.word	0x2002008c
  206858:	2002008c 	.word	0x2002008c
  20685c:	2002008c 	.word	0x2002008c
  206860:	08009ff4 	.word	0x08009ff4
	...

00206870 <__default_exit>:
void __default_exit(void) {
  206870:	e7fe      	b.n	206870 <__default_exit>
  206872:	bf00      	nop
	...

00206880 <__late_init>:
void __late_init(void) {}
  206880:	4770      	bx	lr
  206882:	bf00      	nop
	...

00206890 <__core_init>:
void __core_init(void) {
  206890:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  206892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  206896:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20689a:	4c1d      	ldr	r4, [pc, #116]	; (206910 <__core_init+0x80>)
  20689c:	2200      	movs	r2, #0
  20689e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  2068a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2068a6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  2068aa:	6963      	ldr	r3, [r4, #20]
  2068ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2068b0:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  2068b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2068b6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  2068ba:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2068be:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  2068c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  2068c6:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  2068ca:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2068ce:	f3c3 334e 	ubfx	r3, r3, #13, #15
  2068d2:	07b7      	lsls	r7, r6, #30
  2068d4:	015d      	lsls	r5, r3, #5
  2068d6:	ea05 000e 	and.w	r0, r5, lr
  2068da:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2068dc:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2068de:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  2068e2:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2068e4:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  2068e8:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
  2068ec:	1c53      	adds	r3, r2, #1
  2068ee:	d1f6      	bne.n	2068de <__core_init+0x4e>
  2068f0:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
  2068f2:	f115 0f20 	cmn.w	r5, #32
  2068f6:	d1ee      	bne.n	2068d6 <__core_init+0x46>
  2068f8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  2068fc:	6963      	ldr	r3, [r4, #20]
  2068fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  206902:	6163      	str	r3, [r4, #20]
  206904:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  206908:	f3bf 8f6f 	isb	sy
  20690c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20690e:	bf00      	nop
  206910:	e000ed00 	.word	0xe000ed00
	...

00206920 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
  206920:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  206922:	2320      	movs	r3, #32
  206924:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  206928:	4d0d      	ldr	r5, [pc, #52]	; (206960 <chCoreAllocAlignedWithOffset+0x40>)
  20692a:	1e4e      	subs	r6, r1, #1
  size = MEM_ALIGN_NEXT(size, align);
  20692c:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  20692e:	682f      	ldr	r7, [r5, #0]
  size = MEM_ALIGN_NEXT(size, align);
  206930:	1983      	adds	r3, r0, r6
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  206932:	686c      	ldr	r4, [r5, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  206934:	18b8      	adds	r0, r7, r2
  size = MEM_ALIGN_NEXT(size, align);
  206936:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  206938:	4430      	add	r0, r6
  20693a:	4008      	ands	r0, r1
  next = p + size;
  20693c:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  20693e:	42a3      	cmp	r3, r4
  206940:	d807      	bhi.n	206952 <chCoreAllocAlignedWithOffset+0x32>
  206942:	429f      	cmp	r7, r3
  206944:	d805      	bhi.n	206952 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
  206946:	602b      	str	r3, [r5, #0]
  206948:	2300      	movs	r3, #0
  20694a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
  20694e:	bcf0      	pop	{r4, r5, r6, r7}
  206950:	4770      	bx	lr
    return NULL;
  206952:	2000      	movs	r0, #0
  206954:	2300      	movs	r3, #0
  206956:	f383 8811 	msr	BASEPRI, r3
}
  20695a:	bcf0      	pop	{r4, r5, r6, r7}
  20695c:	4770      	bx	lr
  20695e:	bf00      	nop
  206960:	200012f0 	.word	0x200012f0
	...

00206970 <wakeup.lto_priv.204>:
  206970:	2320      	movs	r3, #32
  206972:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  206976:	f890 3020 	ldrb.w	r3, [r0, #32]
  20697a:	2b07      	cmp	r3, #7
  20697c:	d80e      	bhi.n	20699c <wakeup.lto_priv.204+0x2c>
  20697e:	e8df f003 	tbb	[pc, r3]
  206982:	0d28      	.short	0x0d28
  206984:	0408240d 	.word	0x0408240d
  206988:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20698a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20698c:	6893      	ldr	r3, [r2, #8]
  20698e:	3301      	adds	r3, #1
  206990:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  206992:	e890 000c 	ldmia.w	r0, {r2, r3}
  206996:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  206998:	6802      	ldr	r2, [r0, #0]
  20699a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20699c:	2200      	movs	r2, #0
  20699e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  2069a0:	4b0e      	ldr	r3, [pc, #56]	; (2069dc <wakeup.lto_priv.204+0x6c>)
  tp->state = CH_STATE_READY;
  2069a2:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  2069a6:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  2069a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  2069ac:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  2069ae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2069b0:	689a      	ldr	r2, [r3, #8]
  2069b2:	428a      	cmp	r2, r1
  2069b4:	d2fb      	bcs.n	2069ae <wakeup.lto_priv.204+0x3e>
  tp->queue.prev             = cp->queue.prev;
  2069b6:	685a      	ldr	r2, [r3, #4]
  2069b8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  2069ba:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  2069bc:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  2069be:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2069c0:	6058      	str	r0, [r3, #4]
  2069c2:	f381 8811 	msr	BASEPRI, r1
}
  2069c6:	bc10      	pop	{r4}
  2069c8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  2069ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
  2069cc:	2200      	movs	r2, #0
  2069ce:	601a      	str	r2, [r3, #0]
  2069d0:	e7e4      	b.n	20699c <wakeup.lto_priv.204+0x2c>
  2069d2:	2300      	movs	r3, #0
  2069d4:	f383 8811 	msr	BASEPRI, r3
  2069d8:	4770      	bx	lr
  2069da:	bf00      	nop
  2069dc:	20000860 	.word	0x20000860

002069e0 <_idle_thread.lto_priv.87>:
static void _idle_thread(void *p) {
  2069e0:	e7fe      	b.n	2069e0 <_idle_thread.lto_priv.87>
  2069e2:	bf00      	nop
	...

002069f0 <chEvtAddEvents>:
  2069f0:	2320      	movs	r3, #32
  2069f2:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
  2069f6:	4b04      	ldr	r3, [pc, #16]	; (206a08 <chEvtAddEvents+0x18>)
  2069f8:	2200      	movs	r2, #0
  2069fa:	699b      	ldr	r3, [r3, #24]
  2069fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
  2069fe:	4308      	orrs	r0, r1
  206a00:	6358      	str	r0, [r3, #52]	; 0x34
  206a02:	f382 8811 	msr	BASEPRI, r2
}
  206a06:	4770      	bx	lr
  206a08:	20000860 	.word	0x20000860
  206a0c:	00000000 	.word	0x00000000

00206a10 <chEvtUnregister>:
  206a10:	2320      	movs	r3, #32
  206a12:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
  206a16:	4602      	mov	r2, r0
  206a18:	e002      	b.n	206a20 <chEvtUnregister+0x10>
    if (p->next == elp) {
  206a1a:	428b      	cmp	r3, r1
  206a1c:	d007      	beq.n	206a2e <chEvtUnregister+0x1e>
  206a1e:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
  206a20:	6813      	ldr	r3, [r2, #0]
  206a22:	4298      	cmp	r0, r3
  206a24:	d1f9      	bne.n	206a1a <chEvtUnregister+0xa>
  206a26:	2300      	movs	r3, #0
  206a28:	f383 8811 	msr	BASEPRI, r3
  206a2c:	4770      	bx	lr
      p->next = elp->next;
  206a2e:	680b      	ldr	r3, [r1, #0]
  206a30:	6013      	str	r3, [r2, #0]
  206a32:	2300      	movs	r3, #0
  206a34:	f383 8811 	msr	BASEPRI, r3
  206a38:	4770      	bx	lr
  206a3a:	bf00      	nop
  206a3c:	0000      	movs	r0, r0
	...

00206a40 <chTMStopMeasurementX>:
  return DWT->CYCCNT;
  206a40:	4b0e      	ldr	r3, [pc, #56]	; (206a7c <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  206a42:	6882      	ldr	r2, [r0, #8]
  206a44:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  206a46:	490e      	ldr	r1, [pc, #56]	; (206a80 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  206a48:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  206a4a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  206a4c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  206a4e:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  tmp->n++;
  206a50:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  206a52:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  206a54:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  206a56:	6083      	str	r3, [r0, #8]
  tmp->n++;
  206a58:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  206a5a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  206a5e:	18e4      	adds	r4, r4, r3
  206a60:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  206a64:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  206a66:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  206a68:	bf88      	it	hi
  206a6a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  206a6c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  206a6e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  206a72:	bf38      	it	cc
  206a74:	6003      	strcc	r3, [r0, #0]
}
  206a76:	bc30      	pop	{r4, r5}
  206a78:	4770      	bx	lr
  206a7a:	bf00      	nop
  206a7c:	e0001000 	.word	0xe0001000
  206a80:	20000860 	.word	0x20000860
	...

00206a90 <chThdYield>:
void chThdYield(void) {
  206a90:	b570      	push	{r4, r5, r6, lr}
  206a92:	2320      	movs	r3, #32
  206a94:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
  206a98:	4a12      	ldr	r2, [pc, #72]	; (206ae4 <chThdYield+0x54>)
  206a9a:	6810      	ldr	r0, [r2, #0]
  206a9c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
  206a9e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
  206aa0:	68a1      	ldr	r1, [r4, #8]
  if (chSchCanYieldS()) {
  206aa2:	428b      	cmp	r3, r1
  206aa4:	d203      	bcs.n	206aae <chThdYield+0x1e>
  206aa6:	2300      	movs	r3, #0
  206aa8:	f383 8811 	msr	BASEPRI, r3
  206aac:	bd70      	pop	{r4, r5, r6, pc}
  tqp->next             = tp->queue.next;
  206aae:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  206ab0:	2601      	movs	r6, #1
  tp->state = CH_STATE_READY;
  206ab2:	2500      	movs	r5, #0
  tqp->next->queue.prev = (thread_t *)tqp;
  206ab4:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
  206ab6:	6013      	str	r3, [r2, #0]
  currp->state = CH_STATE_CURRENT;
  206ab8:	f880 6020 	strb.w	r6, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  206abc:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
  206abe:	f884 5020 	strb.w	r5, [r4, #32]
  206ac2:	e000      	b.n	206ac6 <chThdYield+0x36>
  206ac4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  206ac6:	689a      	ldr	r2, [r3, #8]
  206ac8:	4291      	cmp	r1, r2
  206aca:	d9fb      	bls.n	206ac4 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
  206acc:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  206ace:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  206ad0:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  206ad2:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  206ad4:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  206ad6:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
  206ad8:	f7f9 fc02 	bl	2002e0 <_port_switch>
  206adc:	2300      	movs	r3, #0
  206ade:	f383 8811 	msr	BASEPRI, r3
  206ae2:	bd70      	pop	{r4, r5, r6, pc}
  206ae4:	20000860 	.word	0x20000860
	...

00206af0 <chThdCreateSuspendedI>:
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
  206af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  tp = (thread_t *)((uint8_t *)tdp->wend -
  206af2:	6883      	ldr	r3, [r0, #8]
  tp->flags     = CH_FLAG_MODE_STATIC;
  206af4:	2400      	movs	r4, #0
  tp->wabase = tdp->wbase;
  206af6:	6846      	ldr	r6, [r0, #4]
  tp->state     = CH_STATE_WTSTART;
  206af8:	f04f 0c02 	mov.w	ip, #2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  206afc:	6901      	ldr	r1, [r0, #16]
  206afe:	f1a3 056c 	sub.w	r5, r3, #108	; 0x6c
  tp->wabase = tdp->wbase;
  206b02:	f843 6c2c 	str.w	r6, [r3, #-44]
  tp->refs      = (trefs_t)1;
  206b06:	f04f 0e01 	mov.w	lr, #1
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  206b0a:	6946      	ldr	r6, [r0, #20]
  list_init(&tp->waiting);
  206b0c:	f1a3 0720 	sub.w	r7, r3, #32
  REG_INSERT(tp);
  206b10:	4a17      	ldr	r2, [pc, #92]	; (206b70 <chThdCreateSuspendedI+0x80>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  206b12:	f843 6c68 	str.w	r6, [r3, #-104]
  return _thread_init(tp, tdp->name, tdp->prio);
  206b16:	6806      	ldr	r6, [r0, #0]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  206b18:	f843 1c6c 	str.w	r1, [r3, #-108]
  tp = (thread_t *)((uint8_t *)tdp->wend -
  206b1c:	f1a3 0148 	sub.w	r1, r3, #72	; 0x48
  return _thread_init(tp, tdp->name, tdp->prio);
  206b20:	68c0      	ldr	r0, [r0, #12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  206b22:	f843 5c3c 	str.w	r5, [r3, #-60]
  queue_init(&tp->msgqueue);
  206b26:	f1a3 051c 	sub.w	r5, r3, #28
  tp->refs      = (trefs_t)1;
  206b2a:	f803 ec26 	strb.w	lr, [r3, #-38]
  tp->state     = CH_STATE_WTSTART;
  206b2e:	f803 cc28 	strb.w	ip, [r3, #-40]
  tp->flags     = CH_FLAG_MODE_STATIC;
  206b32:	f803 4c27 	strb.w	r4, [r3, #-39]
  REG_INSERT(tp);
  206b36:	f843 2c38 	str.w	r2, [r3, #-56]
  tp->name      = name;
  206b3a:	f843 6c30 	str.w	r6, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  206b3e:	f8df e034 	ldr.w	lr, [pc, #52]	; 206b74 <chThdCreateSuspendedI+0x84>
  REG_INSERT(tp);
  206b42:	6956      	ldr	r6, [r2, #20]
  tp->prio      = prio;
  206b44:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
  206b48:	f843 0c0c 	str.w	r0, [r3, #-12]
}
  206b4c:	4608      	mov	r0, r1
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  206b4e:	f843 ec4c 	str.w	lr, [r3, #-76]
  tp->mtxlist   = NULL;
  206b52:	f843 4c10 	str.w	r4, [r3, #-16]
  tp->epending  = (eventmask_t)0;
  206b56:	f843 4c14 	str.w	r4, [r3, #-20]
  REG_INSERT(tp);
  206b5a:	f843 6c34 	str.w	r6, [r3, #-52]
  206b5e:	6131      	str	r1, [r6, #16]
  206b60:	6151      	str	r1, [r2, #20]
  tlp->next = (thread_t *)tlp;
  206b62:	f843 7c20 	str.w	r7, [r3, #-32]
  tqp->next = (thread_t *)tqp;
  206b66:	f843 5c1c 	str.w	r5, [r3, #-28]
  tqp->prev = (thread_t *)tqp;
  206b6a:	f843 5c18 	str.w	r5, [r3, #-24]
}
  206b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  206b70:	20000860 	.word	0x20000860
  206b74:	002002f1 	.word	0x002002f1
	...

00206b80 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
  206b80:	4a0e      	ldr	r2, [pc, #56]	; (206bbc <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  206b82:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  206b84:	6810      	ldr	r0, [r2, #0]
void chSchDoRescheduleAhead(void) {
  206b86:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  206b88:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  206b8a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  206b8c:	6994      	ldr	r4, [r2, #24]
  206b8e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  206b90:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  206b92:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  206b96:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  206b9a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  206b9c:	6190      	str	r0, [r2, #24]
  206b9e:	e000      	b.n	206ba2 <chSchDoReschedule+0x22>
  206ba0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  206ba2:	689a      	ldr	r2, [r3, #8]
  206ba4:	4291      	cmp	r1, r2
  206ba6:	d3fb      	bcc.n	206ba0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  206ba8:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  206baa:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  206bac:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  206bae:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  206bb0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  206bb2:	605c      	str	r4, [r3, #4]
}
  206bb4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  206bb6:	f7f9 bb93 	b.w	2002e0 <_port_switch>
  206bba:	bf00      	nop
  206bbc:	20000860 	.word	0x20000860

00206bc0 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
  206bc0:	4b04      	ldr	r3, [pc, #16]	; (206bd4 <chSchRescheduleS+0x14>)
  206bc2:	681a      	ldr	r2, [r3, #0]
  206bc4:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
  206bc6:	6892      	ldr	r2, [r2, #8]
  206bc8:	689b      	ldr	r3, [r3, #8]
  206bca:	429a      	cmp	r2, r3
  206bcc:	d800      	bhi.n	206bd0 <chSchRescheduleS+0x10>
  206bce:	4770      	bx	lr
    chSchDoRescheduleAhead();
  206bd0:	f7ff bfd6 	b.w	206b80 <chSchDoReschedule>
  206bd4:	20000860 	.word	0x20000860
	...

00206be0 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
  206be0:	b510      	push	{r4, lr}
  206be2:	2320      	movs	r3, #32
  206be4:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
  206be8:	4b08      	ldr	r3, [pc, #32]	; (206c0c <chThdSetPriority+0x2c>)
  206bea:	699b      	ldr	r3, [r3, #24]
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
  206bec:	6899      	ldr	r1, [r3, #8]
  oldprio = currp->realprio;
  206bee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
  206bf0:	4281      	cmp	r1, r0
  206bf2:	d309      	bcc.n	206c08 <chThdSetPriority+0x28>
  206bf4:	428c      	cmp	r4, r1
  206bf6:	d007      	beq.n	206c08 <chThdSetPriority+0x28>
  currp->realprio = newprio;
  206bf8:	63d8      	str	r0, [r3, #60]	; 0x3c
  chSchRescheduleS();
  206bfa:	f7ff ffe1 	bl	206bc0 <chSchRescheduleS>
  206bfe:	2300      	movs	r3, #0
  206c00:	f383 8811 	msr	BASEPRI, r3
}
  206c04:	4620      	mov	r0, r4
  206c06:	bd10      	pop	{r4, pc}
    currp->prio = newprio;
  206c08:	6098      	str	r0, [r3, #8]
  206c0a:	e7f5      	b.n	206bf8 <chThdSetPriority+0x18>
  206c0c:	20000860 	.word	0x20000860

00206c10 <chSchWakeupS>:
  thread_t *otp = currp;
  206c10:	4b16      	ldr	r3, [pc, #88]	; (206c6c <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  206c12:	b4f0      	push	{r4, r5, r6, r7}
  thread_t *otp = currp;
  206c14:	699d      	ldr	r5, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  206c16:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
  206c18:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
  206c1a:	6881      	ldr	r1, [r0, #8]
  206c1c:	68a8      	ldr	r0, [r5, #8]
  206c1e:	4281      	cmp	r1, r0
  206c20:	d80d      	bhi.n	206c3e <chSchWakeupS+0x2e>
  tp->state = CH_STATE_READY;
  206c22:	2200      	movs	r2, #0
  206c24:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
  206c28:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  206c2a:	689a      	ldr	r2, [r3, #8]
  206c2c:	4291      	cmp	r1, r2
  206c2e:	d9fb      	bls.n	206c28 <chSchWakeupS+0x18>
  tp->queue.prev             = cp->queue.prev;
  206c30:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
  206c32:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  206c34:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  206c36:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  206c38:	605c      	str	r4, [r3, #4]
}
  206c3a:	bcf0      	pop	{r4, r5, r6, r7}
  206c3c:	4770      	bx	lr
  tp->state = CH_STATE_READY;
  206c3e:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
  206c40:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
  206c42:	f885 1020 	strb.w	r1, [r5, #32]
    cp = cp->queue.next;
  206c46:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
  206c48:	6891      	ldr	r1, [r2, #8]
  206c4a:	4288      	cmp	r0, r1
  206c4c:	d9fb      	bls.n	206c46 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
  206c4e:	6856      	ldr	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  206c50:	2701      	movs	r7, #1
  tp->queue.next             = cp;
  206c52:	602a      	str	r2, [r5, #0]
    chSysSwitch(ntp, otp);
  206c54:	4629      	mov	r1, r5
  tp->queue.prev             = cp->queue.prev;
  206c56:	606e      	str	r6, [r5, #4]
    chSysSwitch(ntp, otp);
  206c58:	4620      	mov	r0, r4
  tp->queue.prev->queue.next = tp;
  206c5a:	6035      	str	r5, [r6, #0]
  cp->queue.prev             = tp;
  206c5c:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  206c5e:	f884 7020 	strb.w	r7, [r4, #32]
    currp = ntp;
  206c62:	619c      	str	r4, [r3, #24]
}
  206c64:	bcf0      	pop	{r4, r5, r6, r7}
    chSysSwitch(ntp, otp);
  206c66:	f7f9 bb3b 	b.w	2002e0 <_port_switch>
  206c6a:	bf00      	nop
  206c6c:	20000860 	.word	0x20000860

00206c70 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
  206c70:	b508      	push	{r3, lr}
  206c72:	2320      	movs	r3, #32
  206c74:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
  206c78:	6883      	ldr	r3, [r0, #8]
  206c7a:	3301      	adds	r3, #1
  206c7c:	2b00      	cmp	r3, #0
  206c7e:	6083      	str	r3, [r0, #8]
  206c80:	dd03      	ble.n	206c8a <chSemSignal+0x1a>
  206c82:	2300      	movs	r3, #0
  206c84:	f383 8811 	msr	BASEPRI, r3
  206c88:	bd08      	pop	{r3, pc}
  206c8a:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
  206c8c:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
  206c8e:	2100      	movs	r1, #0
  tqp->next             = tp->queue.next;
  206c90:	6802      	ldr	r2, [r0, #0]
  206c92:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  206c94:	6053      	str	r3, [r2, #4]
  206c96:	f7ff ffbb 	bl	206c10 <chSchWakeupS>
  206c9a:	2300      	movs	r3, #0
  206c9c:	f383 8811 	msr	BASEPRI, r3
  206ca0:	bd08      	pop	{r3, pc}
  206ca2:	bf00      	nop
	...

00206cb0 <chSchGoSleepS>:
  thread_t *otp = currp;
  206cb0:	4b08      	ldr	r3, [pc, #32]	; (206cd4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  206cb2:	681a      	ldr	r2, [r3, #0]
  206cb4:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  206cb6:	b430      	push	{r4, r5}
  otp->state = newstate;
  206cb8:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  206cbc:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  206cbe:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  206cc0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  206cc2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  206cc4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  206cc6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  206cca:	619a      	str	r2, [r3, #24]
}
  206ccc:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  206cce:	f7f9 bb07 	b.w	2002e0 <_port_switch>
  206cd2:	bf00      	nop
  206cd4:	20000860 	.word	0x20000860
	...

00206ce0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
  206ce0:	b538      	push	{r3, r4, r5, lr}
  206ce2:	2320      	movs	r3, #32
  206ce4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
  206ce8:	4c0c      	ldr	r4, [pc, #48]	; (206d1c <chMsgWait+0x3c>)
  206cea:	69a2      	ldr	r2, [r4, #24]
  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
  206cec:	4613      	mov	r3, r2
  206cee:	f853 0f2c 	ldr.w	r0, [r3, #44]!
  206cf2:	4298      	cmp	r0, r3
  206cf4:	d009      	beq.n	206d0a <chMsgWait+0x2a>
  206cf6:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
  206cf8:	250d      	movs	r5, #13
  206cfa:	2400      	movs	r4, #0
  206cfc:	62d1      	str	r1, [r2, #44]	; 0x2c
  tqp->next->queue.prev = (thread_t *)tqp;
  206cfe:	604b      	str	r3, [r1, #4]
  206d00:	f880 5020 	strb.w	r5, [r0, #32]
  206d04:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  return tp;
}
  206d08:	bd38      	pop	{r3, r4, r5, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
  206d0a:	200e      	movs	r0, #14
  206d0c:	f7ff ffd0 	bl	206cb0 <chSchGoSleepS>
  206d10:	69a2      	ldr	r2, [r4, #24]
  206d12:	f102 032c 	add.w	r3, r2, #44	; 0x2c
  206d16:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  206d18:	e7ed      	b.n	206cf6 <chMsgWait+0x16>
  206d1a:	bf00      	nop
  206d1c:	20000860 	.word	0x20000860

00206d20 <chSemWait>:
  206d20:	2320      	movs	r3, #32
  206d22:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
  206d26:	6883      	ldr	r3, [r0, #8]
  206d28:	3b01      	subs	r3, #1
  206d2a:	2b00      	cmp	r3, #0
  206d2c:	6083      	str	r3, [r0, #8]
  206d2e:	db04      	blt.n	206d3a <chSemWait+0x1a>
  return MSG_OK;
  206d30:	2000      	movs	r0, #0
  206d32:	2300      	movs	r3, #0
  206d34:	f383 8811 	msr	BASEPRI, r3
}
  206d38:	4770      	bx	lr
msg_t chSemWait(semaphore_t *sp) {
  206d3a:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
  206d3c:	4c08      	ldr	r4, [pc, #32]	; (206d60 <chSemWait+0x40>)
  206d3e:	4603      	mov	r3, r0
    chSchGoSleepS(CH_STATE_WTSEM);
  206d40:	2005      	movs	r0, #5
    currp->u.wtsemp = sp;
  206d42:	69a2      	ldr	r2, [r4, #24]
  206d44:	6253      	str	r3, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
  206d46:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = (thread_t *)tqp;
  206d48:	6013      	str	r3, [r2, #0]
  tp->queue.prev             = tqp->prev;
  206d4a:	6051      	str	r1, [r2, #4]
  tp->queue.prev->queue.next = tp;
  206d4c:	600a      	str	r2, [r1, #0]
  tqp->prev                  = tp;
  206d4e:	605a      	str	r2, [r3, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
  206d50:	f7ff ffae 	bl	206cb0 <chSchGoSleepS>
    return currp->u.rdymsg;
  206d54:	69a3      	ldr	r3, [r4, #24]
  206d56:	6a58      	ldr	r0, [r3, #36]	; 0x24
  206d58:	2300      	movs	r3, #0
  206d5a:	f383 8811 	msr	BASEPRI, r3
}
  206d5e:	bd10      	pop	{r4, pc}
  206d60:	20000860 	.word	0x20000860
	...

00206d70 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  206d70:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  206d72:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  206d74:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  206d76:	4b08      	ldr	r3, [pc, #32]	; (206d98 <chSchReadyI+0x28>)
  206d78:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  206d7a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  206d7e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  206d80:	689a      	ldr	r2, [r3, #8]
  206d82:	428a      	cmp	r2, r1
  206d84:	d2fb      	bcs.n	206d7e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  206d86:	685a      	ldr	r2, [r3, #4]
}
  206d88:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  206d8a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  206d8c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  206d8e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  206d90:	605c      	str	r4, [r3, #4]
}
  206d92:	bc10      	pop	{r4}
  206d94:	4770      	bx	lr
  206d96:	bf00      	nop
  206d98:	20000860 	.word	0x20000860
  206d9c:	00000000 	.word	0x00000000

00206da0 <chMsgSend>:
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  206da0:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
  206da2:	4c0e      	ldr	r4, [pc, #56]	; (206ddc <chMsgSend+0x3c>)
  206da4:	2220      	movs	r2, #32
  206da6:	69a4      	ldr	r4, [r4, #24]
  206da8:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
  206dac:	6261      	str	r1, [r4, #36]	; 0x24
  msg_insert(ctp, &tp->msgqueue);
  206dae:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.prev             = tqp->prev;
  206db2:	6b02      	ldr	r2, [r0, #48]	; 0x30
  206db4:	e884 0006 	stmia.w	r4, {r1, r2}
  tp->queue.prev->queue.next = tp;
  206db8:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
  206dba:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
  206dbe:	6304      	str	r4, [r0, #48]	; 0x30
  206dc0:	2a0e      	cmp	r2, #14
  206dc2:	d007      	beq.n	206dd4 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
  206dc4:	200c      	movs	r0, #12
  206dc6:	f7ff ff73 	bl	206cb0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
  206dca:	6a60      	ldr	r0, [r4, #36]	; 0x24
  206dcc:	2300      	movs	r3, #0
  206dce:	f383 8811 	msr	BASEPRI, r3
}
  206dd2:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
  206dd4:	f7ff ffcc 	bl	206d70 <chSchReadyI>
  206dd8:	e7f4      	b.n	206dc4 <chMsgSend+0x24>
  206dda:	bf00      	nop
  206ddc:	20000860 	.word	0x20000860

00206de0 <chEvtSignalI>:
  tp->epending |= events;
  206de0:	6b42      	ldr	r2, [r0, #52]	; 0x34
void chEvtSignalI(thread_t *tp, eventmask_t events) {
  206de2:	4603      	mov	r3, r0
  if (((tp->state == CH_STATE_WTOREVT) &&
  206de4:	f890 0020 	ldrb.w	r0, [r0, #32]
  tp->epending |= events;
  206de8:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
  206dea:	280a      	cmp	r0, #10
  tp->epending |= events;
  206dec:	6359      	str	r1, [r3, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  206dee:	d00a      	beq.n	206e06 <chEvtSignalI+0x26>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  206df0:	280b      	cmp	r0, #11
  206df2:	d000      	beq.n	206df6 <chEvtSignalI+0x16>
  206df4:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  206df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  206df8:	438a      	bics	r2, r1
  206dfa:	d1fb      	bne.n	206df4 <chEvtSignalI+0x14>
    tp->u.rdymsg = MSG_OK;
  206dfc:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  206dfe:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
  206e00:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  206e02:	f7ff bfb5 	b.w	206d70 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  206e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  206e08:	4211      	tst	r1, r2
  206e0a:	d1f7      	bne.n	206dfc <chEvtSignalI+0x1c>
  206e0c:	4770      	bx	lr
  206e0e:	bf00      	nop

00206e10 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  206e10:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
  206e12:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
  206e14:	42a0      	cmp	r0, r4
  206e16:	d00f      	beq.n	206e38 <chEvtBroadcastFlagsI+0x28>
  206e18:	4606      	mov	r6, r0
  206e1a:	460d      	mov	r5, r1
    elp->flags |= flags;
  206e1c:	68e3      	ldr	r3, [r4, #12]
  206e1e:	432b      	orrs	r3, r5
  206e20:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  206e22:	b115      	cbz	r5, 206e2a <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  206e24:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  206e26:	4213      	tst	r3, r2
  206e28:	d003      	beq.n	206e32 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
  206e2a:	68a1      	ldr	r1, [r4, #8]
  206e2c:	6860      	ldr	r0, [r4, #4]
  206e2e:	f7ff ffd7 	bl	206de0 <chEvtSignalI>
    elp = elp->next;
  206e32:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  206e34:	42a6      	cmp	r6, r4
  206e36:	d1f1      	bne.n	206e1c <chEvtBroadcastFlagsI+0xc>
  206e38:	bd70      	pop	{r4, r5, r6, pc}
  206e3a:	bf00      	nop
  206e3c:	0000      	movs	r0, r0
	...

00206e40 <chMtxUnlockS>:
void chMtxUnlockS(mutex_t *mp) {
  206e40:	b470      	push	{r4, r5, r6}
  thread_t *ctp = currp;
  206e42:	4a12      	ldr	r2, [pc, #72]	; (206e8c <chMtxUnlockS+0x4c>)
  return (bool)(tqp->next != (const thread_t *)tqp);
  206e44:	6805      	ldr	r5, [r0, #0]
    ctp->mtxlist = mp->next;
  206e46:	68c3      	ldr	r3, [r0, #12]
  thread_t *ctp = currp;
  206e48:	6996      	ldr	r6, [r2, #24]
    if (chMtxQueueNotEmptyS(mp)) {
  206e4a:	4285      	cmp	r5, r0
    ctp->mtxlist = mp->next;
  206e4c:	63b3      	str	r3, [r6, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
  206e4e:	d018      	beq.n	206e82 <chMtxUnlockS+0x42>
  206e50:	4604      	mov	r4, r0
      tprio_t newprio = ctp->realprio;
  206e52:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
      while (lmp != NULL) {
  206e54:	b14b      	cbz	r3, 206e6a <chMtxUnlockS+0x2a>
  206e56:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
  206e58:	4293      	cmp	r3, r2
  206e5a:	d003      	beq.n	206e64 <chMtxUnlockS+0x24>
  206e5c:	6892      	ldr	r2, [r2, #8]
  206e5e:	4291      	cmp	r1, r2
  206e60:	bf38      	it	cc
  206e62:	4611      	movcc	r1, r2
        lmp = lmp->next;
  206e64:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
  206e66:	2b00      	cmp	r3, #0
  206e68:	d1f5      	bne.n	206e56 <chMtxUnlockS+0x16>
      mp->next = tp->mtxlist;
  206e6a:	6baa      	ldr	r2, [r5, #56]	; 0x38
      (void) chSchReadyI(tp);
  206e6c:	4628      	mov	r0, r5
  tqp->next             = tp->queue.next;
  206e6e:	682b      	ldr	r3, [r5, #0]
      ctp->prio = newprio;
  206e70:	60b1      	str	r1, [r6, #8]
  206e72:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  206e74:	605c      	str	r4, [r3, #4]
      mp->owner = tp;
  206e76:	60a5      	str	r5, [r4, #8]
      mp->next = tp->mtxlist;
  206e78:	60e2      	str	r2, [r4, #12]
      tp->mtxlist = mp;
  206e7a:	63ac      	str	r4, [r5, #56]	; 0x38
}
  206e7c:	bc70      	pop	{r4, r5, r6}
      (void) chSchReadyI(tp);
  206e7e:	f7ff bf77 	b.w	206d70 <chSchReadyI>
      mp->owner = NULL;
  206e82:	2300      	movs	r3, #0
  206e84:	60ab      	str	r3, [r5, #8]
}
  206e86:	bc70      	pop	{r4, r5, r6}
  206e88:	4770      	bx	lr
  206e8a:	bf00      	nop
  206e8c:	20000860 	.word	0x20000860

00206e90 <chMtxUnlock>:
  thread_t *ctp = currp;
  206e90:	4a17      	ldr	r2, [pc, #92]	; (206ef0 <chMtxUnlock+0x60>)
  206e92:	2320      	movs	r3, #32
void chMtxUnlock(mutex_t *mp) {
  206e94:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
  206e96:	6995      	ldr	r5, [r2, #24]
  206e98:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
  206e9c:	6804      	ldr	r4, [r0, #0]
    ctp->mtxlist = mp->next;
  206e9e:	68c3      	ldr	r3, [r0, #12]
    if (chMtxQueueNotEmptyS(mp)) {
  206ea0:	4284      	cmp	r4, r0
    ctp->mtxlist = mp->next;
  206ea2:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
  206ea4:	d01d      	beq.n	206ee2 <chMtxUnlock+0x52>
      tprio_t newprio = ctp->realprio;
  206ea6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      while (lmp != NULL) {
  206ea8:	b14b      	cbz	r3, 206ebe <chMtxUnlock+0x2e>
  206eaa:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
  206eac:	4293      	cmp	r3, r2
  206eae:	d003      	beq.n	206eb8 <chMtxUnlock+0x28>
  206eb0:	6892      	ldr	r2, [r2, #8]
  206eb2:	4291      	cmp	r1, r2
  206eb4:	bf38      	it	cc
  206eb6:	4611      	movcc	r1, r2
        lmp = lmp->next;
  206eb8:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
  206eba:	2b00      	cmp	r3, #0
  206ebc:	d1f5      	bne.n	206eaa <chMtxUnlock+0x1a>
  206ebe:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
  206ec0:	6822      	ldr	r2, [r4, #0]
      mp->next = tp->mtxlist;
  206ec2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
  206ec4:	4620      	mov	r0, r4
      ctp->prio = newprio;
  206ec6:	60a9      	str	r1, [r5, #8]
  206ec8:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  206eca:	6053      	str	r3, [r2, #4]
      mp->owner = tp;
  206ecc:	609c      	str	r4, [r3, #8]
      mp->next = tp->mtxlist;
  206ece:	60de      	str	r6, [r3, #12]
      tp->mtxlist = mp;
  206ed0:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
  206ed2:	f7ff ff4d 	bl	206d70 <chSchReadyI>
      chSchRescheduleS();
  206ed6:	f7ff fe73 	bl	206bc0 <chSchRescheduleS>
  206eda:	2300      	movs	r3, #0
  206edc:	f383 8811 	msr	BASEPRI, r3
  206ee0:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
  206ee2:	2300      	movs	r3, #0
  206ee4:	60a3      	str	r3, [r4, #8]
  206ee6:	2300      	movs	r3, #0
  206ee8:	f383 8811 	msr	BASEPRI, r3
  206eec:	bd70      	pop	{r4, r5, r6, pc}
  206eee:	bf00      	nop
  206ef0:	20000860 	.word	0x20000860
	...

00206f00 <chMtxLockS>:
  thread_t *ctp = currp;
  206f00:	4b30      	ldr	r3, [pc, #192]	; (206fc4 <chMtxLockS+0xc4>)
  if (mp->owner != NULL) {
  206f02:	6882      	ldr	r2, [r0, #8]
void chMtxLockS(mutex_t *mp) {
  206f04:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
  206f06:	699c      	ldr	r4, [r3, #24]
  if (mp->owner != NULL) {
  206f08:	2a00      	cmp	r2, #0
  206f0a:	d056      	beq.n	206fba <chMtxLockS+0xba>
      while (tp->prio < ctp->prio) {
  206f0c:	68a1      	ldr	r1, [r4, #8]
  206f0e:	4605      	mov	r5, r0
  206f10:	6893      	ldr	r3, [r2, #8]
  206f12:	4299      	cmp	r1, r3
  206f14:	d907      	bls.n	206f26 <chMtxLockS+0x26>
        switch (tp->state) {
  206f16:	f892 3020 	ldrb.w	r3, [r2, #32]
        tp->prio = ctp->prio;
  206f1a:	6091      	str	r1, [r2, #8]
        switch (tp->state) {
  206f1c:	2b06      	cmp	r3, #6
  206f1e:	d033      	beq.n	206f88 <chMtxLockS+0x88>
  206f20:	2b07      	cmp	r3, #7
  206f22:	d01d      	beq.n	206f60 <chMtxLockS+0x60>
  206f24:	b19b      	cbz	r3, 206f4e <chMtxLockS+0x4e>
      queue_prio_insert(ctp, &mp->queue);
  206f26:	462b      	mov	r3, r5
  206f28:	e003      	b.n	206f32 <chMtxLockS+0x32>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  206f2a:	6899      	ldr	r1, [r3, #8]
  206f2c:	68a2      	ldr	r2, [r4, #8]
  206f2e:	4291      	cmp	r1, r2
  206f30:	d302      	bcc.n	206f38 <chMtxLockS+0x38>
    cp = cp->queue.next;
  206f32:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  206f34:	429d      	cmp	r5, r3
  206f36:	d1f8      	bne.n	206f2a <chMtxLockS+0x2a>
  tp->queue.prev             = cp->queue.prev;
  206f38:	685a      	ldr	r2, [r3, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
  206f3a:	2006      	movs	r0, #6
  tp->queue.next             = cp;
  206f3c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  206f3e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  206f40:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  206f42:	605c      	str	r4, [r3, #4]
      ctp->u.wtmtxp = mp;
  206f44:	6265      	str	r5, [r4, #36]	; 0x24
}
  206f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
  206f4a:	f7ff beb1 	b.w	206cb0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
  206f4e:	6853      	ldr	r3, [r2, #4]
          (void) chSchReadyI(queue_dequeue(tp));
  206f50:	4610      	mov	r0, r2
  206f52:	6811      	ldr	r1, [r2, #0]
  206f54:	6019      	str	r1, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  206f56:	6812      	ldr	r2, [r2, #0]
  206f58:	6053      	str	r3, [r2, #4]
  206f5a:	f7ff ff09 	bl	206d70 <chSchReadyI>
  206f5e:	e7e2      	b.n	206f26 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
  206f60:	e892 0009 	ldmia.w	r2, {r0, r3}
  206f64:	6018      	str	r0, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  206f66:	6810      	ldr	r0, [r2, #0]
  206f68:	6043      	str	r3, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
  206f6a:	6a56      	ldr	r6, [r2, #36]	; 0x24
  206f6c:	4633      	mov	r3, r6
  206f6e:	e002      	b.n	206f76 <chMtxLockS+0x76>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  206f70:	6898      	ldr	r0, [r3, #8]
  206f72:	4281      	cmp	r1, r0
  206f74:	d802      	bhi.n	206f7c <chMtxLockS+0x7c>
    cp = cp->queue.next;
  206f76:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  206f78:	429e      	cmp	r6, r3
  206f7a:	d1f9      	bne.n	206f70 <chMtxLockS+0x70>
  tp->queue.prev             = cp->queue.prev;
  206f7c:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = cp;
  206f7e:	6013      	str	r3, [r2, #0]
  tp->queue.prev             = cp->queue.prev;
  206f80:	6051      	str	r1, [r2, #4]
  tp->queue.prev->queue.next = tp;
  206f82:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
  206f84:	605a      	str	r2, [r3, #4]
  206f86:	e7ce      	b.n	206f26 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
  206f88:	e892 0009 	ldmia.w	r2, {r0, r3}
  206f8c:	6018      	str	r0, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  206f8e:	6810      	ldr	r0, [r2, #0]
  206f90:	6043      	str	r3, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
  206f92:	6a56      	ldr	r6, [r2, #36]	; 0x24
  206f94:	4633      	mov	r3, r6
  206f96:	e002      	b.n	206f9e <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  206f98:	6898      	ldr	r0, [r3, #8]
  206f9a:	4281      	cmp	r1, r0
  206f9c:	d802      	bhi.n	206fa4 <chMtxLockS+0xa4>
    cp = cp->queue.next;
  206f9e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  206fa0:	429e      	cmp	r6, r3
  206fa2:	d1f9      	bne.n	206f98 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
  206fa4:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = cp;
  206fa6:	6013      	str	r3, [r2, #0]
  tp->queue.prev             = cp->queue.prev;
  206fa8:	6051      	str	r1, [r2, #4]
  tp->queue.prev->queue.next = tp;
  206faa:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
  206fac:	605a      	str	r2, [r3, #4]
          tp = tp->u.wtmtxp->owner;
  206fae:	68b2      	ldr	r2, [r6, #8]
      while (tp->prio < ctp->prio) {
  206fb0:	68a1      	ldr	r1, [r4, #8]
  206fb2:	6893      	ldr	r3, [r2, #8]
  206fb4:	428b      	cmp	r3, r1
  206fb6:	d3ae      	bcc.n	206f16 <chMtxLockS+0x16>
  206fb8:	e7b5      	b.n	206f26 <chMtxLockS+0x26>
    mp->next = ctp->mtxlist;
  206fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    mp->owner = ctp;
  206fbc:	6084      	str	r4, [r0, #8]
    mp->next = ctp->mtxlist;
  206fbe:	60c3      	str	r3, [r0, #12]
    ctp->mtxlist = mp;
  206fc0:	63a0      	str	r0, [r4, #56]	; 0x38
  206fc2:	bd70      	pop	{r4, r5, r6, pc}
  206fc4:	20000860 	.word	0x20000860
	...

00206fd0 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
  206fd0:	b508      	push	{r3, lr}
  206fd2:	2320      	movs	r3, #32
  206fd4:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
  206fd8:	f7ff ff92 	bl	206f00 <chMtxLockS>
  206fdc:	2300      	movs	r3, #0
  206fde:	f383 8811 	msr	BASEPRI, r3
  206fe2:	bd08      	pop	{r3, pc}
	...

00206ff0 <chHeapFree>:
void chHeapFree(void *p) {
  206ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
  206ff2:	f850 3c04 	ldr.w	r3, [r0, #-4]
void chHeapFree(void *p) {
  206ff6:	4606      	mov	r6, r0
  heapp = H_HEAP(hp);
  206ff8:	f850 5c08 	ldr.w	r5, [r0, #-8]
  hp = (heap_header_t *)p - 1U;
  206ffc:	f1a0 0408 	sub.w	r4, r0, #8
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
  207000:	3307      	adds	r3, #7
  H_LOCK(heapp);
  207002:	f105 070c 	add.w	r7, r5, #12
  qp = &heapp->header;
  207006:	3504      	adds	r5, #4
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
  207008:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
  20700a:	4638      	mov	r0, r7
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
  20700c:	f846 3c04 	str.w	r3, [r6, #-4]
  H_LOCK(heapp);
  207010:	f7ff ffde 	bl	206fd0 <chMtxLock>
  qp = &heapp->header;
  207014:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
  207016:	42a3      	cmp	r3, r4
  207018:	681a      	ldr	r2, [r3, #0]
  20701a:	d305      	bcc.n	207028 <chHeapFree+0x38>
  20701c:	42ab      	cmp	r3, r5
  20701e:	d003      	beq.n	207028 <chHeapFree+0x38>
    qp = H_NEXT(qp);
  207020:	4613      	mov	r3, r2
    if (((qp == &heapp->header) || (hp > qp)) &&
  207022:	42a3      	cmp	r3, r4
  207024:	681a      	ldr	r2, [r3, #0]
  207026:	d2f9      	bcs.n	20701c <chHeapFree+0x2c>
  207028:	b10a      	cbz	r2, 20702e <chHeapFree+0x3e>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
  20702a:	4294      	cmp	r4, r2
  20702c:	d2f8      	bcs.n	207020 <chHeapFree+0x30>
      H_NEXT(hp) = H_NEXT(qp);
  20702e:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
  207032:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
  207034:	e916 0005 	ldmdb	r6, {r0, r2}
  207038:	3201      	adds	r2, #1
  20703a:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
  20703e:	4281      	cmp	r1, r0
  207040:	d00a      	beq.n	207058 <chHeapFree+0x68>
      if ((H_LIMIT(qp) == hp)) {
  207042:	6859      	ldr	r1, [r3, #4]
  207044:	1c4a      	adds	r2, r1, #1
  207046:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  20704a:	4294      	cmp	r4, r2
  20704c:	d012      	beq.n	207074 <chHeapFree+0x84>
  H_UNLOCK(heapp);
  20704e:	4638      	mov	r0, r7
}
  207050:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
  207054:	f7ff bf1c 	b.w	206e90 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
  207058:	6849      	ldr	r1, [r1, #4]
  20705a:	4411      	add	r1, r2
  20705c:	f846 1c04 	str.w	r1, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
  207060:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
  207064:	f846 2c08 	str.w	r2, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
  207068:	6859      	ldr	r1, [r3, #4]
  20706a:	1c4a      	adds	r2, r1, #1
  20706c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  207070:	4294      	cmp	r4, r2
  207072:	d1ec      	bne.n	20704e <chHeapFree+0x5e>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
  207074:	f856 2c04 	ldr.w	r2, [r6, #-4]
  H_UNLOCK(heapp);
  207078:	4638      	mov	r0, r7
        H_PAGES(qp) += H_PAGES(hp) + 1U;
  20707a:	3201      	adds	r2, #1
  20707c:	4411      	add	r1, r2
  20707e:	6059      	str	r1, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
  207080:	f856 2c08 	ldr.w	r2, [r6, #-8]
  207084:	601a      	str	r2, [r3, #0]
}
  207086:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
  20708a:	f7ff bf01 	b.w	206e90 <chMtxUnlock>
  20708e:	bf00      	nop

00207090 <chThdRelease>:
  207090:	2220      	movs	r2, #32
  207092:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
  207096:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
  20709a:	3b01      	subs	r3, #1
  20709c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
  2070a0:	6a03      	ldr	r3, [r0, #32]
  2070a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  2070a6:	2b0f      	cmp	r3, #15
  2070a8:	d003      	beq.n	2070b2 <chThdRelease+0x22>
  2070aa:	2300      	movs	r3, #0
  2070ac:	f383 8811 	msr	BASEPRI, r3
  2070b0:	4770      	bx	lr
void chThdRelease(thread_t *tp) {
  2070b2:	b410      	push	{r4}
    REG_REMOVE(tp);
  2070b4:	6943      	ldr	r3, [r0, #20]
  2070b6:	2100      	movs	r1, #0
  2070b8:	6904      	ldr	r4, [r0, #16]
  2070ba:	611c      	str	r4, [r3, #16]
  2070bc:	6904      	ldr	r4, [r0, #16]
  2070be:	6163      	str	r3, [r4, #20]
  2070c0:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
  2070c4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
  2070c8:	f003 0303 	and.w	r3, r3, #3
  2070cc:	2b01      	cmp	r3, #1
  2070ce:	d00c      	beq.n	2070ea <chThdRelease+0x5a>
  2070d0:	2b02      	cmp	r3, #2
  2070d2:	d108      	bne.n	2070e6 <chThdRelease+0x56>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
  2070d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
  2070d6:	69c0      	ldr	r0, [r0, #28]
  2070d8:	f382 8811 	msr	BASEPRI, r2
  php->next = mp->next;
  2070dc:	681a      	ldr	r2, [r3, #0]
  2070de:	6002      	str	r2, [r0, #0]
  mp->next = php;
  2070e0:	6018      	str	r0, [r3, #0]
  2070e2:	f381 8811 	msr	BASEPRI, r1
}
  2070e6:	bc10      	pop	{r4}
  2070e8:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
  2070ea:	69c0      	ldr	r0, [r0, #28]
}
  2070ec:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
  2070ee:	f7ff bf7f 	b.w	206ff0 <chHeapFree>
  2070f2:	bf00      	nop
	...

00207100 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
  207100:	b538      	push	{r3, r4, r5, lr}
  207102:	4604      	mov	r4, r0
  207104:	2320      	movs	r3, #32
  207106:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
  20710a:	f890 3020 	ldrb.w	r3, [r0, #32]
  20710e:	2b0f      	cmp	r3, #15
  207110:	d007      	beq.n	207122 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
  207112:	4b08      	ldr	r3, [pc, #32]	; (207134 <chThdWait+0x34>)
    chSchGoSleepS(CH_STATE_WTEXIT);
  207114:	2009      	movs	r0, #9
  tp->queue.next = tlp->next;
  207116:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    list_insert(currp, &tp->waiting);
  207118:	699b      	ldr	r3, [r3, #24]
  20711a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
  20711c:	62a3      	str	r3, [r4, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTEXIT);
  20711e:	f7ff fdc7 	bl	206cb0 <chSchGoSleepS>
  msg = tp->u.exitcode;
  207122:	6a65      	ldr	r5, [r4, #36]	; 0x24
  207124:	2300      	movs	r3, #0
  207126:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
  20712a:	4620      	mov	r0, r4
  20712c:	f7ff ffb0 	bl	207090 <chThdRelease>
}
  207130:	4628      	mov	r0, r5
  207132:	bd38      	pop	{r3, r4, r5, pc}
  207134:	20000860 	.word	0x20000860
	...

00207140 <chSemSignalI>:
  if (++sp->cnt <= (cnt_t)0) {
  207140:	6883      	ldr	r3, [r0, #8]
  207142:	3301      	adds	r3, #1
  207144:	2b00      	cmp	r3, #0
  207146:	6083      	str	r3, [r0, #8]
  207148:	dd00      	ble.n	20714c <chSemSignalI+0xc>
  20714a:	4770      	bx	lr
  thread_t *tp = tqp->next;
  20714c:	6803      	ldr	r3, [r0, #0]
  20714e:	4602      	mov	r2, r0
void chSemSignalI(semaphore_t *sp) {
  207150:	b410      	push	{r4}
  tqp->next             = tp->queue.next;
  207152:	6819      	ldr	r1, [r3, #0]
    tp->u.rdymsg = MSG_OK;
  207154:	2400      	movs	r4, #0
    (void) chSchReadyI(tp);
  207156:	4618      	mov	r0, r3
  207158:	6011      	str	r1, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  20715a:	604a      	str	r2, [r1, #4]
    tp->u.rdymsg = MSG_OK;
  20715c:	625c      	str	r4, [r3, #36]	; 0x24
}
  20715e:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
  207160:	f7ff be06 	b.w	206d70 <chSchReadyI>
	...

00207170 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
  207170:	b570      	push	{r4, r5, r6, lr}
  207172:	2320      	movs	r3, #32
  207174:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
  207178:	6884      	ldr	r4, [r0, #8]
  sp->cnt = n;
  20717a:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
  20717c:	3401      	adds	r4, #1
  20717e:	2c00      	cmp	r4, #0
  207180:	dc0c      	bgt.n	20719c <chSemReset+0x2c>
  207182:	4605      	mov	r5, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
  207184:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
  207188:	6868      	ldr	r0, [r5, #4]
  while (++cnt <= (cnt_t)0) {
  20718a:	3401      	adds	r4, #1
  tqp->prev             = tp->queue.prev;
  20718c:	6843      	ldr	r3, [r0, #4]
  20718e:	606b      	str	r3, [r5, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
  207190:	601d      	str	r5, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
  207192:	f7ff fded 	bl	206d70 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
  207196:	2c01      	cmp	r4, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
  207198:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
  20719a:	d1f5      	bne.n	207188 <chSemReset+0x18>
  chSchRescheduleS();
  20719c:	f7ff fd10 	bl	206bc0 <chSchRescheduleS>
  2071a0:	2300      	movs	r3, #0
  2071a2:	f383 8811 	msr	BASEPRI, r3
  2071a6:	bd70      	pop	{r4, r5, r6, pc}
	...

002071b0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
  2071b0:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
  2071b2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
  2071b4:	4298      	cmp	r0, r3
  2071b6:	d00b      	beq.n	2071d0 <chThdDequeueAllI+0x20>
  2071b8:	4604      	mov	r4, r0
  2071ba:	460d      	mov	r5, r1
  tqp->next             = tp->queue.next;
  2071bc:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
  2071be:	4618      	mov	r0, r3
  2071c0:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2071c2:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
  2071c4:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2071c6:	f7ff fdd3 	bl	206d70 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
  2071ca:	6823      	ldr	r3, [r4, #0]
  2071cc:	429c      	cmp	r4, r3
  2071ce:	d1f5      	bne.n	2071bc <chThdDequeueAllI+0xc>
  2071d0:	bd38      	pop	{r3, r4, r5, pc}
  2071d2:	bf00      	nop
	...

002071e0 <chThdExit>:
void chThdExit(msg_t msg) {
  2071e0:	b538      	push	{r3, r4, r5, lr}
  2071e2:	2220      	movs	r2, #32
  2071e4:	4603      	mov	r3, r0
  2071e6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  2071ea:	4a10      	ldr	r2, [pc, #64]	; (20722c <chThdExit+0x4c>)
  2071ec:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  2071ee:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  2071f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  2071f4:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  2071f6:	4285      	cmp	r5, r0
  2071f8:	d006      	beq.n	207208 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  2071fa:	6803      	ldr	r3, [r0, #0]
  2071fc:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  2071fe:	f7ff fdb7 	bl	206d70 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  207202:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  207204:	42a8      	cmp	r0, r5
  207206:	d1f8      	bne.n	2071fa <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  207208:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20720c:	b943      	cbnz	r3, 207220 <chThdExit+0x40>
  20720e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  207212:	079b      	lsls	r3, r3, #30
  207214:	d104      	bne.n	207220 <chThdExit+0x40>
    REG_REMOVE(tp);
  207216:	6922      	ldr	r2, [r4, #16]
  207218:	6963      	ldr	r3, [r4, #20]
  20721a:	611a      	str	r2, [r3, #16]
  20721c:	6922      	ldr	r2, [r4, #16]
  20721e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  207220:	200f      	movs	r0, #15
}
  207222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  207226:	f7ff bd43 	b.w	206cb0 <chSchGoSleepS>
  20722a:	bf00      	nop
  20722c:	20000860 	.word	0x20000860

00207230 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
  207230:	4b1a      	ldr	r3, [pc, #104]	; (20729c <chVTDoResetI+0x6c>)
  207232:	69da      	ldr	r2, [r3, #28]
  207234:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
  207236:	b430      	push	{r4, r5}
  if (ch.vtlist.next != vtp) {
  207238:	d00f      	beq.n	20725a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
  20723a:	6802      	ldr	r2, [r0, #0]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  20723c:	331c      	adds	r3, #28
    vtp->prev->next = vtp->next;
  20723e:	6841      	ldr	r1, [r0, #4]
    vtp->func = NULL;
  207240:	2400      	movs	r4, #0
    vtp->prev->next = vtp->next;
  207242:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
  207244:	6802      	ldr	r2, [r0, #0]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  207246:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
  207248:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
  20724a:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  20724c:	d003      	beq.n	207256 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
  20724e:	6881      	ldr	r1, [r0, #8]
  207250:	6893      	ldr	r3, [r2, #8]
  207252:	440b      	add	r3, r1
  207254:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  207256:	bc30      	pop	{r4, r5}
  207258:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
  20725a:	6811      	ldr	r1, [r2, #0]
  20725c:	4618      	mov	r0, r3
  vtp->func = NULL;
  20725e:	2400      	movs	r4, #0
  ch.vtlist.next = vtp->next;
  207260:	f840 1f1c 	str.w	r1, [r0, #28]!
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  207264:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  207266:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
  207268:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  20726a:	d013      	beq.n	207294 <chVTDoResetI+0x64>
  ch.vtlist.next->delta += vtp->delta;
  20726c:	6895      	ldr	r5, [r2, #8]
  return (systime_t)STM32_ST_TIM->CNT;
  20726e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  207272:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
  207274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
  207276:	4415      	add	r5, r2
  207278:	608d      	str	r5, [r1, #8]
  20727a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
  20727c:	1ad2      	subs	r2, r2, r3
  if (nowdelta >= ch.vtlist.next->delta) {
  20727e:	4295      	cmp	r5, r2
  207280:	d9e9      	bls.n	207256 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
  207282:	1aa9      	subs	r1, r5, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
  207284:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
  207286:	bf98      	it	ls
  207288:	1c95      	addls	r5, r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  20728a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
  20728e:	442b      	add	r3, r5
  207290:	6353      	str	r3, [r2, #52]	; 0x34
  207292:	e7e0      	b.n	207256 <chVTDoResetI+0x26>
  STM32_ST_TIM->DIER = 0;
  207294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  207298:	60dc      	str	r4, [r3, #12]
  20729a:	e7dc      	b.n	207256 <chVTDoResetI+0x26>
  20729c:	20000860 	.word	0x20000860

002072a0 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
  2072a0:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  2072a2:	4c1c      	ldr	r4, [pc, #112]	; (207314 <chVTDoSetI+0x74>)
  2072a4:	2902      	cmp	r1, #2
  vtp->func = vtfunc;
  2072a6:	60c2      	str	r2, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
  2072a8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  2072ac:	4625      	mov	r5, r4
  2072ae:	bf38      	it	cc
  2072b0:	2102      	movcc	r1, #2
  vtp->par = par;
  2072b2:	6103      	str	r3, [r0, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  2072b4:	f855 2f1c 	ldr.w	r2, [r5, #28]!
  2072b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
  2072ba:	42aa      	cmp	r2, r5
  2072bc:	d01c      	beq.n	2072f8 <chVTDoSetI+0x58>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
  2072be:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
  2072c0:	1b5b      	subs	r3, r3, r5
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
  2072c2:	1859      	adds	r1, r3, r1
      delta -= p->delta;
  2072c4:	6893      	ldr	r3, [r2, #8]
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
  2072c6:	d312      	bcc.n	2072ee <chVTDoSetI+0x4e>
    p = p->next;
  2072c8:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
  2072ca:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
  2072cc:	6893      	ldr	r3, [r2, #8]
  2072ce:	428b      	cmp	r3, r1
  2072d0:	d3fa      	bcc.n	2072c8 <chVTDoSetI+0x28>
  vtp->prev = vtp->next->prev;
  2072d2:	6853      	ldr	r3, [r2, #4]
  ch.vtlist.delta = (sysinterval_t)-1;
  2072d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  vtp->prev = vtp->next->prev;
  2072d8:	e880 000c 	stmia.w	r0, {r2, r3}
  vtp->prev->next = vtp;
  2072dc:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
  2072de:	6050      	str	r0, [r2, #4]
  vtp->delta = delta;
  2072e0:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
  2072e2:	6893      	ldr	r3, [r2, #8]
  2072e4:	1a59      	subs	r1, r3, r1
  2072e6:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
  2072e8:	6265      	str	r5, [r4, #36]	; 0x24
}
  2072ea:	bcf0      	pop	{r4, r5, r6, r7}
  2072ec:	4770      	bx	lr
    else if (delta < p->delta) {
  2072ee:	4299      	cmp	r1, r3
  2072f0:	d2ed      	bcs.n	2072ce <chVTDoSetI+0x2e>
  return systime + (systime_t)interval;
  2072f2:	440d      	add	r5, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  2072f4:	6375      	str	r5, [r6, #52]	; 0x34
  2072f6:	e7ea      	b.n	2072ce <chVTDoSetI+0x2e>
      ch.vtlist.lasttime = now;
  2072f8:	62a3      	str	r3, [r4, #40]	; 0x28
  2072fa:	185f      	adds	r7, r3, r1
  STM32_ST_TIM->SR     = 0;
  2072fc:	2500      	movs	r5, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  2072fe:	2302      	movs	r3, #2
      ch.vtlist.next = vtp;
  207300:	61e0      	str	r0, [r4, #28]
      ch.vtlist.prev = vtp;
  207302:	6220      	str	r0, [r4, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
  207304:	6002      	str	r2, [r0, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
  207306:	6042      	str	r2, [r0, #4]
      vtp->delta = delay;
  207308:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  20730a:	6377      	str	r7, [r6, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
  20730c:	6135      	str	r5, [r6, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  20730e:	60f3      	str	r3, [r6, #12]
  207310:	e7eb      	b.n	2072ea <chVTDoSetI+0x4a>
  207312:	bf00      	nop
  207314:	20000860 	.word	0x20000860
	...

00207320 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != timeout) {
  207320:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
  207322:	b530      	push	{r4, r5, lr}
  207324:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
  207326:	d012      	beq.n	20734e <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
  207328:	4c0c      	ldr	r4, [pc, #48]	; (20735c <chSchGoSleepTimeoutS+0x3c>)
  20732a:	4605      	mov	r5, r0
  20732c:	4a0c      	ldr	r2, [pc, #48]	; (207360 <chSchGoSleepTimeoutS+0x40>)
  20732e:	a801      	add	r0, sp, #4
  207330:	69a3      	ldr	r3, [r4, #24]
  207332:	f7ff ffb5 	bl	2072a0 <chVTDoSetI>
    chSchGoSleepS(newstate);
  207336:	4628      	mov	r0, r5
  207338:	f7ff fcba 	bl	206cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  20733c:	9b04      	ldr	r3, [sp, #16]
  20733e:	b113      	cbz	r3, 207346 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
  207340:	a801      	add	r0, sp, #4
  207342:	f7ff ff75 	bl	207230 <chVTDoResetI>
  return currp->u.rdymsg;
  207346:	69a3      	ldr	r3, [r4, #24]
}
  207348:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20734a:	b007      	add	sp, #28
  20734c:	bd30      	pop	{r4, r5, pc}
  20734e:	4c03      	ldr	r4, [pc, #12]	; (20735c <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
  207350:	f7ff fcae 	bl	206cb0 <chSchGoSleepS>
  return currp->u.rdymsg;
  207354:	69a3      	ldr	r3, [r4, #24]
}
  207356:	6a58      	ldr	r0, [r3, #36]	; 0x24
  207358:	b007      	add	sp, #28
  20735a:	bd30      	pop	{r4, r5, pc}
  20735c:	20000860 	.word	0x20000860
  207360:	00206971 	.word	0x00206971
	...

00207370 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  207370:	b161      	cbz	r1, 20738c <chThdEnqueueTimeoutS+0x1c>
  207372:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  207374:	4b07      	ldr	r3, [pc, #28]	; (207394 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  207376:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  207378:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
  20737a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  20737c:	6854      	ldr	r4, [r2, #4]
  20737e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  207382:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  207384:	6053      	str	r3, [r2, #4]
}
  207386:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  207388:	f7ff bfca 	b.w	207320 <chSchGoSleepTimeoutS>
}
  20738c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  207390:	4770      	bx	lr
  207392:	bf00      	nop
  207394:	20000860 	.word	0x20000860
	...

002073a0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
  2073a0:	b508      	push	{r3, lr}
  2073a2:	4601      	mov	r1, r0
  2073a4:	2320      	movs	r3, #32
  2073a6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
  2073aa:	2008      	movs	r0, #8
  2073ac:	f7ff ffb8 	bl	207320 <chSchGoSleepTimeoutS>
  2073b0:	2300      	movs	r3, #0
  2073b2:	f383 8811 	msr	BASEPRI, r3
  2073b6:	bd08      	pop	{r3, pc}
	...

002073c0 <chSysRestoreStatusX.part.2>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
  2073c0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
  2073c2:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
  2073c6:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
  2073ca:	b11c      	cbz	r4, 2073d4 <chSysRestoreStatusX.part.2+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2073cc:	2300      	movs	r3, #0
  2073ce:	f383 8811 	msr	BASEPRI, r3
  2073d2:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
  2073d4:	f7ff fbf4 	bl	206bc0 <chSchRescheduleS>
  2073d8:	f384 8811 	msr	BASEPRI, r4
  2073dc:	bd10      	pop	{r4, pc}
  2073de:	bf00      	nop

002073e0 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
  2073e0:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2073e4:	2320      	movs	r3, #32
  2073e6:	f383 8811 	msr	BASEPRI, r3
  2073ea:	4770      	bx	lr
  2073ec:	0000      	movs	r0, r0
	...

002073f0 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
  2073f0:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
  2073f2:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
  2073f4:	d510      	bpl.n	207418 <chSysIntegrityCheckI+0x28>
    tp = ch.rlist.queue.next;
  2073f6:	4a28      	ldr	r2, [pc, #160]	; (207498 <chSysIntegrityCheckI+0xa8>)
  2073f8:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
  2073fa:	4291      	cmp	r1, r2
  2073fc:	d03c      	beq.n	207478 <chSysIntegrityCheckI+0x88>
  2073fe:	2300      	movs	r3, #0
      tp = tp->queue.next;
  207400:	6809      	ldr	r1, [r1, #0]
      n++;
  207402:	3301      	adds	r3, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
  207404:	4291      	cmp	r1, r2
  207406:	d1fb      	bne.n	207400 <chSysIntegrityCheckI+0x10>
    tp = ch.rlist.queue.prev;
  207408:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
  20740a:	428c      	cmp	r4, r1
  20740c:	d031      	beq.n	207472 <chSysIntegrityCheckI+0x82>
      tp = tp->queue.prev;
  20740e:	6864      	ldr	r4, [r4, #4]
      n--;
  207410:	3b01      	subs	r3, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
  207412:	4294      	cmp	r4, r2
  207414:	d1fb      	bne.n	20740e <chSysIntegrityCheckI+0x1e>
    if (n != (cnt_t)0) {
  207416:	bb63      	cbnz	r3, 207472 <chSysIntegrityCheckI+0x82>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
  207418:	0783      	lsls	r3, r0, #30
  20741a:	d512      	bpl.n	207442 <chSysIntegrityCheckI+0x52>
    vtp = ch.vtlist.next;
  20741c:	4a1e      	ldr	r2, [pc, #120]	; (207498 <chSysIntegrityCheckI+0xa8>)
  20741e:	4614      	mov	r4, r2
  207420:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
  207424:	42a1      	cmp	r1, r4
  207426:	d02c      	beq.n	207482 <chSysIntegrityCheckI+0x92>
  207428:	2300      	movs	r3, #0
      vtp = vtp->next;
  20742a:	6809      	ldr	r1, [r1, #0]
      n++;
  20742c:	3301      	adds	r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
  20742e:	42a1      	cmp	r1, r4
  207430:	d1fb      	bne.n	20742a <chSysIntegrityCheckI+0x3a>
    vtp = ch.vtlist.prev;
  207432:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
  207434:	428a      	cmp	r2, r1
  207436:	d01c      	beq.n	207472 <chSysIntegrityCheckI+0x82>
      vtp = vtp->prev;
  207438:	6852      	ldr	r2, [r2, #4]
      n--;
  20743a:	3b01      	subs	r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
  20743c:	42a2      	cmp	r2, r4
  20743e:	d1fb      	bne.n	207438 <chSysIntegrityCheckI+0x48>
    if (n != (cnt_t)0) {
  207440:	b9bb      	cbnz	r3, 207472 <chSysIntegrityCheckI+0x82>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
  207442:	f010 0004 	ands.w	r0, r0, #4
  207446:	d012      	beq.n	20746e <chSysIntegrityCheckI+0x7e>
    tp = ch.rlist.newer;
  207448:	4a13      	ldr	r2, [pc, #76]	; (207498 <chSysIntegrityCheckI+0xa8>)
  20744a:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
  20744c:	4293      	cmp	r3, r2
  20744e:	d01d      	beq.n	20748c <chSysIntegrityCheckI+0x9c>
  207450:	2000      	movs	r0, #0
      tp = tp->newer;
  207452:	691b      	ldr	r3, [r3, #16]
      n++;
  207454:	3001      	adds	r0, #1
    while (tp != (thread_t *)&ch.rlist) {
  207456:	4293      	cmp	r3, r2
  207458:	d1fb      	bne.n	207452 <chSysIntegrityCheckI+0x62>
    tp = ch.rlist.older;
  20745a:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
  20745c:	4299      	cmp	r1, r3
  20745e:	d008      	beq.n	207472 <chSysIntegrityCheckI+0x82>
      tp = tp->older;
  207460:	6949      	ldr	r1, [r1, #20]
      n--;
  207462:	3801      	subs	r0, #1
    while (tp != (thread_t *)&ch.rlist) {
  207464:	4291      	cmp	r1, r2
  207466:	d1fb      	bne.n	207460 <chSysIntegrityCheckI+0x70>
    if (n != (cnt_t)0) {
  207468:	3000      	adds	r0, #0
  20746a:	bf18      	it	ne
  20746c:	2001      	movne	r0, #1
}
  20746e:	bc10      	pop	{r4}
  207470:	4770      	bx	lr
      return true;
  207472:	2001      	movs	r0, #1
}
  207474:	bc10      	pop	{r4}
  207476:	4770      	bx	lr
    tp = ch.rlist.queue.prev;
  207478:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
  20747a:	4294      	cmp	r4, r2
  20747c:	d0cc      	beq.n	207418 <chSysIntegrityCheckI+0x28>
    n = (cnt_t)0;
  20747e:	2300      	movs	r3, #0
  207480:	e7c5      	b.n	20740e <chSysIntegrityCheckI+0x1e>
    vtp = ch.vtlist.prev;
  207482:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
  207484:	42a2      	cmp	r2, r4
  207486:	d0dc      	beq.n	207442 <chSysIntegrityCheckI+0x52>
    n = (cnt_t)0;
  207488:	2300      	movs	r3, #0
  20748a:	e7d5      	b.n	207438 <chSysIntegrityCheckI+0x48>
    tp = ch.rlist.older;
  20748c:	6959      	ldr	r1, [r3, #20]
    n = (cnt_t)0;
  20748e:	2000      	movs	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
  207490:	4299      	cmp	r1, r3
  207492:	d1e5      	bne.n	207460 <chSysIntegrityCheckI+0x70>
  207494:	e7eb      	b.n	20746e <chSysIntegrityCheckI+0x7e>
  207496:	bf00      	nop
  207498:	20000860 	.word	0x20000860
  20749c:	00000000 	.word	0x00000000

002074a0 <rt_test_004_001_setup.lto_priv.108>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_004_001_setup(void) {
  tr1 = NULL;
  2074a0:	4b01      	ldr	r3, [pc, #4]	; (2074a8 <rt_test_004_001_setup.lto_priv.108+0x8>)
  2074a2:	2200      	movs	r2, #0
  2074a4:	601a      	str	r2, [r3, #0]
  2074a6:	4770      	bx	lr
  2074a8:	20001460 	.word	0x20001460
  2074ac:	00000000 	.word	0x00000000

002074b0 <rt_test_002_004_execute.lto_priv.103>:

static void rt_test_002_004_execute(void) {

  /* [2.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
  2074b0:	4a05      	ldr	r2, [pc, #20]	; (2074c8 <rt_test_002_004_execute.lto_priv.103+0x18>)
  2074b2:	2101      	movs	r1, #1
  return (systime_t)STM32_ST_TIM->CNT;
  2074b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  2074b8:	6011      	str	r1, [r2, #0]
  2074ba:	4619      	mov	r1, r3
  2074bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  2074be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
  2074c0:	429a      	cmp	r2, r3
  2074c2:	d0fc      	beq.n	2074be <rt_test_002_004_execute.lto_priv.103+0xe>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
  2074c4:	4770      	bx	lr
  2074c6:	bf00      	nop
  2074c8:	2000098c 	.word	0x2000098c
  2074cc:	00000000 	.word	0x00000000

002074d0 <rt_test_002_003_execute.lto_priv.102>:
  test_set_step(1);
  2074d0:	4a07      	ldr	r2, [pc, #28]	; (2074f0 <rt_test_002_003_execute.lto_priv.102+0x20>)
  2074d2:	2101      	movs	r1, #1
  2074d4:	2320      	movs	r3, #32
  2074d6:	6011      	str	r1, [r2, #0]
  2074d8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  2074dc:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
  2074de:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2074e0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  2074e4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2074e6:	2300      	movs	r3, #0
  2074e8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
  2074ec:	b662      	cpsie	i
  2074ee:	4770      	bx	lr
  2074f0:	2000098c 	.word	0x2000098c
	...

00207500 <thread.lto_priv.200>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
  207500:	7800      	ldrb	r0, [r0, #0]
  207502:	f7fa bdad 	b.w	202060 <test_emit_token>
  207506:	bf00      	nop
	...

00207510 <rt_test_004_001_execute.lto_priv.109>:
}

static void rt_test_004_001_execute(void) {
  207510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
  207514:	4d30      	ldr	r5, [pc, #192]	; (2075d8 <rt_test_004_001_execute.lto_priv.109+0xc8>)
  msg_t msg;

  /* [4.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
  207516:	2401      	movs	r4, #1
  207518:	4f30      	ldr	r7, [pc, #192]	; (2075dc <rt_test_004_001_execute.lto_priv.109+0xcc>)
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20751a:	2620      	movs	r6, #32
  return chThdGetSelfX()->prio;
  20751c:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
  20751e:	4b30      	ldr	r3, [pc, #192]	; (2075e0 <rt_test_004_001_execute.lto_priv.109+0xd0>)
  207520:	6891      	ldr	r1, [r2, #8]
  207522:	4830      	ldr	r0, [pc, #192]	; (2075e4 <rt_test_004_001_execute.lto_priv.109+0xd4>)
  207524:	4a30      	ldr	r2, [pc, #192]	; (2075e8 <rt_test_004_001_execute.lto_priv.109+0xd8>)
  207526:	3901      	subs	r1, #1
  test_set_step(1);
  207528:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
  20752a:	f7f8 ffa1 	bl	200470 <chThdCreateStatic.constprop.61>
  20752e:	4b2f      	ldr	r3, [pc, #188]	; (2075ec <rt_test_004_001_execute.lto_priv.109+0xdc>)
  207530:	6018      	str	r0, [r3, #0]
  207532:	f386 8811 	msr	BASEPRI, r6
  *trp = tp;
  207536:	4c2e      	ldr	r4, [pc, #184]	; (2075f0 <rt_test_004_001_execute.lto_priv.109+0xe0>)
    chSchGoSleepS(newstate);
  207538:	2003      	movs	r0, #3
  return ch.rlist.current;
  20753a:	69ab      	ldr	r3, [r5, #24]
  tp->u.wttrp = trp;
  20753c:	625c      	str	r4, [r3, #36]	; 0x24
  *trp = tp;
  20753e:	6023      	str	r3, [r4, #0]
  207540:	f7ff fbb6 	bl	206cb0 <chSchGoSleepS>
  return currp->u.rdymsg;
  207544:	69aa      	ldr	r2, [r5, #24]
  207546:	2300      	movs	r3, #0
  207548:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
  20754c:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
  207550:	6820      	ldr	r0, [r4, #0]
  207552:	4928      	ldr	r1, [pc, #160]	; (2075f4 <rt_test_004_001_execute.lto_priv.109+0xe4>)
  207554:	fab0 f080 	clz	r0, r0
  207558:	0940      	lsrs	r0, r0, #5
  20755a:	f7fb f881 	bl	202660 <_test_assert>
  20755e:	b108      	cbz	r0, 207564 <rt_test_004_001_execute.lto_priv.109+0x54>
  207560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
  207564:	fab8 f088 	clz	r0, r8
  207568:	4923      	ldr	r1, [pc, #140]	; (2075f8 <rt_test_004_001_execute.lto_priv.109+0xe8>)
  20756a:	0940      	lsrs	r0, r0, #5
  20756c:	f7fb f878 	bl	202660 <_test_assert>
  207570:	4680      	mov	r8, r0
  207572:	2800      	cmp	r0, #0
  207574:	d1f4      	bne.n	207560 <rt_test_004_001_execute.lto_priv.109+0x50>
    test_wait_threads();
  207576:	f7fa fd3b 	bl	201ff0 <test_wait_threads>
  }

  /* [4.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
  20757a:	2302      	movs	r3, #2
  20757c:	603b      	str	r3, [r7, #0]
  20757e:	f386 8811 	msr	BASEPRI, r6
  207582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  207586:	69ab      	ldr	r3, [r5, #24]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
  207588:	f242 7110 	movw	r1, #10000	; 0x2710
  20758c:	2003      	movs	r0, #3
  20758e:	6a55      	ldr	r5, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
  207590:	625c      	str	r4, [r3, #36]	; 0x24
  *trp = tp;
  207592:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
  207594:	f7ff fec4 	bl	207320 <chSchGoSleepTimeoutS>
  207598:	4606      	mov	r6, r0
  20759a:	f388 8811 	msr	BASEPRI, r8
  {
    chSysLock();
    time = chVTGetSystemTimeX();
    msg = chThdSuspendTimeoutS(&tr1, TIME_MS2I(1000));
    chSysUnlock();
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
  20759e:	f242 7113 	movw	r1, #10003	; 0x2713
  2075a2:	f242 7010 	movw	r0, #10000	; 0x2710
  2075a6:	4429      	add	r1, r5
  2075a8:	4428      	add	r0, r5
  2075aa:	f7f9 fc91 	bl	200ed0 <_test_assert_time_window.constprop.2>
  2075ae:	2800      	cmp	r0, #0
  2075b0:	d1d6      	bne.n	207560 <rt_test_004_001_execute.lto_priv.109+0x50>
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
  2075b2:	6820      	ldr	r0, [r4, #0]
  2075b4:	490f      	ldr	r1, [pc, #60]	; (2075f4 <rt_test_004_001_execute.lto_priv.109+0xe4>)
  2075b6:	fab0 f080 	clz	r0, r0
  2075ba:	0940      	lsrs	r0, r0, #5
  2075bc:	f7fb f850 	bl	202660 <_test_assert>
  2075c0:	2800      	cmp	r0, #0
  2075c2:	d1cd      	bne.n	207560 <rt_test_004_001_execute.lto_priv.109+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  2075c4:	f1a6 30ff 	sub.w	r0, r6, #4294967295	; 0xffffffff
  2075c8:	490b      	ldr	r1, [pc, #44]	; (2075f8 <rt_test_004_001_execute.lto_priv.109+0xe8>)
  2075ca:	fab0 f080 	clz	r0, r0
  }
}
  2075ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  2075d2:	0940      	lsrs	r0, r0, #5
  2075d4:	f7fb b844 	b.w	202660 <_test_assert>
  2075d8:	20000860 	.word	0x20000860
  2075dc:	2000098c 	.word	0x2000098c
  2075e0:	08007fd0 	.word	0x08007fd0
  2075e4:	20000a70 	.word	0x20000a70
  2075e8:	00207601 	.word	0x00207601
  2075ec:	200010d8 	.word	0x200010d8
  2075f0:	20001460 	.word	0x20001460
  2075f4:	08009f5c 	.word	0x08009f5c
  2075f8:	08008e34 	.word	0x08008e34
  2075fc:	00000000 	.word	0x00000000

00207600 <thread1>:
static THD_FUNCTION(thread1, p) {
  207600:	b510      	push	{r4, lr}
  207602:	2320      	movs	r3, #32
  207604:	4604      	mov	r4, r0
  207606:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  20760a:	4a09      	ldr	r2, [pc, #36]	; (207630 <thread1+0x30>)
  20760c:	6813      	ldr	r3, [r2, #0]
  20760e:	b12b      	cbz	r3, 20761c <thread1+0x1c>
    *trp = NULL;
  207610:	2100      	movs	r1, #0
    (void) chSchReadyI(tp);
  207612:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  207614:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  207616:	6011      	str	r1, [r2, #0]
    (void) chSchReadyI(tp);
  207618:	f7ff fbaa 	bl	206d70 <chSchReadyI>
  chSchRescheduleS();
  20761c:	f7ff fad0 	bl	206bc0 <chSchRescheduleS>
  207620:	2300      	movs	r3, #0
  207622:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
  207626:	7820      	ldrb	r0, [r4, #0]
}
  207628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
  20762c:	f7fa bd18 	b.w	202060 <test_emit_token>
  207630:	20001460 	.word	0x20001460
	...

00207640 <rt_test_003_004_execute.lto_priv.107>:
 * - [3.4.3] Raising thread priority above the boosted level.
 * - [3.4.4] Restoring original conditions.
 * .
 */

static void rt_test_003_004_execute(void) {
  207640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  207644:	4d2f      	ldr	r5, [pc, #188]	; (207704 <rt_test_003_004_execute.lto_priv.107+0xc4>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [3.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
  207646:	2202      	movs	r2, #2
  207648:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 207718 <rt_test_003_004_execute.lto_priv.107+0xd8>
  20764c:	69ab      	ldr	r3, [r5, #24]
  20764e:	f8c8 2000 	str.w	r2, [r8]
  return chThdGetSelfX()->prio;
  207652:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
  207654:	18a6      	adds	r6, r4, r2
  {
    p1 = chThdSetPriority(prio + 1);
  207656:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
  207658:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
  20765a:	4638      	mov	r0, r7
  20765c:	f7ff fac0 	bl	206be0 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
  207660:	1b00      	subs	r0, r0, r4
  207662:	4929      	ldr	r1, [pc, #164]	; (207708 <rt_test_003_004_execute.lto_priv.107+0xc8>)
  207664:	fab0 f080 	clz	r0, r0
  207668:	0940      	lsrs	r0, r0, #5
  20766a:	f7fa fff9 	bl	202660 <_test_assert>
  20766e:	b108      	cbz	r0, 207674 <rt_test_003_004_execute.lto_priv.107+0x34>
  207670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
  207674:	69ab      	ldr	r3, [r5, #24]
  207676:	4925      	ldr	r1, [pc, #148]	; (20770c <rt_test_003_004_execute.lto_priv.107+0xcc>)
  207678:	6898      	ldr	r0, [r3, #8]
  20767a:	1b80      	subs	r0, r0, r6
  20767c:	fab0 f080 	clz	r0, r0
  207680:	0940      	lsrs	r0, r0, #5
  207682:	f7fa ffed 	bl	202660 <_test_assert>
  207686:	2800      	cmp	r0, #0
  207688:	d1f2      	bne.n	207670 <rt_test_003_004_execute.lto_priv.107+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
  20768a:	69ab      	ldr	r3, [r5, #24]
  20768c:	4920      	ldr	r1, [pc, #128]	; (207710 <rt_test_003_004_execute.lto_priv.107+0xd0>)
  20768e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  207690:	1bc0      	subs	r0, r0, r7
  207692:	fab0 f080 	clz	r0, r0
  207696:	0940      	lsrs	r0, r0, #5
  207698:	f7fa ffe2 	bl	202660 <_test_assert>
  20769c:	2800      	cmp	r0, #0
  20769e:	d1e7      	bne.n	207670 <rt_test_003_004_execute.lto_priv.107+0x30>
  }

  /* [3.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
  {
    p1 = chThdSetPriority(prio + 3);
  2076a0:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
  2076a2:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
  2076a4:	4630      	mov	r0, r6
  test_set_step(3);
  2076a6:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
  2076aa:	f7ff fa99 	bl	206be0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
  2076ae:	1a38      	subs	r0, r7, r0
  2076b0:	4915      	ldr	r1, [pc, #84]	; (207708 <rt_test_003_004_execute.lto_priv.107+0xc8>)
  2076b2:	fab0 f080 	clz	r0, r0
  2076b6:	0940      	lsrs	r0, r0, #5
  2076b8:	f7fa ffd2 	bl	202660 <_test_assert>
  2076bc:	2800      	cmp	r0, #0
  2076be:	d1d7      	bne.n	207670 <rt_test_003_004_execute.lto_priv.107+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
  2076c0:	69ab      	ldr	r3, [r5, #24]
  2076c2:	4912      	ldr	r1, [pc, #72]	; (20770c <rt_test_003_004_execute.lto_priv.107+0xcc>)
  2076c4:	6898      	ldr	r0, [r3, #8]
  2076c6:	1b80      	subs	r0, r0, r6
  2076c8:	fab0 f080 	clz	r0, r0
  2076cc:	0940      	lsrs	r0, r0, #5
  2076ce:	f7fa ffc7 	bl	202660 <_test_assert>
  2076d2:	2800      	cmp	r0, #0
  2076d4:	d1cc      	bne.n	207670 <rt_test_003_004_execute.lto_priv.107+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
  2076d6:	69ab      	ldr	r3, [r5, #24]
  2076d8:	490e      	ldr	r1, [pc, #56]	; (207714 <rt_test_003_004_execute.lto_priv.107+0xd4>)
  2076da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  2076dc:	1b80      	subs	r0, r0, r6
  2076de:	fab0 f080 	clz	r0, r0
  2076e2:	0940      	lsrs	r0, r0, #5
  2076e4:	f7fa ffbc 	bl	202660 <_test_assert>
  2076e8:	2800      	cmp	r0, #0
  2076ea:	d1c1      	bne.n	207670 <rt_test_003_004_execute.lto_priv.107+0x30>
  }

  /* [3.4.4] Restoring original conditions.*/
  test_set_step(4);
  2076ec:	2204      	movs	r2, #4
  2076ee:	2320      	movs	r3, #32
  2076f0:	f8c8 2000 	str.w	r2, [r8]
  2076f4:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
  2076f8:	69ab      	ldr	r3, [r5, #24]
  {
    chSysLock();
    chThdGetSelfX()->prio = prio;
  2076fa:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
  2076fc:	63dc      	str	r4, [r3, #60]	; 0x3c
  2076fe:	f380 8811 	msr	BASEPRI, r0
  207702:	e7b5      	b.n	207670 <rt_test_003_004_execute.lto_priv.107+0x30>
  207704:	20000860 	.word	0x20000860
  207708:	08009ed4 	.word	0x08009ed4
  20770c:	08009ef8 	.word	0x08009ef8
  207710:	08009f14 	.word	0x08009f14
  207714:	08009f3c 	.word	0x08009f3c
  207718:	2000098c 	.word	0x2000098c
  20771c:	00000000 	.word	0x00000000

00207720 <rt_test_003_003_execute.lto_priv.106>:
static void rt_test_003_003_execute(void) {
  207720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  207724:	4e1c      	ldr	r6, [pc, #112]	; (207798 <rt_test_003_003_execute.lto_priv.106+0x78>)
  test_set_step(1);
  207726:	2201      	movs	r2, #1
  207728:	4f1c      	ldr	r7, [pc, #112]	; (20779c <rt_test_003_003_execute.lto_priv.106+0x7c>)
  return chThdGetSelfX()->prio;
  20772a:	69b3      	ldr	r3, [r6, #24]
  20772c:	603a      	str	r2, [r7, #0]
  20772e:	689c      	ldr	r4, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
  207730:	18a5      	adds	r5, r4, r2
  207732:	4628      	mov	r0, r5
  207734:	f7ff fa54 	bl	206be0 <chThdSetPriority>
  207738:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
  20773a:	1b00      	subs	r0, r0, r4
  20773c:	4918      	ldr	r1, [pc, #96]	; (2077a0 <rt_test_003_003_execute.lto_priv.106+0x80>)
  20773e:	fab0 f080 	clz	r0, r0
  207742:	0940      	lsrs	r0, r0, #5
  207744:	f7fa ff8c 	bl	202660 <_test_assert>
  207748:	b108      	cbz	r0, 20774e <rt_test_003_003_execute.lto_priv.106+0x2e>
  20774a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  20774e:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
  207750:	4914      	ldr	r1, [pc, #80]	; (2077a4 <rt_test_003_003_execute.lto_priv.106+0x84>)
  207752:	6898      	ldr	r0, [r3, #8]
  207754:	1b40      	subs	r0, r0, r5
  207756:	fab0 f080 	clz	r0, r0
  20775a:	0940      	lsrs	r0, r0, #5
  20775c:	f7fa ff80 	bl	202660 <_test_assert>
  207760:	2800      	cmp	r0, #0
  207762:	d1f2      	bne.n	20774a <rt_test_003_003_execute.lto_priv.106+0x2a>
  test_set_step(2);
  207764:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
  207766:	4640      	mov	r0, r8
  test_set_step(2);
  207768:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(p1);
  20776a:	f7ff fa39 	bl	206be0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
  20776e:	1a28      	subs	r0, r5, r0
  207770:	490b      	ldr	r1, [pc, #44]	; (2077a0 <rt_test_003_003_execute.lto_priv.106+0x80>)
  207772:	fab0 f080 	clz	r0, r0
  207776:	0940      	lsrs	r0, r0, #5
  207778:	f7fa ff72 	bl	202660 <_test_assert>
  20777c:	2800      	cmp	r0, #0
  20777e:	d1e4      	bne.n	20774a <rt_test_003_003_execute.lto_priv.106+0x2a>
  207780:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
  207782:	4908      	ldr	r1, [pc, #32]	; (2077a4 <rt_test_003_003_execute.lto_priv.106+0x84>)
  207784:	6898      	ldr	r0, [r3, #8]
  207786:	1b00      	subs	r0, r0, r4
  207788:	fab0 f080 	clz	r0, r0
}
  20778c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
  207790:	0940      	lsrs	r0, r0, #5
  207792:	f7fa bf65 	b.w	202660 <_test_assert>
  207796:	bf00      	nop
  207798:	20000860 	.word	0x20000860
  20779c:	2000098c 	.word	0x2000098c
  2077a0:	08009ed4 	.word	0x08009ed4
  2077a4:	08009ef8 	.word	0x08009ef8
	...

002077b0 <rt_test_003_002_execute.lto_priv.105>:
static void rt_test_003_002_execute(void) {
  2077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
  2077b2:	4d54      	ldr	r5, [pc, #336]	; (207904 <rt_test_003_002_execute.lto_priv.105+0x154>)
  test_set_step(1);
  2077b4:	2401      	movs	r4, #1
  2077b6:	4e54      	ldr	r6, [pc, #336]	; (207908 <rt_test_003_002_execute.lto_priv.105+0x158>)
  return chThdGetSelfX()->prio;
  2077b8:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  2077ba:	4b54      	ldr	r3, [pc, #336]	; (20790c <rt_test_003_002_execute.lto_priv.105+0x15c>)
  2077bc:	6891      	ldr	r1, [r2, #8]
  2077be:	4854      	ldr	r0, [pc, #336]	; (207910 <rt_test_003_002_execute.lto_priv.105+0x160>)
  2077c0:	4a54      	ldr	r2, [pc, #336]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  2077c2:	3905      	subs	r1, #5
  test_set_step(1);
  2077c4:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  2077c6:	f7f8 fe53 	bl	200470 <chThdCreateStatic.constprop.61>
  2077ca:	69ab      	ldr	r3, [r5, #24]
  2077cc:	4c52      	ldr	r4, [pc, #328]	; (207918 <rt_test_003_002_execute.lto_priv.105+0x168>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  2077ce:	6899      	ldr	r1, [r3, #8]
  2077d0:	4a50      	ldr	r2, [pc, #320]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  2077d2:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  2077d4:	3904      	subs	r1, #4
  2077d6:	4b51      	ldr	r3, [pc, #324]	; (20791c <rt_test_003_002_execute.lto_priv.105+0x16c>)
  2077d8:	4851      	ldr	r0, [pc, #324]	; (207920 <rt_test_003_002_execute.lto_priv.105+0x170>)
  2077da:	f7f8 fe49 	bl	200470 <chThdCreateStatic.constprop.61>
  2077de:	69ab      	ldr	r3, [r5, #24]
  2077e0:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  2077e2:	6899      	ldr	r1, [r3, #8]
  2077e4:	4a4b      	ldr	r2, [pc, #300]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  2077e6:	4b4f      	ldr	r3, [pc, #316]	; (207924 <rt_test_003_002_execute.lto_priv.105+0x174>)
  2077e8:	3903      	subs	r1, #3
  2077ea:	484f      	ldr	r0, [pc, #316]	; (207928 <rt_test_003_002_execute.lto_priv.105+0x178>)
  2077ec:	f7f8 fe40 	bl	200470 <chThdCreateStatic.constprop.61>
  2077f0:	69ab      	ldr	r3, [r5, #24]
  2077f2:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  2077f4:	6899      	ldr	r1, [r3, #8]
  2077f6:	4a47      	ldr	r2, [pc, #284]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  2077f8:	4b4c      	ldr	r3, [pc, #304]	; (20792c <rt_test_003_002_execute.lto_priv.105+0x17c>)
  2077fa:	3902      	subs	r1, #2
  2077fc:	484c      	ldr	r0, [pc, #304]	; (207930 <rt_test_003_002_execute.lto_priv.105+0x180>)
  2077fe:	f7f8 fe37 	bl	200470 <chThdCreateStatic.constprop.61>
  207802:	69ab      	ldr	r3, [r5, #24]
  207804:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  207806:	6899      	ldr	r1, [r3, #8]
  207808:	4a42      	ldr	r2, [pc, #264]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  20780a:	3901      	subs	r1, #1
  20780c:	4b49      	ldr	r3, [pc, #292]	; (207934 <rt_test_003_002_execute.lto_priv.105+0x184>)
  20780e:	484a      	ldr	r0, [pc, #296]	; (207938 <rt_test_003_002_execute.lto_priv.105+0x188>)
  207810:	f7f8 fe2e 	bl	200470 <chThdCreateStatic.constprop.61>
  207814:	6120      	str	r0, [r4, #16]
    test_wait_threads();
  207816:	f7fa fbeb 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
  20781a:	4948      	ldr	r1, [pc, #288]	; (20793c <rt_test_003_002_execute.lto_priv.105+0x18c>)
  20781c:	4848      	ldr	r0, [pc, #288]	; (207940 <rt_test_003_002_execute.lto_priv.105+0x190>)
  20781e:	f7fa fef7 	bl	202610 <_test_assert_sequence>
  207822:	b100      	cbz	r0, 207826 <rt_test_003_002_execute.lto_priv.105+0x76>
  207824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  207826:	69aa      	ldr	r2, [r5, #24]
  test_set_step(2);
  207828:	2702      	movs	r7, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  20782a:	4b42      	ldr	r3, [pc, #264]	; (207934 <rt_test_003_002_execute.lto_priv.105+0x184>)
  20782c:	6891      	ldr	r1, [r2, #8]
  20782e:	4842      	ldr	r0, [pc, #264]	; (207938 <rt_test_003_002_execute.lto_priv.105+0x188>)
  207830:	4a38      	ldr	r2, [pc, #224]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  207832:	3901      	subs	r1, #1
  test_set_step(2);
  207834:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  207836:	f7f8 fe1b 	bl	200470 <chThdCreateStatic.constprop.61>
  20783a:	69ab      	ldr	r3, [r5, #24]
  20783c:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  20783e:	6899      	ldr	r1, [r3, #8]
  207840:	4a34      	ldr	r2, [pc, #208]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  207842:	4b3a      	ldr	r3, [pc, #232]	; (20792c <rt_test_003_002_execute.lto_priv.105+0x17c>)
  207844:	3902      	subs	r1, #2
  207846:	483a      	ldr	r0, [pc, #232]	; (207930 <rt_test_003_002_execute.lto_priv.105+0x180>)
  207848:	f7f8 fe12 	bl	200470 <chThdCreateStatic.constprop.61>
  20784c:	69ab      	ldr	r3, [r5, #24]
  20784e:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  207850:	6899      	ldr	r1, [r3, #8]
  207852:	4a30      	ldr	r2, [pc, #192]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  207854:	4b33      	ldr	r3, [pc, #204]	; (207924 <rt_test_003_002_execute.lto_priv.105+0x174>)
  207856:	3903      	subs	r1, #3
  207858:	4833      	ldr	r0, [pc, #204]	; (207928 <rt_test_003_002_execute.lto_priv.105+0x178>)
  20785a:	f7f8 fe09 	bl	200470 <chThdCreateStatic.constprop.61>
  20785e:	69ab      	ldr	r3, [r5, #24]
  207860:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  207862:	6899      	ldr	r1, [r3, #8]
  207864:	4a2b      	ldr	r2, [pc, #172]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  207866:	4b2d      	ldr	r3, [pc, #180]	; (20791c <rt_test_003_002_execute.lto_priv.105+0x16c>)
  207868:	3904      	subs	r1, #4
  20786a:	482d      	ldr	r0, [pc, #180]	; (207920 <rt_test_003_002_execute.lto_priv.105+0x170>)
  20786c:	f7f8 fe00 	bl	200470 <chThdCreateStatic.constprop.61>
  207870:	69ab      	ldr	r3, [r5, #24]
  207872:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  207874:	6899      	ldr	r1, [r3, #8]
  207876:	4a27      	ldr	r2, [pc, #156]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  207878:	3905      	subs	r1, #5
  20787a:	4b24      	ldr	r3, [pc, #144]	; (20790c <rt_test_003_002_execute.lto_priv.105+0x15c>)
  20787c:	4824      	ldr	r0, [pc, #144]	; (207910 <rt_test_003_002_execute.lto_priv.105+0x160>)
  20787e:	f7f8 fdf7 	bl	200470 <chThdCreateStatic.constprop.61>
  207882:	6020      	str	r0, [r4, #0]
    test_wait_threads();
  207884:	f7fa fbb4 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
  207888:	492c      	ldr	r1, [pc, #176]	; (20793c <rt_test_003_002_execute.lto_priv.105+0x18c>)
  20788a:	482d      	ldr	r0, [pc, #180]	; (207940 <rt_test_003_002_execute.lto_priv.105+0x190>)
  20788c:	f7fa fec0 	bl	202610 <_test_assert_sequence>
  207890:	2800      	cmp	r0, #0
  207892:	d1c7      	bne.n	207824 <rt_test_003_002_execute.lto_priv.105+0x74>
  207894:	69aa      	ldr	r2, [r5, #24]
  test_set_step(3);
  207896:	2703      	movs	r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  207898:	4b20      	ldr	r3, [pc, #128]	; (20791c <rt_test_003_002_execute.lto_priv.105+0x16c>)
  20789a:	6891      	ldr	r1, [r2, #8]
  20789c:	4820      	ldr	r0, [pc, #128]	; (207920 <rt_test_003_002_execute.lto_priv.105+0x170>)
  20789e:	4a1d      	ldr	r2, [pc, #116]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  2078a0:	3904      	subs	r1, #4
  test_set_step(3);
  2078a2:	6037      	str	r7, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  2078a4:	f7f8 fde4 	bl	200470 <chThdCreateStatic.constprop.61>
  2078a8:	69ab      	ldr	r3, [r5, #24]
  2078aa:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  2078ac:	6899      	ldr	r1, [r3, #8]
  2078ae:	4a19      	ldr	r2, [pc, #100]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  2078b0:	4b16      	ldr	r3, [pc, #88]	; (20790c <rt_test_003_002_execute.lto_priv.105+0x15c>)
  2078b2:	3905      	subs	r1, #5
  2078b4:	4816      	ldr	r0, [pc, #88]	; (207910 <rt_test_003_002_execute.lto_priv.105+0x160>)
  2078b6:	f7f8 fddb 	bl	200470 <chThdCreateStatic.constprop.61>
  2078ba:	69ab      	ldr	r3, [r5, #24]
  2078bc:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  2078be:	6899      	ldr	r1, [r3, #8]
  2078c0:	4a14      	ldr	r2, [pc, #80]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  2078c2:	4b1c      	ldr	r3, [pc, #112]	; (207934 <rt_test_003_002_execute.lto_priv.105+0x184>)
  2078c4:	3901      	subs	r1, #1
  2078c6:	481c      	ldr	r0, [pc, #112]	; (207938 <rt_test_003_002_execute.lto_priv.105+0x188>)
  2078c8:	f7f8 fdd2 	bl	200470 <chThdCreateStatic.constprop.61>
  2078cc:	69ab      	ldr	r3, [r5, #24]
  2078ce:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  2078d0:	6899      	ldr	r1, [r3, #8]
  2078d2:	4a10      	ldr	r2, [pc, #64]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  2078d4:	4b15      	ldr	r3, [pc, #84]	; (20792c <rt_test_003_002_execute.lto_priv.105+0x17c>)
  2078d6:	3902      	subs	r1, #2
  2078d8:	4815      	ldr	r0, [pc, #84]	; (207930 <rt_test_003_002_execute.lto_priv.105+0x180>)
  2078da:	f7f8 fdc9 	bl	200470 <chThdCreateStatic.constprop.61>
  2078de:	69ab      	ldr	r3, [r5, #24]
  2078e0:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  2078e2:	6899      	ldr	r1, [r3, #8]
  2078e4:	4a0b      	ldr	r2, [pc, #44]	; (207914 <rt_test_003_002_execute.lto_priv.105+0x164>)
  2078e6:	4b0f      	ldr	r3, [pc, #60]	; (207924 <rt_test_003_002_execute.lto_priv.105+0x174>)
  2078e8:	3903      	subs	r1, #3
  2078ea:	480f      	ldr	r0, [pc, #60]	; (207928 <rt_test_003_002_execute.lto_priv.105+0x178>)
  2078ec:	f7f8 fdc0 	bl	200470 <chThdCreateStatic.constprop.61>
  2078f0:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
  2078f2:	f7fa fb7d 	bl	201ff0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
  2078f6:	4911      	ldr	r1, [pc, #68]	; (20793c <rt_test_003_002_execute.lto_priv.105+0x18c>)
  2078f8:	4811      	ldr	r0, [pc, #68]	; (207940 <rt_test_003_002_execute.lto_priv.105+0x190>)
}
  2078fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
  2078fe:	f7fa be87 	b.w	202610 <_test_assert_sequence>
  207902:	bf00      	nop
  207904:	20000860 	.word	0x20000860
  207908:	2000098c 	.word	0x2000098c
  20790c:	08007f10 	.word	0x08007f10
  207910:	20000a70 	.word	0x20000a70
  207914:	00207501 	.word	0x00207501
  207918:	200010d8 	.word	0x200010d8
  20791c:	08007f08 	.word	0x08007f08
  207920:	20000bb8 	.word	0x20000bb8
  207924:	08008000 	.word	0x08008000
  207928:	20000d00 	.word	0x20000d00
  20792c:	08007ff4 	.word	0x08007ff4
  207930:	20000e48 	.word	0x20000e48
  207934:	08007fd0 	.word	0x08007fd0
  207938:	20000f90 	.word	0x20000f90
  20793c:	08007f38 	.word	0x08007f38
  207940:	08007f0c 	.word	0x08007f0c
	...

00207950 <rt_test_003_001_execute.lto_priv.104>:
static void rt_test_003_001_execute(void) {
  207950:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
  207952:	2301      	movs	r3, #1
  207954:	4e2b      	ldr	r6, [pc, #172]	; (207a04 <rt_test_003_001_execute.lto_priv.104+0xb4>)
  207956:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    chThdSleep(100);
  20795a:	2064      	movs	r0, #100	; 0x64
  test_set_step(1);
  20795c:	6033      	str	r3, [r6, #0]
  20795e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleep(100);
  207960:	f7ff fd1e 	bl	2073a0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
  207964:	f104 0167 	add.w	r1, r4, #103	; 0x67
  207968:	f104 0064 	add.w	r0, r4, #100	; 0x64
  20796c:	f7f9 fab0 	bl	200ed0 <_test_assert_time_window.constprop.2>
  207970:	b100      	cbz	r0, 207974 <rt_test_003_001_execute.lto_priv.104+0x24>
  207972:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
  207974:	2302      	movs	r3, #2
    chThdSleepMicroseconds(100000);
  207976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(2);
  20797a:	6033      	str	r3, [r6, #0]
  20797c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
  20797e:	f7ff fd0f 	bl	2073a0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
  207982:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
  207986:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
  20798a:	f7f9 faa1 	bl	200ed0 <_test_assert_time_window.constprop.2>
  20798e:	2800      	cmp	r0, #0
  207990:	d1ef      	bne.n	207972 <rt_test_003_001_execute.lto_priv.104+0x22>
  test_set_step(3);
  207992:	2303      	movs	r3, #3
    chThdSleepMilliseconds(100);
  207994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(3);
  207998:	6033      	str	r3, [r6, #0]
  20799a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
  20799c:	f7ff fd00 	bl	2073a0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
  2079a0:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
  2079a4:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
  2079a8:	f7f9 fa92 	bl	200ed0 <_test_assert_time_window.constprop.2>
  2079ac:	2800      	cmp	r0, #0
  2079ae:	d1e0      	bne.n	207972 <rt_test_003_001_execute.lto_priv.104+0x22>
  test_set_step(4);
  2079b0:	2304      	movs	r3, #4
    chThdSleepSeconds(1);
  2079b2:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(4);
  2079b6:	6033      	str	r3, [r6, #0]
  2079b8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
  2079ba:	f7ff fcf1 	bl	2073a0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
  2079be:	f242 7113 	movw	r1, #10003	; 0x2713
  2079c2:	f242 7010 	movw	r0, #10000	; 0x2710
  2079c6:	4421      	add	r1, r4
  2079c8:	4420      	add	r0, r4
  2079ca:	f7f9 fa81 	bl	200ed0 <_test_assert_time_window.constprop.2>
  2079ce:	2800      	cmp	r0, #0
  2079d0:	d1cf      	bne.n	207972 <rt_test_003_001_execute.lto_priv.104+0x22>
  test_set_step(5);
  2079d2:	2205      	movs	r2, #5
  2079d4:	2320      	movs	r3, #32
  2079d6:	6032      	str	r2, [r6, #0]
  2079d8:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  2079da:	f106 0464 	add.w	r4, r6, #100	; 0x64
  2079de:	f383 8811 	msr	BASEPRI, r3
  2079e2:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
  2079e4:	1a61      	subs	r1, r4, r1
  2079e6:	d002      	beq.n	2079ee <rt_test_003_001_execute.lto_priv.104+0x9e>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
  2079e8:	2008      	movs	r0, #8
  2079ea:	f7ff fc99 	bl	207320 <chSchGoSleepTimeoutS>
  2079ee:	2300      	movs	r3, #0
  2079f0:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
  2079f4:	f106 0167 	add.w	r1, r6, #103	; 0x67
  2079f8:	4620      	mov	r0, r4
}
  2079fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
  2079fe:	f7f9 ba67 	b.w	200ed0 <_test_assert_time_window.constprop.2>
  207a02:	bf00      	nop
  207a04:	2000098c 	.word	0x2000098c
	...

00207a10 <rt_test_002_002_execute.lto_priv.101>:
static void rt_test_002_002_execute(void) {
  207a10:	b510      	push	{r4, lr}
  test_set_step(1);
  207a12:	2301      	movs	r3, #1
  207a14:	4c30      	ldr	r4, [pc, #192]	; (207ad8 <rt_test_002_002_execute.lto_priv.101+0xc8>)
static void rt_test_002_002_execute(void) {
  207a16:	b086      	sub	sp, #24
  test_set_step(1);
  207a18:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
  207a1a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
  207a1e:	b91b      	cbnz	r3, 207a28 <rt_test_002_002_execute.lto_priv.101+0x18>
  207a20:	f7ff fcde 	bl	2073e0 <chSysGetStatusAndLockX.part.1>
  207a24:	f7ff fccc 	bl	2073c0 <chSysRestoreStatusX.part.2>
  test_set_step(2);
  207a28:	2202      	movs	r2, #2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  207a2a:	2320      	movs	r3, #32
  207a2c:	6022      	str	r2, [r4, #0]
  207a2e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
  207a32:	f3ef 8311 	mrs	r3, BASEPRI
  207a36:	b91b      	cbnz	r3, 207a40 <rt_test_002_002_execute.lto_priv.101+0x30>
  207a38:	f7ff fcd2 	bl	2073e0 <chSysGetStatusAndLockX.part.1>
  207a3c:	f7ff fcc0 	bl	2073c0 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  207a40:	2300      	movs	r3, #0
  207a42:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
  207a46:	2303      	movs	r3, #3
  207a48:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
  207a4a:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
  207a4e:	b913      	cbnz	r3, 207a56 <rt_test_002_002_execute.lto_priv.101+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  207a50:	2320      	movs	r3, #32
  207a52:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
  207a56:	f3ef 8311 	mrs	r3, BASEPRI
  207a5a:	b913      	cbnz	r3, 207a62 <rt_test_002_002_execute.lto_priv.101+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  207a5c:	2320      	movs	r3, #32
  207a5e:	f383 8811 	msr	BASEPRI, r3
  207a62:	2300      	movs	r3, #0
  207a64:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
  207a68:	2104      	movs	r1, #4
  207a6a:	2220      	movs	r2, #32
  207a6c:	6021      	str	r1, [r4, #0]
  207a6e:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
  207a72:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
  207a76:	b10a      	cbz	r2, 207a7c <rt_test_002_002_execute.lto_priv.101+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  207a78:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
  207a7c:	f3ef 8311 	mrs	r3, BASEPRI
  207a80:	b113      	cbz	r3, 207a88 <rt_test_002_002_execute.lto_priv.101+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  207a82:	2300      	movs	r3, #0
  207a84:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
  207a88:	2105      	movs	r1, #5
  vtp->func = NULL;
  207a8a:	2200      	movs	r2, #0
  207a8c:	2320      	movs	r3, #32
  207a8e:	6021      	str	r1, [r4, #0]
  207a90:	9204      	str	r2, [sp, #16]
  207a92:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
  207a96:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
  207a98:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
  207a9a:	b113      	cbz	r3, 207aa2 <rt_test_002_002_execute.lto_priv.101+0x92>
    chVTDoResetI(vtp);
  207a9c:	4620      	mov	r0, r4
  207a9e:	f7ff fbc7 	bl	207230 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
  207aa2:	4620      	mov	r0, r4
  207aa4:	2300      	movs	r3, #0
  207aa6:	4a0d      	ldr	r2, [pc, #52]	; (207adc <rt_test_002_002_execute.lto_priv.101+0xcc>)
  207aa8:	2101      	movs	r1, #1
  207aaa:	f7ff fbf9 	bl	2072a0 <chVTDoSetI>
  207aae:	2400      	movs	r4, #0
  207ab0:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
  207ab4:	200a      	movs	r0, #10
  207ab6:	f7ff fc73 	bl	2073a0 <chThdSleep>
  207aba:	2320      	movs	r3, #32
  207abc:	f383 8811 	msr	BASEPRI, r3
  207ac0:	9804      	ldr	r0, [sp, #16]
  207ac2:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
  207ac6:	fab0 f080 	clz	r0, r0
  207aca:	4905      	ldr	r1, [pc, #20]	; (207ae0 <rt_test_002_002_execute.lto_priv.101+0xd0>)
  207acc:	0940      	lsrs	r0, r0, #5
  207ace:	f7fa fdc7 	bl	202660 <_test_assert>
}
  207ad2:	b006      	add	sp, #24
  207ad4:	bd10      	pop	{r4, pc}
  207ad6:	bf00      	nop
  207ad8:	2000098c 	.word	0x2000098c
  207adc:	00207af1 	.word	0x00207af1
  207ae0:	08009ec0 	.word	0x08009ec0
	...

00207af0 <vtcb>:
static void vtcb(void *p) {
  207af0:	b508      	push	{r3, lr}
  207af2:	2320      	movs	r3, #32
  207af4:	f383 8811 	msr	BASEPRI, r3
  207af8:	2200      	movs	r2, #0
  207afa:	f382 8811 	msr	BASEPRI, r2
  207afe:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
  207b02:	f3ef 8311 	mrs	r3, BASEPRI
  207b06:	b91b      	cbnz	r3, 207b10 <vtcb+0x20>
  207b08:	f7ff fc6a 	bl	2073e0 <chSysGetStatusAndLockX.part.1>
  207b0c:	f7ff fc58 	bl	2073c0 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  207b10:	2300      	movs	r3, #0
  207b12:	f383 8811 	msr	BASEPRI, r3
  207b16:	bd08      	pop	{r3, pc}
	...

00207b20 <rt_test_002_001_execute.lto_priv.100>:
static void rt_test_002_001_execute(void) {
  207b20:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
  207b22:	2001      	movs	r0, #1
  207b24:	4d23      	ldr	r5, [pc, #140]	; (207bb4 <rt_test_002_001_execute.lto_priv.100+0x94>)
  207b26:	2420      	movs	r4, #32
  207b28:	6028      	str	r0, [r5, #0]
  207b2a:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
  207b2e:	f7ff fc5f 	bl	2073f0 <chSysIntegrityCheckI>
  207b32:	2300      	movs	r3, #0
  207b34:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
  207b38:	f080 0001 	eor.w	r0, r0, #1
  207b3c:	491e      	ldr	r1, [pc, #120]	; (207bb8 <rt_test_002_001_execute.lto_priv.100+0x98>)
  207b3e:	b2c0      	uxtb	r0, r0
  207b40:	f7fa fd8e 	bl	202660 <_test_assert>
  207b44:	b100      	cbz	r0, 207b48 <rt_test_002_001_execute.lto_priv.100+0x28>
  207b46:	bd70      	pop	{r4, r5, r6, pc}
  207b48:	4606      	mov	r6, r0
  test_set_step(2);
  207b4a:	2002      	movs	r0, #2
  207b4c:	6028      	str	r0, [r5, #0]
  207b4e:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
  207b52:	f7ff fc4d 	bl	2073f0 <chSysIntegrityCheckI>
  207b56:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "virtual timers list check failed");
  207b5a:	f080 0001 	eor.w	r0, r0, #1
  207b5e:	4917      	ldr	r1, [pc, #92]	; (207bbc <rt_test_002_001_execute.lto_priv.100+0x9c>)
  207b60:	b2c0      	uxtb	r0, r0
  207b62:	f7fa fd7d 	bl	202660 <_test_assert>
  207b66:	4606      	mov	r6, r0
  207b68:	2800      	cmp	r0, #0
  207b6a:	d1ec      	bne.n	207b46 <rt_test_002_001_execute.lto_priv.100+0x26>
  test_set_step(3);
  207b6c:	2303      	movs	r3, #3
  207b6e:	602b      	str	r3, [r5, #0]
  207b70:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
  207b74:	2004      	movs	r0, #4
  207b76:	f7ff fc3b 	bl	2073f0 <chSysIntegrityCheckI>
  207b7a:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "registry list check failed");
  207b7e:	f080 0001 	eor.w	r0, r0, #1
  207b82:	490f      	ldr	r1, [pc, #60]	; (207bc0 <rt_test_002_001_execute.lto_priv.100+0xa0>)
  207b84:	b2c0      	uxtb	r0, r0
  207b86:	f7fa fd6b 	bl	202660 <_test_assert>
  207b8a:	4606      	mov	r6, r0
  207b8c:	2800      	cmp	r0, #0
  207b8e:	d1da      	bne.n	207b46 <rt_test_002_001_execute.lto_priv.100+0x26>
  test_set_step(4);
  207b90:	2304      	movs	r3, #4
  207b92:	602b      	str	r3, [r5, #0]
  207b94:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  207b98:	2008      	movs	r0, #8
  207b9a:	f7ff fc29 	bl	2073f0 <chSysIntegrityCheckI>
  207b9e:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "port layer check failed");
  207ba2:	f080 0001 	eor.w	r0, r0, #1
  207ba6:	4907      	ldr	r1, [pc, #28]	; (207bc4 <rt_test_002_001_execute.lto_priv.100+0xa4>)
  207ba8:	b2c0      	uxtb	r0, r0
}
  207baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
  207bae:	f7fa bd57 	b.w	202660 <_test_assert>
  207bb2:	bf00      	nop
  207bb4:	2000098c 	.word	0x2000098c
  207bb8:	08009e50 	.word	0x08009e50
  207bbc:	08009e68 	.word	0x08009e68
  207bc0:	08009e8c 	.word	0x08009e8c
  207bc4:	08009ea8 	.word	0x08009ea8

00207bc8 <memset>:
  207bc8:	b470      	push	{r4, r5, r6}
  207bca:	0786      	lsls	r6, r0, #30
  207bcc:	d046      	beq.n	207c5c <memset+0x94>
  207bce:	1e54      	subs	r4, r2, #1
  207bd0:	2a00      	cmp	r2, #0
  207bd2:	d041      	beq.n	207c58 <memset+0x90>
  207bd4:	b2ca      	uxtb	r2, r1
  207bd6:	4603      	mov	r3, r0
  207bd8:	e002      	b.n	207be0 <memset+0x18>
  207bda:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
  207bde:	d33b      	bcc.n	207c58 <memset+0x90>
  207be0:	f803 2b01 	strb.w	r2, [r3], #1
  207be4:	079d      	lsls	r5, r3, #30
  207be6:	d1f8      	bne.n	207bda <memset+0x12>
  207be8:	2c03      	cmp	r4, #3
  207bea:	d92e      	bls.n	207c4a <memset+0x82>
  207bec:	b2cd      	uxtb	r5, r1
  207bee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  207bf2:	2c0f      	cmp	r4, #15
  207bf4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  207bf8:	d919      	bls.n	207c2e <memset+0x66>
  207bfa:	f103 0210 	add.w	r2, r3, #16
  207bfe:	4626      	mov	r6, r4
  207c00:	3e10      	subs	r6, #16
  207c02:	2e0f      	cmp	r6, #15
  207c04:	f842 5c10 	str.w	r5, [r2, #-16]
  207c08:	f842 5c0c 	str.w	r5, [r2, #-12]
  207c0c:	f842 5c08 	str.w	r5, [r2, #-8]
  207c10:	f842 5c04 	str.w	r5, [r2, #-4]
  207c14:	f102 0210 	add.w	r2, r2, #16
  207c18:	d8f2      	bhi.n	207c00 <memset+0x38>
  207c1a:	f1a4 0210 	sub.w	r2, r4, #16
  207c1e:	f022 020f 	bic.w	r2, r2, #15
  207c22:	f004 040f 	and.w	r4, r4, #15
  207c26:	3210      	adds	r2, #16
  207c28:	2c03      	cmp	r4, #3
  207c2a:	4413      	add	r3, r2
  207c2c:	d90d      	bls.n	207c4a <memset+0x82>
  207c2e:	461e      	mov	r6, r3
  207c30:	4622      	mov	r2, r4
  207c32:	3a04      	subs	r2, #4
  207c34:	2a03      	cmp	r2, #3
  207c36:	f846 5b04 	str.w	r5, [r6], #4
  207c3a:	d8fa      	bhi.n	207c32 <memset+0x6a>
  207c3c:	1f22      	subs	r2, r4, #4
  207c3e:	f022 0203 	bic.w	r2, r2, #3
  207c42:	3204      	adds	r2, #4
  207c44:	4413      	add	r3, r2
  207c46:	f004 0403 	and.w	r4, r4, #3
  207c4a:	b12c      	cbz	r4, 207c58 <memset+0x90>
  207c4c:	b2c9      	uxtb	r1, r1
  207c4e:	441c      	add	r4, r3
  207c50:	f803 1b01 	strb.w	r1, [r3], #1
  207c54:	429c      	cmp	r4, r3
  207c56:	d1fb      	bne.n	207c50 <memset+0x88>
  207c58:	bc70      	pop	{r4, r5, r6}
  207c5a:	4770      	bx	lr
  207c5c:	4614      	mov	r4, r2
  207c5e:	4603      	mov	r3, r0
  207c60:	e7c2      	b.n	207be8 <memset+0x20>
  207c62:	bf00      	nop

00207c64 <strncmp>:
  207c64:	2a00      	cmp	r2, #0
  207c66:	d041      	beq.n	207cec <strncmp+0x88>
  207c68:	ea40 0301 	orr.w	r3, r0, r1
  207c6c:	f013 0303 	ands.w	r3, r3, #3
  207c70:	b4f0      	push	{r4, r5, r6, r7}
  207c72:	d125      	bne.n	207cc0 <strncmp+0x5c>
  207c74:	2a03      	cmp	r2, #3
  207c76:	d923      	bls.n	207cc0 <strncmp+0x5c>
  207c78:	6804      	ldr	r4, [r0, #0]
  207c7a:	680d      	ldr	r5, [r1, #0]
  207c7c:	42ac      	cmp	r4, r5
  207c7e:	d11f      	bne.n	207cc0 <strncmp+0x5c>
  207c80:	3a04      	subs	r2, #4
  207c82:	d038      	beq.n	207cf6 <strncmp+0x92>
  207c84:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  207c88:	ea25 0404 	bic.w	r4, r5, r4
  207c8c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  207c90:	d12e      	bne.n	207cf0 <strncmp+0x8c>
  207c92:	3004      	adds	r0, #4
  207c94:	3104      	adds	r1, #4
  207c96:	e00f      	b.n	207cb8 <strncmp+0x54>
  207c98:	f850 3b04 	ldr.w	r3, [r0], #4
  207c9c:	680e      	ldr	r6, [r1, #0]
  207c9e:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  207ca2:	42b3      	cmp	r3, r6
  207ca4:	ea24 0403 	bic.w	r4, r4, r3
  207ca8:	f101 0104 	add.w	r1, r1, #4
  207cac:	d126      	bne.n	207cfc <strncmp+0x98>
  207cae:	3a04      	subs	r2, #4
  207cb0:	d021      	beq.n	207cf6 <strncmp+0x92>
  207cb2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  207cb6:	d11b      	bne.n	207cf0 <strncmp+0x8c>
  207cb8:	2a03      	cmp	r2, #3
  207cba:	4607      	mov	r7, r0
  207cbc:	460d      	mov	r5, r1
  207cbe:	d8eb      	bhi.n	207c98 <strncmp+0x34>
  207cc0:	7805      	ldrb	r5, [r0, #0]
  207cc2:	780c      	ldrb	r4, [r1, #0]
  207cc4:	42ac      	cmp	r4, r5
  207cc6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
  207cca:	d11a      	bne.n	207d02 <strncmp+0x9e>
  207ccc:	b183      	cbz	r3, 207cf0 <strncmp+0x8c>
  207cce:	b914      	cbnz	r4, 207cd6 <strncmp+0x72>
  207cd0:	e00e      	b.n	207cf0 <strncmp+0x8c>
  207cd2:	b16b      	cbz	r3, 207cf0 <strncmp+0x8c>
  207cd4:	b17a      	cbz	r2, 207cf6 <strncmp+0x92>
  207cd6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  207cda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  207cde:	42a2      	cmp	r2, r4
  207ce0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  207ce4:	d0f5      	beq.n	207cd2 <strncmp+0x6e>
  207ce6:	1b10      	subs	r0, r2, r4
  207ce8:	bcf0      	pop	{r4, r5, r6, r7}
  207cea:	4770      	bx	lr
  207cec:	4610      	mov	r0, r2
  207cee:	4770      	bx	lr
  207cf0:	2000      	movs	r0, #0
  207cf2:	bcf0      	pop	{r4, r5, r6, r7}
  207cf4:	4770      	bx	lr
  207cf6:	4610      	mov	r0, r2
  207cf8:	bcf0      	pop	{r4, r5, r6, r7}
  207cfa:	4770      	bx	lr
  207cfc:	4629      	mov	r1, r5
  207cfe:	4638      	mov	r0, r7
  207d00:	e7de      	b.n	207cc0 <strncmp+0x5c>
  207d02:	462a      	mov	r2, r5
  207d04:	e7ef      	b.n	207ce6 <strncmp+0x82>
  207d06:	bf00      	nop

00207d08 <strncpy>:
  207d08:	ea40 0301 	orr.w	r3, r0, r1
  207d0c:	f013 0f03 	tst.w	r3, #3
  207d10:	b470      	push	{r4, r5, r6}
  207d12:	4603      	mov	r3, r0
  207d14:	d024      	beq.n	207d60 <strncpy+0x58>
  207d16:	b1a2      	cbz	r2, 207d42 <strncpy+0x3a>
  207d18:	780c      	ldrb	r4, [r1, #0]
  207d1a:	701c      	strb	r4, [r3, #0]
  207d1c:	3a01      	subs	r2, #1
  207d1e:	3301      	adds	r3, #1
  207d20:	3101      	adds	r1, #1
  207d22:	b13c      	cbz	r4, 207d34 <strncpy+0x2c>
  207d24:	b16a      	cbz	r2, 207d42 <strncpy+0x3a>
  207d26:	f811 4b01 	ldrb.w	r4, [r1], #1
  207d2a:	f803 4b01 	strb.w	r4, [r3], #1
  207d2e:	3a01      	subs	r2, #1
  207d30:	2c00      	cmp	r4, #0
  207d32:	d1f7      	bne.n	207d24 <strncpy+0x1c>
  207d34:	b12a      	cbz	r2, 207d42 <strncpy+0x3a>
  207d36:	441a      	add	r2, r3
  207d38:	2100      	movs	r1, #0
  207d3a:	f803 1b01 	strb.w	r1, [r3], #1
  207d3e:	429a      	cmp	r2, r3
  207d40:	d1fb      	bne.n	207d3a <strncpy+0x32>
  207d42:	bc70      	pop	{r4, r5, r6}
  207d44:	4770      	bx	lr
  207d46:	460e      	mov	r6, r1
  207d48:	f851 5b04 	ldr.w	r5, [r1], #4
  207d4c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  207d50:	ea24 0405 	bic.w	r4, r4, r5
  207d54:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  207d58:	d105      	bne.n	207d66 <strncpy+0x5e>
  207d5a:	f843 5b04 	str.w	r5, [r3], #4
  207d5e:	3a04      	subs	r2, #4
  207d60:	2a03      	cmp	r2, #3
  207d62:	d8f0      	bhi.n	207d46 <strncpy+0x3e>
  207d64:	e7d7      	b.n	207d16 <strncpy+0xe>
  207d66:	4631      	mov	r1, r6
  207d68:	e7d6      	b.n	207d18 <strncpy+0x10>
  207d6a:	bf00      	nop
