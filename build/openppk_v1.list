
build/openppk_v1.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08004000 <_vectors>:
 8004000:	20000400 	.word	0x20000400
 8004004:	08004301 	.word	0x08004301
 8004008:	08004303 	.word	0x08004303
 800400c:	08004302 	.word	0x08004302
 8004010:	08004302 	.word	0x08004302
 8004014:	08004302 	.word	0x08004302
 8004018:	08004302 	.word	0x08004302
 800401c:	08004302 	.word	0x08004302
 8004020:	08004302 	.word	0x08004302
 8004024:	08004302 	.word	0x08004302
 8004028:	08004302 	.word	0x08004302
 800402c:	0800f1f1 	.word	0x0800f1f1
 8004030:	08004302 	.word	0x08004302
 8004034:	08004302 	.word	0x08004302
 8004038:	08004302 	.word	0x08004302
 800403c:	08004302 	.word	0x08004302
 8004040:	08004302 	.word	0x08004302
 8004044:	08004302 	.word	0x08004302
 8004048:	08004302 	.word	0x08004302
 800404c:	08004302 	.word	0x08004302
 8004050:	08004302 	.word	0x08004302
 8004054:	08004302 	.word	0x08004302
 8004058:	08013a91 	.word	0x08013a91
 800405c:	08013af1 	.word	0x08013af1
 8004060:	08013b61 	.word	0x08013b61
 8004064:	08013bd1 	.word	0x08013bd1
 8004068:	08013c41 	.word	0x08013c41
 800406c:	080111b1 	.word	0x080111b1
 8004070:	080111f1 	.word	0x080111f1
 8004074:	08011231 	.word	0x08011231
 8004078:	08011271 	.word	0x08011271
 800407c:	080112b1 	.word	0x080112b1
 8004080:	080112f1 	.word	0x080112f1
 8004084:	08011331 	.word	0x08011331
 8004088:	08004302 	.word	0x08004302
 800408c:	080110e1 	.word	0x080110e1
 8004090:	08011101 	.word	0x08011101
 8004094:	08011121 	.word	0x08011121
 8004098:	08011141 	.word	0x08011141
 800409c:	08013cb1 	.word	0x08013cb1
 80040a0:	08004302 	.word	0x08004302
 80040a4:	08004302 	.word	0x08004302
 80040a8:	08004302 	.word	0x08004302
 80040ac:	08004302 	.word	0x08004302
 80040b0:	0800f921 	.word	0x0800f921
 80040b4:	08004302 	.word	0x08004302
 80040b8:	08004302 	.word	0x08004302
 80040bc:	08004302 	.word	0x08004302
 80040c0:	08004302 	.word	0x08004302
 80040c4:	08004302 	.word	0x08004302
 80040c8:	08004302 	.word	0x08004302
 80040cc:	08004302 	.word	0x08004302
 80040d0:	08004302 	.word	0x08004302
 80040d4:	08004302 	.word	0x08004302
 80040d8:	0800fc91 	.word	0x0800fc91
 80040dc:	0800fcb1 	.word	0x0800fcb1
 80040e0:	08013df1 	.word	0x08013df1
 80040e4:	08004302 	.word	0x08004302
 80040e8:	08004302 	.word	0x08004302
 80040ec:	08004302 	.word	0x08004302
 80040f0:	08004302 	.word	0x08004302
 80040f4:	08004302 	.word	0x08004302
 80040f8:	08004302 	.word	0x08004302
 80040fc:	08011371 	.word	0x08011371
 8004100:	08004302 	.word	0x08004302
 8004104:	08012c01 	.word	0x08012c01
 8004108:	08004302 	.word	0x08004302
 800410c:	08004302 	.word	0x08004302
 8004110:	08004302 	.word	0x08004302
 8004114:	08004302 	.word	0x08004302
 8004118:	08004302 	.word	0x08004302
 800411c:	08004302 	.word	0x08004302
 8004120:	080113b1 	.word	0x080113b1
 8004124:	080113f1 	.word	0x080113f1
 8004128:	08011431 	.word	0x08011431
 800412c:	08011471 	.word	0x08011471
 8004130:	080114b1 	.word	0x080114b1
 8004134:	08004302 	.word	0x08004302
 8004138:	08004302 	.word	0x08004302
 800413c:	08004302 	.word	0x08004302
 8004140:	08004302 	.word	0x08004302
 8004144:	08004302 	.word	0x08004302
 8004148:	08004302 	.word	0x08004302
 800414c:	08012161 	.word	0x08012161
 8004150:	080114f1 	.word	0x080114f1
 8004154:	08011531 	.word	0x08011531
 8004158:	08011571 	.word	0x08011571
 800415c:	08004302 	.word	0x08004302
 8004160:	08004302 	.word	0x08004302
 8004164:	08004302 	.word	0x08004302
 8004168:	08004302 	.word	0x08004302
 800416c:	08004302 	.word	0x08004302
 8004170:	08004302 	.word	0x08004302
 8004174:	08004302 	.word	0x08004302
 8004178:	08004302 	.word	0x08004302
 800417c:	08004302 	.word	0x08004302
 8004180:	08004302 	.word	0x08004302
 8004184:	08004302 	.word	0x08004302
 8004188:	08004302 	.word	0x08004302
 800418c:	08004302 	.word	0x08004302
 8004190:	08004302 	.word	0x08004302
 8004194:	08004302 	.word	0x08004302
 8004198:	08004302 	.word	0x08004302
 800419c:	08004302 	.word	0x08004302
 80041a0:	08004302 	.word	0x08004302
 80041a4:	08004302 	.word	0x08004302
 80041a8:	08004302 	.word	0x08004302
 80041ac:	08004302 	.word	0x08004302
 80041b0:	08004302 	.word	0x08004302
 80041b4:	08004302 	.word	0x08004302
 80041b8:	08004302 	.word	0x08004302
 80041bc:	08004302 	.word	0x08004302
 80041c0:	08004302 	.word	0x08004302
 80041c4:	08004302 	.word	0x08004302
 80041c8:	08004302 	.word	0x08004302
 80041cc:	08004302 	.word	0x08004302
 80041d0:	08004302 	.word	0x08004302
 80041d4:	08004302 	.word	0x08004302
 80041d8:	08004302 	.word	0x08004302
 80041dc:	08004302 	.word	0x08004302

Disassembly of section .text:

080041e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80041e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80041e2:	4838      	ldr	r0, [pc, #224]	; (80042c4 <endfiniloop+0x4>)
                msr     MSP, r0
 80041e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80041e8:	4837      	ldr	r0, [pc, #220]	; (80042c8 <endfiniloop+0x8>)
                msr     PSP, r0
 80041ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80041ee:	4837      	ldr	r0, [pc, #220]	; (80042cc <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80041f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80041f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80041f8:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80041fa:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80041fe:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 8004202:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8004206:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800420a:	6008      	str	r0, [r1, #0]
                dsb
 800420c:	f3bf 8f4f 	dsb	sy
                isb
 8004210:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 8004214:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8004218:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 800421c:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 8004220:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8004224:	6008      	str	r0, [r1, #0]
                dsb
 8004226:	f3bf 8f4f 	dsb	sy
                isb
 800422a:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 800422e:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 8004232:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8004236:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 800423a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800423e:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 8004240:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8004242:	f380 8814 	msr	CONTROL, r0
                isb
 8004246:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 800424a:	f010 ff71 	bl	8015130 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 800424e:	f00b fdef 	bl	800fe30 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8004252:	481f      	ldr	r0, [pc, #124]	; (80042d0 <endfiniloop+0x10>)
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8004254:	491f      	ldr	r1, [pc, #124]	; (80042d4 <endfiniloop+0x14>)
                ldr     r2, =__main_stack_end__
 8004256:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <endfiniloop+0x4>)

08004258 <msloop>:
msloop:
                cmp     r1, r2
 8004258:	4291      	cmp	r1, r2
                itt     lo
 800425a:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800425c:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8004260:	e7fa      	bcc.n	8004258 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8004262:	491d      	ldr	r1, [pc, #116]	; (80042d8 <endfiniloop+0x18>)
                ldr     r2, =__process_stack_end__
 8004264:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <endfiniloop+0x8>)

08004266 <psloop>:
psloop:
                cmp     r1, r2
 8004266:	4291      	cmp	r1, r2
                itt     lo
 8004268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800426a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800426e:	e7fa      	bcc.n	8004266 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8004270:	491a      	ldr	r1, [pc, #104]	; (80042dc <endfiniloop+0x1c>)
                ldr     r2, =_data_start
 8004272:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <endfiniloop+0x20>)
                ldr     r3, =_data_end
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <endfiniloop+0x24>)

08004276 <dloop>:
dloop:
                cmp     r2, r3
 8004276:	429a      	cmp	r2, r3
                ittt    lo
 8004278:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 800427a:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800427e:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8004282:	e7f8      	bcc.n	8004276 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8004284:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8004286:	4918      	ldr	r1, [pc, #96]	; (80042e8 <endfiniloop+0x28>)
                ldr     r2, =_bss_end
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <endfiniloop+0x2c>)

0800428a <bloop>:
bloop:
                cmp     r1, r2
 800428a:	4291      	cmp	r1, r2
                itt     lo
 800428c:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800428e:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8004292:	e7fa      	bcc.n	800428a <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8004294:	f010 ff64 	bl	8015160 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8004298:	f010 ff52 	bl	8015140 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800429c:	4c14      	ldr	r4, [pc, #80]	; (80042f0 <endfiniloop+0x30>)
                ldr     r5, =__init_array_end
 800429e:	4d15      	ldr	r5, [pc, #84]	; (80042f4 <endfiniloop+0x34>)

080042a0 <initloop>:
initloop:
                cmp     r4, r5
 80042a0:	42ac      	cmp	r4, r5
                bge     endinitloop
 80042a2:	da03      	bge.n	80042ac <endinitloop>
                ldr     r1, [r4], #4
 80042a4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80042a8:	4788      	blx	r1
                b       initloop
 80042aa:	e7f9      	b.n	80042a0 <initloop>

080042ac <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80042ac:	f00a fdf8 	bl	800eea0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80042b0:	4c11      	ldr	r4, [pc, #68]	; (80042f8 <endfiniloop+0x38>)
                ldr     r5, =__fini_array_end
 80042b2:	4d12      	ldr	r5, [pc, #72]	; (80042fc <endfiniloop+0x3c>)

080042b4 <finiloop>:
finiloop:
                cmp     r4, r5
 80042b4:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80042b6:	da03      	bge.n	80042c0 <endfiniloop>
                ldr     r1, [r4], #4
 80042b8:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80042bc:	4788      	blx	r1
                b       finiloop
 80042be:	e7f9      	b.n	80042b4 <finiloop>

080042c0 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80042c0:	f010 bf46 	b.w	8015150 <__default_exit>
                /* Interrupts are globally masked initially.*/
                cpsid   i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80042c4:	20000400 	.word	0x20000400
                msr     MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80042c8:	20000800 	.word	0x20000800
                msr     PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80042cc:	08004000 	.word	0x08004000

                /* Early initialization.*/
                bl      __early_init

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80042d0:	55555555 	.word	0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80042d4:	20000000 	.word	0x20000000
                blo     msloop

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80042d8:	20000400 	.word	0x20000400
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80042dc:	0801edf8 	.word	0x0801edf8
                ldr     r2, =_data_start
 80042e0:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80042e4:	2000107c 	.word	0x2000107c

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
                ldr     r1, =_bss_start
 80042e8:	20001080 	.word	0x20001080
                ldr     r2, =_bss_end
 80042ec:	20003040 	.word	0x20003040
                /* Late initialization..*/
                bl      __late_init

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80042f0:	080041e0 	.word	0x080041e0
                ldr     r5, =__init_array_end
 80042f4:	080041e0 	.word	0x080041e0
                /* Main program invocation, r0 contains the returned value.*/
                bl      main

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80042f8:	080041e0 	.word	0x080041e0
                ldr     r5, =__fini_array_end
 80042fc:	080041e0 	.word	0x080041e0

08004300 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8004300:	e76e      	b.n	80041e0 <_crt0_entry>

08004302 <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
         b          _unhandled_exception
 8004302:	e7ff      	b.n	8004304 <_unhandled_exception>

08004304 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8004304:	e7fe      	b.n	8004304 <_unhandled_exception>
 8004306:	46c0      	nop			; (mov r8, r8)

08004308 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8004308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 800430c:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8004310:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8004314:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8004316:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 8004318:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800431c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004320 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8004320:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8004322:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8004326:	4628      	mov	r0, r5
                blx     r4
 8004328:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800432a:	2000      	movs	r0, #0
                bl      chThdExit
 800432c:	f00c fc78 	bl	8010c20 <chThdExit>

08004330 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8004330:	f00c fb06 	bl	8010940 <chSchDoReschedule>

08004334 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8004334:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8004336:	e7fe      	b.n	8004336 <_port_exit_from_isr+0x2>

08004338 <d_make_comp>:
 8004338:	b470      	push	{r4, r5, r6}
 800433a:	1e4c      	subs	r4, r1, #1
 800433c:	2c4a      	cmp	r4, #74	; 0x4a
 800433e:	d82c      	bhi.n	800439a <d_make_comp+0x62>
 8004340:	e8df f004 	tbb	[pc, r4]
 8004344:	3c3c3c3c 	.word	0x3c3c3c3c
 8004348:	2b2b2b2b 	.word	0x2b2b2b2b
 800434c:	263c2626 	.word	0x263c2626
 8004350:	26262626 	.word	0x26262626
 8004354:	26262626 	.word	0x26262626
 8004358:	2b262626 	.word	0x2b262626
 800435c:	27272727 	.word	0x27272727
 8004360:	27272727 	.word	0x27272727
 8004364:	2626263c 	.word	0x2626263c
 8004368:	262b2626 	.word	0x262b2626
 800436c:	2b3c3d27 	.word	0x2b3c3d27
 8004370:	3d27273c 	.word	0x3d27273c
 8004374:	26262b2b 	.word	0x26262b2b
 8004378:	3c3c3c3c 	.word	0x3c3c3c3c
 800437c:	3c3c263c 	.word	0x3c3c263c
 8004380:	2b2b3c26 	.word	0x2b2b3c26
 8004384:	2b262626 	.word	0x2b262626
 8004388:	26262b2b 	.word	0x26262b2b
 800438c:	3c26      	.short	0x3c26
 800438e:	3c          	.byte	0x3c
 800438f:	00          	.byte	0x00
 8004390:	b1ca      	cbz	r2, 80043c6 <d_make_comp+0x8e>
 8004392:	6944      	ldr	r4, [r0, #20]
 8004394:	6985      	ldr	r5, [r0, #24]
 8004396:	42ac      	cmp	r4, r5
 8004398:	db02      	blt.n	80043a0 <d_make_comp+0x68>
 800439a:	2000      	movs	r0, #0
 800439c:	bc70      	pop	{r4, r5, r6}
 800439e:	4770      	bx	lr
 80043a0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80043a4:	6906      	ldr	r6, [r0, #16]
 80043a6:	3401      	adds	r4, #1
 80043a8:	00ad      	lsls	r5, r5, #2
 80043aa:	6144      	str	r4, [r0, #20]
 80043ac:	1974      	adds	r4, r6, r5
 80043ae:	d00c      	beq.n	80043ca <d_make_comp+0x92>
 80043b0:	5571      	strb	r1, [r6, r5]
 80043b2:	6062      	str	r2, [r4, #4]
 80043b4:	60a3      	str	r3, [r4, #8]
 80043b6:	4620      	mov	r0, r4
 80043b8:	bc70      	pop	{r4, r5, r6}
 80043ba:	4770      	bx	lr
 80043bc:	b11a      	cbz	r2, 80043c6 <d_make_comp+0x8e>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e7      	bne.n	8004392 <d_make_comp+0x5a>
 80043c2:	4618      	mov	r0, r3
 80043c4:	e7ea      	b.n	800439c <d_make_comp+0x64>
 80043c6:	4610      	mov	r0, r2
 80043c8:	e7e8      	b.n	800439c <d_make_comp+0x64>
 80043ca:	4620      	mov	r0, r4
 80043cc:	e7e6      	b.n	800439c <d_make_comp+0x64>
 80043ce:	bf00      	nop

080043d0 <d_make_name>:
 80043d0:	b430      	push	{r4, r5}
 80043d2:	6943      	ldr	r3, [r0, #20]
 80043d4:	6984      	ldr	r4, [r0, #24]
 80043d6:	42a3      	cmp	r3, r4
 80043d8:	da09      	bge.n	80043ee <d_make_name+0x1e>
 80043da:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80043de:	6905      	ldr	r5, [r0, #16]
 80043e0:	3301      	adds	r3, #1
 80043e2:	00a4      	lsls	r4, r4, #2
 80043e4:	6143      	str	r3, [r0, #20]
 80043e6:	192b      	adds	r3, r5, r4
 80043e8:	d001      	beq.n	80043ee <d_make_name+0x1e>
 80043ea:	b101      	cbz	r1, 80043ee <d_make_name+0x1e>
 80043ec:	b912      	cbnz	r2, 80043f4 <d_make_name+0x24>
 80043ee:	2000      	movs	r0, #0
 80043f0:	bc30      	pop	{r4, r5}
 80043f2:	4770      	bx	lr
 80043f4:	2000      	movs	r0, #0
 80043f6:	5528      	strb	r0, [r5, r4]
 80043f8:	6059      	str	r1, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	bc30      	pop	{r4, r5}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop

08004404 <d_cv_qualifiers>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	68c3      	ldr	r3, [r0, #12]
 8004408:	4615      	mov	r5, r2
 800440a:	4604      	mov	r4, r0
 800440c:	460e      	mov	r6, r1
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	460f      	mov	r7, r1
 8004412:	e016      	b.n	8004442 <d_cv_qualifiers+0x3e>
 8004414:	2a56      	cmp	r2, #86	; 0x56
 8004416:	d024      	beq.n	8004462 <d_cv_qualifiers+0x5e>
 8004418:	2a4b      	cmp	r2, #75	; 0x4b
 800441a:	d12f      	bne.n	800447c <d_cv_qualifiers+0x78>
 800441c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800441e:	60e1      	str	r1, [r4, #12]
 8004420:	2d00      	cmp	r5, #0
 8004422:	f103 0306 	add.w	r3, r3, #6
 8004426:	6323      	str	r3, [r4, #48]	; 0x30
 8004428:	bf14      	ite	ne
 800442a:	211e      	movne	r1, #30
 800442c:	211b      	moveq	r1, #27
 800442e:	2200      	movs	r2, #0
 8004430:	4613      	mov	r3, r2
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff ff80 	bl	8004338 <d_make_comp>
 8004438:	6038      	str	r0, [r7, #0]
 800443a:	b1f0      	cbz	r0, 800447a <d_cv_qualifiers+0x76>
 800443c:	68e3      	ldr	r3, [r4, #12]
 800443e:	781a      	ldrb	r2, [r3, #0]
 8004440:	1d07      	adds	r7, r0, #4
 8004442:	2a72      	cmp	r2, #114	; 0x72
 8004444:	f103 0101 	add.w	r1, r3, #1
 8004448:	d1e4      	bne.n	8004414 <d_cv_qualifiers+0x10>
 800444a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800444c:	2d00      	cmp	r5, #0
 800444e:	f103 0301 	add.w	r3, r3, #1
 8004452:	f102 0209 	add.w	r2, r2, #9
 8004456:	60e3      	str	r3, [r4, #12]
 8004458:	6322      	str	r2, [r4, #48]	; 0x30
 800445a:	bf14      	ite	ne
 800445c:	211c      	movne	r1, #28
 800445e:	2119      	moveq	r1, #25
 8004460:	e7e5      	b.n	800442e <d_cv_qualifiers+0x2a>
 8004462:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004464:	2d00      	cmp	r5, #0
 8004466:	f103 0301 	add.w	r3, r3, #1
 800446a:	f102 0209 	add.w	r2, r2, #9
 800446e:	60e3      	str	r3, [r4, #12]
 8004470:	6322      	str	r2, [r4, #48]	; 0x30
 8004472:	bf14      	ite	ne
 8004474:	211d      	movne	r1, #29
 8004476:	211a      	moveq	r1, #26
 8004478:	e7d9      	b.n	800442e <d_cv_qualifiers+0x2a>
 800447a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800447c:	b9ad      	cbnz	r5, 80044aa <d_cv_qualifiers+0xa6>
 800447e:	2a46      	cmp	r2, #70	; 0x46
 8004480:	d113      	bne.n	80044aa <d_cv_qualifiers+0xa6>
 8004482:	42b7      	cmp	r7, r6
 8004484:	d011      	beq.n	80044aa <d_cv_qualifiers+0xa6>
 8004486:	201d      	movs	r0, #29
 8004488:	211e      	movs	r1, #30
 800448a:	221c      	movs	r2, #28
 800448c:	e007      	b.n	800449e <d_cv_qualifiers+0x9a>
 800448e:	2b1b      	cmp	r3, #27
 8004490:	d00d      	beq.n	80044ae <d_cv_qualifiers+0xaa>
 8004492:	2b19      	cmp	r3, #25
 8004494:	d100      	bne.n	8004498 <d_cv_qualifiers+0x94>
 8004496:	7032      	strb	r2, [r6, #0]
 8004498:	3604      	adds	r6, #4
 800449a:	42b7      	cmp	r7, r6
 800449c:	d005      	beq.n	80044aa <d_cv_qualifiers+0xa6>
 800449e:	6836      	ldr	r6, [r6, #0]
 80044a0:	7833      	ldrb	r3, [r6, #0]
 80044a2:	2b1a      	cmp	r3, #26
 80044a4:	d1f3      	bne.n	800448e <d_cv_qualifiers+0x8a>
 80044a6:	7030      	strb	r0, [r6, #0]
 80044a8:	e7f6      	b.n	8004498 <d_cv_qualifiers+0x94>
 80044aa:	4638      	mov	r0, r7
 80044ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ae:	7031      	strb	r1, [r6, #0]
 80044b0:	e7f2      	b.n	8004498 <d_cv_qualifiers+0x94>
 80044b2:	bf00      	nop

080044b4 <d_ref_qualifier>:
 80044b4:	68c3      	ldr	r3, [r0, #12]
 80044b6:	460a      	mov	r2, r1
 80044b8:	7819      	ldrb	r1, [r3, #0]
 80044ba:	2952      	cmp	r1, #82	; 0x52
 80044bc:	d00b      	beq.n	80044d6 <d_ref_qualifier+0x22>
 80044be:	294f      	cmp	r1, #79	; 0x4f
 80044c0:	d001      	beq.n	80044c6 <d_ref_qualifier+0x12>
 80044c2:	4610      	mov	r0, r2
 80044c4:	4770      	bx	lr
 80044c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80044c8:	3301      	adds	r3, #1
 80044ca:	3103      	adds	r1, #3
 80044cc:	6301      	str	r1, [r0, #48]	; 0x30
 80044ce:	60c3      	str	r3, [r0, #12]
 80044d0:	2120      	movs	r1, #32
 80044d2:	2300      	movs	r3, #0
 80044d4:	e730      	b.n	8004338 <d_make_comp>
 80044d6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80044d8:	3301      	adds	r3, #1
 80044da:	3102      	adds	r1, #2
 80044dc:	6301      	str	r1, [r0, #48]	; 0x30
 80044de:	60c3      	str	r3, [r0, #12]
 80044e0:	211f      	movs	r1, #31
 80044e2:	2300      	movs	r3, #0
 80044e4:	e728      	b.n	8004338 <d_make_comp>
 80044e6:	bf00      	nop

080044e8 <d_substitution>:
 80044e8:	68c2      	ldr	r2, [r0, #12]
 80044ea:	7813      	ldrb	r3, [r2, #0]
 80044ec:	2b53      	cmp	r3, #83	; 0x53
 80044ee:	d001      	beq.n	80044f4 <d_substitution+0xc>
 80044f0:	2000      	movs	r0, #0
 80044f2:	4770      	bx	lr
 80044f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f8:	1c53      	adds	r3, r2, #1
 80044fa:	60c3      	str	r3, [r0, #12]
 80044fc:	7853      	ldrb	r3, [r2, #1]
 80044fe:	b1eb      	cbz	r3, 800453c <d_substitution+0x54>
 8004500:	1c93      	adds	r3, r2, #2
 8004502:	60c3      	str	r3, [r0, #12]
 8004504:	7854      	ldrb	r4, [r2, #1]
 8004506:	2c5f      	cmp	r4, #95	; 0x5f
 8004508:	d126      	bne.n	8004558 <d_substitution+0x70>
 800450a:	2300      	movs	r3, #0
 800450c:	6a02      	ldr	r2, [r0, #32]
 800450e:	4293      	cmp	r3, r2
 8004510:	d211      	bcs.n	8004536 <d_substitution+0x4e>
 8004512:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004514:	69c1      	ldr	r1, [r0, #28]
 8004516:	3201      	adds	r2, #1
 8004518:	6282      	str	r2, [r0, #40]	; 0x28
 800451a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800451e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004522:	2101      	movs	r1, #1
 8004524:	4b42      	ldr	r3, [pc, #264]	; (8004630 <d_substitution+0x148>)
 8004526:	f103 05c4 	add.w	r5, r3, #196	; 0xc4
 800452a:	781a      	ldrb	r2, [r3, #0]
 800452c:	42a2      	cmp	r2, r4
 800452e:	d03c      	beq.n	80045aa <d_substitution+0xc2>
 8004530:	331c      	adds	r3, #28
 8004532:	42ab      	cmp	r3, r5
 8004534:	d1f9      	bne.n	800452a <d_substitution+0x42>
 8004536:	2000      	movs	r0, #0
 8004538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800453c:	461c      	mov	r4, r3
 800453e:	6883      	ldr	r3, [r0, #8]
 8004540:	071b      	lsls	r3, r3, #28
 8004542:	d4ee      	bmi.n	8004522 <d_substitution+0x3a>
 8004544:	2900      	cmp	r1, #0
 8004546:	d0ed      	beq.n	8004524 <d_substitution+0x3c>
 8004548:	68c3      	ldr	r3, [r0, #12]
 800454a:	7819      	ldrb	r1, [r3, #0]
 800454c:	3943      	subs	r1, #67	; 0x43
 800454e:	2901      	cmp	r1, #1
 8004550:	bf8c      	ite	hi
 8004552:	2100      	movhi	r1, #0
 8004554:	2101      	movls	r1, #1
 8004556:	e7e5      	b.n	8004524 <d_substitution+0x3c>
 8004558:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 800455c:	b2eb      	uxtb	r3, r5
 800455e:	2b09      	cmp	r3, #9
 8004560:	d860      	bhi.n	8004624 <d_substitution+0x13c>
 8004562:	2100      	movs	r1, #0
 8004564:	e00d      	b.n	8004582 <d_substitution+0x9a>
 8004566:	3b30      	subs	r3, #48	; 0x30
 8004568:	4299      	cmp	r1, r3
 800456a:	d8e4      	bhi.n	8004536 <d_substitution+0x4e>
 800456c:	68c2      	ldr	r2, [r0, #12]
 800456e:	7814      	ldrb	r4, [r2, #0]
 8004570:	1c51      	adds	r1, r2, #1
 8004572:	b11c      	cbz	r4, 800457c <d_substitution+0x94>
 8004574:	60c1      	str	r1, [r0, #12]
 8004576:	7814      	ldrb	r4, [r2, #0]
 8004578:	2c5f      	cmp	r4, #95	; 0x5f
 800457a:	d014      	beq.n	80045a6 <d_substitution+0xbe>
 800457c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8004580:	4619      	mov	r1, r3
 8004582:	b2ed      	uxtb	r5, r5
 8004584:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8004588:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800458c:	2d09      	cmp	r5, #9
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004594:	d9e7      	bls.n	8004566 <d_substitution+0x7e>
 8004596:	2a19      	cmp	r2, #25
 8004598:	d8cd      	bhi.n	8004536 <d_substitution+0x4e>
 800459a:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800459e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80045a2:	3b37      	subs	r3, #55	; 0x37
 80045a4:	e7e0      	b.n	8004568 <d_substitution+0x80>
 80045a6:	3301      	adds	r3, #1
 80045a8:	e7b0      	b.n	800450c <d_substitution+0x24>
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	2a00      	cmp	r2, #0
 80045ae:	d034      	beq.n	800461a <d_substitution+0x132>
 80045b0:	6944      	ldr	r4, [r0, #20]
 80045b2:	6985      	ldr	r5, [r0, #24]
 80045b4:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80045b8:	42ac      	cmp	r4, r5
 80045ba:	da2c      	bge.n	8004616 <d_substitution+0x12e>
 80045bc:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80045c0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80045c4:	00b6      	lsls	r6, r6, #2
 80045c6:	3401      	adds	r4, #1
 80045c8:	eb1e 0706 	adds.w	r7, lr, r6
 80045cc:	6144      	str	r4, [r0, #20]
 80045ce:	d027      	beq.n	8004620 <d_substitution+0x138>
 80045d0:	f04f 0818 	mov.w	r8, #24
 80045d4:	f80e 8006 	strb.w	r8, [lr, r6]
 80045d8:	463e      	mov	r6, r7
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	f8c7 c008 	str.w	ip, [r7, #8]
 80045e0:	62c6      	str	r6, [r0, #44]	; 0x2c
 80045e2:	b1a9      	cbz	r1, 8004610 <d_substitution+0x128>
 80045e4:	68de      	ldr	r6, [r3, #12]
 80045e6:	6919      	ldr	r1, [r3, #16]
 80045e8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80045ea:	42a5      	cmp	r5, r4
 80045ec:	440a      	add	r2, r1
 80045ee:	6302      	str	r2, [r0, #48]	; 0x30
 80045f0:	dda1      	ble.n	8004536 <d_substitution+0x4e>
 80045f2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80045f6:	6905      	ldr	r5, [r0, #16]
 80045f8:	1c63      	adds	r3, r4, #1
 80045fa:	0092      	lsls	r2, r2, #2
 80045fc:	6143      	str	r3, [r0, #20]
 80045fe:	18ab      	adds	r3, r5, r2
 8004600:	d099      	beq.n	8004536 <d_substitution+0x4e>
 8004602:	2018      	movs	r0, #24
 8004604:	54a8      	strb	r0, [r5, r2]
 8004606:	605e      	str	r6, [r3, #4]
 8004608:	6099      	str	r1, [r3, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004610:	685e      	ldr	r6, [r3, #4]
 8004612:	6899      	ldr	r1, [r3, #8]
 8004614:	e7e8      	b.n	80045e8 <d_substitution+0x100>
 8004616:	2600      	movs	r6, #0
 8004618:	e7e2      	b.n	80045e0 <d_substitution+0xf8>
 800461a:	6985      	ldr	r5, [r0, #24]
 800461c:	6944      	ldr	r4, [r0, #20]
 800461e:	e7e0      	b.n	80045e2 <d_substitution+0xfa>
 8004620:	463e      	mov	r6, r7
 8004622:	e7dd      	b.n	80045e0 <d_substitution+0xf8>
 8004624:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004628:	2b19      	cmp	r3, #25
 800462a:	d99a      	bls.n	8004562 <d_substitution+0x7a>
 800462c:	e787      	b.n	800453e <d_substitution+0x56>
 800462e:	bf00      	nop
 8004630:	0801cf24 	.word	0x0801cf24

08004634 <d_count_templates_scopes>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	4605      	mov	r5, r0
 8004638:	460e      	mov	r6, r1
 800463a:	4614      	mov	r4, r2
 800463c:	2a00      	cmp	r2, #0
 800463e:	d048      	beq.n	80046d2 <d_count_templates_scopes+0x9e>
 8004640:	7823      	ldrb	r3, [r4, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	2b4a      	cmp	r3, #74	; 0x4a
 8004646:	d82a      	bhi.n	800469e <d_count_templates_scopes+0x6a>
 8004648:	e8df f003 	tbb	[pc, r3]
 800464c:	3e353535 	.word	0x3e353535
 8004650:	26262929 	.word	0x26262929
 8004654:	35353535 	.word	0x35353535
 8004658:	35353535 	.word	0x35353535
 800465c:	35353535 	.word	0x35353535
 8004660:	29353535 	.word	0x29353535
 8004664:	35353535 	.word	0x35353535
 8004668:	35353535 	.word	0x35353535
 800466c:	2e2e3535 	.word	0x2e2e3535
 8004670:	35293535 	.word	0x35293535
 8004674:	35353535 	.word	0x35353535
 8004678:	35353535 	.word	0x35353535
 800467c:	35352629 	.word	0x35352629
 8004680:	35353535 	.word	0x35353535
 8004684:	35353535 	.word	0x35353535
 8004688:	29293535 	.word	0x29293535
 800468c:	2a2a2a35 	.word	0x2a2a2a35
 8004690:	3535292a 	.word	0x3535292a
 8004694:	3535      	.short	0x3535
 8004696:	35          	.byte	0x35
 8004697:	00          	.byte	0x00
 8004698:	68a4      	ldr	r4, [r4, #8]
 800469a:	2c00      	cmp	r4, #0
 800469c:	d1d0      	bne.n	8004640 <d_count_templates_scopes+0xc>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	6864      	ldr	r4, [r4, #4]
 80046a2:	2c00      	cmp	r4, #0
 80046a4:	d1cc      	bne.n	8004640 <d_count_templates_scopes+0xc>
 80046a6:	e7fa      	b.n	800469e <d_count_templates_scopes+0x6a>
 80046a8:	6862      	ldr	r2, [r4, #4]
 80046aa:	7813      	ldrb	r3, [r2, #0]
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d103      	bne.n	80046b8 <d_count_templates_scopes+0x84>
 80046b0:	6833      	ldr	r3, [r6, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	6033      	str	r3, [r6, #0]
 80046b6:	6862      	ldr	r2, [r4, #4]
 80046b8:	4628      	mov	r0, r5
 80046ba:	4631      	mov	r1, r6
 80046bc:	f7ff ffba 	bl	8004634 <d_count_templates_scopes>
 80046c0:	68a4      	ldr	r4, [r4, #8]
 80046c2:	2c00      	cmp	r4, #0
 80046c4:	d1bc      	bne.n	8004640 <d_count_templates_scopes+0xc>
 80046c6:	e7ea      	b.n	800469e <d_count_templates_scopes+0x6a>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	602b      	str	r3, [r5, #0]
 80046ce:	6862      	ldr	r2, [r4, #4]
 80046d0:	e7f2      	b.n	80046b8 <d_count_templates_scopes+0x84>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}

080046d4 <d_append_char>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	460d      	mov	r5, r1
 80046d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80046dc:	29ff      	cmp	r1, #255	; 0xff
 80046de:	4604      	mov	r4, r0
 80046e0:	d006      	beq.n	80046f0 <d_append_char+0x1c>
 80046e2:	1c4b      	adds	r3, r1, #1
 80046e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80046e8:	5465      	strb	r5, [r4, r1]
 80046ea:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	2600      	movs	r6, #0
 80046f2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80046f6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80046fa:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80046fe:	4798      	blx	r3
 8004700:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004704:	4631      	mov	r1, r6
 8004706:	3301      	adds	r3, #1
 8004708:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800470c:	2301      	movs	r3, #1
 800470e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004712:	5465      	strb	r5, [r4, r1]
 8004714:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004718:	bd70      	pop	{r4, r5, r6, pc}
 800471a:	bf00      	nop

0800471c <d_number.isra.0>:
 800471c:	b470      	push	{r4, r5, r6}
 800471e:	6803      	ldr	r3, [r0, #0]
 8004720:	7819      	ldrb	r1, [r3, #0]
 8004722:	296e      	cmp	r1, #110	; 0x6e
 8004724:	d01b      	beq.n	800475e <d_number.isra.0+0x42>
 8004726:	2500      	movs	r5, #0
 8004728:	462e      	mov	r6, r5
 800472a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800472e:	2b09      	cmp	r3, #9
 8004730:	bf88      	it	hi
 8004732:	2300      	movhi	r3, #0
 8004734:	d80e      	bhi.n	8004754 <d_number.isra.0+0x38>
 8004736:	6802      	ldr	r2, [r0, #0]
 8004738:	2300      	movs	r3, #0
 800473a:	3201      	adds	r2, #1
 800473c:	6002      	str	r2, [r0, #0]
 800473e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004742:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004746:	7811      	ldrb	r1, [r2, #0]
 8004748:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
 800474c:	2c09      	cmp	r4, #9
 800474e:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8004752:	d9f2      	bls.n	800473a <d_number.isra.0+0x1e>
 8004754:	ea83 0006 	eor.w	r0, r3, r6
 8004758:	4428      	add	r0, r5
 800475a:	bc70      	pop	{r4, r5, r6}
 800475c:	4770      	bx	lr
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	6002      	str	r2, [r0, #0]
 8004762:	7859      	ldrb	r1, [r3, #1]
 8004764:	2501      	movs	r5, #1
 8004766:	f04f 36ff 	mov.w	r6, #4294967295
 800476a:	e7de      	b.n	800472a <d_number.isra.0+0xe>

0800476c <d_number_component>:
 800476c:	6943      	ldr	r3, [r0, #20]
 800476e:	6982      	ldr	r2, [r0, #24]
 8004770:	4293      	cmp	r3, r2
 8004772:	da14      	bge.n	800479e <d_number_component+0x32>
 8004774:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004778:	6901      	ldr	r1, [r0, #16]
 800477a:	0092      	lsls	r2, r2, #2
 800477c:	b510      	push	{r4, lr}
 800477e:	3301      	adds	r3, #1
 8004780:	188c      	adds	r4, r1, r2
 8004782:	6143      	str	r3, [r0, #20]
 8004784:	d008      	beq.n	8004798 <d_number_component+0x2c>
 8004786:	2340      	movs	r3, #64	; 0x40
 8004788:	548b      	strb	r3, [r1, r2]
 800478a:	300c      	adds	r0, #12
 800478c:	f7ff ffc6 	bl	800471c <d_number.isra.0>
 8004790:	4623      	mov	r3, r4
 8004792:	6060      	str	r0, [r4, #4]
 8004794:	4618      	mov	r0, r3
 8004796:	bd10      	pop	{r4, pc}
 8004798:	4623      	mov	r3, r4
 800479a:	4618      	mov	r0, r3
 800479c:	bd10      	pop	{r4, pc}
 800479e:	2300      	movs	r3, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	4770      	bx	lr

080047a4 <d_compact_number>:
 80047a4:	b510      	push	{r4, lr}
 80047a6:	68c3      	ldr	r3, [r0, #12]
 80047a8:	781a      	ldrb	r2, [r3, #0]
 80047aa:	2a5f      	cmp	r2, #95	; 0x5f
 80047ac:	4604      	mov	r4, r0
 80047ae:	d00b      	beq.n	80047c8 <d_compact_number+0x24>
 80047b0:	2a6e      	cmp	r2, #110	; 0x6e
 80047b2:	d006      	beq.n	80047c2 <d_compact_number+0x1e>
 80047b4:	300c      	adds	r0, #12
 80047b6:	f7ff ffb1 	bl	800471c <d_number.isra.0>
 80047ba:	68e3      	ldr	r3, [r4, #12]
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	2a5f      	cmp	r2, #95	; 0x5f
 80047c0:	d006      	beq.n	80047d0 <d_compact_number+0x2c>
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295
 80047c6:	bd10      	pop	{r4, pc}
 80047c8:	2000      	movs	r0, #0
 80047ca:	3301      	adds	r3, #1
 80047cc:	60e3      	str	r3, [r4, #12]
 80047ce:	bd10      	pop	{r4, pc}
 80047d0:	3001      	adds	r0, #1
 80047d2:	e7fa      	b.n	80047ca <d_compact_number+0x26>

080047d4 <d_template_param>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	68c3      	ldr	r3, [r0, #12]
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	2a54      	cmp	r2, #84	; 0x54
 80047dc:	4604      	mov	r4, r0
 80047de:	d001      	beq.n	80047e4 <d_template_param+0x10>
 80047e0:	2000      	movs	r0, #0
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	3301      	adds	r3, #1
 80047e6:	60c3      	str	r3, [r0, #12]
 80047e8:	f7ff ffdc 	bl	80047a4 <d_compact_number>
 80047ec:	1e05      	subs	r5, r0, #0
 80047ee:	dbf7      	blt.n	80047e0 <d_template_param+0xc>
 80047f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80047f2:	6963      	ldr	r3, [r4, #20]
 80047f4:	69a1      	ldr	r1, [r4, #24]
 80047f6:	3201      	adds	r2, #1
 80047f8:	428b      	cmp	r3, r1
 80047fa:	62a2      	str	r2, [r4, #40]	; 0x28
 80047fc:	daf0      	bge.n	80047e0 <d_template_param+0xc>
 80047fe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004802:	6921      	ldr	r1, [r4, #16]
 8004804:	3301      	adds	r3, #1
 8004806:	0092      	lsls	r2, r2, #2
 8004808:	6163      	str	r3, [r4, #20]
 800480a:	188b      	adds	r3, r1, r2
 800480c:	d0e8      	beq.n	80047e0 <d_template_param+0xc>
 800480e:	2405      	movs	r4, #5
 8004810:	548c      	strb	r4, [r1, r2]
 8004812:	605d      	str	r5, [r3, #4]
 8004814:	4618      	mov	r0, r3
 8004816:	bd38      	pop	{r3, r4, r5, pc}

08004818 <d_discriminator>:
 8004818:	b508      	push	{r3, lr}
 800481a:	68c3      	ldr	r3, [r0, #12]
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	2a5f      	cmp	r2, #95	; 0x5f
 8004820:	d001      	beq.n	8004826 <d_discriminator+0xe>
 8004822:	2001      	movs	r0, #1
 8004824:	bd08      	pop	{r3, pc}
 8004826:	3301      	adds	r3, #1
 8004828:	f840 3f0c 	str.w	r3, [r0, #12]!
 800482c:	f7ff ff76 	bl	800471c <d_number.isra.0>
 8004830:	43c0      	mvns	r0, r0
 8004832:	0fc0      	lsrs	r0, r0, #31
 8004834:	bd08      	pop	{r3, pc}
 8004836:	bf00      	nop

08004838 <d_source_name>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4604      	mov	r4, r0
 800483c:	300c      	adds	r0, #12
 800483e:	f7ff ff6d 	bl	800471c <d_number.isra.0>
 8004842:	1e06      	subs	r6, r0, #0
 8004844:	dd32      	ble.n	80048ac <d_source_name+0x74>
 8004846:	68e5      	ldr	r5, [r4, #12]
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	1b5b      	subs	r3, r3, r5
 800484c:	429e      	cmp	r6, r3
 800484e:	dc2f      	bgt.n	80048b0 <d_source_name+0x78>
 8004850:	68a2      	ldr	r2, [r4, #8]
 8004852:	19ab      	adds	r3, r5, r6
 8004854:	0752      	lsls	r2, r2, #29
 8004856:	60e3      	str	r3, [r4, #12]
 8004858:	d415      	bmi.n	8004886 <d_source_name+0x4e>
 800485a:	2e09      	cmp	r6, #9
 800485c:	dd0c      	ble.n	8004878 <d_source_name+0x40>
 800485e:	4628      	mov	r0, r5
 8004860:	4914      	ldr	r1, [pc, #80]	; (80048b4 <d_source_name+0x7c>)
 8004862:	2208      	movs	r2, #8
 8004864:	f012 fd4a 	bl	80172fc <memcmp>
 8004868:	b930      	cbnz	r0, 8004878 <d_source_name+0x40>
 800486a:	7a2b      	ldrb	r3, [r5, #8]
 800486c:	2b2e      	cmp	r3, #46	; 0x2e
 800486e:	d010      	beq.n	8004892 <d_source_name+0x5a>
 8004870:	2b5f      	cmp	r3, #95	; 0x5f
 8004872:	d00e      	beq.n	8004892 <d_source_name+0x5a>
 8004874:	2b24      	cmp	r3, #36	; 0x24
 8004876:	d00c      	beq.n	8004892 <d_source_name+0x5a>
 8004878:	4629      	mov	r1, r5
 800487a:	4632      	mov	r2, r6
 800487c:	4620      	mov	r0, r4
 800487e:	f7ff fda7 	bl	80043d0 <d_make_name>
 8004882:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	5daa      	ldrb	r2, [r5, r6]
 8004888:	2a24      	cmp	r2, #36	; 0x24
 800488a:	bf04      	itt	eq
 800488c:	3301      	addeq	r3, #1
 800488e:	60e3      	streq	r3, [r4, #12]
 8004890:	e7e3      	b.n	800485a <d_source_name+0x22>
 8004892:	7a6b      	ldrb	r3, [r5, #9]
 8004894:	2b4e      	cmp	r3, #78	; 0x4e
 8004896:	d1ef      	bne.n	8004878 <d_source_name+0x40>
 8004898:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800489a:	4907      	ldr	r1, [pc, #28]	; (80048b8 <d_source_name+0x80>)
 800489c:	3316      	adds	r3, #22
 800489e:	1b9e      	subs	r6, r3, r6
 80048a0:	6326      	str	r6, [r4, #48]	; 0x30
 80048a2:	4620      	mov	r0, r4
 80048a4:	2215      	movs	r2, #21
 80048a6:	f7ff fd93 	bl	80043d0 <d_make_name>
 80048aa:	e7ea      	b.n	8004882 <d_source_name+0x4a>
 80048ac:	2000      	movs	r0, #0
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	2000      	movs	r0, #0
 80048b2:	e7e6      	b.n	8004882 <d_source_name+0x4a>
 80048b4:	0801dafc 	.word	0x0801dafc
 80048b8:	0801db08 	.word	0x0801db08

080048bc <d_call_offset>:
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	4604      	mov	r4, r0
 80048c0:	b929      	cbnz	r1, 80048ce <d_call_offset+0x12>
 80048c2:	68c3      	ldr	r3, [r0, #12]
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	b132      	cbz	r2, 80048d6 <d_call_offset+0x1a>
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	60c2      	str	r2, [r0, #12]
 80048cc:	7819      	ldrb	r1, [r3, #0]
 80048ce:	2968      	cmp	r1, #104	; 0x68
 80048d0:	d012      	beq.n	80048f8 <d_call_offset+0x3c>
 80048d2:	2976      	cmp	r1, #118	; 0x76
 80048d4:	d001      	beq.n	80048da <d_call_offset+0x1e>
 80048d6:	2000      	movs	r0, #0
 80048d8:	bd38      	pop	{r3, r4, r5, pc}
 80048da:	f104 050c 	add.w	r5, r4, #12
 80048de:	4628      	mov	r0, r5
 80048e0:	f7ff ff1c 	bl	800471c <d_number.isra.0>
 80048e4:	68e3      	ldr	r3, [r4, #12]
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	2a5f      	cmp	r2, #95	; 0x5f
 80048ea:	d1f4      	bne.n	80048d6 <d_call_offset+0x1a>
 80048ec:	3301      	adds	r3, #1
 80048ee:	60e3      	str	r3, [r4, #12]
 80048f0:	4628      	mov	r0, r5
 80048f2:	f7ff ff13 	bl	800471c <d_number.isra.0>
 80048f6:	e003      	b.n	8004900 <d_call_offset+0x44>
 80048f8:	f104 000c 	add.w	r0, r4, #12
 80048fc:	f7ff ff0e 	bl	800471c <d_number.isra.0>
 8004900:	68e3      	ldr	r3, [r4, #12]
 8004902:	781a      	ldrb	r2, [r3, #0]
 8004904:	2a5f      	cmp	r2, #95	; 0x5f
 8004906:	d1e6      	bne.n	80048d6 <d_call_offset+0x1a>
 8004908:	3301      	adds	r3, #1
 800490a:	60e3      	str	r3, [r4, #12]
 800490c:	2001      	movs	r0, #1
 800490e:	bd38      	pop	{r3, r4, r5, pc}

08004910 <d_lookup_template_argument.isra.6>:
 8004910:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8004914:	4602      	mov	r2, r0
 8004916:	b1c3      	cbz	r3, 800494a <d_lookup_template_argument.isra.6+0x3a>
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	680b      	ldr	r3, [r1, #0]
 800491c:	6890      	ldr	r0, [r2, #8]
 800491e:	b170      	cbz	r0, 800493e <d_lookup_template_argument.isra.6+0x2e>
 8004920:	7802      	ldrb	r2, [r0, #0]
 8004922:	2a2f      	cmp	r2, #47	; 0x2f
 8004924:	d10d      	bne.n	8004942 <d_lookup_template_argument.isra.6+0x32>
 8004926:	2b00      	cmp	r3, #0
 8004928:	dc04      	bgt.n	8004934 <d_lookup_template_argument.isra.6+0x24>
 800492a:	e009      	b.n	8004940 <d_lookup_template_argument.isra.6+0x30>
 800492c:	7802      	ldrb	r2, [r0, #0]
 800492e:	2a2f      	cmp	r2, #47	; 0x2f
 8004930:	d107      	bne.n	8004942 <d_lookup_template_argument.isra.6+0x32>
 8004932:	b143      	cbz	r3, 8004946 <d_lookup_template_argument.isra.6+0x36>
 8004934:	6880      	ldr	r0, [r0, #8]
 8004936:	3b01      	subs	r3, #1
 8004938:	2800      	cmp	r0, #0
 800493a:	d1f7      	bne.n	800492c <d_lookup_template_argument.isra.6+0x1c>
 800493c:	4770      	bx	lr
 800493e:	4770      	bx	lr
 8004940:	d001      	beq.n	8004946 <d_lookup_template_argument.isra.6+0x36>
 8004942:	2000      	movs	r0, #0
 8004944:	4770      	bx	lr
 8004946:	6840      	ldr	r0, [r0, #4]
 8004948:	4770      	bx	lr
 800494a:	2101      	movs	r1, #1
 800494c:	4618      	mov	r0, r3
 800494e:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 8004952:	4770      	bx	lr

08004954 <d_find_pack>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4605      	mov	r5, r0
 8004958:	460c      	mov	r4, r1
 800495a:	b391      	cbz	r1, 80049c2 <d_find_pack+0x6e>
 800495c:	7823      	ldrb	r3, [r4, #0]
 800495e:	2b4a      	cmp	r3, #74	; 0x4a
 8004960:	d827      	bhi.n	80049b2 <d_find_pack+0x5e>
 8004962:	e8df f003 	tbb	[pc, r3]
 8004966:	262e      	.short	0x262e
 8004968:	30262626 	.word	0x30262626
 800496c:	262b2b2e 	.word	0x262b2b2e
 8004970:	26262626 	.word	0x26262626
 8004974:	26262626 	.word	0x26262626
 8004978:	26262626 	.word	0x26262626
 800497c:	262e2626 	.word	0x262e2626
 8004980:	26262626 	.word	0x26262626
 8004984:	26262626 	.word	0x26262626
 8004988:	26262626 	.word	0x26262626
 800498c:	26262e26 	.word	0x26262e26
 8004990:	26262626 	.word	0x26262626
 8004994:	2e262626 	.word	0x2e262626
 8004998:	2626262b 	.word	0x2626262b
 800499c:	26262626 	.word	0x26262626
 80049a0:	26262626 	.word	0x26262626
 80049a4:	26262e26 	.word	0x26262e26
 80049a8:	262e2626 	.word	0x262e2626
 80049ac:	2e26262e 	.word	0x2e26262e
 80049b0:	2e          	.byte	0x2e
 80049b1:	00          	.byte	0x00
 80049b2:	4628      	mov	r0, r5
 80049b4:	6861      	ldr	r1, [r4, #4]
 80049b6:	f7ff ffcd 	bl	8004954 <d_find_pack>
 80049ba:	b918      	cbnz	r0, 80049c4 <d_find_pack+0x70>
 80049bc:	68a4      	ldr	r4, [r4, #8]
 80049be:	2c00      	cmp	r4, #0
 80049c0:	d1cc      	bne.n	800495c <d_find_pack+0x8>
 80049c2:	2000      	movs	r0, #0
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
 80049c6:	4628      	mov	r0, r5
 80049c8:	1d21      	adds	r1, r4, #4
 80049ca:	f7ff ffa1 	bl	8004910 <d_lookup_template_argument.isra.6>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d0f7      	beq.n	80049c2 <d_find_pack+0x6e>
 80049d2:	7803      	ldrb	r3, [r0, #0]
 80049d4:	2b2f      	cmp	r3, #47	; 0x2f
 80049d6:	d1f4      	bne.n	80049c2 <d_find_pack+0x6e>
 80049d8:	bd38      	pop	{r3, r4, r5, pc}
 80049da:	bf00      	nop

080049dc <d_growable_string_callback_adapter>:
 80049dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049de:	6853      	ldr	r3, [r2, #4]
 80049e0:	6894      	ldr	r4, [r2, #8]
 80049e2:	3301      	adds	r3, #1
 80049e4:	440b      	add	r3, r1
 80049e6:	42a3      	cmp	r3, r4
 80049e8:	b083      	sub	sp, #12
 80049ea:	4615      	mov	r5, r2
 80049ec:	460e      	mov	r6, r1
 80049ee:	4607      	mov	r7, r0
 80049f0:	d813      	bhi.n	8004a1a <d_growable_string_callback_adapter+0x3e>
 80049f2:	68ec      	ldr	r4, [r5, #12]
 80049f4:	b10c      	cbz	r4, 80049fa <d_growable_string_callback_adapter+0x1e>
 80049f6:	b003      	add	sp, #12
 80049f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fa:	e895 0009 	ldmia.w	r5, {r0, r3}
 80049fe:	4632      	mov	r2, r6
 8004a00:	4639      	mov	r1, r7
 8004a02:	4418      	add	r0, r3
 8004a04:	f009 f812 	bl	800da2c <memcpy>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	686a      	ldr	r2, [r5, #4]
 8004a0c:	4433      	add	r3, r6
 8004a0e:	549c      	strb	r4, [r3, r2]
 8004a10:	686b      	ldr	r3, [r5, #4]
 8004a12:	441e      	add	r6, r3
 8004a14:	606e      	str	r6, [r5, #4]
 8004a16:	b003      	add	sp, #12
 8004a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1a:	68d2      	ldr	r2, [r2, #12]
 8004a1c:	2a00      	cmp	r2, #0
 8004a1e:	d1ea      	bne.n	80049f6 <d_growable_string_callback_adapter+0x1a>
 8004a20:	b91c      	cbnz	r4, 8004a2a <d_growable_string_callback_adapter+0x4e>
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	f04f 0402 	mov.w	r4, #2
 8004a28:	d902      	bls.n	8004a30 <d_growable_string_callback_adapter+0x54>
 8004a2a:	0064      	lsls	r4, r4, #1
 8004a2c:	42a3      	cmp	r3, r4
 8004a2e:	d8fc      	bhi.n	8004a2a <d_growable_string_callback_adapter+0x4e>
 8004a30:	6828      	ldr	r0, [r5, #0]
 8004a32:	4621      	mov	r1, r4
 8004a34:	f012 fd76 	bl	8017524 <realloc>
 8004a38:	b110      	cbz	r0, 8004a40 <d_growable_string_callback_adapter+0x64>
 8004a3a:	6028      	str	r0, [r5, #0]
 8004a3c:	60ac      	str	r4, [r5, #8]
 8004a3e:	e7d8      	b.n	80049f2 <d_growable_string_callback_adapter+0x16>
 8004a40:	9001      	str	r0, [sp, #4]
 8004a42:	6828      	ldr	r0, [r5, #0]
 8004a44:	f012 f976 	bl	8016d34 <free>
 8004a48:	9b01      	ldr	r3, [sp, #4]
 8004a4a:	602b      	str	r3, [r5, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	606b      	str	r3, [r5, #4]
 8004a50:	60ab      	str	r3, [r5, #8]
 8004a52:	60ea      	str	r2, [r5, #12]
 8004a54:	e7cf      	b.n	80049f6 <d_growable_string_callback_adapter+0x1a>
 8004a56:	bf00      	nop

08004a58 <d_append_string>:
 8004a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	4608      	mov	r0, r1
 8004a60:	460d      	mov	r5, r1
 8004a62:	f012 ffcd 	bl	8017a00 <strlen>
 8004a66:	b348      	cbz	r0, 8004abc <d_append_string+0x64>
 8004a68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004a6c:	182f      	adds	r7, r5, r0
 8004a6e:	f04f 0800 	mov.w	r8, #0
 8004a72:	e009      	b.n	8004a88 <d_append_string+0x30>
 8004a74:	460b      	mov	r3, r1
 8004a76:	42bd      	cmp	r5, r7
 8004a78:	f101 0101 	add.w	r1, r1, #1
 8004a7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004a80:	54e6      	strb	r6, [r4, r3]
 8004a82:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004a86:	d019      	beq.n	8004abc <d_append_string+0x64>
 8004a88:	29ff      	cmp	r1, #255	; 0xff
 8004a8a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004a8e:	d1f1      	bne.n	8004a74 <d_append_string+0x1c>
 8004a90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a94:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004a98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4798      	blx	r3
 8004aa0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2101      	movs	r1, #1
 8004aae:	42bd      	cmp	r5, r7
 8004ab0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ab4:	54e6      	strb	r6, [r4, r3]
 8004ab6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004aba:	d1e5      	bne.n	8004a88 <d_append_string+0x30>
 8004abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ac0 <d_append_num>:
 8004ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac4:	b088      	sub	sp, #32
 8004ac6:	460a      	mov	r2, r1
 8004ac8:	4604      	mov	r4, r0
 8004aca:	491b      	ldr	r1, [pc, #108]	; (8004b38 <d_append_num+0x78>)
 8004acc:	a801      	add	r0, sp, #4
 8004ace:	f012 ff71 	bl	80179b4 <sprintf>
 8004ad2:	a801      	add	r0, sp, #4
 8004ad4:	f012 ff94 	bl	8017a00 <strlen>
 8004ad8:	b350      	cbz	r0, 8004b30 <d_append_num+0x70>
 8004ada:	ad01      	add	r5, sp, #4
 8004adc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ae0:	182f      	adds	r7, r5, r0
 8004ae2:	f04f 0800 	mov.w	r8, #0
 8004ae6:	e009      	b.n	8004afc <d_append_num+0x3c>
 8004ae8:	460b      	mov	r3, r1
 8004aea:	42bd      	cmp	r5, r7
 8004aec:	f101 0101 	add.w	r1, r1, #1
 8004af0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004af4:	54e6      	strb	r6, [r4, r3]
 8004af6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004afa:	d019      	beq.n	8004b30 <d_append_num+0x70>
 8004afc:	29ff      	cmp	r1, #255	; 0xff
 8004afe:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004b02:	d1f1      	bne.n	8004ae8 <d_append_num+0x28>
 8004b04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b08:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004b0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b10:	4620      	mov	r0, r4
 8004b12:	4798      	blx	r3
 8004b14:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2101      	movs	r1, #1
 8004b22:	42bd      	cmp	r5, r7
 8004b24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004b28:	54e6      	strb	r6, [r4, r3]
 8004b2a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004b2e:	d1e5      	bne.n	8004afc <d_append_num+0x3c>
 8004b30:	b008      	add	sp, #32
 8004b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b36:	bf00      	nop
 8004b38:	0801db20 	.word	0x0801db20

08004b3c <d_print_mod>:
 8004b3c:	7813      	ldrb	r3, [r2, #0]
 8004b3e:	3b03      	subs	r3, #3
 8004b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	4615      	mov	r5, r2
 8004b46:	4604      	mov	r4, r0
 8004b48:	4688      	mov	r8, r1
 8004b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b4c:	f200 81b8 	bhi.w	8004ec0 <d_print_mod+0x384>
 8004b50:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b54:	01b60051 	.word	0x01b60051
 8004b58:	01b601b6 	.word	0x01b601b6
 8004b5c:	01b601b6 	.word	0x01b601b6
 8004b60:	01b601b6 	.word	0x01b601b6
 8004b64:	01b601b6 	.word	0x01b601b6
 8004b68:	01b601b6 	.word	0x01b601b6
 8004b6c:	01b601b6 	.word	0x01b601b6
 8004b70:	01b601b6 	.word	0x01b601b6
 8004b74:	01b601b6 	.word	0x01b601b6
 8004b78:	01b601b6 	.word	0x01b601b6
 8004b7c:	01b601b6 	.word	0x01b601b6
 8004b80:	007b0055 	.word	0x007b0055
 8004b84:	005500a1 	.word	0x005500a1
 8004b88:	00a1007b 	.word	0x00a1007b
 8004b8c:	00de00c6 	.word	0x00de00c6
 8004b90:	01270115 	.word	0x01270115
 8004b94:	0130012d 	.word	0x0130012d
 8004b98:	01580133 	.word	0x01580133
 8004b9c:	01b601b6 	.word	0x01b601b6
 8004ba0:	01b601b6 	.word	0x01b601b6
 8004ba4:	01b6017d 	.word	0x01b6017d
 8004ba8:	002b      	.short	0x002b
 8004baa:	4edd      	ldr	r6, [pc, #884]	; (8004f20 <d_print_mod+0x3e4>)
 8004bac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004bb0:	f106 0a0a 	add.w	sl, r6, #10
 8004bb4:	f04f 0900 	mov.w	r9, #0
 8004bb8:	e009      	b.n	8004bce <d_print_mod+0x92>
 8004bba:	460b      	mov	r3, r1
 8004bbc:	3101      	adds	r1, #1
 8004bbe:	4556      	cmp	r6, sl
 8004bc0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004bc4:	54e7      	strb	r7, [r4, r3]
 8004bc6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004bca:	f000 8185 	beq.w	8004ed8 <d_print_mod+0x39c>
 8004bce:	29ff      	cmp	r1, #255	; 0xff
 8004bd0:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004bd4:	d1f1      	bne.n	8004bba <d_print_mod+0x7e>
 8004bd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004bda:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004bde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004be2:	4620      	mov	r0, r4
 8004be4:	4798      	blx	r3
 8004be6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004bea:	3301      	adds	r3, #1
 8004bec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e7e3      	b.n	8004bbe <d_print_mod+0x82>
 8004bf6:	686a      	ldr	r2, [r5, #4]
 8004bf8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	e214      	b.n	8005028 <d_print_comp>
 8004bfe:	4dc9      	ldr	r5, [pc, #804]	; (8004f24 <d_print_mod+0x3e8>)
 8004c00:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004c04:	f105 0709 	add.w	r7, r5, #9
 8004c08:	f04f 0800 	mov.w	r8, #0
 8004c0c:	e009      	b.n	8004c22 <d_print_mod+0xe6>
 8004c0e:	460b      	mov	r3, r1
 8004c10:	3101      	adds	r1, #1
 8004c12:	42bd      	cmp	r5, r7
 8004c14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004c18:	54e6      	strb	r6, [r4, r3]
 8004c1a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004c1e:	f000 816d 	beq.w	8004efc <d_print_mod+0x3c0>
 8004c22:	29ff      	cmp	r1, #255	; 0xff
 8004c24:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004c28:	d1f1      	bne.n	8004c0e <d_print_mod+0xd2>
 8004c2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c2e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004c32:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c36:	4620      	mov	r0, r4
 8004c38:	4798      	blx	r3
 8004c3a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004c44:	2101      	movs	r1, #1
 8004c46:	2300      	movs	r3, #0
 8004c48:	e7e3      	b.n	8004c12 <d_print_mod+0xd6>
 8004c4a:	4db7      	ldr	r5, [pc, #732]	; (8004f28 <d_print_mod+0x3ec>)
 8004c4c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004c50:	f105 0709 	add.w	r7, r5, #9
 8004c54:	f04f 0800 	mov.w	r8, #0
 8004c58:	e009      	b.n	8004c6e <d_print_mod+0x132>
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	3101      	adds	r1, #1
 8004c5e:	42bd      	cmp	r5, r7
 8004c60:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004c64:	54e6      	strb	r6, [r4, r3]
 8004c66:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004c6a:	f000 8149 	beq.w	8004f00 <d_print_mod+0x3c4>
 8004c6e:	29ff      	cmp	r1, #255	; 0xff
 8004c70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004c74:	d1f1      	bne.n	8004c5a <d_print_mod+0x11e>
 8004c76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c7a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004c7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c82:	4620      	mov	r0, r4
 8004c84:	4798      	blx	r3
 8004c86:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004c90:	2101      	movs	r1, #1
 8004c92:	2300      	movs	r3, #0
 8004c94:	e7e3      	b.n	8004c5e <d_print_mod+0x122>
 8004c96:	4da5      	ldr	r5, [pc, #660]	; (8004f2c <d_print_mod+0x3f0>)
 8004c98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004c9c:	1daf      	adds	r7, r5, #6
 8004c9e:	f04f 0800 	mov.w	r8, #0
 8004ca2:	e009      	b.n	8004cb8 <d_print_mod+0x17c>
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	3101      	adds	r1, #1
 8004ca8:	42bd      	cmp	r5, r7
 8004caa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004cae:	54e6      	strb	r6, [r4, r3]
 8004cb0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004cb4:	f000 8108 	beq.w	8004ec8 <d_print_mod+0x38c>
 8004cb8:	29ff      	cmp	r1, #255	; 0xff
 8004cba:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004cbe:	d1f1      	bne.n	8004ca4 <d_print_mod+0x168>
 8004cc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cc4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004cc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ccc:	4620      	mov	r0, r4
 8004cce:	4798      	blx	r3
 8004cd0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004cda:	2101      	movs	r1, #1
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e7e3      	b.n	8004ca8 <d_print_mod+0x16c>
 8004ce0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004ce4:	2bff      	cmp	r3, #255	; 0xff
 8004ce6:	f000 814c 	beq.w	8004f82 <d_print_mod+0x446>
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	2220      	movs	r2, #32
 8004cee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004cf2:	54e2      	strb	r2, [r4, r3]
 8004cf4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004cf8:	29ff      	cmp	r1, #255	; 0xff
 8004cfa:	f000 8121 	beq.w	8004f40 <d_print_mod+0x404>
 8004cfe:	1c4a      	adds	r2, r1, #1
 8004d00:	2326      	movs	r3, #38	; 0x26
 8004d02:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d06:	5463      	strb	r3, [r4, r1]
 8004d08:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004d14:	2bff      	cmp	r3, #255	; 0xff
 8004d16:	f000 8156 	beq.w	8004fc6 <d_print_mod+0x48a>
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d22:	54e2      	strb	r2, [r4, r3]
 8004d24:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004d28:	4d81      	ldr	r5, [pc, #516]	; (8004f30 <d_print_mod+0x3f4>)
 8004d2a:	f04f 0800 	mov.w	r8, #0
 8004d2e:	1caf      	adds	r7, r5, #2
 8004d30:	e009      	b.n	8004d46 <d_print_mod+0x20a>
 8004d32:	460b      	mov	r3, r1
 8004d34:	42bd      	cmp	r5, r7
 8004d36:	f101 0101 	add.w	r1, r1, #1
 8004d3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d3e:	54e6      	strb	r6, [r4, r3]
 8004d40:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004d44:	d019      	beq.n	8004d7a <d_print_mod+0x23e>
 8004d46:	29ff      	cmp	r1, #255	; 0xff
 8004d48:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004d4c:	d1f1      	bne.n	8004d32 <d_print_mod+0x1f6>
 8004d4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d52:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4798      	blx	r3
 8004d5e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004d62:	3301      	adds	r3, #1
 8004d64:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	42bd      	cmp	r5, r7
 8004d6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d72:	54e6      	strb	r6, [r4, r3]
 8004d74:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004d78:	d1e5      	bne.n	8004d46 <d_print_mod+0x20a>
 8004d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004d82:	29ff      	cmp	r1, #255	; 0xff
 8004d84:	f000 80ed 	beq.w	8004f62 <d_print_mod+0x426>
 8004d88:	1c4a      	adds	r2, r1, #1
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d90:	5463      	strb	r3, [r4, r1]
 8004d92:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d96:	4641      	mov	r1, r8
 8004d98:	68aa      	ldr	r2, [r5, #8]
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da0:	e142      	b.n	8005028 <d_print_comp>
 8004da2:	f011 0804 	ands.w	r8, r1, #4
 8004da6:	f000 80ad 	beq.w	8004f04 <d_print_mod+0x3c8>
 8004daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004db2:	e7a1      	b.n	8004cf8 <d_print_mod+0x1bc>
 8004db4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004db8:	e7b6      	b.n	8004d28 <d_print_mod+0x1ec>
 8004dba:	4d5e      	ldr	r5, [pc, #376]	; (8004f34 <d_print_mod+0x3f8>)
 8004dbc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004dc0:	f105 0708 	add.w	r7, r5, #8
 8004dc4:	f04f 0800 	mov.w	r8, #0
 8004dc8:	e008      	b.n	8004ddc <d_print_mod+0x2a0>
 8004dca:	460b      	mov	r3, r1
 8004dcc:	3101      	adds	r1, #1
 8004dce:	42bd      	cmp	r5, r7
 8004dd0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004dd4:	54e6      	strb	r6, [r4, r3]
 8004dd6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004dda:	d077      	beq.n	8004ecc <d_print_mod+0x390>
 8004ddc:	29ff      	cmp	r1, #255	; 0xff
 8004dde:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004de2:	d1f2      	bne.n	8004dca <d_print_mod+0x28e>
 8004de4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004de8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004dec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004df0:	4620      	mov	r0, r4
 8004df2:	4798      	blx	r3
 8004df4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004df8:	3301      	adds	r3, #1
 8004dfa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004dfe:	2101      	movs	r1, #1
 8004e00:	2300      	movs	r3, #0
 8004e02:	e7e4      	b.n	8004dce <d_print_mod+0x292>
 8004e04:	4d4c      	ldr	r5, [pc, #304]	; (8004f38 <d_print_mod+0x3fc>)
 8004e06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004e0a:	f105 070a 	add.w	r7, r5, #10
 8004e0e:	f04f 0800 	mov.w	r8, #0
 8004e12:	e008      	b.n	8004e26 <d_print_mod+0x2ea>
 8004e14:	460b      	mov	r3, r1
 8004e16:	3101      	adds	r1, #1
 8004e18:	42bd      	cmp	r5, r7
 8004e1a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e1e:	54e6      	strb	r6, [r4, r3]
 8004e20:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004e24:	d056      	beq.n	8004ed4 <d_print_mod+0x398>
 8004e26:	29ff      	cmp	r1, #255	; 0xff
 8004e28:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004e2c:	d1f2      	bne.n	8004e14 <d_print_mod+0x2d8>
 8004e2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e32:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004e36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4798      	blx	r3
 8004e3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004e42:	3301      	adds	r3, #1
 8004e44:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004e48:	2101      	movs	r1, #1
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e7e4      	b.n	8004e18 <d_print_mod+0x2dc>
 8004e4e:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8004e52:	2b28      	cmp	r3, #40	; 0x28
 8004e54:	d00b      	beq.n	8004e6e <d_print_mod+0x332>
 8004e56:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004e5a:	29ff      	cmp	r1, #255	; 0xff
 8004e5c:	f000 80c4 	beq.w	8004fe8 <d_print_mod+0x4ac>
 8004e60:	1c4a      	adds	r2, r1, #1
 8004e62:	2320      	movs	r3, #32
 8004e64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e68:	5463      	strb	r3, [r4, r1]
 8004e6a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e6e:	686a      	ldr	r2, [r5, #4]
 8004e70:	4d32      	ldr	r5, [pc, #200]	; (8004f3c <d_print_mod+0x400>)
 8004e72:	4641      	mov	r1, r8
 8004e74:	4620      	mov	r0, r4
 8004e76:	f000 f8d7 	bl	8005028 <d_print_comp>
 8004e7a:	1cef      	adds	r7, r5, #3
 8004e7c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e80:	f04f 0800 	mov.w	r8, #0
 8004e84:	e008      	b.n	8004e98 <d_print_mod+0x35c>
 8004e86:	460b      	mov	r3, r1
 8004e88:	3101      	adds	r1, #1
 8004e8a:	42bd      	cmp	r5, r7
 8004e8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e90:	54e6      	strb	r6, [r4, r3]
 8004e92:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004e96:	d01b      	beq.n	8004ed0 <d_print_mod+0x394>
 8004e98:	29ff      	cmp	r1, #255	; 0xff
 8004e9a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004e9e:	d1f2      	bne.n	8004e86 <d_print_mod+0x34a>
 8004ea0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ea4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ea8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004eac:	4620      	mov	r0, r4
 8004eae:	4798      	blx	r3
 8004eb0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004eba:	2101      	movs	r1, #1
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e7e4      	b.n	8004e8a <d_print_mod+0x34e>
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec6:	e0af      	b.n	8005028 <d_print_comp>
 8004ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed8:	4641      	mov	r1, r8
 8004eda:	686a      	ldr	r2, [r5, #4]
 8004edc:	4620      	mov	r0, r4
 8004ede:	f000 f8a3 	bl	8005028 <d_print_comp>
 8004ee2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ee6:	29ff      	cmp	r1, #255	; 0xff
 8004ee8:	d05c      	beq.n	8004fa4 <d_print_mod+0x468>
 8004eea:	1c4a      	adds	r2, r1, #1
 8004eec:	2329      	movs	r3, #41	; 0x29
 8004eee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ef2:	5463      	strb	r3, [r4, r1]
 8004ef4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004f08:	29ff      	cmp	r1, #255	; 0xff
 8004f0a:	d07d      	beq.n	8005008 <d_print_mod+0x4cc>
 8004f0c:	1c4a      	adds	r2, r1, #1
 8004f0e:	232a      	movs	r3, #42	; 0x2a
 8004f10:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f14:	5463      	strb	r3, [r4, r1]
 8004f16:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1e:	bf00      	nop
 8004f20:	0801db64 	.word	0x0801db64
 8004f24:	0801db23 	.word	0x0801db23
 8004f28:	0801db2f 	.word	0x0801db2f
 8004f2c:	0801db3c 	.word	0x0801db3c
 8004f30:	0801db44 	.word	0x0801db44
 8004f34:	0801db47 	.word	0x0801db47
 8004f38:	0801db54 	.word	0x0801db54
 8004f3c:	0801db60 	.word	0x0801db60
 8004f40:	2500      	movs	r5, #0
 8004f42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f4a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004f4e:	4620      	mov	r0, r4
 8004f50:	4798      	blx	r3
 8004f52:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004f56:	3301      	adds	r3, #1
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004f5e:	2201      	movs	r2, #1
 8004f60:	e6ce      	b.n	8004d00 <d_print_mod+0x1c4>
 8004f62:	2600      	movs	r6, #0
 8004f64:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004f68:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004f6c:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004f70:	4798      	blx	r3
 8004f72:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004f76:	3301      	adds	r3, #1
 8004f78:	4631      	mov	r1, r6
 8004f7a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004f7e:	2201      	movs	r2, #1
 8004f80:	e703      	b.n	8004d8a <d_print_mod+0x24e>
 8004f82:	2500      	movs	r5, #0
 8004f84:	4619      	mov	r1, r3
 8004f86:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004f8a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004f8e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8004f92:	4798      	blx	r3
 8004f94:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	e6a3      	b.n	8004cec <d_print_mod+0x1b0>
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004faa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fae:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4798      	blx	r3
 8004fb6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004fba:	3301      	adds	r3, #1
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	e792      	b.n	8004eec <d_print_mod+0x3b0>
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004fce:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004fd2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8004fd6:	4798      	blx	r3
 8004fd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8004fe2:	462b      	mov	r3, r5
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	e699      	b.n	8004d1c <d_print_mod+0x1e0>
 8004fe8:	2600      	movs	r6, #0
 8004fea:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004fee:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004ff2:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004ff6:	4798      	blx	r3
 8004ff8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4631      	mov	r1, r6
 8005000:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005004:	2201      	movs	r2, #1
 8005006:	e72c      	b.n	8004e62 <d_print_mod+0x326>
 8005008:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800500c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005010:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8005014:	4798      	blx	r3
 8005016:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800501a:	3301      	adds	r3, #1
 800501c:	4641      	mov	r1, r8
 800501e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005022:	2201      	movs	r2, #1
 8005024:	e773      	b.n	8004f0e <d_print_mod+0x3d2>
 8005026:	bf00      	nop

08005028 <d_print_comp>:
 8005028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	4604      	mov	r4, r0
 800502e:	b095      	sub	sp, #84	; 0x54
 8005030:	4615      	mov	r5, r2
 8005032:	2a00      	cmp	r2, #0
 8005034:	f000 809d 	beq.w	8005172 <d_print_comp+0x14a>
 8005038:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800503c:	2b00      	cmp	r3, #0
 800503e:	f040 8090 	bne.w	8005162 <d_print_comp+0x13a>
 8005042:	7813      	ldrb	r3, [r2, #0]
 8005044:	460e      	mov	r6, r1
 8005046:	2b4b      	cmp	r3, #75	; 0x4b
 8005048:	f201 8006 	bhi.w	8006058 <d_print_comp+0x1030>
 800504c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005050:	060a0620 	.word	0x060a0620
 8005054:	064c060a 	.word	0x064c060a
 8005058:	05be05d6 	.word	0x05be05d6
 800505c:	0577057c 	.word	0x0577057c
 8005060:	0563056d 	.word	0x0563056d
 8005064:	05460559 	.word	0x05460559
 8005068:	0532053c 	.word	0x0532053c
 800506c:	051e0528 	.word	0x051e0528
 8005070:	073f0514 	.word	0x073f0514
 8005074:	072b0735 	.word	0x072b0735
 8005078:	07fa0721 	.word	0x07fa0721
 800507c:	06fa07d4 	.word	0x06fa07d4
 8005080:	07ba06d1 	.word	0x07ba06d1
 8005084:	07ba07ba 	.word	0x07ba07ba
 8005088:	07a807a8 	.word	0x07a807a8
 800508c:	07a807a8 	.word	0x07a807a8
 8005090:	07a807a8 	.word	0x07a807a8
 8005094:	077607a8 	.word	0x077607a8
 8005098:	07a80776 	.word	0x07a80776
 800509c:	074907a8 	.word	0x074907a8
 80050a0:	04fa050f 	.word	0x04fa050f
 80050a4:	0471048d 	.word	0x0471048d
 80050a8:	04710359 	.word	0x04710359
 80050ac:	03310331 	.word	0x03310331
 80050b0:	0307039c 	.word	0x0307039c
 80050b4:	02b902e0 	.word	0x02b902e0
 80050b8:	02a302b5 	.word	0x02a302b5
 80050bc:	03eb0400 	.word	0x03eb0400
 80050c0:	03af03b3 	.word	0x03af03b3
 80050c4:	004c03af 	.word	0x004c03af
 80050c8:	044a004c 	.word	0x044a004c
 80050cc:	028d029a 	.word	0x028d029a
 80050d0:	01f90220 	.word	0x01f90220
 80050d4:	01ab01d2 	.word	0x01ab01d2
 80050d8:	08040184 	.word	0x08040184
 80050dc:	0266015e 	.word	0x0266015e
 80050e0:	00eb0137 	.word	0x00eb0137
 80050e4:	009700c1 	.word	0x009700c1
 80050e8:	686a      	ldr	r2, [r5, #4]
 80050ea:	7811      	ldrb	r1, [r2, #0]
 80050ec:	2927      	cmp	r1, #39	; 0x27
 80050ee:	f041 8179 	bne.w	80063e4 <d_print_comp+0x13bc>
 80050f2:	6852      	ldr	r2, [r2, #4]
 80050f4:	7c17      	ldrb	r7, [r2, #16]
 80050f6:	b15f      	cbz	r7, 8005110 <d_print_comp+0xe8>
 80050f8:	2f06      	cmp	r7, #6
 80050fa:	f241 847f 	bls.w	80069fc <d_print_comp+0x19d4>
 80050fe:	2f07      	cmp	r7, #7
 8005100:	d106      	bne.n	8005110 <d_print_comp+0xe8>
 8005102:	68aa      	ldr	r2, [r5, #8]
 8005104:	7811      	ldrb	r1, [r2, #0]
 8005106:	b919      	cbnz	r1, 8005110 <d_print_comp+0xe8>
 8005108:	6891      	ldr	r1, [r2, #8]
 800510a:	2901      	cmp	r1, #1
 800510c:	f001 865a 	beq.w	8006dc4 <d_print_comp+0x1d9c>
 8005110:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005114:	29ff      	cmp	r1, #255	; 0xff
 8005116:	f001 8457 	beq.w	80069c8 <d_print_comp+0x19a0>
 800511a:	1c4a      	adds	r2, r1, #1
 800511c:	2328      	movs	r3, #40	; 0x28
 800511e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005122:	5463      	strb	r3, [r4, r1]
 8005124:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005128:	4631      	mov	r1, r6
 800512a:	686a      	ldr	r2, [r5, #4]
 800512c:	4620      	mov	r0, r4
 800512e:	f7ff ff7b 	bl	8005028 <d_print_comp>
 8005132:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005136:	29ff      	cmp	r1, #255	; 0xff
 8005138:	f001 8433 	beq.w	80069a2 <d_print_comp+0x197a>
 800513c:	1c4a      	adds	r2, r1, #1
 800513e:	2329      	movs	r3, #41	; 0x29
 8005140:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005144:	5463      	strb	r3, [r4, r1]
 8005146:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800514a:	782b      	ldrb	r3, [r5, #0]
 800514c:	2b3c      	cmp	r3, #60	; 0x3c
 800514e:	f001 8505 	beq.w	8006b5c <d_print_comp+0x1b34>
 8005152:	2f08      	cmp	r7, #8
 8005154:	4620      	mov	r0, r4
 8005156:	f001 84f3 	beq.w	8006b40 <d_print_comp+0x1b18>
 800515a:	4631      	mov	r1, r6
 800515c:	68aa      	ldr	r2, [r5, #8]
 800515e:	f7ff ff63 	bl	8005028 <d_print_comp>
 8005162:	b015      	add	sp, #84	; 0x54
 8005164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005168:	f1b8 0f00 	cmp.w	r8, #0
 800516c:	d001      	beq.n	8005172 <d_print_comp+0x14a>
 800516e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8005172:	2301      	movs	r3, #1
 8005174:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005178:	b015      	add	sp, #84	; 0x54
 800517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517e:	4fcd      	ldr	r7, [pc, #820]	; (80054b4 <d_print_comp+0x48c>)
 8005180:	686a      	ldr	r2, [r5, #4]
 8005182:	f7ff ff51 	bl	8005028 <d_print_comp>
 8005186:	f107 0a08 	add.w	sl, r7, #8
 800518a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800518e:	f04f 0900 	mov.w	r9, #0
 8005192:	e00a      	b.n	80051aa <d_print_comp+0x182>
 8005194:	460b      	mov	r3, r1
 8005196:	3101      	adds	r1, #1
 8005198:	4557      	cmp	r7, sl
 800519a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800519e:	f804 8003 	strb.w	r8, [r4, r3]
 80051a2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80051a6:	f000 8793 	beq.w	80060d0 <d_print_comp+0x10a8>
 80051aa:	29ff      	cmp	r1, #255	; 0xff
 80051ac:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80051b0:	d1f0      	bne.n	8005194 <d_print_comp+0x16c>
 80051b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051b6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80051ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051be:	4620      	mov	r0, r4
 80051c0:	4798      	blx	r3
 80051c2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80051c6:	3301      	adds	r3, #1
 80051c8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80051cc:	2101      	movs	r1, #1
 80051ce:	2300      	movs	r3, #0
 80051d0:	e7e2      	b.n	8005198 <d_print_comp+0x170>
 80051d2:	4fb9      	ldr	r7, [pc, #740]	; (80054b8 <d_print_comp+0x490>)
 80051d4:	686a      	ldr	r2, [r5, #4]
 80051d6:	f7ff ff27 	bl	8005028 <d_print_comp>
 80051da:	f107 0a05 	add.w	sl, r7, #5
 80051de:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80051e2:	f04f 0900 	mov.w	r9, #0
 80051e6:	e00a      	b.n	80051fe <d_print_comp+0x1d6>
 80051e8:	460b      	mov	r3, r1
 80051ea:	3101      	adds	r1, #1
 80051ec:	4557      	cmp	r7, sl
 80051ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80051f2:	f804 8003 	strb.w	r8, [r4, r3]
 80051f6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80051fa:	f000 87cf 	beq.w	800619c <d_print_comp+0x1174>
 80051fe:	29ff      	cmp	r1, #255	; 0xff
 8005200:	f817 8b01 	ldrb.w	r8, [r7], #1
 8005204:	d1f0      	bne.n	80051e8 <d_print_comp+0x1c0>
 8005206:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800520a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800520e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005212:	4620      	mov	r0, r4
 8005214:	4798      	blx	r3
 8005216:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800521a:	3301      	adds	r3, #1
 800521c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005220:	2101      	movs	r1, #1
 8005222:	2300      	movs	r3, #0
 8005224:	e7e2      	b.n	80051ec <d_print_comp+0x1c4>
 8005226:	6869      	ldr	r1, [r5, #4]
 8005228:	f7ff fb94 	bl	8004954 <d_find_pack>
 800522c:	f04f 0800 	mov.w	r8, #0
 8005230:	2800      	cmp	r0, #0
 8005232:	f001 85a0 	beq.w	8006d76 <d_print_comp+0x1d4e>
 8005236:	7803      	ldrb	r3, [r0, #0]
 8005238:	2b2f      	cmp	r3, #47	; 0x2f
 800523a:	f041 80cb 	bne.w	80063d4 <d_print_comp+0x13ac>
 800523e:	6843      	ldr	r3, [r0, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f001 80c7 	beq.w	80063d4 <d_print_comp+0x13ac>
 8005246:	6880      	ldr	r0, [r0, #8]
 8005248:	f108 0801 	add.w	r8, r8, #1
 800524c:	2800      	cmp	r0, #0
 800524e:	d1f2      	bne.n	8005236 <d_print_comp+0x20e>
 8005250:	686b      	ldr	r3, [r5, #4]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2700      	movs	r7, #0
 8005256:	f108 33ff 	add.w	r3, r8, #4294967295
 800525a:	f8df a27c 	ldr.w	sl, [pc, #636]	; 80054d8 <d_print_comp+0x4b0>
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	46b9      	mov	r9, r7
 8005262:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
 8005266:	4620      	mov	r0, r4
 8005268:	4631      	mov	r1, r6
 800526a:	9a00      	ldr	r2, [sp, #0]
 800526c:	f7ff fedc 	bl	8005028 <d_print_comp>
 8005270:	9b01      	ldr	r3, [sp, #4]
 8005272:	429f      	cmp	r7, r3
 8005274:	f280 871b 	bge.w	80060ae <d_print_comp+0x1086>
 8005278:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800527c:	f8df b25c 	ldr.w	fp, [pc, #604]	; 80054dc <d_print_comp+0x4b4>
 8005280:	e009      	b.n	8005296 <d_print_comp+0x26e>
 8005282:	460b      	mov	r3, r1
 8005284:	3101      	adds	r1, #1
 8005286:	45d3      	cmp	fp, sl
 8005288:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800528c:	54e5      	strb	r5, [r4, r3]
 800528e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005292:	f000 870c 	beq.w	80060ae <d_print_comp+0x1086>
 8005296:	29ff      	cmp	r1, #255	; 0xff
 8005298:	f81b 5b01 	ldrb.w	r5, [fp], #1
 800529c:	d1f1      	bne.n	8005282 <d_print_comp+0x25a>
 800529e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052a2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80052a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052aa:	4620      	mov	r0, r4
 80052ac:	4798      	blx	r3
 80052ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80052b2:	3301      	adds	r3, #1
 80052b4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80052b8:	2101      	movs	r1, #1
 80052ba:	2300      	movs	r3, #0
 80052bc:	e7e3      	b.n	8005286 <d_print_comp+0x25e>
 80052be:	4f7f      	ldr	r7, [pc, #508]	; (80054bc <d_print_comp+0x494>)
 80052c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80052c4:	f107 0a1a 	add.w	sl, r7, #26
 80052c8:	f04f 0900 	mov.w	r9, #0
 80052cc:	e00a      	b.n	80052e4 <d_print_comp+0x2bc>
 80052ce:	460b      	mov	r3, r1
 80052d0:	3101      	adds	r1, #1
 80052d2:	4557      	cmp	r7, sl
 80052d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80052d8:	f804 8003 	strb.w	r8, [r4, r3]
 80052dc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80052e0:	f000 8767 	beq.w	80061b2 <d_print_comp+0x118a>
 80052e4:	29ff      	cmp	r1, #255	; 0xff
 80052e6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80052ea:	d1f0      	bne.n	80052ce <d_print_comp+0x2a6>
 80052ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052f0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80052f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052f8:	4620      	mov	r0, r4
 80052fa:	4798      	blx	r3
 80052fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005300:	3301      	adds	r3, #1
 8005302:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005306:	2101      	movs	r1, #1
 8005308:	2300      	movs	r3, #0
 800530a:	e7e2      	b.n	80052d2 <d_print_comp+0x2aa>
 800530c:	4e6c      	ldr	r6, [pc, #432]	; (80054c0 <d_print_comp+0x498>)
 800530e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005312:	f106 090e 	add.w	r9, r6, #14
 8005316:	f04f 0800 	mov.w	r8, #0
 800531a:	e009      	b.n	8005330 <d_print_comp+0x308>
 800531c:	460b      	mov	r3, r1
 800531e:	3101      	adds	r1, #1
 8005320:	454e      	cmp	r6, r9
 8005322:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005326:	54e7      	strb	r7, [r4, r3]
 8005328:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800532c:	f000 8799 	beq.w	8006262 <d_print_comp+0x123a>
 8005330:	29ff      	cmp	r1, #255	; 0xff
 8005332:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8005336:	d1f1      	bne.n	800531c <d_print_comp+0x2f4>
 8005338:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800533c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005340:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005344:	4620      	mov	r0, r4
 8005346:	4798      	blx	r3
 8005348:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800534c:	3301      	adds	r3, #1
 800534e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005352:	2101      	movs	r1, #1
 8005354:	2300      	movs	r3, #0
 8005356:	e7e3      	b.n	8005320 <d_print_comp+0x2f8>
 8005358:	4f5a      	ldr	r7, [pc, #360]	; (80054c4 <d_print_comp+0x49c>)
 800535a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800535e:	f107 0a08 	add.w	sl, r7, #8
 8005362:	f04f 0900 	mov.w	r9, #0
 8005366:	e00a      	b.n	800537e <d_print_comp+0x356>
 8005368:	460b      	mov	r3, r1
 800536a:	3101      	adds	r1, #1
 800536c:	4557      	cmp	r7, sl
 800536e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005372:	f804 8003 	strb.w	r8, [r4, r3]
 8005376:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800537a:	f000 87ae 	beq.w	80062da <d_print_comp+0x12b2>
 800537e:	29ff      	cmp	r1, #255	; 0xff
 8005380:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005384:	d1f0      	bne.n	8005368 <d_print_comp+0x340>
 8005386:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800538a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800538e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005392:	4620      	mov	r0, r4
 8005394:	4798      	blx	r3
 8005396:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800539a:	3301      	adds	r3, #1
 800539c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80053a0:	2101      	movs	r1, #1
 80053a2:	2300      	movs	r3, #0
 80053a4:	e7e2      	b.n	800536c <d_print_comp+0x344>
 80053a6:	4f48      	ldr	r7, [pc, #288]	; (80054c8 <d_print_comp+0x4a0>)
 80053a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80053ac:	f107 0a1c 	add.w	sl, r7, #28
 80053b0:	f04f 0900 	mov.w	r9, #0
 80053b4:	e00a      	b.n	80053cc <d_print_comp+0x3a4>
 80053b6:	460b      	mov	r3, r1
 80053b8:	3101      	adds	r1, #1
 80053ba:	4557      	cmp	r7, sl
 80053bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80053c0:	f804 8003 	strb.w	r8, [r4, r3]
 80053c4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80053c8:	f000 86e1 	beq.w	800618e <d_print_comp+0x1166>
 80053cc:	29ff      	cmp	r1, #255	; 0xff
 80053ce:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80053d2:	d1f0      	bne.n	80053b6 <d_print_comp+0x38e>
 80053d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80053dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053e0:	4620      	mov	r0, r4
 80053e2:	4798      	blx	r3
 80053e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80053e8:	3301      	adds	r3, #1
 80053ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80053ee:	2101      	movs	r1, #1
 80053f0:	2300      	movs	r3, #0
 80053f2:	e7e2      	b.n	80053ba <d_print_comp+0x392>
 80053f4:	4f35      	ldr	r7, [pc, #212]	; (80054cc <d_print_comp+0x4a4>)
 80053f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80053fa:	f107 0a1d 	add.w	sl, r7, #29
 80053fe:	f04f 0900 	mov.w	r9, #0
 8005402:	e00a      	b.n	800541a <d_print_comp+0x3f2>
 8005404:	460b      	mov	r3, r1
 8005406:	3101      	adds	r1, #1
 8005408:	4557      	cmp	r7, sl
 800540a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800540e:	f804 8003 	strb.w	r8, [r4, r3]
 8005412:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005416:	f000 87d0 	beq.w	80063ba <d_print_comp+0x1392>
 800541a:	29ff      	cmp	r1, #255	; 0xff
 800541c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005420:	d1f0      	bne.n	8005404 <d_print_comp+0x3dc>
 8005422:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005426:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800542a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800542e:	4620      	mov	r0, r4
 8005430:	4798      	blx	r3
 8005432:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005436:	3301      	adds	r3, #1
 8005438:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800543c:	2101      	movs	r1, #1
 800543e:	2300      	movs	r3, #0
 8005440:	e7e2      	b.n	8005408 <d_print_comp+0x3e0>
 8005442:	4f23      	ldr	r7, [pc, #140]	; (80054d0 <d_print_comp+0x4a8>)
 8005444:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005448:	f107 0a0a 	add.w	sl, r7, #10
 800544c:	f04f 0900 	mov.w	r9, #0
 8005450:	e00a      	b.n	8005468 <d_print_comp+0x440>
 8005452:	460b      	mov	r3, r1
 8005454:	3101      	adds	r1, #1
 8005456:	4557      	cmp	r7, sl
 8005458:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800545c:	f804 8003 	strb.w	r8, [r4, r3]
 8005460:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005464:	f000 8680 	beq.w	8006168 <d_print_comp+0x1140>
 8005468:	29ff      	cmp	r1, #255	; 0xff
 800546a:	f817 8b01 	ldrb.w	r8, [r7], #1
 800546e:	d1f0      	bne.n	8005452 <d_print_comp+0x42a>
 8005470:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005474:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005478:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800547c:	4620      	mov	r0, r4
 800547e:	4798      	blx	r3
 8005480:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005484:	3301      	adds	r3, #1
 8005486:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800548a:	2101      	movs	r1, #1
 800548c:	2300      	movs	r3, #0
 800548e:	e7e2      	b.n	8005456 <d_print_comp+0x42e>
 8005490:	686a      	ldr	r2, [r5, #4]
 8005492:	4910      	ldr	r1, [pc, #64]	; (80054d4 <d_print_comp+0x4ac>)
 8005494:	a804      	add	r0, sp, #16
 8005496:	f012 fa8d 	bl	80179b4 <sprintf>
 800549a:	a804      	add	r0, sp, #16
 800549c:	f012 fab0 	bl	8017a00 <strlen>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	f43f ae5e 	beq.w	8005162 <d_print_comp+0x13a>
 80054a6:	ad04      	add	r5, sp, #16
 80054a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80054ac:	182f      	adds	r7, r5, r0
 80054ae:	f04f 0800 	mov.w	r8, #0
 80054b2:	e01f      	b.n	80054f4 <d_print_comp+0x4cc>
 80054b4:	0801dde3 	.word	0x0801dde3
 80054b8:	0801db70 	.word	0x0801db70
 80054bc:	0801dcc7 	.word	0x0801dcc7
 80054c0:	0801ddd3 	.word	0x0801ddd3
 80054c4:	0801ddc3 	.word	0x0801ddc3
 80054c8:	0801dda3 	.word	0x0801dda3
 80054cc:	0801dd83 	.word	0x0801dd83
 80054d0:	0801dd64 	.word	0x0801dd64
 80054d4:	0801db20 	.word	0x0801db20
 80054d8:	0801dcfe 	.word	0x0801dcfe
 80054dc:	0801dcfc 	.word	0x0801dcfc
 80054e0:	460b      	mov	r3, r1
 80054e2:	3101      	adds	r1, #1
 80054e4:	42bd      	cmp	r5, r7
 80054e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80054ea:	54e6      	strb	r6, [r4, r3]
 80054ec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80054f0:	f43f ae37 	beq.w	8005162 <d_print_comp+0x13a>
 80054f4:	29ff      	cmp	r1, #255	; 0xff
 80054f6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80054fa:	d1f1      	bne.n	80054e0 <d_print_comp+0x4b8>
 80054fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005500:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005504:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005508:	4620      	mov	r0, r4
 800550a:	4798      	blx	r3
 800550c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005510:	3301      	adds	r3, #1
 8005512:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005516:	2101      	movs	r1, #1
 8005518:	2300      	movs	r3, #0
 800551a:	e7e3      	b.n	80054e4 <d_print_comp+0x4bc>
 800551c:	4fc4      	ldr	r7, [pc, #784]	; (8005830 <d_print_comp+0x808>)
 800551e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005522:	f107 0a16 	add.w	sl, r7, #22
 8005526:	f04f 0900 	mov.w	r9, #0
 800552a:	e00a      	b.n	8005542 <d_print_comp+0x51a>
 800552c:	460b      	mov	r3, r1
 800552e:	3101      	adds	r1, #1
 8005530:	4557      	cmp	r7, sl
 8005532:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005536:	f804 8003 	strb.w	r8, [r4, r3]
 800553a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800553e:	f000 8689 	beq.w	8006254 <d_print_comp+0x122c>
 8005542:	29ff      	cmp	r1, #255	; 0xff
 8005544:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005548:	d1f0      	bne.n	800552c <d_print_comp+0x504>
 800554a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800554e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005552:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005556:	4620      	mov	r0, r4
 8005558:	4798      	blx	r3
 800555a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800555e:	3301      	adds	r3, #1
 8005560:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005564:	2101      	movs	r1, #1
 8005566:	2300      	movs	r3, #0
 8005568:	e7e2      	b.n	8005530 <d_print_comp+0x508>
 800556a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800556e:	792d      	ldrb	r5, [r5, #4]
 8005570:	29ff      	cmp	r1, #255	; 0xff
 8005572:	f001 81ad 	beq.w	80068d0 <d_print_comp+0x18a8>
 8005576:	1c4b      	adds	r3, r1, #1
 8005578:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800557c:	5465      	strb	r5, [r4, r1]
 800557e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005582:	e5ee      	b.n	8005162 <d_print_comp+0x13a>
 8005584:	686a      	ldr	r2, [r5, #4]
 8005586:	f7ff fd4f 	bl	8005028 <d_print_comp>
 800558a:	4620      	mov	r0, r4
 800558c:	4631      	mov	r1, r6
 800558e:	68aa      	ldr	r2, [r5, #8]
 8005590:	f7ff fd4a 	bl	8005028 <d_print_comp>
 8005594:	e5e5      	b.n	8005162 <d_print_comp+0x13a>
 8005596:	686f      	ldr	r7, [r5, #4]
 8005598:	68ad      	ldr	r5, [r5, #8]
 800559a:	783b      	ldrb	r3, [r7, #0]
 800559c:	2b31      	cmp	r3, #49	; 0x31
 800559e:	f001 8081 	beq.w	80066a4 <d_print_comp+0x167c>
 80055a2:	2b33      	cmp	r3, #51	; 0x33
 80055a4:	f001 80c0 	beq.w	8006728 <d_print_comp+0x1700>
 80055a8:	463a      	mov	r2, r7
 80055aa:	f001 ffad 	bl	8007508 <d_print_expr_op>
 80055ae:	4620      	mov	r0, r4
 80055b0:	4631      	mov	r1, r6
 80055b2:	462a      	mov	r2, r5
 80055b4:	f001 ffe4 	bl	8007580 <d_print_subexpr>
 80055b8:	e5d3      	b.n	8005162 <d_print_comp+0x13a>
 80055ba:	686a      	ldr	r2, [r5, #4]
 80055bc:	f001 ffa4 	bl	8007508 <d_print_expr_op>
 80055c0:	e5cf      	b.n	8005162 <d_print_comp+0x13a>
 80055c2:	4f9c      	ldr	r7, [pc, #624]	; (8005834 <d_print_comp+0x80c>)
 80055c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80055c8:	f107 0a09 	add.w	sl, r7, #9
 80055cc:	f04f 0900 	mov.w	r9, #0
 80055d0:	e00a      	b.n	80055e8 <d_print_comp+0x5c0>
 80055d2:	460b      	mov	r3, r1
 80055d4:	3101      	adds	r1, #1
 80055d6:	4557      	cmp	r7, sl
 80055d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80055dc:	f804 8003 	strb.w	r8, [r4, r3]
 80055e0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80055e4:	f000 85ec 	beq.w	80061c0 <d_print_comp+0x1198>
 80055e8:	29ff      	cmp	r1, #255	; 0xff
 80055ea:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80055ee:	d1f0      	bne.n	80055d2 <d_print_comp+0x5aa>
 80055f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80055f4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80055f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80055fc:	4620      	mov	r0, r4
 80055fe:	4798      	blx	r3
 8005600:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005604:	3301      	adds	r3, #1
 8005606:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800560a:	2101      	movs	r1, #1
 800560c:	2300      	movs	r3, #0
 800560e:	e7e2      	b.n	80055d6 <d_print_comp+0x5ae>
 8005610:	4f88      	ldr	r7, [pc, #544]	; (8005834 <d_print_comp+0x80c>)
 8005612:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005616:	f107 0a09 	add.w	sl, r7, #9
 800561a:	f04f 0900 	mov.w	r9, #0
 800561e:	e00a      	b.n	8005636 <d_print_comp+0x60e>
 8005620:	460b      	mov	r3, r1
 8005622:	3101      	adds	r1, #1
 8005624:	4557      	cmp	r7, sl
 8005626:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800562a:	f804 8003 	strb.w	r8, [r4, r3]
 800562e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005632:	f000 85cc 	beq.w	80061ce <d_print_comp+0x11a6>
 8005636:	29ff      	cmp	r1, #255	; 0xff
 8005638:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800563c:	d1f0      	bne.n	8005620 <d_print_comp+0x5f8>
 800563e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005642:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005646:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800564a:	4620      	mov	r0, r4
 800564c:	4798      	blx	r3
 800564e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005652:	3301      	adds	r3, #1
 8005654:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005658:	2101      	movs	r1, #1
 800565a:	2300      	movs	r3, #0
 800565c:	e7e2      	b.n	8005624 <d_print_comp+0x5fc>
 800565e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005662:	4d75      	ldr	r5, [pc, #468]	; (8005838 <d_print_comp+0x810>)
 8005664:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8005668:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800566c:	f105 0a08 	add.w	sl, r5, #8
 8005670:	f04f 0900 	mov.w	r9, #0
 8005674:	e009      	b.n	800568a <d_print_comp+0x662>
 8005676:	460b      	mov	r3, r1
 8005678:	3101      	adds	r1, #1
 800567a:	4555      	cmp	r5, sl
 800567c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005680:	54e6      	strb	r6, [r4, r3]
 8005682:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005686:	f000 85a9 	beq.w	80061dc <d_print_comp+0x11b4>
 800568a:	29ff      	cmp	r1, #255	; 0xff
 800568c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005690:	d1f1      	bne.n	8005676 <d_print_comp+0x64e>
 8005692:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005696:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800569a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800569e:	4620      	mov	r0, r4
 80056a0:	4798      	blx	r3
 80056a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80056a6:	3301      	adds	r3, #1
 80056a8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80056ac:	2101      	movs	r1, #1
 80056ae:	2300      	movs	r3, #0
 80056b0:	e7e3      	b.n	800567a <d_print_comp+0x652>
 80056b2:	686a      	ldr	r2, [r5, #4]
 80056b4:	b10a      	cbz	r2, 80056ba <d_print_comp+0x692>
 80056b6:	f7ff fcb7 	bl	8005028 <d_print_comp>
 80056ba:	68ab      	ldr	r3, [r5, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f43f ad50 	beq.w	8005162 <d_print_comp+0x13a>
 80056c2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80056c6:	29fd      	cmp	r1, #253	; 0xfd
 80056c8:	f201 805c 	bhi.w	8006784 <d_print_comp+0x175c>
 80056cc:	4620      	mov	r0, r4
 80056ce:	495b      	ldr	r1, [pc, #364]	; (800583c <d_print_comp+0x814>)
 80056d0:	f7ff f9c2 	bl	8004a58 <d_append_string>
 80056d4:	4631      	mov	r1, r6
 80056d6:	68aa      	ldr	r2, [r5, #8]
 80056d8:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 80056dc:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7ff fca1 	bl	8005028 <d_print_comp>
 80056e6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80056ea:	42ab      	cmp	r3, r5
 80056ec:	f47f ad39 	bne.w	8005162 <d_print_comp+0x13a>
 80056f0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80056f4:	42b3      	cmp	r3, r6
 80056f6:	f47f ad34 	bne.w	8005162 <d_print_comp+0x13a>
 80056fa:	3b02      	subs	r3, #2
 80056fc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005700:	e52f      	b.n	8005162 <d_print_comp+0x13a>
 8005702:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 8748 	bne.w	800659c <d_print_comp+0x1574>
 800570c:	686a      	ldr	r2, [r5, #4]
 800570e:	4b4c      	ldr	r3, [pc, #304]	; (8005840 <d_print_comp+0x818>)
 8005710:	6851      	ldr	r1, [r2, #4]
 8005712:	4299      	cmp	r1, r3
 8005714:	f000 873e 	beq.w	8006594 <d_print_comp+0x156c>
 8005718:	4631      	mov	r1, r6
 800571a:	4620      	mov	r0, r4
 800571c:	f7ff fc84 	bl	8005028 <d_print_comp>
 8005720:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005724:	2bff      	cmp	r3, #255	; 0xff
 8005726:	f001 81e0 	beq.w	8006aea <d_print_comp+0x1ac2>
 800572a:	1c59      	adds	r1, r3, #1
 800572c:	2220      	movs	r2, #32
 800572e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005732:	54e2      	strb	r2, [r4, r3]
 8005734:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005738:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 86e3 	beq.w	8006508 <d_print_comp+0x14e0>
 8005742:	4d40      	ldr	r5, [pc, #256]	; (8005844 <d_print_comp+0x81c>)
 8005744:	f04f 0800 	mov.w	r8, #0
 8005748:	1daf      	adds	r7, r5, #6
 800574a:	e009      	b.n	8005760 <d_print_comp+0x738>
 800574c:	460b      	mov	r3, r1
 800574e:	3101      	adds	r1, #1
 8005750:	42bd      	cmp	r5, r7
 8005752:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005756:	54e6      	strb	r6, [r4, r3]
 8005758:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800575c:	f43f ad01 	beq.w	8005162 <d_print_comp+0x13a>
 8005760:	29ff      	cmp	r1, #255	; 0xff
 8005762:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005766:	d1f1      	bne.n	800574c <d_print_comp+0x724>
 8005768:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800576c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005770:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005774:	4620      	mov	r0, r4
 8005776:	4798      	blx	r3
 8005778:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800577c:	3301      	adds	r3, #1
 800577e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005782:	2101      	movs	r1, #1
 8005784:	2300      	movs	r3, #0
 8005786:	e7e3      	b.n	8005750 <d_print_comp+0x728>
 8005788:	686a      	ldr	r2, [r5, #4]
 800578a:	68ad      	ldr	r5, [r5, #8]
 800578c:	b10a      	cbz	r2, 8005792 <d_print_comp+0x76a>
 800578e:	f7ff fc4b 	bl	8005028 <d_print_comp>
 8005792:	4620      	mov	r0, r4
 8005794:	217b      	movs	r1, #123	; 0x7b
 8005796:	f7fe ff9d 	bl	80046d4 <d_append_char>
 800579a:	4620      	mov	r0, r4
 800579c:	4631      	mov	r1, r6
 800579e:	462a      	mov	r2, r5
 80057a0:	f7ff fc42 	bl	8005028 <d_print_comp>
 80057a4:	4620      	mov	r0, r4
 80057a6:	217d      	movs	r1, #125	; 0x7d
 80057a8:	f7fe ff94 	bl	80046d4 <d_append_char>
 80057ac:	e4d9      	b.n	8005162 <d_print_comp+0x13a>
 80057ae:	2301      	movs	r3, #1
 80057b0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80057b4:	e4d5      	b.n	8005162 <d_print_comp+0x13a>
 80057b6:	68ab      	ldr	r3, [r5, #8]
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	2a39      	cmp	r2, #57	; 0x39
 80057bc:	f47f acd9 	bne.w	8005172 <d_print_comp+0x14a>
 80057c0:	689f      	ldr	r7, [r3, #8]
 80057c2:	783a      	ldrb	r2, [r7, #0]
 80057c4:	2a3a      	cmp	r2, #58	; 0x3a
 80057c6:	f47f acd4 	bne.w	8005172 <d_print_comp+0x14a>
 80057ca:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80057ce:	491e      	ldr	r1, [pc, #120]	; (8005848 <d_print_comp+0x820>)
 80057d0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80057d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80057d8:	6810      	ldr	r0, [r2, #0]
 80057da:	f8d7 9004 	ldr.w	r9, [r7, #4]
 80057de:	68bd      	ldr	r5, [r7, #8]
 80057e0:	f008 f9c2 	bl	800db68 <strcmp>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	f001 8243 	beq.w	8006c70 <d_print_comp+0x1c48>
 80057ea:	4620      	mov	r0, r4
 80057ec:	4917      	ldr	r1, [pc, #92]	; (800584c <d_print_comp+0x824>)
 80057ee:	f7ff f933 	bl	8004a58 <d_append_string>
 80057f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80057f6:	b143      	cbz	r3, 800580a <d_print_comp+0x7e2>
 80057f8:	4620      	mov	r0, r4
 80057fa:	4631      	mov	r1, r6
 80057fc:	4642      	mov	r2, r8
 80057fe:	f001 febf 	bl	8007580 <d_print_subexpr>
 8005802:	4620      	mov	r0, r4
 8005804:	2120      	movs	r1, #32
 8005806:	f7fe ff65 	bl	80046d4 <d_append_char>
 800580a:	464a      	mov	r2, r9
 800580c:	4620      	mov	r0, r4
 800580e:	4631      	mov	r1, r6
 8005810:	f7ff fc0a 	bl	8005028 <d_print_comp>
 8005814:	2d00      	cmp	r5, #0
 8005816:	f43f aca4 	beq.w	8005162 <d_print_comp+0x13a>
 800581a:	4620      	mov	r0, r4
 800581c:	4631      	mov	r1, r6
 800581e:	462a      	mov	r2, r5
 8005820:	f001 feae 	bl	8007580 <d_print_subexpr>
 8005824:	e49d      	b.n	8005162 <d_print_comp+0x13a>
 8005826:	2301      	movs	r3, #1
 8005828:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800582c:	e499      	b.n	8005162 <d_print_comp+0x13a>
 800582e:	bf00      	nop
 8005830:	0801dccb 	.word	0x0801dccb
 8005834:	0801dd0b 	.word	0x0801dd0b
 8005838:	0801dcff 	.word	0x0801dcff
 800583c:	0801dcfc 	.word	0x0801dcfc
 8005840:	0801d088 	.word	0x0801d088
 8005844:	0801dcec 	.word	0x0801dcec
 8005848:	0801dd28 	.word	0x0801dd28
 800584c:	0801dd30 	.word	0x0801dd30
 8005850:	68ab      	ldr	r3, [r5, #8]
 8005852:	781a      	ldrb	r2, [r3, #0]
 8005854:	2a37      	cmp	r2, #55	; 0x37
 8005856:	f47f ac8c 	bne.w	8005172 <d_print_comp+0x14a>
 800585a:	686a      	ldr	r2, [r5, #4]
 800585c:	6851      	ldr	r1, [r2, #4]
 800585e:	6808      	ldr	r0, [r1, #0]
 8005860:	7847      	ldrb	r7, [r0, #1]
 8005862:	2f63      	cmp	r7, #99	; 0x63
 8005864:	f001 8180 	beq.w	8006b68 <d_print_comp+0x1b40>
 8005868:	7812      	ldrb	r2, [r2, #0]
 800586a:	2a31      	cmp	r2, #49	; 0x31
 800586c:	f000 83f9 	beq.w	8006062 <d_print_comp+0x103a>
 8005870:	461f      	mov	r7, r3
 8005872:	49c9      	ldr	r1, [pc, #804]	; (8005b98 <d_print_comp+0xb70>)
 8005874:	f008 f978 	bl	800db68 <strcmp>
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	b918      	cbnz	r0, 8005884 <d_print_comp+0x85c>
 800587c:	7813      	ldrb	r3, [r2, #0]
 800587e:	2b03      	cmp	r3, #3
 8005880:	f001 8210 	beq.w	8006ca4 <d_print_comp+0x1c7c>
 8005884:	4620      	mov	r0, r4
 8005886:	4631      	mov	r1, r6
 8005888:	f001 fe7a 	bl	8007580 <d_print_subexpr>
 800588c:	686f      	ldr	r7, [r5, #4]
 800588e:	49c3      	ldr	r1, [pc, #780]	; (8005b9c <d_print_comp+0xb74>)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 8000 	ldr.w	r8, [r3]
 8005896:	4640      	mov	r0, r8
 8005898:	f008 f966 	bl	800db68 <strcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	f001 81c1 	beq.w	8006c24 <d_print_comp+0x1bfc>
 80058a2:	4640      	mov	r0, r8
 80058a4:	49bc      	ldr	r1, [pc, #752]	; (8005b98 <d_print_comp+0xb70>)
 80058a6:	f008 f95f 	bl	800db68 <strcmp>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f041 81ca 	bne.w	8006c44 <d_print_comp+0x1c1c>
 80058b0:	68ab      	ldr	r3, [r5, #8]
 80058b2:	4631      	mov	r1, r6
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	4620      	mov	r0, r4
 80058b8:	f001 fe62 	bl	8007580 <d_print_subexpr>
 80058bc:	686b      	ldr	r3, [r5, #4]
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	2a31      	cmp	r2, #49	; 0x31
 80058c2:	f47f ac4e 	bne.w	8005162 <d_print_comp+0x13a>
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	2a01      	cmp	r2, #1
 80058cc:	f47f ac49 	bne.w	8005162 <d_print_comp+0x13a>
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b3e      	cmp	r3, #62	; 0x3e
 80058d6:	f47f ac44 	bne.w	8005162 <d_print_comp+0x13a>
 80058da:	4620      	mov	r0, r4
 80058dc:	2129      	movs	r1, #41	; 0x29
 80058de:	f7fe fef9 	bl	80046d4 <d_append_char>
 80058e2:	e43e      	b.n	8005162 <d_print_comp+0x13a>
 80058e4:	4fae      	ldr	r7, [pc, #696]	; (8005ba0 <d_print_comp+0xb78>)
 80058e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80058ea:	f107 0a0e 	add.w	sl, r7, #14
 80058ee:	f04f 0900 	mov.w	r9, #0
 80058f2:	e00a      	b.n	800590a <d_print_comp+0x8e2>
 80058f4:	460b      	mov	r3, r1
 80058f6:	3101      	adds	r1, #1
 80058f8:	4557      	cmp	r7, sl
 80058fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058fe:	f804 8003 	strb.w	r8, [r4, r3]
 8005902:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005906:	f000 849e 	beq.w	8006246 <d_print_comp+0x121e>
 800590a:	29ff      	cmp	r1, #255	; 0xff
 800590c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005910:	d1f0      	bne.n	80058f4 <d_print_comp+0x8cc>
 8005912:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005916:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800591a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800591e:	4620      	mov	r0, r4
 8005920:	4798      	blx	r3
 8005922:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005926:	3301      	adds	r3, #1
 8005928:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800592c:	2101      	movs	r1, #1
 800592e:	2300      	movs	r3, #0
 8005930:	e7e2      	b.n	80058f8 <d_print_comp+0x8d0>
 8005932:	ab14      	add	r3, sp, #80	; 0x50
 8005934:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8005938:	f843 2d40 	str.w	r2, [r3, #-64]!
 800593c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8005940:	68aa      	ldr	r2, [r5, #8]
 8005942:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8005946:	9307      	str	r3, [sp, #28]
 8005948:	2700      	movs	r7, #0
 800594a:	9505      	str	r5, [sp, #20]
 800594c:	9706      	str	r7, [sp, #24]
 800594e:	f7ff fb6b 	bl	8005028 <d_print_comp>
 8005952:	9b06      	ldr	r3, [sp, #24]
 8005954:	b923      	cbnz	r3, 8005960 <d_print_comp+0x938>
 8005956:	4631      	mov	r1, r6
 8005958:	462a      	mov	r2, r5
 800595a:	4620      	mov	r0, r4
 800595c:	f7ff f8ee 	bl	8004b3c <d_print_mod>
 8005960:	9b04      	ldr	r3, [sp, #16]
 8005962:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005966:	f7ff bbfc 	b.w	8005162 <d_print_comp+0x13a>
 800596a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800596e:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 8005972:	f84a bd40 	str.w	fp, [sl, #-64]!
 8005976:	2200      	movs	r2, #0
 8005978:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800597c:	f8cd b000 	str.w	fp, [sp]
 8005980:	4659      	mov	r1, fp
 8005982:	f8c0 a114 	str.w	sl, [r0, #276]	; 0x114
 8005986:	9505      	str	r5, [sp, #20]
 8005988:	9206      	str	r2, [sp, #24]
 800598a:	9307      	str	r3, [sp, #28]
 800598c:	2900      	cmp	r1, #0
 800598e:	f001 8160 	beq.w	8006c52 <d_print_comp+0x1c2a>
 8005992:	684b      	ldr	r3, [r1, #4]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	3b19      	subs	r3, #25
 8005998:	2b02      	cmp	r3, #2
 800599a:	f201 815a 	bhi.w	8006c52 <d_print_comp+0x1c2a>
 800599e:	46ac      	mov	ip, r5
 80059a0:	f04f 0801 	mov.w	r8, #1
 80059a4:	460f      	mov	r7, r1
 80059a6:	4655      	mov	r5, sl
 80059a8:	e004      	b.n	80059b4 <d_print_comp+0x98c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	3b19      	subs	r3, #25
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d81d      	bhi.n	80059f0 <d_print_comp+0x9c8>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 80059ba:	aa14      	add	r2, sp, #80	; 0x50
 80059bc:	eb02 0b0e 	add.w	fp, r2, lr
 80059c0:	b99b      	cbnz	r3, 80059ea <d_print_comp+0x9c2>
 80059c2:	f1b8 0f03 	cmp.w	r8, #3
 80059c6:	f200 87c7 	bhi.w	8006958 <d_print_comp+0x1930>
 80059ca:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80059ce:	f1ab 0940 	sub.w	r9, fp, #64	; 0x40
 80059d2:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 80059d6:	f84b 5c40 	str.w	r5, [fp, #-64]
 80059da:	2301      	movs	r3, #1
 80059dc:	eb0a 050e 	add.w	r5, sl, lr
 80059e0:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 80059e4:	f108 0801 	add.w	r8, r8, #1
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	683f      	ldr	r7, [r7, #0]
 80059ec:	2f00      	cmp	r7, #0
 80059ee:	d1dc      	bne.n	80059aa <d_print_comp+0x982>
 80059f0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80059f4:	4620      	mov	r0, r4
 80059f6:	4631      	mov	r1, r6
 80059f8:	4665      	mov	r5, ip
 80059fa:	f7ff fb15 	bl	8005028 <d_print_comp>
 80059fe:	9b06      	ldr	r3, [sp, #24]
 8005a00:	9a00      	ldr	r2, [sp, #0]
 8005a02:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f47f abab 	bne.w	8005162 <d_print_comp+0x13a>
 8005a0c:	f1b8 0f01 	cmp.w	r8, #1
 8005a10:	f001 80f5 	beq.w	8006bfe <d_print_comp+0x1bd6>
 8005a14:	eb0a 1a08 	add.w	sl, sl, r8, lsl #4
 8005a18:	f85a 2c0c 	ldr.w	r2, [sl, #-12]
 8005a1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a20:	4620      	mov	r0, r4
 8005a22:	4631      	mov	r1, r6
 8005a24:	f7ff f88a 	bl	8004b3c <d_print_mod>
 8005a28:	f1b8 0f01 	cmp.w	r8, #1
 8005a2c:	f1aa 0a10 	sub.w	sl, sl, #16
 8005a30:	d1f2      	bne.n	8005a18 <d_print_comp+0x9f0>
 8005a32:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8005a36:	4620      	mov	r0, r4
 8005a38:	4631      	mov	r1, r6
 8005a3a:	1d2a      	adds	r2, r5, #4
 8005a3c:	f001 fbdc 	bl	80071f8 <d_print_array_type.isra.10>
 8005a40:	f7ff bb8f 	b.w	8005162 <d_print_comp+0x13a>
 8005a44:	068b      	lsls	r3, r1, #26
 8005a46:	f100 8585 	bmi.w	8006554 <d_print_comp+0x152c>
 8005a4a:	686b      	ldr	r3, [r5, #4]
 8005a4c:	b11b      	cbz	r3, 8005a56 <d_print_comp+0xa2e>
 8005a4e:	f016 0340 	ands.w	r3, r6, #64	; 0x40
 8005a52:	f000 8786 	beq.w	8006962 <d_print_comp+0x193a>
 8005a56:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	f105 0208 	add.w	r2, r5, #8
 8005a60:	4620      	mov	r0, r4
 8005a62:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8005a66:	f001 f9f1 	bl	8006e4c <d_print_function_type.isra.11>
 8005a6a:	f7ff bb7a 	b.w	8005162 <d_print_comp+0x13a>
 8005a6e:	686a      	ldr	r2, [r5, #4]
 8005a70:	f7ff fada 	bl	8005028 <d_print_comp>
 8005a74:	f7ff bb75 	b.w	8005162 <d_print_comp+0x13a>
 8005a78:	494a      	ldr	r1, [pc, #296]	; (8005ba4 <d_print_comp+0xb7c>)
 8005a7a:	f7fe ffed 	bl	8004a58 <d_append_string>
 8005a7e:	4620      	mov	r0, r4
 8005a80:	4631      	mov	r1, r6
 8005a82:	686a      	ldr	r2, [r5, #4]
 8005a84:	f7ff fad0 	bl	8005028 <d_print_comp>
 8005a88:	f7ff bb6b 	b.w	8005162 <d_print_comp+0x13a>
 8005a8c:	4946      	ldr	r1, [pc, #280]	; (8005ba8 <d_print_comp+0xb80>)
 8005a8e:	f7fe ffe3 	bl	8004a58 <d_append_string>
 8005a92:	4620      	mov	r0, r4
 8005a94:	4631      	mov	r1, r6
 8005a96:	686a      	ldr	r2, [r5, #4]
 8005a98:	f7ff fac6 	bl	8005028 <d_print_comp>
 8005a9c:	f7ff bb61 	b.w	8005162 <d_print_comp+0x13a>
 8005aa0:	4942      	ldr	r1, [pc, #264]	; (8005bac <d_print_comp+0xb84>)
 8005aa2:	f7fe ffd9 	bl	8004a58 <d_append_string>
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	686a      	ldr	r2, [r5, #4]
 8005aac:	f7ff fabc 	bl	8005028 <d_print_comp>
 8005ab0:	f7ff bb57 	b.w	8005162 <d_print_comp+0x13a>
 8005ab4:	493e      	ldr	r1, [pc, #248]	; (8005bb0 <d_print_comp+0xb88>)
 8005ab6:	f7fe ffcf 	bl	8004a58 <d_append_string>
 8005aba:	4620      	mov	r0, r4
 8005abc:	4631      	mov	r1, r6
 8005abe:	686a      	ldr	r2, [r5, #4]
 8005ac0:	f7ff fab2 	bl	8005028 <d_print_comp>
 8005ac4:	f7ff bb4d 	b.w	8005162 <d_print_comp+0x13a>
 8005ac8:	493a      	ldr	r1, [pc, #232]	; (8005bb4 <d_print_comp+0xb8c>)
 8005aca:	f7fe ffc5 	bl	8004a58 <d_append_string>
 8005ace:	4620      	mov	r0, r4
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	686a      	ldr	r2, [r5, #4]
 8005ad4:	f7ff faa8 	bl	8005028 <d_print_comp>
 8005ad8:	f7ff bb43 	b.w	8005162 <d_print_comp+0x13a>
 8005adc:	4936      	ldr	r1, [pc, #216]	; (8005bb8 <d_print_comp+0xb90>)
 8005ade:	f7fe ffbb 	bl	8004a58 <d_append_string>
 8005ae2:	686a      	ldr	r2, [r5, #4]
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	f7ff fa9e 	bl	8005028 <d_print_comp>
 8005aec:	4620      	mov	r0, r4
 8005aee:	4933      	ldr	r1, [pc, #204]	; (8005bbc <d_print_comp+0xb94>)
 8005af0:	f7fe ffb2 	bl	8004a58 <d_append_string>
 8005af4:	4620      	mov	r0, r4
 8005af6:	4631      	mov	r1, r6
 8005af8:	68aa      	ldr	r2, [r5, #8]
 8005afa:	f7ff fa95 	bl	8005028 <d_print_comp>
 8005afe:	f7ff bb30 	b.w	8005162 <d_print_comp+0x13a>
 8005b02:	492f      	ldr	r1, [pc, #188]	; (8005bc0 <d_print_comp+0xb98>)
 8005b04:	f7fe ffa8 	bl	8004a58 <d_append_string>
 8005b08:	4620      	mov	r0, r4
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	686a      	ldr	r2, [r5, #4]
 8005b0e:	f7ff fa8b 	bl	8005028 <d_print_comp>
 8005b12:	f7ff bb26 	b.w	8005162 <d_print_comp+0x13a>
 8005b16:	492b      	ldr	r1, [pc, #172]	; (8005bc4 <d_print_comp+0xb9c>)
 8005b18:	f7fe ff9e 	bl	8004a58 <d_append_string>
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4631      	mov	r1, r6
 8005b20:	686a      	ldr	r2, [r5, #4]
 8005b22:	f7ff fa81 	bl	8005028 <d_print_comp>
 8005b26:	f7ff bb1c 	b.w	8005162 <d_print_comp+0x13a>
 8005b2a:	217e      	movs	r1, #126	; 0x7e
 8005b2c:	f7fe fdd2 	bl	80046d4 <d_append_char>
 8005b30:	4620      	mov	r0, r4
 8005b32:	4631      	mov	r1, r6
 8005b34:	68aa      	ldr	r2, [r5, #8]
 8005b36:	f7ff fa77 	bl	8005028 <d_print_comp>
 8005b3a:	f7ff bb12 	b.w	8005162 <d_print_comp+0x13a>
 8005b3e:	68aa      	ldr	r2, [r5, #8]
 8005b40:	f7ff fa72 	bl	8005028 <d_print_comp>
 8005b44:	f7ff bb0d 	b.w	8005162 <d_print_comp+0x13a>
 8005b48:	686f      	ldr	r7, [r5, #4]
 8005b4a:	2f00      	cmp	r7, #0
 8005b4c:	f040 844d 	bne.w	80063ea <d_print_comp+0x13c2>
 8005b50:	4d1d      	ldr	r5, [pc, #116]	; (8005bc8 <d_print_comp+0xba0>)
 8005b52:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b56:	f105 0804 	add.w	r8, r5, #4
 8005b5a:	e009      	b.n	8005b70 <d_print_comp+0xb48>
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	3101      	adds	r1, #1
 8005b60:	4545      	cmp	r5, r8
 8005b62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005b66:	54e6      	strb	r6, [r4, r3]
 8005b68:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005b6c:	f43f aaf9 	beq.w	8005162 <d_print_comp+0x13a>
 8005b70:	29ff      	cmp	r1, #255	; 0xff
 8005b72:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005b76:	d1f1      	bne.n	8005b5c <d_print_comp+0xb34>
 8005b78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005b7c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005b80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005b84:	4620      	mov	r0, r4
 8005b86:	4798      	blx	r3
 8005b88:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005b92:	2101      	movs	r1, #1
 8005b94:	2300      	movs	r3, #0
 8005b96:	e7e3      	b.n	8005b60 <d_print_comp+0xb38>
 8005b98:	0801dd20 	.word	0x0801dd20
 8005b9c:	0801dd24 	.word	0x0801dd24
 8005ba0:	0801dd53 	.word	0x0801dd53
 8005ba4:	0801dc14 	.word	0x0801dc14
 8005ba8:	0801dc10 	.word	0x0801dc10
 8005bac:	0801dbfc 	.word	0x0801dbfc
 8005bb0:	0801dbe8 	.word	0x0801dbe8
 8005bb4:	0801dbd8 	.word	0x0801dbd8
 8005bb8:	0801dbb4 	.word	0x0801dbb4
 8005bbc:	0801dbd0 	.word	0x0801dbd0
 8005bc0:	0801dba8 	.word	0x0801dba8
 8005bc4:	0801db9c 	.word	0x0801db9c
 8005bc8:	0801dd74 	.word	0x0801dd74
 8005bcc:	1d29      	adds	r1, r5, #4
 8005bce:	f7fe fe9f 	bl	8004910 <d_lookup_template_argument.isra.6>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	f43f aacd 	beq.w	8005172 <d_print_comp+0x14a>
 8005bd8:	7803      	ldrb	r3, [r0, #0]
 8005bda:	2b2f      	cmp	r3, #47	; 0x2f
 8005bdc:	f000 85ee 	beq.w	80067bc <d_print_comp+0x1794>
 8005be0:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8005bea:	4602      	mov	r2, r0
 8005bec:	4631      	mov	r1, r6
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f7ff fa1a 	bl	8005028 <d_print_comp>
 8005bf4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8005bf8:	f7ff bab3 	b.w	8005162 <d_print_comp+0x13a>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8005c02:	f8d0 813c 	ldr.w	r8, [r0, #316]	; 0x13c
 8005c06:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8005c0a:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
 8005c0e:	074a      	lsls	r2, r1, #29
 8005c10:	686f      	ldr	r7, [r5, #4]
 8005c12:	d505      	bpl.n	8005c20 <d_print_comp+0xbf8>
 8005c14:	783b      	ldrb	r3, [r7, #0]
 8005c16:	b91b      	cbnz	r3, 8005c20 <d_print_comp+0xbf8>
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	2a06      	cmp	r2, #6
 8005c1c:	f000 87cc 	beq.w	8006bb8 <d_print_comp+0x1b90>
 8005c20:	463a      	mov	r2, r7
 8005c22:	4620      	mov	r0, r4
 8005c24:	4631      	mov	r1, r6
 8005c26:	f7ff f9ff 	bl	8005028 <d_print_comp>
 8005c2a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005c2e:	2b3c      	cmp	r3, #60	; 0x3c
 8005c30:	f000 8774 	beq.w	8006b1c <d_print_comp+0x1af4>
 8005c34:	4620      	mov	r0, r4
 8005c36:	213c      	movs	r1, #60	; 0x3c
 8005c38:	f7fe fd4c 	bl	80046d4 <d_append_char>
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4631      	mov	r1, r6
 8005c40:	68aa      	ldr	r2, [r5, #8]
 8005c42:	f7ff f9f1 	bl	8005028 <d_print_comp>
 8005c46:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c4c:	f000 8760 	beq.w	8006b10 <d_print_comp+0x1ae8>
 8005c50:	4620      	mov	r0, r4
 8005c52:	213e      	movs	r1, #62	; 0x3e
 8005c54:	f7fe fd3e 	bl	80046d4 <d_append_char>
 8005c58:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8005c5c:	f8c4 813c 	str.w	r8, [r4, #316]	; 0x13c
 8005c60:	f7ff ba7f 	b.w	8005162 <d_print_comp+0x13a>
 8005c64:	686a      	ldr	r2, [r5, #4]
 8005c66:	f7ff f9df 	bl	8005028 <d_print_comp>
 8005c6a:	0771      	lsls	r1, r6, #29
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f100 841c 	bmi.w	80064aa <d_print_comp+0x1482>
 8005c72:	49ce      	ldr	r1, [pc, #824]	; (8005fac <d_print_comp+0xf84>)
 8005c74:	f7fe fef0 	bl	8004a58 <d_append_string>
 8005c78:	68ad      	ldr	r5, [r5, #8]
 8005c7a:	782b      	ldrb	r3, [r5, #0]
 8005c7c:	2b45      	cmp	r3, #69	; 0x45
 8005c7e:	f000 8617 	beq.w	80068b0 <d_print_comp+0x1888>
 8005c82:	4620      	mov	r0, r4
 8005c84:	4631      	mov	r1, r6
 8005c86:	462a      	mov	r2, r5
 8005c88:	f7ff f9ce 	bl	8005028 <d_print_comp>
 8005c8c:	f7ff ba69 	b.w	8005162 <d_print_comp+0x13a>
 8005c90:	f011 0604 	ands.w	r6, r1, #4
 8005c94:	f040 85a8 	bne.w	80067e8 <d_print_comp+0x17c0>
 8005c98:	68ab      	ldr	r3, [r5, #8]
 8005c9a:	686d      	ldr	r5, [r5, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f43f aa60 	beq.w	8005162 <d_print_comp+0x13a>
 8005ca2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ca6:	eb05 0803 	add.w	r8, r5, r3
 8005caa:	e009      	b.n	8005cc0 <d_print_comp+0xc98>
 8005cac:	460b      	mov	r3, r1
 8005cae:	3101      	adds	r1, #1
 8005cb0:	4545      	cmp	r5, r8
 8005cb2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005cb6:	54e7      	strb	r7, [r4, r3]
 8005cb8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8005cbc:	f43f aa51 	beq.w	8005162 <d_print_comp+0x13a>
 8005cc0:	29ff      	cmp	r1, #255	; 0xff
 8005cc2:	f815 7b01 	ldrb.w	r7, [r5], #1
 8005cc6:	d1f1      	bne.n	8005cac <d_print_comp+0xc84>
 8005cc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ccc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005cd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	4798      	blx	r3
 8005cd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e7e3      	b.n	8005cb0 <d_print_comp+0xc88>
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8005cee:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8005cf2:	686f      	ldr	r7, [r5, #4]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2f00      	cmp	r7, #0
 8005cf8:	f000 81e5 	beq.w	80060c6 <d_print_comp+0x109e>
 8005cfc:	f10d 0a10 	add.w	sl, sp, #16
 8005d00:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 8005d04:	4690      	mov	r8, r2
 8005d06:	4610      	mov	r0, r2
 8005d08:	4653      	mov	r3, sl
 8005d0a:	7839      	ldrb	r1, [r7, #0]
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	f1a1 0e1c 	sub.w	lr, r1, #28
 8005d12:	f1be 0f04 	cmp.w	lr, #4
 8005d16:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005d1a:	605f      	str	r7, [r3, #4]
 8005d1c:	6098      	str	r0, [r3, #8]
 8005d1e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f108 0801 	add.w	r8, r8, #1
 8005d28:	f103 0310 	add.w	r3, r3, #16
 8005d2c:	f240 81c5 	bls.w	80060ba <d_print_comp+0x1092>
 8005d30:	2904      	cmp	r1, #4
 8005d32:	f000 81a9 	beq.w	8006088 <d_print_comp+0x1060>
 8005d36:	2902      	cmp	r1, #2
 8005d38:	f040 81ac 	bne.w	8006094 <d_print_comp+0x106c>
 8005d3c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8005d40:	f89b 3000 	ldrb.w	r3, [fp]
 8005d44:	2b45      	cmp	r3, #69	; 0x45
 8005d46:	bf08      	it	eq
 8005d48:	f8db b004 	ldreq.w	fp, [fp, #4]
 8005d4c:	f89b 3000 	ldrb.w	r3, [fp]
 8005d50:	3b1c      	subs	r3, #28
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	f200 819e 	bhi.w	8006094 <d_print_comp+0x106c>
 8005d58:	f1b8 0f04 	cmp.w	r8, #4
 8005d5c:	f000 81b3 	beq.w	80060c6 <d_print_comp+0x109e>
 8005d60:	f108 5e80 	add.w	lr, r8, #268435456	; 0x10000000
 8005d64:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005d68:	462b      	mov	r3, r5
 8005d6a:	eb0a 1e0e 	add.w	lr, sl, lr, lsl #4
 8005d6e:	46b1      	mov	r9, r6
 8005d70:	465d      	mov	r5, fp
 8005d72:	4666      	mov	r6, ip
 8005d74:	469b      	mov	fp, r3
 8005d76:	46a4      	mov	ip, r4
 8005d78:	4674      	mov	r4, lr
 8005d7a:	e003      	b.n	8005d84 <d_print_comp+0xd5c>
 8005d7c:	f1b8 0f04 	cmp.w	r8, #4
 8005d80:	f001 800a 	beq.w	8006d98 <d_print_comp+0x1d70>
 8005d84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005d88:	f104 0e10 	add.w	lr, r4, #16
 8005d8c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8005d90:	4623      	mov	r3, r4
 8005d92:	2200      	movs	r2, #0
 8005d94:	611c      	str	r4, [r3, #16]
 8005d96:	605d      	str	r5, [r3, #4]
 8005d98:	609a      	str	r2, [r3, #8]
 8005d9a:	60de      	str	r6, [r3, #12]
 8005d9c:	f8cc e114 	str.w	lr, [ip, #276]	; 0x114
 8005da0:	686d      	ldr	r5, [r5, #4]
 8005da2:	782b      	ldrb	r3, [r5, #0]
 8005da4:	3b1c      	subs	r3, #28
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	4674      	mov	r4, lr
 8005daa:	f108 0801 	add.w	r8, r8, #1
 8005dae:	d9e5      	bls.n	8005d7c <d_print_comp+0xd54>
 8005db0:	f8db 2008 	ldr.w	r2, [fp, #8]
 8005db4:	4660      	mov	r0, ip
 8005db6:	4649      	mov	r1, r9
 8005db8:	4664      	mov	r4, ip
 8005dba:	f7ff f935 	bl	8005028 <d_print_comp>
 8005dbe:	783b      	ldrb	r3, [r7, #0]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	464e      	mov	r6, r9
 8005dc4:	f000 816f 	beq.w	80060a6 <d_print_comp+0x107e>
 8005dc8:	f1b8 0f00 	cmp.w	r8, #0
 8005dcc:	d00c      	beq.n	8005de8 <d_print_comp+0xdc0>
 8005dce:	eb0a 1a08 	add.w	sl, sl, r8, lsl #4
 8005dd2:	4645      	mov	r5, r8
 8005dd4:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 8005dd8:	3d01      	subs	r5, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 86a4 	beq.w	8006b28 <d_print_comp+0x1b00>
 8005de0:	f1aa 0a10 	sub.w	sl, sl, #16
 8005de4:	2d00      	cmp	r5, #0
 8005de6:	d1f5      	bne.n	8005dd4 <d_print_comp+0xdac>
 8005de8:	9b00      	ldr	r3, [sp, #0]
 8005dea:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005dee:	f7ff b9b8 	b.w	8005162 <d_print_comp+0x13a>
 8005df2:	68af      	ldr	r7, [r5, #8]
 8005df4:	686d      	ldr	r5, [r5, #4]
 8005df6:	2f00      	cmp	r7, #0
 8005df8:	f43f a9b3 	beq.w	8005162 <d_print_comp+0x13a>
 8005dfc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005e00:	442f      	add	r7, r5
 8005e02:	f04f 0800 	mov.w	r8, #0
 8005e06:	e009      	b.n	8005e1c <d_print_comp+0xdf4>
 8005e08:	460b      	mov	r3, r1
 8005e0a:	3101      	adds	r1, #1
 8005e0c:	42bd      	cmp	r5, r7
 8005e0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e12:	54e6      	strb	r6, [r4, r3]
 8005e14:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005e18:	f43f a9a3 	beq.w	8005162 <d_print_comp+0x13a>
 8005e1c:	29ff      	cmp	r1, #255	; 0xff
 8005e1e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005e22:	d1f1      	bne.n	8005e08 <d_print_comp+0xde0>
 8005e24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e28:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005e2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e30:	4620      	mov	r0, r4
 8005e32:	4798      	blx	r3
 8005e34:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005e38:	3301      	adds	r3, #1
 8005e3a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005e3e:	2101      	movs	r1, #1
 8005e40:	2300      	movs	r3, #0
 8005e42:	e7e3      	b.n	8005e0c <d_print_comp+0xde4>
 8005e44:	4f5a      	ldr	r7, [pc, #360]	; (8005fb0 <d_print_comp+0xf88>)
 8005e46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005e4a:	f107 0a11 	add.w	sl, r7, #17
 8005e4e:	f04f 0900 	mov.w	r9, #0
 8005e52:	e00a      	b.n	8005e6a <d_print_comp+0xe42>
 8005e54:	460b      	mov	r3, r1
 8005e56:	3101      	adds	r1, #1
 8005e58:	4557      	cmp	r7, sl
 8005e5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e5e:	f804 8003 	strb.w	r8, [r4, r3]
 8005e62:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e66:	f000 8178 	beq.w	800615a <d_print_comp+0x1132>
 8005e6a:	29ff      	cmp	r1, #255	; 0xff
 8005e6c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005e70:	d1f0      	bne.n	8005e54 <d_print_comp+0xe2c>
 8005e72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e76:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005e7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e7e:	4620      	mov	r0, r4
 8005e80:	4798      	blx	r3
 8005e82:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005e86:	3301      	adds	r3, #1
 8005e88:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e7e2      	b.n	8005e58 <d_print_comp+0xe30>
 8005e92:	4948      	ldr	r1, [pc, #288]	; (8005fb4 <d_print_comp+0xf8c>)
 8005e94:	f7fe fde0 	bl	8004a58 <d_append_string>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	686a      	ldr	r2, [r5, #4]
 8005e9e:	f7ff f8c3 	bl	8005028 <d_print_comp>
 8005ea2:	f7ff b95e 	b.w	8005162 <d_print_comp+0x13a>
 8005ea6:	4944      	ldr	r1, [pc, #272]	; (8005fb8 <d_print_comp+0xf90>)
 8005ea8:	f7fe fdd6 	bl	8004a58 <d_append_string>
 8005eac:	4620      	mov	r0, r4
 8005eae:	4631      	mov	r1, r6
 8005eb0:	686a      	ldr	r2, [r5, #4]
 8005eb2:	f7ff f8b9 	bl	8005028 <d_print_comp>
 8005eb6:	f7ff b954 	b.w	8005162 <d_print_comp+0x13a>
 8005eba:	4940      	ldr	r1, [pc, #256]	; (8005fbc <d_print_comp+0xf94>)
 8005ebc:	f7fe fdcc 	bl	8004a58 <d_append_string>
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	686a      	ldr	r2, [r5, #4]
 8005ec6:	f7ff f8af 	bl	8005028 <d_print_comp>
 8005eca:	f7ff b94a 	b.w	8005162 <d_print_comp+0x13a>
 8005ece:	493c      	ldr	r1, [pc, #240]	; (8005fc0 <d_print_comp+0xf98>)
 8005ed0:	f7fe fdc2 	bl	8004a58 <d_append_string>
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	686a      	ldr	r2, [r5, #4]
 8005eda:	f7ff f8a5 	bl	8005028 <d_print_comp>
 8005ede:	f7ff b940 	b.w	8005162 <d_print_comp+0x13a>
 8005ee2:	f011 0604 	ands.w	r6, r1, #4
 8005ee6:	f040 82e5 	bne.w	80064b4 <d_print_comp+0x148c>
 8005eea:	686a      	ldr	r2, [r5, #4]
 8005eec:	6853      	ldr	r3, [r2, #4]
 8005eee:	6815      	ldr	r5, [r2, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f43f a936 	beq.w	8005162 <d_print_comp+0x13a>
 8005ef6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005efa:	eb05 0803 	add.w	r8, r5, r3
 8005efe:	e009      	b.n	8005f14 <d_print_comp+0xeec>
 8005f00:	460b      	mov	r3, r1
 8005f02:	3101      	adds	r1, #1
 8005f04:	4545      	cmp	r5, r8
 8005f06:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005f0a:	54e7      	strb	r7, [r4, r3]
 8005f0c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8005f10:	f43f a927 	beq.w	8005162 <d_print_comp+0x13a>
 8005f14:	29ff      	cmp	r1, #255	; 0xff
 8005f16:	f815 7b01 	ldrb.w	r7, [r5], #1
 8005f1a:	d1f1      	bne.n	8005f00 <d_print_comp+0xed8>
 8005f1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f20:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005f24:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f28:	4620      	mov	r0, r4
 8005f2a:	4798      	blx	r3
 8005f2c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005f30:	3301      	adds	r3, #1
 8005f32:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005f36:	2101      	movs	r1, #1
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e7e3      	b.n	8005f04 <d_print_comp+0xedc>
 8005f3c:	6868      	ldr	r0, [r5, #4]
 8005f3e:	7803      	ldrb	r3, [r0, #0]
 8005f40:	2b05      	cmp	r3, #5
 8005f42:	f000 8352 	beq.w	80065ea <d_print_comp+0x15c2>
 8005f46:	f04f 0800 	mov.w	r8, #0
 8005f4a:	2b23      	cmp	r3, #35	; 0x23
 8005f4c:	f000 82fe 	beq.w	800654c <d_print_comp+0x1524>
 8005f50:	782a      	ldrb	r2, [r5, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	f000 82fa 	beq.w	800654c <d_print_comp+0x1524>
 8005f58:	2b24      	cmp	r3, #36	; 0x24
 8005f5a:	f000 8583 	beq.w	8006a64 <d_print_comp+0x1a3c>
 8005f5e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8005f62:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8005f66:	9505      	str	r5, [sp, #20]
 8005f68:	ab14      	add	r3, sp, #80	; 0x50
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	f843 0d40 	str.w	r0, [r3, #-64]!
 8005f70:	9106      	str	r1, [sp, #24]
 8005f72:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f76:	9207      	str	r2, [sp, #28]
 8005f78:	686a      	ldr	r2, [r5, #4]
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	f7ff f853 	bl	8005028 <d_print_comp>
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 821f 	beq.w	80063c8 <d_print_comp+0x13a0>
 8005f8a:	9b04      	ldr	r3, [sp, #16]
 8005f8c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f90:	f1b8 0f00 	cmp.w	r8, #0
 8005f94:	f43f a8e5 	beq.w	8005162 <d_print_comp+0x13a>
 8005f98:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8005f9c:	f7ff b8e1 	b.w	8005162 <d_print_comp+0x13a>
 8005fa0:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8005fa4:	f04f 0800 	mov.w	r8, #0
 8005fa8:	e7db      	b.n	8005f62 <d_print_comp+0xf3a>
 8005faa:	bf00      	nop
 8005fac:	0801db78 	.word	0x0801db78
 8005fb0:	0801dcb3 	.word	0x0801dcb3
 8005fb4:	0801dc68 	.word	0x0801dc68
 8005fb8:	0801dc54 	.word	0x0801dc54
 8005fbc:	0801dc44 	.word	0x0801dc44
 8005fc0:	0801dc28 	.word	0x0801dc28
 8005fc4:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8005fc8:	f1bc 0f00 	cmp.w	ip, #0
 8005fcc:	f000 86de 	beq.w	8006d8c <d_print_comp+0x1d64>
 8005fd0:	4662      	mov	r2, ip
 8005fd2:	6891      	ldr	r1, [r2, #8]
 8005fd4:	b951      	cbnz	r1, 8005fec <d_print_comp+0xfc4>
 8005fd6:	6850      	ldr	r0, [r2, #4]
 8005fd8:	7800      	ldrb	r0, [r0, #0]
 8005fda:	f1a0 0e19 	sub.w	lr, r0, #25
 8005fde:	f1be 0f02 	cmp.w	lr, #2
 8005fe2:	f200 83e0 	bhi.w	80067a6 <d_print_comp+0x177e>
 8005fe6:	4283      	cmp	r3, r0
 8005fe8:	f000 83e1 	beq.w	80067ae <d_print_comp+0x1786>
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	2a00      	cmp	r2, #0
 8005ff0:	d1ef      	bne.n	8005fd2 <d_print_comp+0xfaa>
 8005ff2:	4660      	mov	r0, ip
 8005ff4:	4690      	mov	r8, r2
 8005ff6:	e7b4      	b.n	8005f62 <d_print_comp+0xf3a>
 8005ff8:	4fd5      	ldr	r7, [pc, #852]	; (8006350 <d_print_comp+0x1328>)
 8005ffa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ffe:	f107 0a15 	add.w	sl, r7, #21
 8006002:	f04f 0900 	mov.w	r9, #0
 8006006:	e009      	b.n	800601c <d_print_comp+0xff4>
 8006008:	460b      	mov	r3, r1
 800600a:	3101      	adds	r1, #1
 800600c:	4557      	cmp	r7, sl
 800600e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006012:	f804 8003 	strb.w	r8, [r4, r3]
 8006016:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800601a:	d06c      	beq.n	80060f6 <d_print_comp+0x10ce>
 800601c:	29ff      	cmp	r1, #255	; 0xff
 800601e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8006022:	d1f1      	bne.n	8006008 <d_print_comp+0xfe0>
 8006024:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006028:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800602c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006030:	4620      	mov	r0, r4
 8006032:	4798      	blx	r3
 8006034:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006038:	3301      	adds	r3, #1
 800603a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800603e:	2101      	movs	r1, #1
 8006040:	2300      	movs	r3, #0
 8006042:	e7e3      	b.n	800600c <d_print_comp+0xfe4>
 8006044:	49c3      	ldr	r1, [pc, #780]	; (8006354 <d_print_comp+0x132c>)
 8006046:	f7fe fd07 	bl	8004a58 <d_append_string>
 800604a:	4620      	mov	r0, r4
 800604c:	4631      	mov	r1, r6
 800604e:	686a      	ldr	r2, [r5, #4]
 8006050:	f7fe ffea 	bl	8005028 <d_print_comp>
 8006054:	f7ff b885 	b.w	8005162 <d_print_comp+0x13a>
 8006058:	2301      	movs	r3, #1
 800605a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800605e:	f7ff b880 	b.w	8005162 <d_print_comp+0x13a>
 8006062:	688a      	ldr	r2, [r1, #8]
 8006064:	2a01      	cmp	r2, #1
 8006066:	f47f ac03 	bne.w	8005870 <d_print_comp+0x848>
 800606a:	684a      	ldr	r2, [r1, #4]
 800606c:	7812      	ldrb	r2, [r2, #0]
 800606e:	2a3e      	cmp	r2, #62	; 0x3e
 8006070:	f47f abfe 	bne.w	8005870 <d_print_comp+0x848>
 8006074:	4620      	mov	r0, r4
 8006076:	2128      	movs	r1, #40	; 0x28
 8006078:	f7fe fb2c 	bl	80046d4 <d_append_char>
 800607c:	686b      	ldr	r3, [r5, #4]
 800607e:	68af      	ldr	r7, [r5, #8]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	f7ff bbf5 	b.w	8005872 <d_print_comp+0x84a>
 8006088:	ab14      	add	r3, sp, #80	; 0x50
 800608a:	9703      	str	r7, [sp, #12]
 800608c:	f843 cd48 	str.w	ip, [r3, #-72]!
 8006090:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8006094:	68aa      	ldr	r2, [r5, #8]
 8006096:	4620      	mov	r0, r4
 8006098:	4631      	mov	r1, r6
 800609a:	f7fe ffc5 	bl	8005028 <d_print_comp>
 800609e:	783b      	ldrb	r3, [r7, #0]
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	f47f ae94 	bne.w	8005dce <d_print_comp+0xda6>
 80060a6:	9b02      	ldr	r3, [sp, #8]
 80060a8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80060ac:	e68c      	b.n	8005dc8 <d_print_comp+0xda0>
 80060ae:	3701      	adds	r7, #1
 80060b0:	4547      	cmp	r7, r8
 80060b2:	f47f a8d6 	bne.w	8005262 <d_print_comp+0x23a>
 80060b6:	f7ff b854 	b.w	8005162 <d_print_comp+0x13a>
 80060ba:	687f      	ldr	r7, [r7, #4]
 80060bc:	b11f      	cbz	r7, 80060c6 <d_print_comp+0x109e>
 80060be:	f1b8 0f04 	cmp.w	r8, #4
 80060c2:	f47f ae22 	bne.w	8005d0a <d_print_comp+0xce2>
 80060c6:	2301      	movs	r3, #1
 80060c8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80060cc:	f7ff b849 	b.w	8005162 <d_print_comp+0x13a>
 80060d0:	4631      	mov	r1, r6
 80060d2:	68aa      	ldr	r2, [r5, #8]
 80060d4:	4620      	mov	r0, r4
 80060d6:	f7fe ffa7 	bl	8005028 <d_print_comp>
 80060da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80060de:	29ff      	cmp	r1, #255	; 0xff
 80060e0:	f000 83d5 	beq.w	800688e <d_print_comp+0x1866>
 80060e4:	1c4a      	adds	r2, r1, #1
 80060e6:	235d      	movs	r3, #93	; 0x5d
 80060e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80060ec:	5463      	strb	r3, [r4, r1]
 80060ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80060f2:	f7ff b836 	b.w	8005162 <d_print_comp+0x13a>
 80060f6:	4f98      	ldr	r7, [pc, #608]	; (8006358 <d_print_comp+0x1330>)
 80060f8:	68aa      	ldr	r2, [r5, #8]
 80060fa:	4631      	mov	r1, r6
 80060fc:	4620      	mov	r0, r4
 80060fe:	f7fe ff93 	bl	8005028 <d_print_comp>
 8006102:	f107 0a05 	add.w	sl, r7, #5
 8006106:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800610a:	f04f 0900 	mov.w	r9, #0
 800610e:	e009      	b.n	8006124 <d_print_comp+0x10fc>
 8006110:	460b      	mov	r3, r1
 8006112:	3101      	adds	r1, #1
 8006114:	4557      	cmp	r7, sl
 8006116:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800611a:	f804 8003 	strb.w	r8, [r4, r3]
 800611e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8006122:	d013      	beq.n	800614c <d_print_comp+0x1124>
 8006124:	29ff      	cmp	r1, #255	; 0xff
 8006126:	f817 8b01 	ldrb.w	r8, [r7], #1
 800612a:	d1f1      	bne.n	8006110 <d_print_comp+0x10e8>
 800612c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006130:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006134:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006138:	4620      	mov	r0, r4
 800613a:	4798      	blx	r3
 800613c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006140:	3301      	adds	r3, #1
 8006142:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006146:	2101      	movs	r1, #1
 8006148:	2300      	movs	r3, #0
 800614a:	e7e3      	b.n	8006114 <d_print_comp+0x10ec>
 800614c:	4620      	mov	r0, r4
 800614e:	4631      	mov	r1, r6
 8006150:	686a      	ldr	r2, [r5, #4]
 8006152:	f7fe ff69 	bl	8005028 <d_print_comp>
 8006156:	f7ff b804 	b.w	8005162 <d_print_comp+0x13a>
 800615a:	4620      	mov	r0, r4
 800615c:	4631      	mov	r1, r6
 800615e:	686a      	ldr	r2, [r5, #4]
 8006160:	f7fe ff62 	bl	8005028 <d_print_comp>
 8006164:	f7fe bffd 	b.w	8005162 <d_print_comp+0x13a>
 8006168:	4631      	mov	r1, r6
 800616a:	686a      	ldr	r2, [r5, #4]
 800616c:	4620      	mov	r0, r4
 800616e:	f7fe ff5b 	bl	8005028 <d_print_comp>
 8006172:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006176:	29ff      	cmp	r1, #255	; 0xff
 8006178:	f000 83cc 	beq.w	8006914 <d_print_comp+0x18ec>
 800617c:	1c4a      	adds	r2, r1, #1
 800617e:	2329      	movs	r3, #41	; 0x29
 8006180:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006184:	5463      	strb	r3, [r4, r1]
 8006186:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800618a:	f7fe bfea 	b.w	8005162 <d_print_comp+0x13a>
 800618e:	4620      	mov	r0, r4
 8006190:	4631      	mov	r1, r6
 8006192:	686a      	ldr	r2, [r5, #4]
 8006194:	f7fe ff48 	bl	8005028 <d_print_comp>
 8006198:	f7fe bfe3 	b.w	8005162 <d_print_comp+0x13a>
 800619c:	4631      	mov	r1, r6
 800619e:	4620      	mov	r0, r4
 80061a0:	68aa      	ldr	r2, [r5, #8]
 80061a2:	f7fe ff41 	bl	8005028 <d_print_comp>
 80061a6:	4620      	mov	r0, r4
 80061a8:	215d      	movs	r1, #93	; 0x5d
 80061aa:	f7fe fa93 	bl	80046d4 <d_append_char>
 80061ae:	f7fe bfd8 	b.w	8005162 <d_print_comp+0x13a>
 80061b2:	4620      	mov	r0, r4
 80061b4:	4631      	mov	r1, r6
 80061b6:	686a      	ldr	r2, [r5, #4]
 80061b8:	f7fe ff36 	bl	8005028 <d_print_comp>
 80061bc:	f7fe bfd1 	b.w	8005162 <d_print_comp+0x13a>
 80061c0:	4620      	mov	r0, r4
 80061c2:	4631      	mov	r1, r6
 80061c4:	1d2a      	adds	r2, r5, #4
 80061c6:	f001 f8ef 	bl	80073a8 <d_print_cast.isra.12>
 80061ca:	f7fe bfca 	b.w	8005162 <d_print_comp+0x13a>
 80061ce:	4620      	mov	r0, r4
 80061d0:	4631      	mov	r1, r6
 80061d2:	68aa      	ldr	r2, [r5, #8]
 80061d4:	f7fe ff28 	bl	8005028 <d_print_comp>
 80061d8:	f7fe bfc3 	b.w	8005162 <d_print_comp+0x13a>
 80061dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80061e0:	782b      	ldrb	r3, [r5, #0]
 80061e2:	3b61      	subs	r3, #97	; 0x61
 80061e4:	2b19      	cmp	r3, #25
 80061e6:	f240 81c8 	bls.w	800657a <d_print_comp+0x1552>
 80061ea:	19eb      	adds	r3, r5, r7
 80061ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	bf08      	it	eq
 80061f4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80061f8:	2f00      	cmp	r7, #0
 80061fa:	f43e afb2 	beq.w	8005162 <d_print_comp+0x13a>
 80061fe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006202:	442f      	add	r7, r5
 8006204:	f04f 0800 	mov.w	r8, #0
 8006208:	e009      	b.n	800621e <d_print_comp+0x11f6>
 800620a:	460b      	mov	r3, r1
 800620c:	3101      	adds	r1, #1
 800620e:	42bd      	cmp	r5, r7
 8006210:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006214:	54e6      	strb	r6, [r4, r3]
 8006216:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800621a:	f43e afa2 	beq.w	8005162 <d_print_comp+0x13a>
 800621e:	29ff      	cmp	r1, #255	; 0xff
 8006220:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006224:	d1f1      	bne.n	800620a <d_print_comp+0x11e2>
 8006226:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800622a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800622e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006232:	4620      	mov	r0, r4
 8006234:	4798      	blx	r3
 8006236:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800623a:	3301      	adds	r3, #1
 800623c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006240:	2101      	movs	r1, #1
 8006242:	2300      	movs	r3, #0
 8006244:	e7e3      	b.n	800620e <d_print_comp+0x11e6>
 8006246:	4620      	mov	r0, r4
 8006248:	4631      	mov	r1, r6
 800624a:	686a      	ldr	r2, [r5, #4]
 800624c:	f7fe feec 	bl	8005028 <d_print_comp>
 8006250:	f7fe bf87 	b.w	8005162 <d_print_comp+0x13a>
 8006254:	4620      	mov	r0, r4
 8006256:	4631      	mov	r1, r6
 8006258:	686a      	ldr	r2, [r5, #4]
 800625a:	f7fe fee5 	bl	8005028 <d_print_comp>
 800625e:	f7fe bf80 	b.w	8005162 <d_print_comp+0x13a>
 8006262:	686a      	ldr	r2, [r5, #4]
 8006264:	493d      	ldr	r1, [pc, #244]	; (800635c <d_print_comp+0x1334>)
 8006266:	3201      	adds	r2, #1
 8006268:	a804      	add	r0, sp, #16
 800626a:	f011 fba3 	bl	80179b4 <sprintf>
 800626e:	a804      	add	r0, sp, #16
 8006270:	f011 fbc6 	bl	8017a00 <strlen>
 8006274:	b318      	cbz	r0, 80062be <d_print_comp+0x1296>
 8006276:	ad04      	add	r5, sp, #16
 8006278:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800627c:	182f      	adds	r7, r5, r0
 800627e:	f04f 0800 	mov.w	r8, #0
 8006282:	e008      	b.n	8006296 <d_print_comp+0x126e>
 8006284:	460b      	mov	r3, r1
 8006286:	3101      	adds	r1, #1
 8006288:	42bd      	cmp	r5, r7
 800628a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800628e:	54e6      	strb	r6, [r4, r3]
 8006290:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006294:	d015      	beq.n	80062c2 <d_print_comp+0x129a>
 8006296:	29ff      	cmp	r1, #255	; 0xff
 8006298:	f815 6b01 	ldrb.w	r6, [r5], #1
 800629c:	d1f2      	bne.n	8006284 <d_print_comp+0x125c>
 800629e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80062a2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80062a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80062aa:	4620      	mov	r0, r4
 80062ac:	4798      	blx	r3
 80062ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80062b2:	3301      	adds	r3, #1
 80062b4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80062b8:	2101      	movs	r1, #1
 80062ba:	2300      	movs	r3, #0
 80062bc:	e7e4      	b.n	8006288 <d_print_comp+0x1260>
 80062be:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80062c2:	29ff      	cmp	r1, #255	; 0xff
 80062c4:	f000 8315 	beq.w	80068f2 <d_print_comp+0x18ca>
 80062c8:	1c4a      	adds	r2, r1, #1
 80062ca:	237d      	movs	r3, #125	; 0x7d
 80062cc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80062d0:	5463      	strb	r3, [r4, r1]
 80062d2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80062d6:	f7fe bf44 	b.w	8005162 <d_print_comp+0x13a>
 80062da:	4631      	mov	r1, r6
 80062dc:	4e20      	ldr	r6, [pc, #128]	; (8006360 <d_print_comp+0x1338>)
 80062de:	686a      	ldr	r2, [r5, #4]
 80062e0:	4620      	mov	r0, r4
 80062e2:	f7fe fea1 	bl	8005028 <d_print_comp>
 80062e6:	f106 0902 	add.w	r9, r6, #2
 80062ea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80062ee:	f04f 0800 	mov.w	r8, #0
 80062f2:	e008      	b.n	8006306 <d_print_comp+0x12de>
 80062f4:	460b      	mov	r3, r1
 80062f6:	3101      	adds	r1, #1
 80062f8:	454e      	cmp	r6, r9
 80062fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80062fe:	54e7      	strb	r7, [r4, r3]
 8006300:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8006304:	d013      	beq.n	800632e <d_print_comp+0x1306>
 8006306:	29ff      	cmp	r1, #255	; 0xff
 8006308:	f816 7b01 	ldrb.w	r7, [r6], #1
 800630c:	d1f2      	bne.n	80062f4 <d_print_comp+0x12cc>
 800630e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006312:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006316:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800631a:	4620      	mov	r0, r4
 800631c:	4798      	blx	r3
 800631e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006322:	3301      	adds	r3, #1
 8006324:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006328:	2101      	movs	r1, #1
 800632a:	2300      	movs	r3, #0
 800632c:	e7e4      	b.n	80062f8 <d_print_comp+0x12d0>
 800632e:	68aa      	ldr	r2, [r5, #8]
 8006330:	490a      	ldr	r1, [pc, #40]	; (800635c <d_print_comp+0x1334>)
 8006332:	3201      	adds	r2, #1
 8006334:	a804      	add	r0, sp, #16
 8006336:	f011 fb3d 	bl	80179b4 <sprintf>
 800633a:	a804      	add	r0, sp, #16
 800633c:	f011 fb60 	bl	8017a00 <strlen>
 8006340:	b368      	cbz	r0, 800639e <d_print_comp+0x1376>
 8006342:	ad04      	add	r5, sp, #16
 8006344:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006348:	182f      	adds	r7, r5, r0
 800634a:	f04f 0800 	mov.w	r8, #0
 800634e:	e012      	b.n	8006376 <d_print_comp+0x134e>
 8006350:	0801dc9b 	.word	0x0801dc9b
 8006354:	0801dc80 	.word	0x0801dc80
 8006358:	0801dc94 	.word	0x0801dc94
 800635c:	0801db20 	.word	0x0801db20
 8006360:	0801ddd0 	.word	0x0801ddd0
 8006364:	460b      	mov	r3, r1
 8006366:	3101      	adds	r1, #1
 8006368:	42bd      	cmp	r5, r7
 800636a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800636e:	54e6      	strb	r6, [r4, r3]
 8006370:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006374:	d015      	beq.n	80063a2 <d_print_comp+0x137a>
 8006376:	29ff      	cmp	r1, #255	; 0xff
 8006378:	f815 6b01 	ldrb.w	r6, [r5], #1
 800637c:	d1f2      	bne.n	8006364 <d_print_comp+0x133c>
 800637e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006382:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006386:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800638a:	4620      	mov	r0, r4
 800638c:	4798      	blx	r3
 800638e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006392:	3301      	adds	r3, #1
 8006394:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006398:	2101      	movs	r1, #1
 800639a:	2300      	movs	r3, #0
 800639c:	e7e4      	b.n	8006368 <d_print_comp+0x1340>
 800639e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063a2:	29ff      	cmp	r1, #255	; 0xff
 80063a4:	f000 82c7 	beq.w	8006936 <d_print_comp+0x190e>
 80063a8:	1c4a      	adds	r2, r1, #1
 80063aa:	237d      	movs	r3, #125	; 0x7d
 80063ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80063b0:	5463      	strb	r3, [r4, r1]
 80063b2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80063b6:	f7fe bed4 	b.w	8005162 <d_print_comp+0x13a>
 80063ba:	4620      	mov	r0, r4
 80063bc:	4631      	mov	r1, r6
 80063be:	686a      	ldr	r2, [r5, #4]
 80063c0:	f7fe fe32 	bl	8005028 <d_print_comp>
 80063c4:	f7fe becd 	b.w	8005162 <d_print_comp+0x13a>
 80063c8:	4631      	mov	r1, r6
 80063ca:	462a      	mov	r2, r5
 80063cc:	4620      	mov	r0, r4
 80063ce:	f7fe fbb5 	bl	8004b3c <d_print_mod>
 80063d2:	e5da      	b.n	8005f8a <d_print_comp+0xf62>
 80063d4:	686b      	ldr	r3, [r5, #4]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	f1b8 0f00 	cmp.w	r8, #0
 80063dc:	f47e af3a 	bne.w	8005254 <d_print_comp+0x22c>
 80063e0:	f7fe bebf 	b.w	8005162 <d_print_comp+0x13a>
 80063e4:	2700      	movs	r7, #0
 80063e6:	f7fe be93 	b.w	8005110 <d_print_comp+0xe8>
 80063ea:	4ddf      	ldr	r5, [pc, #892]	; (8006768 <d_print_comp+0x1740>)
 80063ec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80063f0:	f105 0906 	add.w	r9, r5, #6
 80063f4:	f04f 0800 	mov.w	r8, #0
 80063f8:	e008      	b.n	800640c <d_print_comp+0x13e4>
 80063fa:	460b      	mov	r3, r1
 80063fc:	3101      	adds	r1, #1
 80063fe:	454d      	cmp	r5, r9
 8006400:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006404:	54e6      	strb	r6, [r4, r3]
 8006406:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800640a:	d013      	beq.n	8006434 <d_print_comp+0x140c>
 800640c:	29ff      	cmp	r1, #255	; 0xff
 800640e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006412:	d1f2      	bne.n	80063fa <d_print_comp+0x13d2>
 8006414:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006418:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800641c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006420:	4620      	mov	r0, r4
 8006422:	4798      	blx	r3
 8006424:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006428:	3301      	adds	r3, #1
 800642a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800642e:	2101      	movs	r1, #1
 8006430:	2300      	movs	r3, #0
 8006432:	e7e4      	b.n	80063fe <d_print_comp+0x13d6>
 8006434:	463a      	mov	r2, r7
 8006436:	a804      	add	r0, sp, #16
 8006438:	49cc      	ldr	r1, [pc, #816]	; (800676c <d_print_comp+0x1744>)
 800643a:	f011 fabb 	bl	80179b4 <sprintf>
 800643e:	a804      	add	r0, sp, #16
 8006440:	f011 fade 	bl	8017a00 <strlen>
 8006444:	b318      	cbz	r0, 800648e <d_print_comp+0x1466>
 8006446:	ad04      	add	r5, sp, #16
 8006448:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800644c:	182f      	adds	r7, r5, r0
 800644e:	f04f 0800 	mov.w	r8, #0
 8006452:	e008      	b.n	8006466 <d_print_comp+0x143e>
 8006454:	460b      	mov	r3, r1
 8006456:	3101      	adds	r1, #1
 8006458:	42bd      	cmp	r5, r7
 800645a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800645e:	54e6      	strb	r6, [r4, r3]
 8006460:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006464:	d015      	beq.n	8006492 <d_print_comp+0x146a>
 8006466:	29ff      	cmp	r1, #255	; 0xff
 8006468:	f815 6b01 	ldrb.w	r6, [r5], #1
 800646c:	d1f2      	bne.n	8006454 <d_print_comp+0x142c>
 800646e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006472:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006476:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800647a:	4620      	mov	r0, r4
 800647c:	4798      	blx	r3
 800647e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006482:	3301      	adds	r3, #1
 8006484:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006488:	2101      	movs	r1, #1
 800648a:	2300      	movs	r3, #0
 800648c:	e7e4      	b.n	8006458 <d_print_comp+0x1430>
 800648e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006492:	29ff      	cmp	r1, #255	; 0xff
 8006494:	f000 83a2 	beq.w	8006bdc <d_print_comp+0x1bb4>
 8006498:	1c4a      	adds	r2, r1, #1
 800649a:	237d      	movs	r3, #125	; 0x7d
 800649c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80064a0:	5463      	strb	r3, [r4, r1]
 80064a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80064a6:	f7fe be5c 	b.w	8005162 <d_print_comp+0x13a>
 80064aa:	212e      	movs	r1, #46	; 0x2e
 80064ac:	f7fe f912 	bl	80046d4 <d_append_char>
 80064b0:	f7ff bbe2 	b.w	8005c78 <d_print_comp+0xc50>
 80064b4:	686b      	ldr	r3, [r5, #4]
 80064b6:	68df      	ldr	r7, [r3, #12]
 80064b8:	689d      	ldr	r5, [r3, #8]
 80064ba:	2f00      	cmp	r7, #0
 80064bc:	f43e ae51 	beq.w	8005162 <d_print_comp+0x13a>
 80064c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80064c4:	442f      	add	r7, r5
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	e009      	b.n	80064e0 <d_print_comp+0x14b8>
 80064cc:	460b      	mov	r3, r1
 80064ce:	3101      	adds	r1, #1
 80064d0:	42bd      	cmp	r5, r7
 80064d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80064d6:	54e6      	strb	r6, [r4, r3]
 80064d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80064dc:	f43e ae41 	beq.w	8005162 <d_print_comp+0x13a>
 80064e0:	29ff      	cmp	r1, #255	; 0xff
 80064e2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80064e6:	d1f1      	bne.n	80064cc <d_print_comp+0x14a4>
 80064e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80064f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064f4:	4620      	mov	r0, r4
 80064f6:	4798      	blx	r3
 80064f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80064fc:	3301      	adds	r3, #1
 80064fe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006502:	2101      	movs	r1, #1
 8006504:	2300      	movs	r3, #0
 8006506:	e7e3      	b.n	80064d0 <d_print_comp+0x14a8>
 8006508:	4d99      	ldr	r5, [pc, #612]	; (8006770 <d_print_comp+0x1748>)
 800650a:	4698      	mov	r8, r3
 800650c:	1daf      	adds	r7, r5, #6
 800650e:	e009      	b.n	8006524 <d_print_comp+0x14fc>
 8006510:	460b      	mov	r3, r1
 8006512:	3101      	adds	r1, #1
 8006514:	42bd      	cmp	r5, r7
 8006516:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800651a:	54e6      	strb	r6, [r4, r3]
 800651c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006520:	f43e ae1f 	beq.w	8005162 <d_print_comp+0x13a>
 8006524:	29ff      	cmp	r1, #255	; 0xff
 8006526:	f815 6b01 	ldrb.w	r6, [r5], #1
 800652a:	d1f1      	bne.n	8006510 <d_print_comp+0x14e8>
 800652c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006530:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006534:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006538:	4620      	mov	r0, r4
 800653a:	4798      	blx	r3
 800653c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006540:	3301      	adds	r3, #1
 8006542:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006546:	2101      	movs	r1, #1
 8006548:	2300      	movs	r3, #0
 800654a:	e7e3      	b.n	8006514 <d_print_comp+0x14ec>
 800654c:	4605      	mov	r5, r0
 800654e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8006552:	e506      	b.n	8005f62 <d_print_comp+0xf3a>
 8006554:	f021 0660 	bic.w	r6, r1, #96	; 0x60
 8006558:	f105 0208 	add.w	r2, r5, #8
 800655c:	4631      	mov	r1, r6
 800655e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8006562:	f000 fc73 	bl	8006e4c <d_print_function_type.isra.11>
 8006566:	686a      	ldr	r2, [r5, #4]
 8006568:	2a00      	cmp	r2, #0
 800656a:	f43e adfa 	beq.w	8005162 <d_print_comp+0x13a>
 800656e:	4620      	mov	r0, r4
 8006570:	4631      	mov	r1, r6
 8006572:	f7fe fd59 	bl	8005028 <d_print_comp>
 8006576:	f7fe bdf4 	b.w	8005162 <d_print_comp+0x13a>
 800657a:	29ff      	cmp	r1, #255	; 0xff
 800657c:	f000 83c0 	beq.w	8006d00 <d_print_comp+0x1cd8>
 8006580:	2320      	movs	r3, #32
 8006582:	1c4a      	adds	r2, r1, #1
 8006584:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006588:	5463      	strb	r3, [r4, r1]
 800658a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800658e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006592:	e62a      	b.n	80061ea <d_print_comp+0x11c2>
 8006594:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006598:	f7ff b8ce 	b.w	8005738 <d_print_comp+0x710>
 800659c:	4f75      	ldr	r7, [pc, #468]	; (8006774 <d_print_comp+0x174c>)
 800659e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80065a2:	f107 0a05 	add.w	sl, r7, #5
 80065a6:	f04f 0800 	mov.w	r8, #0
 80065aa:	e00a      	b.n	80065c2 <d_print_comp+0x159a>
 80065ac:	460b      	mov	r3, r1
 80065ae:	3101      	adds	r1, #1
 80065b0:	4557      	cmp	r7, sl
 80065b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80065b6:	f804 9003 	strb.w	r9, [r4, r3]
 80065ba:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80065be:	f43f a8a5 	beq.w	800570c <d_print_comp+0x6e4>
 80065c2:	29ff      	cmp	r1, #255	; 0xff
 80065c4:	f817 9b01 	ldrb.w	r9, [r7], #1
 80065c8:	d1f0      	bne.n	80065ac <d_print_comp+0x1584>
 80065ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80065ce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80065d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80065d6:	4620      	mov	r0, r4
 80065d8:	4798      	blx	r3
 80065da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80065de:	3301      	adds	r3, #1
 80065e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80065e4:	2101      	movs	r1, #1
 80065e6:	2300      	movs	r3, #0
 80065e8:	e7e2      	b.n	80065b0 <d_print_comp+0x1588>
 80065ea:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 80065ee:	f8d4 c124 	ldr.w	ip, [r4, #292]	; 0x124
 80065f2:	2900      	cmp	r1, #0
 80065f4:	dd15      	ble.n	8006622 <d_print_comp+0x15fa>
 80065f6:	f8dc 3000 	ldr.w	r3, [ip]
 80065fa:	4298      	cmp	r0, r3
 80065fc:	f000 824a 	beq.w	8006a94 <d_print_comp+0x1a6c>
 8006600:	f10c 0208 	add.w	r2, ip, #8
 8006604:	2300      	movs	r3, #0
 8006606:	46be      	mov	lr, r7
 8006608:	e004      	b.n	8006614 <d_print_comp+0x15ec>
 800660a:	f85c 7033 	ldr.w	r7, [ip, r3, lsl #3]
 800660e:	42b8      	cmp	r0, r7
 8006610:	f000 8241 	beq.w	8006a96 <d_print_comp+0x1a6e>
 8006614:	3301      	adds	r3, #1
 8006616:	428b      	cmp	r3, r1
 8006618:	4690      	mov	r8, r2
 800661a:	f102 0208 	add.w	r2, r2, #8
 800661e:	d1f4      	bne.n	800660a <d_print_comp+0x15e2>
 8006620:	4677      	mov	r7, lr
 8006622:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8006626:	4299      	cmp	r1, r3
 8006628:	f280 83bb 	bge.w	8006da2 <d_print_comp+0x1d7a>
 800662c:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8006630:	1c4b      	adds	r3, r1, #1
 8006632:	eb0c 09c1 	add.w	r9, ip, r1, lsl #3
 8006636:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800663a:	f109 0904 	add.w	r9, r9, #4
 800663e:	f84c 0031 	str.w	r0, [ip, r1, lsl #3]
 8006642:	f1b8 0f00 	cmp.w	r8, #0
 8006646:	d020      	beq.n	800668a <d_print_comp+0x1662>
 8006648:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 800664c:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8006650:	428b      	cmp	r3, r1
 8006652:	f280 83a6 	bge.w	8006da2 <d_print_comp+0x1d7a>
 8006656:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
 800665a:	468c      	mov	ip, r1
 800665c:	e002      	b.n	8006664 <d_print_comp+0x163c>
 800665e:	4563      	cmp	r3, ip
 8006660:	f000 839d 	beq.w	8006d9e <d_print_comp+0x1d76>
 8006664:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 8006668:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800666c:	4472      	add	r2, lr
 800666e:	3301      	adds	r3, #1
 8006670:	6051      	str	r1, [r2, #4]
 8006672:	f8c9 2000 	str.w	r2, [r9]
 8006676:	f8d8 8000 	ldr.w	r8, [r8]
 800667a:	f10e 0e08 	add.w	lr, lr, #8
 800667e:	4691      	mov	r9, r2
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	d1eb      	bne.n	800665e <d_print_comp+0x1636>
 8006686:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 800668a:	f04f 0800 	mov.w	r8, #0
 800668e:	1d01      	adds	r1, r0, #4
 8006690:	f8c9 8000 	str.w	r8, [r9]
 8006694:	4620      	mov	r0, r4
 8006696:	f7fe f93b 	bl	8004910 <d_lookup_template_argument.isra.6>
 800669a:	2800      	cmp	r0, #0
 800669c:	f040 820a 	bne.w	8006ab4 <d_print_comp+0x1a8c>
 80066a0:	f7fe bd67 	b.w	8005172 <d_print_comp+0x14a>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4934      	ldr	r1, [pc, #208]	; (8006778 <d_print_comp+0x1750>)
 80066a8:	f8d3 8000 	ldr.w	r8, [r3]
 80066ac:	4640      	mov	r0, r8
 80066ae:	f007 fa5b 	bl	800db68 <strcmp>
 80066b2:	782b      	ldrb	r3, [r5, #0]
 80066b4:	b910      	cbnz	r0, 80066bc <d_print_comp+0x1694>
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	f000 8332 	beq.w	8006d20 <d_print_comp+0x1cf8>
 80066bc:	2b37      	cmp	r3, #55	; 0x37
 80066be:	f000 8375 	beq.w	8006dac <d_print_comp+0x1d84>
 80066c2:	4620      	mov	r0, r4
 80066c4:	4631      	mov	r1, r6
 80066c6:	463a      	mov	r2, r7
 80066c8:	f000 ff1e 	bl	8007508 <d_print_expr_op>
 80066cc:	4640      	mov	r0, r8
 80066ce:	492b      	ldr	r1, [pc, #172]	; (800677c <d_print_comp+0x1754>)
 80066d0:	f007 fa4a 	bl	800db68 <strcmp>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f000 818a 	beq.w	80069ee <d_print_comp+0x19c6>
 80066da:	4640      	mov	r0, r8
 80066dc:	4928      	ldr	r1, [pc, #160]	; (8006780 <d_print_comp+0x1758>)
 80066de:	f007 fa43 	bl	800db68 <strcmp>
 80066e2:	4607      	mov	r7, r0
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f47e af62 	bne.w	80055ae <d_print_comp+0x586>
 80066ea:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80066ee:	2bff      	cmp	r3, #255	; 0xff
 80066f0:	f000 8331 	beq.w	8006d56 <d_print_comp+0x1d2e>
 80066f4:	1c58      	adds	r0, r3, #1
 80066f6:	2728      	movs	r7, #40	; 0x28
 80066f8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80066fc:	4631      	mov	r1, r6
 80066fe:	54e7      	strb	r7, [r4, r3]
 8006700:	462a      	mov	r2, r5
 8006702:	4620      	mov	r0, r4
 8006704:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8006708:	f7fe fc8e 	bl	8005028 <d_print_comp>
 800670c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006710:	29ff      	cmp	r1, #255	; 0xff
 8006712:	f000 8310 	beq.w	8006d36 <d_print_comp+0x1d0e>
 8006716:	2329      	movs	r3, #41	; 0x29
 8006718:	1c4a      	adds	r2, r1, #1
 800671a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800671e:	5463      	strb	r3, [r4, r1]
 8006720:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006724:	f7fe bd1d 	b.w	8005162 <d_print_comp+0x13a>
 8006728:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800672c:	29ff      	cmp	r1, #255	; 0xff
 800672e:	f000 82d7 	beq.w	8006ce0 <d_print_comp+0x1cb8>
 8006732:	1c48      	adds	r0, r1, #1
 8006734:	2328      	movs	r3, #40	; 0x28
 8006736:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800673a:	1d3a      	adds	r2, r7, #4
 800673c:	5463      	strb	r3, [r4, r1]
 800673e:	4620      	mov	r0, r4
 8006740:	4631      	mov	r1, r6
 8006742:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006746:	f000 fe2f 	bl	80073a8 <d_print_cast.isra.12>
 800674a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800674e:	29ff      	cmp	r1, #255	; 0xff
 8006750:	f000 82b6 	beq.w	8006cc0 <d_print_comp+0x1c98>
 8006754:	2329      	movs	r3, #41	; 0x29
 8006756:	1c4a      	adds	r2, r1, #1
 8006758:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800675c:	5463      	strb	r3, [r4, r1]
 800675e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006762:	f7fe bf24 	b.w	80055ae <d_print_comp+0x586>
 8006766:	bf00      	nop
 8006768:	0801dd7c 	.word	0x0801dd7c
 800676c:	0801db20 	.word	0x0801db20
 8006770:	0801dcf4 	.word	0x0801dcf4
 8006774:	0801dce4 	.word	0x0801dce4
 8006778:	0801dd18 	.word	0x0801dd18
 800677c:	0801dd1c 	.word	0x0801dd1c
 8006780:	0801dfe8 	.word	0x0801dfe8
 8006784:	2700      	movs	r7, #0
 8006786:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800678a:	5467      	strb	r7, [r4, r1]
 800678c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006790:	4620      	mov	r0, r4
 8006792:	4798      	blx	r3
 8006794:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006798:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 800679c:	3301      	adds	r3, #1
 800679e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80067a2:	f7fe bf93 	b.w	80056cc <d_print_comp+0x6a4>
 80067a6:	4660      	mov	r0, ip
 80067a8:	4688      	mov	r8, r1
 80067aa:	f7ff bbda 	b.w	8005f62 <d_print_comp+0xf3a>
 80067ae:	4620      	mov	r0, r4
 80067b0:	4631      	mov	r1, r6
 80067b2:	686a      	ldr	r2, [r5, #4]
 80067b4:	f7fe fc38 	bl	8005028 <d_print_comp>
 80067b8:	f7fe bcd3 	b.w	8005162 <d_print_comp+0x13a>
 80067bc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80067c0:	e008      	b.n	80067d4 <d_print_comp+0x17ac>
 80067c2:	6880      	ldr	r0, [r0, #8]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f43e acd3 	beq.w	8005172 <d_print_comp+0x14a>
 80067cc:	7802      	ldrb	r2, [r0, #0]
 80067ce:	2a2f      	cmp	r2, #47	; 0x2f
 80067d0:	f47e accf 	bne.w	8005172 <d_print_comp+0x14a>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dcf4      	bgt.n	80067c2 <d_print_comp+0x179a>
 80067d8:	f47e accb 	bne.w	8005172 <d_print_comp+0x14a>
 80067dc:	6840      	ldr	r0, [r0, #4]
 80067de:	2800      	cmp	r0, #0
 80067e0:	f47f a9fe 	bne.w	8005be0 <d_print_comp+0xbb8>
 80067e4:	f7fe bcc5 	b.w	8005172 <d_print_comp+0x14a>
 80067e8:	686e      	ldr	r6, [r5, #4]
 80067ea:	68ab      	ldr	r3, [r5, #8]
 80067ec:	eb06 0803 	add.w	r8, r6, r3
 80067f0:	4546      	cmp	r6, r8
 80067f2:	f4be acb6 	bcs.w	8005162 <d_print_comp+0x13a>
 80067f6:	2700      	movs	r7, #0
 80067f8:	e00d      	b.n	8006816 <d_print_comp+0x17ee>
 80067fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80067fe:	29ff      	cmp	r1, #255	; 0xff
 8006800:	d035      	beq.n	800686e <d_print_comp+0x1846>
 8006802:	1c4b      	adds	r3, r1, #1
 8006804:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006808:	5465      	strb	r5, [r4, r1]
 800680a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800680e:	3601      	adds	r6, #1
 8006810:	45b0      	cmp	r8, r6
 8006812:	f67e aca6 	bls.w	8005162 <d_print_comp+0x13a>
 8006816:	ebc6 0308 	rsb	r3, r6, r8
 800681a:	2b03      	cmp	r3, #3
 800681c:	7835      	ldrb	r5, [r6, #0]
 800681e:	ddec      	ble.n	80067fa <d_print_comp+0x17d2>
 8006820:	2d5f      	cmp	r5, #95	; 0x5f
 8006822:	d1ea      	bne.n	80067fa <d_print_comp+0x17d2>
 8006824:	7872      	ldrb	r2, [r6, #1]
 8006826:	2a5f      	cmp	r2, #95	; 0x5f
 8006828:	d1e7      	bne.n	80067fa <d_print_comp+0x17d2>
 800682a:	78b3      	ldrb	r3, [r6, #2]
 800682c:	2b55      	cmp	r3, #85	; 0x55
 800682e:	d001      	beq.n	8006834 <d_print_comp+0x180c>
 8006830:	4615      	mov	r5, r2
 8006832:	e7e2      	b.n	80067fa <d_print_comp+0x17d2>
 8006834:	1cf3      	adds	r3, r6, #3
 8006836:	4598      	cmp	r8, r3
 8006838:	d9fa      	bls.n	8006830 <d_print_comp+0x1808>
 800683a:	2200      	movs	r2, #0
 800683c:	e005      	b.n	800684a <d_print_comp+0x1822>
 800683e:	460d      	mov	r5, r1
 8006840:	4543      	cmp	r3, r8
 8006842:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8006846:	f000 82a5 	beq.w	8006d94 <d_print_comp+0x1d6c>
 800684a:	4699      	mov	r9, r3
 800684c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006850:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8006854:	b2c8      	uxtb	r0, r1
 8006856:	2809      	cmp	r0, #9
 8006858:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 800685c:	d9ef      	bls.n	800683e <d_print_comp+0x1816>
 800685e:	f1be 0f05 	cmp.w	lr, #5
 8006862:	f1a5 0161 	sub.w	r1, r5, #97	; 0x61
 8006866:	f200 8110 	bhi.w	8006a8a <d_print_comp+0x1a62>
 800686a:	3d37      	subs	r5, #55	; 0x37
 800686c:	e7e8      	b.n	8006840 <d_print_comp+0x1818>
 800686e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006872:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006876:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800687a:	4620      	mov	r0, r4
 800687c:	4798      	blx	r3
 800687e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006882:	3301      	adds	r3, #1
 8006884:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006888:	2100      	movs	r1, #0
 800688a:	2301      	movs	r3, #1
 800688c:	e7ba      	b.n	8006804 <d_print_comp+0x17dc>
 800688e:	2500      	movs	r5, #0
 8006890:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006894:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006898:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800689c:	4620      	mov	r0, r4
 800689e:	4798      	blx	r3
 80068a0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80068a4:	3301      	adds	r3, #1
 80068a6:	4629      	mov	r1, r5
 80068a8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80068ac:	2201      	movs	r2, #1
 80068ae:	e41a      	b.n	80060e6 <d_print_comp+0x10be>
 80068b0:	4620      	mov	r0, r4
 80068b2:	49d4      	ldr	r1, [pc, #848]	; (8006c04 <d_print_comp+0x1bdc>)
 80068b4:	f7fe f8d0 	bl	8004a58 <d_append_string>
 80068b8:	68a9      	ldr	r1, [r5, #8]
 80068ba:	4620      	mov	r0, r4
 80068bc:	3101      	adds	r1, #1
 80068be:	f7fe f8ff 	bl	8004ac0 <d_append_num>
 80068c2:	4620      	mov	r0, r4
 80068c4:	49d0      	ldr	r1, [pc, #832]	; (8006c08 <d_print_comp+0x1be0>)
 80068c6:	f7fe f8c7 	bl	8004a58 <d_append_string>
 80068ca:	686d      	ldr	r5, [r5, #4]
 80068cc:	f7ff b9d9 	b.w	8005c82 <d_print_comp+0xc5a>
 80068d0:	2600      	movs	r6, #0
 80068d2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80068d6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80068da:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80068de:	4798      	blx	r3
 80068e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80068e4:	3301      	adds	r3, #1
 80068e6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80068ea:	4631      	mov	r1, r6
 80068ec:	2301      	movs	r3, #1
 80068ee:	f7fe be43 	b.w	8005578 <d_print_comp+0x550>
 80068f2:	2500      	movs	r5, #0
 80068f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80068f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80068fc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006900:	4620      	mov	r0, r4
 8006902:	4798      	blx	r3
 8006904:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006908:	3301      	adds	r3, #1
 800690a:	4629      	mov	r1, r5
 800690c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006910:	2201      	movs	r2, #1
 8006912:	e4da      	b.n	80062ca <d_print_comp+0x12a2>
 8006914:	2500      	movs	r5, #0
 8006916:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800691a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800691e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006922:	4620      	mov	r0, r4
 8006924:	4798      	blx	r3
 8006926:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800692a:	3301      	adds	r3, #1
 800692c:	4629      	mov	r1, r5
 800692e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006932:	2201      	movs	r2, #1
 8006934:	e423      	b.n	800617e <d_print_comp+0x1156>
 8006936:	2500      	movs	r5, #0
 8006938:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800693c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006940:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006944:	4620      	mov	r0, r4
 8006946:	4798      	blx	r3
 8006948:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800694c:	3301      	adds	r3, #1
 800694e:	4629      	mov	r1, r5
 8006950:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006954:	2201      	movs	r2, #1
 8006956:	e528      	b.n	80063aa <d_print_comp+0x1382>
 8006958:	2301      	movs	r3, #1
 800695a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800695e:	f7fe bc00 	b.w	8005162 <d_print_comp+0x13a>
 8006962:	aa14      	add	r2, sp, #80	; 0x50
 8006964:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8006968:	f842 1d40 	str.w	r1, [r2, #-64]!
 800696c:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 8006970:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8006974:	686a      	ldr	r2, [r5, #4]
 8006976:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 800697a:	9306      	str	r3, [sp, #24]
 800697c:	4631      	mov	r1, r6
 800697e:	4620      	mov	r0, r4
 8006980:	9505      	str	r5, [sp, #20]
 8006982:	9707      	str	r7, [sp, #28]
 8006984:	f7fe fb50 	bl	8005028 <d_print_comp>
 8006988:	9b06      	ldr	r3, [sp, #24]
 800698a:	9a04      	ldr	r2, [sp, #16]
 800698c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8006990:	2b00      	cmp	r3, #0
 8006992:	f47e abe6 	bne.w	8005162 <d_print_comp+0x13a>
 8006996:	4620      	mov	r0, r4
 8006998:	2120      	movs	r1, #32
 800699a:	f7fd fe9b 	bl	80046d4 <d_append_char>
 800699e:	f7ff b85c 	b.w	8005a5a <d_print_comp+0xa32>
 80069a2:	f04f 0800 	mov.w	r8, #0
 80069a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80069aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80069ae:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80069b2:	4620      	mov	r0, r4
 80069b4:	4798      	blx	r3
 80069b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80069ba:	3301      	adds	r3, #1
 80069bc:	4641      	mov	r1, r8
 80069be:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80069c2:	2201      	movs	r2, #1
 80069c4:	f7fe bbbb 	b.w	800513e <d_print_comp+0x116>
 80069c8:	f04f 0800 	mov.w	r8, #0
 80069cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80069d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80069d4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80069d8:	4620      	mov	r0, r4
 80069da:	4798      	blx	r3
 80069dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80069e0:	3301      	adds	r3, #1
 80069e2:	4641      	mov	r1, r8
 80069e4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80069e8:	2201      	movs	r2, #1
 80069ea:	f7fe bb97 	b.w	800511c <d_print_comp+0xf4>
 80069ee:	4620      	mov	r0, r4
 80069f0:	4631      	mov	r1, r6
 80069f2:	462a      	mov	r2, r5
 80069f4:	f7fe fb18 	bl	8005028 <d_print_comp>
 80069f8:	f7fe bbb3 	b.w	8005162 <d_print_comp+0x13a>
 80069fc:	68aa      	ldr	r2, [r5, #8]
 80069fe:	7812      	ldrb	r2, [r2, #0]
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	f47e ab85 	bne.w	8005110 <d_print_comp+0xe8>
 8006a06:	2b3c      	cmp	r3, #60	; 0x3c
 8006a08:	f000 820f 	beq.w	8006e2a <d_print_comp+0x1e02>
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	68aa      	ldr	r2, [r5, #8]
 8006a10:	4620      	mov	r0, r4
 8006a12:	3f02      	subs	r7, #2
 8006a14:	f7fe fb08 	bl	8005028 <d_print_comp>
 8006a18:	2f04      	cmp	r7, #4
 8006a1a:	f63e aba2 	bhi.w	8005162 <d_print_comp+0x13a>
 8006a1e:	e8df f007 	tbb	[pc, r7]
 8006a22:	151b      	.short	0x151b
 8006a24:	090f      	.short	0x090f
 8006a26:	03          	.byte	0x03
 8006a27:	00          	.byte	0x00
 8006a28:	4620      	mov	r0, r4
 8006a2a:	4978      	ldr	r1, [pc, #480]	; (8006c0c <d_print_comp+0x1be4>)
 8006a2c:	f7fe f814 	bl	8004a58 <d_append_string>
 8006a30:	f7fe bb97 	b.w	8005162 <d_print_comp+0x13a>
 8006a34:	4620      	mov	r0, r4
 8006a36:	4976      	ldr	r1, [pc, #472]	; (8006c10 <d_print_comp+0x1be8>)
 8006a38:	f7fe f80e 	bl	8004a58 <d_append_string>
 8006a3c:	f7fe bb91 	b.w	8005162 <d_print_comp+0x13a>
 8006a40:	4620      	mov	r0, r4
 8006a42:	4974      	ldr	r1, [pc, #464]	; (8006c14 <d_print_comp+0x1bec>)
 8006a44:	f7fe f808 	bl	8004a58 <d_append_string>
 8006a48:	f7fe bb8b 	b.w	8005162 <d_print_comp+0x13a>
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	216c      	movs	r1, #108	; 0x6c
 8006a50:	f7fd fe40 	bl	80046d4 <d_append_char>
 8006a54:	f7fe bb85 	b.w	8005162 <d_print_comp+0x13a>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	2175      	movs	r1, #117	; 0x75
 8006a5c:	f7fd fe3a 	bl	80046d4 <d_append_char>
 8006a60:	f7fe bb7f 	b.w	8005162 <d_print_comp+0x13a>
 8006a64:	ab14      	add	r3, sp, #80	; 0x50
 8006a66:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8006a6a:	6842      	ldr	r2, [r0, #4]
 8006a6c:	f843 1d40 	str.w	r1, [r3, #-64]!
 8006a70:	2000      	movs	r0, #0
 8006a72:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8006a76:	9505      	str	r5, [sp, #20]
 8006a78:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8006a7c:	9006      	str	r0, [sp, #24]
 8006a7e:	9107      	str	r1, [sp, #28]
 8006a80:	2a00      	cmp	r2, #0
 8006a82:	f47f aa7a 	bne.w	8005f7a <d_print_comp+0xf52>
 8006a86:	f7ff ba77 	b.w	8005f78 <d_print_comp+0xf50>
 8006a8a:	2905      	cmp	r1, #5
 8006a8c:	f200 81a9 	bhi.w	8006de2 <d_print_comp+0x1dba>
 8006a90:	3d57      	subs	r5, #87	; 0x57
 8006a92:	e6d5      	b.n	8006840 <d_print_comp+0x1818>
 8006a94:	46e0      	mov	r8, ip
 8006a96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006a9a:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8006a9e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8006aa2:	1d01      	adds	r1, r0, #4
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f7fd ff33 	bl	8004910 <d_lookup_template_argument.isra.6>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	f43e ab5f 	beq.w	800516e <d_print_comp+0x146>
 8006ab0:	f04f 0801 	mov.w	r8, #1
 8006ab4:	7803      	ldrb	r3, [r0, #0]
 8006ab6:	2b2f      	cmp	r3, #47	; 0x2f
 8006ab8:	f47f aa47 	bne.w	8005f4a <d_print_comp+0xf22>
 8006abc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8006ac0:	e008      	b.n	8006ad4 <d_print_comp+0x1aac>
 8006ac2:	6880      	ldr	r0, [r0, #8]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43e ab4e 	beq.w	8005168 <d_print_comp+0x140>
 8006acc:	7802      	ldrb	r2, [r0, #0]
 8006ace:	2a2f      	cmp	r2, #47	; 0x2f
 8006ad0:	f47e ab4a 	bne.w	8005168 <d_print_comp+0x140>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dcf4      	bgt.n	8006ac2 <d_print_comp+0x1a9a>
 8006ad8:	f47e ab46 	bne.w	8005168 <d_print_comp+0x140>
 8006adc:	6840      	ldr	r0, [r0, #4]
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f43e ab42 	beq.w	8005168 <d_print_comp+0x140>
 8006ae4:	7803      	ldrb	r3, [r0, #0]
 8006ae6:	f7ff ba30 	b.w	8005f4a <d_print_comp+0xf22>
 8006aea:	2600      	movs	r6, #0
 8006aec:	4619      	mov	r1, r3
 8006aee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006af2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006af6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8006afa:	4620      	mov	r0, r4
 8006afc:	4798      	blx	r3
 8006afe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8006b08:	4633      	mov	r3, r6
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	f7fe be0e 	b.w	800572c <d_print_comp+0x704>
 8006b10:	4620      	mov	r0, r4
 8006b12:	2120      	movs	r1, #32
 8006b14:	f7fd fdde 	bl	80046d4 <d_append_char>
 8006b18:	f7ff b89a 	b.w	8005c50 <d_print_comp+0xc28>
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	2120      	movs	r1, #32
 8006b20:	f7fd fdd8 	bl	80046d4 <d_append_char>
 8006b24:	f7ff b886 	b.w	8005c34 <d_print_comp+0xc0c>
 8006b28:	4620      	mov	r0, r4
 8006b2a:	2120      	movs	r1, #32
 8006b2c:	f7fd fdd2 	bl	80046d4 <d_append_char>
 8006b30:	4620      	mov	r0, r4
 8006b32:	4631      	mov	r1, r6
 8006b34:	f85a 2c0c 	ldr.w	r2, [sl, #-12]
 8006b38:	f7fe f800 	bl	8004b3c <d_print_mod>
 8006b3c:	f7ff b950 	b.w	8005de0 <d_print_comp+0xdb8>
 8006b40:	215b      	movs	r1, #91	; 0x5b
 8006b42:	f7fd fdc7 	bl	80046d4 <d_append_char>
 8006b46:	4620      	mov	r0, r4
 8006b48:	4631      	mov	r1, r6
 8006b4a:	68aa      	ldr	r2, [r5, #8]
 8006b4c:	f7fe fa6c 	bl	8005028 <d_print_comp>
 8006b50:	4620      	mov	r0, r4
 8006b52:	215d      	movs	r1, #93	; 0x5d
 8006b54:	f7fd fdbe 	bl	80046d4 <d_append_char>
 8006b58:	f7fe bb03 	b.w	8005162 <d_print_comp+0x13a>
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	212d      	movs	r1, #45	; 0x2d
 8006b60:	f7fd fdb8 	bl	80046d4 <d_append_char>
 8006b64:	f7fe baf5 	b.w	8005152 <d_print_comp+0x12a>
 8006b68:	7807      	ldrb	r7, [r0, #0]
 8006b6a:	f1a7 0e63 	sub.w	lr, r7, #99	; 0x63
 8006b6e:	f1be 0f01 	cmp.w	lr, #1
 8006b72:	d903      	bls.n	8006b7c <d_print_comp+0x1b54>
 8006b74:	3f72      	subs	r7, #114	; 0x72
 8006b76:	2f01      	cmp	r7, #1
 8006b78:	f63e ae76 	bhi.w	8005868 <d_print_comp+0x840>
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4631      	mov	r1, r6
 8006b80:	f000 fcc2 	bl	8007508 <d_print_expr_op>
 8006b84:	4620      	mov	r0, r4
 8006b86:	213c      	movs	r1, #60	; 0x3c
 8006b88:	f7fd fda4 	bl	80046d4 <d_append_char>
 8006b8c:	68ab      	ldr	r3, [r5, #8]
 8006b8e:	4620      	mov	r0, r4
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	4631      	mov	r1, r6
 8006b94:	f7fe fa48 	bl	8005028 <d_print_comp>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	491f      	ldr	r1, [pc, #124]	; (8006c18 <d_print_comp+0x1bf0>)
 8006b9c:	f7fd ff5c 	bl	8004a58 <d_append_string>
 8006ba0:	68ab      	ldr	r3, [r5, #8]
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	f7fe fa3e 	bl	8005028 <d_print_comp>
 8006bac:	4620      	mov	r0, r4
 8006bae:	2129      	movs	r1, #41	; 0x29
 8006bb0:	f7fd fd90 	bl	80046d4 <d_append_char>
 8006bb4:	f7fe bad5 	b.w	8005162 <d_print_comp+0x13a>
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4918      	ldr	r1, [pc, #96]	; (8006c1c <d_print_comp+0x1bf4>)
 8006bbc:	f010 ff4e 	bl	8017a5c <strncmp>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f47f a82d 	bne.w	8005c20 <d_print_comp+0xbf8>
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4620      	mov	r0, r4
 8006bca:	68aa      	ldr	r2, [r5, #8]
 8006bcc:	f7fe fa2c 	bl	8005028 <d_print_comp>
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	4913      	ldr	r1, [pc, #76]	; (8006c20 <d_print_comp+0x1bf8>)
 8006bd4:	f7fd ff40 	bl	8004a58 <d_append_string>
 8006bd8:	f7ff b83e 	b.w	8005c58 <d_print_comp+0xc30>
 8006bdc:	2500      	movs	r5, #0
 8006bde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006be2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006be6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006bea:	4620      	mov	r0, r4
 8006bec:	4798      	blx	r3
 8006bee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	e44d      	b.n	800649a <d_print_comp+0x1472>
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	f7fe bf19 	b.w	8005a36 <d_print_comp+0xa0e>
 8006c04:	0801db7c 	.word	0x0801db7c
 8006c08:	0801db8c 	.word	0x0801db8c
 8006c0c:	0801dd40 	.word	0x0801dd40
 8006c10:	0801dd3c 	.word	0x0801dd3c
 8006c14:	0801dd38 	.word	0x0801dd38
 8006c18:	0801ddf0 	.word	0x0801ddf0
 8006c1c:	0801db90 	.word	0x0801db90
 8006c20:	0801db98 	.word	0x0801db98
 8006c24:	4620      	mov	r0, r4
 8006c26:	215b      	movs	r1, #91	; 0x5b
 8006c28:	f7fd fd54 	bl	80046d4 <d_append_char>
 8006c2c:	68ab      	ldr	r3, [r5, #8]
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4620      	mov	r0, r4
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	f7fe f9f8 	bl	8005028 <d_print_comp>
 8006c38:	4620      	mov	r0, r4
 8006c3a:	215d      	movs	r1, #93	; 0x5d
 8006c3c:	f7fd fd4a 	bl	80046d4 <d_append_char>
 8006c40:	f7fe be3c 	b.w	80058bc <d_print_comp+0x894>
 8006c44:	463a      	mov	r2, r7
 8006c46:	4620      	mov	r0, r4
 8006c48:	4631      	mov	r1, r6
 8006c4a:	f000 fc5d 	bl	8007508 <d_print_expr_op>
 8006c4e:	f7fe be2f 	b.w	80058b0 <d_print_comp+0x888>
 8006c52:	68aa      	ldr	r2, [r5, #8]
 8006c54:	4620      	mov	r0, r4
 8006c56:	4631      	mov	r1, r6
 8006c58:	f7fe f9e6 	bl	8005028 <d_print_comp>
 8006c5c:	9b06      	ldr	r3, [sp, #24]
 8006c5e:	9a00      	ldr	r2, [sp, #0]
 8006c60:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f47e aa7c 	bne.w	8005162 <d_print_comp+0x13a>
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	f7fe bee3 	b.w	8005a36 <d_print_comp+0xa0e>
 8006c70:	4642      	mov	r2, r8
 8006c72:	4620      	mov	r0, r4
 8006c74:	4631      	mov	r1, r6
 8006c76:	f000 fc83 	bl	8007580 <d_print_subexpr>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4652      	mov	r2, sl
 8006c80:	f000 fc42 	bl	8007508 <d_print_expr_op>
 8006c84:	464a      	mov	r2, r9
 8006c86:	4620      	mov	r0, r4
 8006c88:	4631      	mov	r1, r6
 8006c8a:	f000 fc79 	bl	8007580 <d_print_subexpr>
 8006c8e:	4620      	mov	r0, r4
 8006c90:	496a      	ldr	r1, [pc, #424]	; (8006e3c <d_print_comp+0x1e14>)
 8006c92:	f7fd fee1 	bl	8004a58 <d_append_string>
 8006c96:	4620      	mov	r0, r4
 8006c98:	4631      	mov	r1, r6
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	f000 fc70 	bl	8007580 <d_print_subexpr>
 8006ca0:	f7fe ba5f 	b.w	8005162 <d_print_comp+0x13a>
 8006ca4:	6893      	ldr	r3, [r2, #8]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b29      	cmp	r3, #41	; 0x29
 8006caa:	bf1c      	itt	ne
 8006cac:	2301      	movne	r3, #1
 8006cae:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8006cb2:	6852      	ldr	r2, [r2, #4]
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	f000 fc62 	bl	8007580 <d_print_subexpr>
 8006cbc:	f7fe bde6 	b.w	800588c <d_print_comp+0x864>
 8006cc0:	2700      	movs	r7, #0
 8006cc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006cc6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006cca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4798      	blx	r3
 8006cd2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006cde:	e539      	b.n	8006754 <d_print_comp+0x172c>
 8006ce0:	f04f 0800 	mov.w	r8, #0
 8006ce4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006ce8:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8006cec:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006cf0:	4798      	blx	r3
 8006cf2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006cfe:	e518      	b.n	8006732 <d_print_comp+0x170a>
 8006d00:	2500      	movs	r5, #0
 8006d02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006d06:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006d0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4798      	blx	r3
 8006d12:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006d16:	3301      	adds	r3, #1
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006d1e:	e42f      	b.n	8006580 <d_print_comp+0x1558>
 8006d20:	686b      	ldr	r3, [r5, #4]
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	2a01      	cmp	r2, #1
 8006d26:	f47f accc 	bne.w	80066c2 <d_print_comp+0x169a>
 8006d2a:	68aa      	ldr	r2, [r5, #8]
 8006d2c:	7812      	ldrb	r2, [r2, #0]
 8006d2e:	2a29      	cmp	r2, #41	; 0x29
 8006d30:	bf08      	it	eq
 8006d32:	461d      	moveq	r5, r3
 8006d34:	e4c5      	b.n	80066c2 <d_print_comp+0x169a>
 8006d36:	2500      	movs	r5, #0
 8006d38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006d3c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006d40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006d44:	4620      	mov	r0, r4
 8006d46:	4798      	blx	r3
 8006d48:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006d54:	e4df      	b.n	8006716 <d_print_comp+0x16ee>
 8006d56:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006d60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006d64:	4620      	mov	r0, r4
 8006d66:	4798      	blx	r3
 8006d68:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8006d72:	463b      	mov	r3, r7
 8006d74:	e4be      	b.n	80066f4 <d_print_comp+0x16cc>
 8006d76:	4631      	mov	r1, r6
 8006d78:	4620      	mov	r0, r4
 8006d7a:	686a      	ldr	r2, [r5, #4]
 8006d7c:	f000 fc00 	bl	8007580 <d_print_subexpr>
 8006d80:	4620      	mov	r0, r4
 8006d82:	492f      	ldr	r1, [pc, #188]	; (8006e40 <d_print_comp+0x1e18>)
 8006d84:	f7fd fe68 	bl	8004a58 <d_append_string>
 8006d88:	f7fe b9eb 	b.w	8005162 <d_print_comp+0x13a>
 8006d8c:	4660      	mov	r0, ip
 8006d8e:	46e0      	mov	r8, ip
 8006d90:	f7ff b8e7 	b.w	8005f62 <d_print_comp+0xf3a>
 8006d94:	255f      	movs	r5, #95	; 0x5f
 8006d96:	e530      	b.n	80067fa <d_print_comp+0x17d2>
 8006d98:	4664      	mov	r4, ip
 8006d9a:	f7ff b994 	b.w	80060c6 <d_print_comp+0x109e>
 8006d9e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 8006da2:	2301      	movs	r3, #1
 8006da4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8006da8:	f7fe b9db 	b.w	8005162 <d_print_comp+0x13a>
 8006dac:	686a      	ldr	r2, [r5, #4]
 8006dae:	4620      	mov	r0, r4
 8006db0:	4631      	mov	r1, r6
 8006db2:	f000 fbe5 	bl	8007580 <d_print_subexpr>
 8006db6:	4620      	mov	r0, r4
 8006db8:	4631      	mov	r1, r6
 8006dba:	463a      	mov	r2, r7
 8006dbc:	f000 fba4 	bl	8007508 <d_print_expr_op>
 8006dc0:	f7fe b9cf 	b.w	8005162 <d_print_comp+0x13a>
 8006dc4:	2b3b      	cmp	r3, #59	; 0x3b
 8006dc6:	f47e a9a3 	bne.w	8005110 <d_print_comp+0xe8>
 8006dca:	6853      	ldr	r3, [r2, #4]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b30      	cmp	r3, #48	; 0x30
 8006dd0:	d02f      	beq.n	8006e32 <d_print_comp+0x1e0a>
 8006dd2:	2b31      	cmp	r3, #49	; 0x31
 8006dd4:	f47e a99c 	bne.w	8005110 <d_print_comp+0xe8>
 8006dd8:	491a      	ldr	r1, [pc, #104]	; (8006e44 <d_print_comp+0x1e1c>)
 8006dda:	f7fd fe3d 	bl	8004a58 <d_append_string>
 8006dde:	f7fe b9c0 	b.w	8005162 <d_print_comp+0x13a>
 8006de2:	45c8      	cmp	r8, r9
 8006de4:	d9d6      	bls.n	8006d94 <d_print_comp+0x1d6c>
 8006de6:	2d5f      	cmp	r5, #95	; 0x5f
 8006de8:	d1d4      	bne.n	8006d94 <d_print_comp+0x1d6c>
 8006dea:	2aff      	cmp	r2, #255	; 0xff
 8006dec:	f63f ad05 	bhi.w	80067fa <d_print_comp+0x17d2>
 8006df0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006df4:	29ff      	cmp	r1, #255	; 0xff
 8006df6:	b2d5      	uxtb	r5, r2
 8006df8:	d10f      	bne.n	8006e1a <d_print_comp+0x1df2>
 8006dfa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006dfe:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006e02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006e06:	4620      	mov	r0, r4
 8006e08:	4798      	blx	r3
 8006e0a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006e0e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8006e12:	3301      	adds	r3, #1
 8006e14:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006e18:	2100      	movs	r1, #0
 8006e1a:	1c4b      	adds	r3, r1, #1
 8006e1c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006e20:	464e      	mov	r6, r9
 8006e22:	5465      	strb	r5, [r4, r1]
 8006e24:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8006e28:	e4f1      	b.n	800680e <d_print_comp+0x17e6>
 8006e2a:	212d      	movs	r1, #45	; 0x2d
 8006e2c:	f7fd fc52 	bl	80046d4 <d_append_char>
 8006e30:	e5ec      	b.n	8006a0c <d_print_comp+0x19e4>
 8006e32:	4905      	ldr	r1, [pc, #20]	; (8006e48 <d_print_comp+0x1e20>)
 8006e34:	f7fd fe10 	bl	8004a58 <d_append_string>
 8006e38:	f7fe b993 	b.w	8005162 <d_print_comp+0x13a>
 8006e3c:	0801dd2c 	.word	0x0801dd2c
 8006e40:	0801dd70 	.word	0x0801dd70
 8006e44:	0801dd4c 	.word	0x0801dd4c
 8006e48:	0801dd44 	.word	0x0801dd44

08006e4c <d_print_function_type.isra.11>:
 8006e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e50:	4604      	mov	r4, r0
 8006e52:	460d      	mov	r5, r1
 8006e54:	4616      	mov	r6, r2
 8006e56:	461f      	mov	r7, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d03e      	beq.n	8006eda <d_print_function_type.isra.11+0x8e>
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d13b      	bne.n	8006eda <d_print_function_type.isra.11+0x8e>
 8006e62:	463a      	mov	r2, r7
 8006e64:	f04f 0e01 	mov.w	lr, #1
 8006e68:	e006      	b.n	8006e78 <d_print_function_type.isra.11+0x2c>
 8006e6a:	f410 6f60 	tst.w	r0, #3584	; 0xe00
 8006e6e:	d164      	bne.n	8006f3a <d_print_function_type.isra.11+0xee>
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	b392      	cbz	r2, 8006eda <d_print_function_type.isra.11+0x8e>
 8006e74:	6893      	ldr	r3, [r2, #8]
 8006e76:	bb83      	cbnz	r3, 8006eda <d_print_function_type.isra.11+0x8e>
 8006e78:	6853      	ldr	r3, [r2, #4]
 8006e7a:	496c      	ldr	r1, [pc, #432]	; (800702c <d_print_function_type.isra.11+0x1e0>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	3b19      	subs	r3, #25
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	fa0e f003 	lsl.w	r0, lr, r3
 8006e86:	2b12      	cmp	r3, #18
 8006e88:	ea01 0100 	and.w	r1, r1, r0
 8006e8c:	d8f0      	bhi.n	8006e70 <d_print_function_type.isra.11+0x24>
 8006e8e:	2900      	cmp	r1, #0
 8006e90:	d0eb      	beq.n	8006e6a <d_print_function_type.isra.11+0x1e>
 8006e92:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d055      	beq.n	8006f46 <d_print_function_type.isra.11+0xfa>
 8006e9a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006e9e:	2bff      	cmp	r3, #255	; 0xff
 8006ea0:	f000 80b1 	beq.w	8007006 <d_print_function_type.isra.11+0x1ba>
 8006ea4:	1c59      	adds	r1, r3, #1
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	29ff      	cmp	r1, #255	; 0xff
 8006eaa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006eae:	54e2      	strb	r2, [r4, r3]
 8006eb0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006eb4:	d14b      	bne.n	8006f4e <d_print_function_type.isra.11+0x102>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006ebe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006ec2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	4798      	blx	r3
 8006eca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006ece:	3301      	adds	r3, #1
 8006ed0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e03a      	b.n	8006f50 <d_print_function_type.isra.11+0x104>
 8006eda:	2300      	movs	r3, #0
 8006edc:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8006ee0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	463a      	mov	r2, r7
 8006eea:	f000 f8a1 	bl	8007030 <d_print_mod_list>
 8006eee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006ef2:	29ff      	cmp	r1, #255	; 0xff
 8006ef4:	d04b      	beq.n	8006f8e <d_print_function_type.isra.11+0x142>
 8006ef6:	2228      	movs	r2, #40	; 0x28
 8006ef8:	1c4b      	adds	r3, r1, #1
 8006efa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006efe:	5462      	strb	r2, [r4, r1]
 8006f00:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006f04:	6832      	ldr	r2, [r6, #0]
 8006f06:	b12a      	cbz	r2, 8006f14 <d_print_function_type.isra.11+0xc8>
 8006f08:	4620      	mov	r0, r4
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	f7fe f88c 	bl	8005028 <d_print_comp>
 8006f10:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006f14:	2bff      	cmp	r3, #255	; 0xff
 8006f16:	d053      	beq.n	8006fc0 <d_print_function_type.isra.11+0x174>
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	2629      	movs	r6, #41	; 0x29
 8006f1c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006f20:	4629      	mov	r1, r5
 8006f22:	54e6      	strb	r6, [r4, r3]
 8006f24:	463a      	mov	r2, r7
 8006f26:	4620      	mov	r0, r4
 8006f28:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f000 f87f 	bl	8007030 <d_print_mod_list>
 8006f32:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8006f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f3a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006f3e:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006f42:	2a28      	cmp	r2, #40	; 0x28
 8006f44:	d1a7      	bne.n	8006e96 <d_print_function_type.isra.11+0x4a>
 8006f46:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006f4a:	29ff      	cmp	r1, #255	; 0xff
 8006f4c:	d0b3      	beq.n	8006eb6 <d_print_function_type.isra.11+0x6a>
 8006f4e:	1c4b      	adds	r3, r1, #1
 8006f50:	2228      	movs	r2, #40	; 0x28
 8006f52:	f04f 0900 	mov.w	r9, #0
 8006f56:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006f5a:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8006f5e:	5462      	strb	r2, [r4, r1]
 8006f60:	464b      	mov	r3, r9
 8006f62:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006f66:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	463a      	mov	r2, r7
 8006f70:	f000 f85e 	bl	8007030 <d_print_mod_list>
 8006f74:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006f78:	2bff      	cmp	r3, #255	; 0xff
 8006f7a:	d033      	beq.n	8006fe4 <d_print_function_type.isra.11+0x198>
 8006f7c:	1c59      	adds	r1, r3, #1
 8006f7e:	2229      	movs	r2, #41	; 0x29
 8006f80:	29ff      	cmp	r1, #255	; 0xff
 8006f82:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006f86:	54e2      	strb	r2, [r4, r3]
 8006f88:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006f8c:	d1b3      	bne.n	8006ef6 <d_print_function_type.isra.11+0xaa>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006f94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4798      	blx	r3
 8006fa0:	2328      	movs	r3, #40	; 0x28
 8006fa2:	7023      	strb	r3, [r4, #0]
 8006fa4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006fa8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006fac:	6832      	ldr	r2, [r6, #0]
 8006fae:	1c59      	adds	r1, r3, #1
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 8006fb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006fba:	2a00      	cmp	r2, #0
 8006fbc:	d1a4      	bne.n	8006f08 <d_print_function_type.isra.11+0xbc>
 8006fbe:	e7ab      	b.n	8006f18 <d_print_function_type.isra.11+0xcc>
 8006fc0:	2600      	movs	r6, #0
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006fc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006fcc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4798      	blx	r3
 8006fd4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8006fde:	4633      	mov	r3, r6
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	e79a      	b.n	8006f1a <d_print_function_type.isra.11+0xce>
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006fea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006fee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4798      	blx	r3
 8006ff6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007000:	464b      	mov	r3, r9
 8007002:	2101      	movs	r1, #1
 8007004:	e7bb      	b.n	8006f7e <d_print_function_type.isra.11+0x132>
 8007006:	f04f 0800 	mov.w	r8, #0
 800700a:	4619      	mov	r1, r3
 800700c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007010:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007014:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007018:	4620      	mov	r0, r4
 800701a:	4798      	blx	r3
 800701c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007026:	4643      	mov	r3, r8
 8007028:	2101      	movs	r1, #1
 800702a:	e73c      	b.n	8006ea6 <d_print_function_type.isra.11+0x5a>
 800702c:	00043107 	.word	0x00043107

08007030 <d_print_mod_list>:
 8007030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	4614      	mov	r4, r2
 8007036:	b362      	cbz	r2, 8007092 <d_print_mod_list+0x62>
 8007038:	461e      	mov	r6, r3
 800703a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800703e:	4605      	mov	r5, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	f040 80a0 	bne.w	8007186 <d_print_mod_list+0x156>
 8007046:	460f      	mov	r7, r1
 8007048:	f04f 0801 	mov.w	r8, #1
 800704c:	e002      	b.n	8007054 <d_print_mod_list+0x24>
 800704e:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8007052:	bb03      	cbnz	r3, 8007096 <d_print_mod_list+0x66>
 8007054:	68a3      	ldr	r3, [r4, #8]
 8007056:	b9cb      	cbnz	r3, 800708c <d_print_mod_list+0x5c>
 8007058:	6862      	ldr	r2, [r4, #4]
 800705a:	7813      	ldrb	r3, [r2, #0]
 800705c:	b91e      	cbnz	r6, 8007066 <d_print_mod_list+0x36>
 800705e:	f1a3 011c 	sub.w	r1, r3, #28
 8007062:	2904      	cmp	r1, #4
 8007064:	d912      	bls.n	800708c <d_print_mod_list+0x5c>
 8007066:	68e1      	ldr	r1, [r4, #12]
 8007068:	f8c4 8008 	str.w	r8, [r4, #8]
 800706c:	2b29      	cmp	r3, #41	; 0x29
 800706e:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8007072:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8007076:	d010      	beq.n	800709a <d_print_mod_list+0x6a>
 8007078:	2b2a      	cmp	r3, #42	; 0x2a
 800707a:	d018      	beq.n	80070ae <d_print_mod_list+0x7e>
 800707c:	2b02      	cmp	r3, #2
 800707e:	d020      	beq.n	80070c2 <d_print_mod_list+0x92>
 8007080:	4628      	mov	r0, r5
 8007082:	4639      	mov	r1, r7
 8007084:	f7fd fd5a 	bl	8004b3c <d_print_mod>
 8007088:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800708c:	6824      	ldr	r4, [r4, #0]
 800708e:	2c00      	cmp	r4, #0
 8007090:	d1dd      	bne.n	800704e <d_print_mod_list+0x1e>
 8007092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	4639      	mov	r1, r7
 800709c:	3208      	adds	r2, #8
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	4628      	mov	r0, r5
 80070a2:	f7ff fed3 	bl	8006e4c <d_print_function_type.isra.11>
 80070a6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 80070aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ae:	4639      	mov	r1, r7
 80070b0:	3204      	adds	r2, #4
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 f89f 	bl	80071f8 <d_print_array_type.isra.10>
 80070ba:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 80070be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	2600      	movs	r6, #0
 80070c4:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 80070c8:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 80070cc:	6852      	ldr	r2, [r2, #4]
 80070ce:	4628      	mov	r0, r5
 80070d0:	4639      	mov	r1, r7
 80070d2:	f7fd ffa9 	bl	8005028 <d_print_comp>
 80070d6:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 80070da:	f017 0804 	ands.w	r8, r7, #4
 80070de:	d123      	bne.n	8007128 <d_print_mod_list+0xf8>
 80070e0:	4e42      	ldr	r6, [pc, #264]	; (80071ec <d_print_mod_list+0x1bc>)
 80070e2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80070e6:	f106 0b02 	add.w	fp, r6, #2
 80070ea:	e009      	b.n	8007100 <d_print_mod_list+0xd0>
 80070ec:	460b      	mov	r3, r1
 80070ee:	3101      	adds	r1, #1
 80070f0:	455e      	cmp	r6, fp
 80070f2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80070f6:	f805 a003 	strb.w	sl, [r5, r3]
 80070fa:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80070fe:	d01e      	beq.n	800713e <d_print_mod_list+0x10e>
 8007100:	29ff      	cmp	r1, #255	; 0xff
 8007102:	f816 ab01 	ldrb.w	sl, [r6], #1
 8007106:	d1f1      	bne.n	80070ec <d_print_mod_list+0xbc>
 8007108:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800710c:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
 8007110:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8007114:	4628      	mov	r0, r5
 8007116:	4798      	blx	r3
 8007118:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800711c:	3301      	adds	r3, #1
 800711e:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8007122:	2101      	movs	r1, #1
 8007124:	2300      	movs	r3, #0
 8007126:	e7e3      	b.n	80070f0 <d_print_mod_list+0xc0>
 8007128:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800712c:	29ff      	cmp	r1, #255	; 0xff
 800712e:	d01a      	beq.n	8007166 <d_print_mod_list+0x136>
 8007130:	1c4a      	adds	r2, r1, #1
 8007132:	232e      	movs	r3, #46	; 0x2e
 8007134:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8007138:	546b      	strb	r3, [r5, r1]
 800713a:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 800713e:	6863      	ldr	r3, [r4, #4]
 8007140:	689c      	ldr	r4, [r3, #8]
 8007142:	7823      	ldrb	r3, [r4, #0]
 8007144:	2b45      	cmp	r3, #69	; 0x45
 8007146:	d102      	bne.n	800714e <d_print_mod_list+0x11e>
 8007148:	e01f      	b.n	800718a <d_print_mod_list+0x15a>
 800714a:	6864      	ldr	r4, [r4, #4]
 800714c:	7823      	ldrb	r3, [r4, #0]
 800714e:	3b1c      	subs	r3, #28
 8007150:	2b04      	cmp	r3, #4
 8007152:	d9fa      	bls.n	800714a <d_print_mod_list+0x11a>
 8007154:	4639      	mov	r1, r7
 8007156:	4622      	mov	r2, r4
 8007158:	4628      	mov	r0, r5
 800715a:	f7fd ff65 	bl	8005028 <d_print_comp>
 800715e:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8007162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007166:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800716a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800716e:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8007172:	4628      	mov	r0, r5
 8007174:	4798      	blx	r3
 8007176:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800717a:	3301      	adds	r3, #1
 800717c:	4631      	mov	r1, r6
 800717e:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8007182:	2201      	movs	r2, #1
 8007184:	e7d5      	b.n	8007132 <d_print_mod_list+0x102>
 8007186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718a:	4e19      	ldr	r6, [pc, #100]	; (80071f0 <d_print_mod_list+0x1c0>)
 800718c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8007190:	f106 0a0d 	add.w	sl, r6, #13
 8007194:	f04f 0b00 	mov.w	fp, #0
 8007198:	e009      	b.n	80071ae <d_print_mod_list+0x17e>
 800719a:	460b      	mov	r3, r1
 800719c:	3101      	adds	r1, #1
 800719e:	4556      	cmp	r6, sl
 80071a0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80071a4:	f805 8003 	strb.w	r8, [r5, r3]
 80071a8:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 80071ac:	d013      	beq.n	80071d6 <d_print_mod_list+0x1a6>
 80071ae:	29ff      	cmp	r1, #255	; 0xff
 80071b0:	f816 8b01 	ldrb.w	r8, [r6], #1
 80071b4:	d1f1      	bne.n	800719a <d_print_mod_list+0x16a>
 80071b6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80071ba:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 80071be:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80071c2:	4628      	mov	r0, r5
 80071c4:	4798      	blx	r3
 80071c6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80071ca:	3301      	adds	r3, #1
 80071cc:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 80071d0:	2101      	movs	r1, #1
 80071d2:	2300      	movs	r3, #0
 80071d4:	e7e3      	b.n	800719e <d_print_mod_list+0x16e>
 80071d6:	68a1      	ldr	r1, [r4, #8]
 80071d8:	4628      	mov	r0, r5
 80071da:	3101      	adds	r1, #1
 80071dc:	f7fd fc70 	bl	8004ac0 <d_append_num>
 80071e0:	4628      	mov	r0, r5
 80071e2:	4904      	ldr	r1, [pc, #16]	; (80071f4 <d_print_mod_list+0x1c4>)
 80071e4:	f7fd fc38 	bl	8004a58 <d_append_string>
 80071e8:	e7af      	b.n	800714a <d_print_mod_list+0x11a>
 80071ea:	bf00      	nop
 80071ec:	0801db78 	.word	0x0801db78
 80071f0:	0801db7c 	.word	0x0801db7c
 80071f4:	0801db8c 	.word	0x0801db8c

080071f8 <d_print_array_type.isra.10>:
 80071f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	4604      	mov	r4, r0
 80071fe:	460e      	mov	r6, r1
 8007200:	4617      	mov	r7, r2
 8007202:	4699      	mov	r9, r3
 8007204:	b14b      	cbz	r3, 800721a <d_print_array_type.isra.10+0x22>
 8007206:	6898      	ldr	r0, [r3, #8]
 8007208:	b378      	cbz	r0, 800726a <d_print_array_type.isra.10+0x72>
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1fa      	bne.n	8007206 <d_print_array_type.isra.10+0xe>
 8007210:	464a      	mov	r2, r9
 8007212:	4620      	mov	r0, r4
 8007214:	4631      	mov	r1, r6
 8007216:	f7ff ff0b 	bl	8007030 <d_print_mod_list>
 800721a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800721e:	2bff      	cmp	r3, #255	; 0xff
 8007220:	d068      	beq.n	80072f4 <d_print_array_type.isra.10+0xfc>
 8007222:	1c59      	adds	r1, r3, #1
 8007224:	2220      	movs	r2, #32
 8007226:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800722a:	54e2      	strb	r2, [r4, r3]
 800722c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007230:	29ff      	cmp	r1, #255	; 0xff
 8007232:	f000 8094 	beq.w	800735e <d_print_array_type.isra.10+0x166>
 8007236:	225b      	movs	r2, #91	; 0x5b
 8007238:	1c4b      	adds	r3, r1, #1
 800723a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800723e:	5462      	strb	r2, [r4, r1]
 8007240:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	b12a      	cbz	r2, 8007254 <d_print_array_type.isra.10+0x5c>
 8007248:	4631      	mov	r1, r6
 800724a:	4620      	mov	r0, r4
 800724c:	f7fd feec 	bl	8005028 <d_print_comp>
 8007250:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007254:	2bff      	cmp	r3, #255	; 0xff
 8007256:	d070      	beq.n	800733a <d_print_array_type.isra.10+0x142>
 8007258:	1c59      	adds	r1, r3, #1
 800725a:	225d      	movs	r2, #93	; 0x5d
 800725c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007260:	54e2      	strb	r2, [r4, r3]
 8007262:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b2a      	cmp	r3, #42	; 0x2a
 8007270:	f000 808f 	beq.w	8007392 <d_print_array_type.isra.10+0x19a>
 8007274:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80073a4 <d_print_array_type.isra.10+0x1ac>
 8007278:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800727c:	4605      	mov	r5, r0
 800727e:	f108 0b02 	add.w	fp, r8, #2
 8007282:	e00a      	b.n	800729a <d_print_array_type.isra.10+0xa2>
 8007284:	460b      	mov	r3, r1
 8007286:	45d8      	cmp	r8, fp
 8007288:	f101 0101 	add.w	r1, r1, #1
 800728c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007290:	f804 a003 	strb.w	sl, [r4, r3]
 8007294:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8007298:	d01a      	beq.n	80072d0 <d_print_array_type.isra.10+0xd8>
 800729a:	29ff      	cmp	r1, #255	; 0xff
 800729c:	f818 ab01 	ldrb.w	sl, [r8], #1
 80072a0:	d1f0      	bne.n	8007284 <d_print_array_type.isra.10+0x8c>
 80072a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80072a6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80072aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80072ae:	4620      	mov	r0, r4
 80072b0:	4798      	blx	r3
 80072b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80072b6:	3301      	adds	r3, #1
 80072b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80072bc:	2300      	movs	r3, #0
 80072be:	2101      	movs	r1, #1
 80072c0:	45d8      	cmp	r8, fp
 80072c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80072c6:	f804 a003 	strb.w	sl, [r4, r3]
 80072ca:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80072ce:	d1e4      	bne.n	800729a <d_print_array_type.isra.10+0xa2>
 80072d0:	4631      	mov	r1, r6
 80072d2:	464a      	mov	r2, r9
 80072d4:	4620      	mov	r0, r4
 80072d6:	2300      	movs	r3, #0
 80072d8:	f7ff feaa 	bl	8007030 <d_print_mod_list>
 80072dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80072e0:	29ff      	cmp	r1, #255	; 0xff
 80072e2:	d019      	beq.n	8007318 <d_print_array_type.isra.10+0x120>
 80072e4:	1c4b      	adds	r3, r1, #1
 80072e6:	2229      	movs	r2, #41	; 0x29
 80072e8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80072ec:	5462      	strb	r2, [r4, r1]
 80072ee:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80072f2:	e794      	b.n	800721e <d_print_array_type.isra.10+0x26>
 80072f4:	2500      	movs	r5, #0
 80072f6:	4619      	mov	r1, r3
 80072f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80072fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007300:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007304:	4620      	mov	r0, r4
 8007306:	4798      	blx	r3
 8007308:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007312:	462b      	mov	r3, r5
 8007314:	2101      	movs	r1, #1
 8007316:	e785      	b.n	8007224 <d_print_array_type.isra.10+0x2c>
 8007318:	2500      	movs	r5, #0
 800731a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800731e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007322:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007326:	4620      	mov	r0, r4
 8007328:	4798      	blx	r3
 800732a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800732e:	3301      	adds	r3, #1
 8007330:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007334:	4629      	mov	r1, r5
 8007336:	2301      	movs	r3, #1
 8007338:	e7d5      	b.n	80072e6 <d_print_array_type.isra.10+0xee>
 800733a:	2500      	movs	r5, #0
 800733c:	4619      	mov	r1, r3
 800733e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007342:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007346:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800734a:	4620      	mov	r0, r4
 800734c:	4798      	blx	r3
 800734e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007358:	462b      	mov	r3, r5
 800735a:	2101      	movs	r1, #1
 800735c:	e77d      	b.n	800725a <d_print_array_type.isra.10+0x62>
 800735e:	2300      	movs	r3, #0
 8007360:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8007364:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007368:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800736c:	4620      	mov	r0, r4
 800736e:	4798      	blx	r3
 8007370:	235b      	movs	r3, #91	; 0x5b
 8007372:	7023      	strb	r3, [r4, #0]
 8007374:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007378:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	1c59      	adds	r1, r3, #1
 8007380:	2301      	movs	r3, #1
 8007382:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 8007386:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800738a:	2a00      	cmp	r2, #0
 800738c:	f47f af5c 	bne.w	8007248 <d_print_array_type.isra.10+0x50>
 8007390:	e762      	b.n	8007258 <d_print_array_type.isra.10+0x60>
 8007392:	4603      	mov	r3, r0
 8007394:	4631      	mov	r1, r6
 8007396:	464a      	mov	r2, r9
 8007398:	4620      	mov	r0, r4
 800739a:	f7ff fe49 	bl	8007030 <d_print_mod_list>
 800739e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80073a2:	e745      	b.n	8007230 <d_print_array_type.isra.10+0x38>
 80073a4:	0801dd6c 	.word	0x0801dd6c

080073a8 <d_print_cast.isra.12>:
 80073a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073aa:	460e      	mov	r6, r1
 80073ac:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 80073b0:	b083      	sub	sp, #12
 80073b2:	4604      	mov	r4, r0
 80073b4:	4615      	mov	r5, r2
 80073b6:	b139      	cbz	r1, 80073c8 <d_print_cast.isra.12+0x20>
 80073b8:	ab02      	add	r3, sp, #8
 80073ba:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80073be:	f843 2d08 	str.w	r2, [r3, #-8]!
 80073c2:	9101      	str	r1, [sp, #4]
 80073c4:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 80073c8:	682a      	ldr	r2, [r5, #0]
 80073ca:	7813      	ldrb	r3, [r2, #0]
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d00b      	beq.n	80073e8 <d_print_cast.isra.12+0x40>
 80073d0:	4631      	mov	r1, r6
 80073d2:	4620      	mov	r0, r4
 80073d4:	f7fd fe28 	bl	8005028 <d_print_comp>
 80073d8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80073dc:	b113      	cbz	r3, 80073e4 <d_print_cast.isra.12+0x3c>
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80073e4:	b003      	add	sp, #12
 80073e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e8:	6852      	ldr	r2, [r2, #4]
 80073ea:	4620      	mov	r0, r4
 80073ec:	4631      	mov	r1, r6
 80073ee:	f7fd fe1b 	bl	8005028 <d_print_comp>
 80073f2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80073f6:	b113      	cbz	r3, 80073fe <d_print_cast.isra.12+0x56>
 80073f8:	9b00      	ldr	r3, [sp, #0]
 80073fa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80073fe:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8007402:	2b3c      	cmp	r3, #60	; 0x3c
 8007404:	d043      	beq.n	800748e <d_print_cast.isra.12+0xe6>
 8007406:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800740a:	29ff      	cmp	r1, #255	; 0xff
 800740c:	d01d      	beq.n	800744a <d_print_cast.isra.12+0xa2>
 800740e:	1c4a      	adds	r2, r1, #1
 8007410:	233c      	movs	r3, #60	; 0x3c
 8007412:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007416:	5463      	strb	r3, [r4, r1]
 8007418:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	4631      	mov	r1, r6
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	4620      	mov	r0, r4
 8007424:	f7fd fe00 	bl	8005028 <d_print_comp>
 8007428:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800742c:	2b3e      	cmp	r3, #62	; 0x3e
 800742e:	d03a      	beq.n	80074a6 <d_print_cast.isra.12+0xfe>
 8007430:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007434:	29ff      	cmp	r1, #255	; 0xff
 8007436:	d019      	beq.n	800746c <d_print_cast.isra.12+0xc4>
 8007438:	1c4a      	adds	r2, r1, #1
 800743a:	233e      	movs	r3, #62	; 0x3e
 800743c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007440:	5463      	strb	r3, [r4, r1]
 8007442:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007446:	b003      	add	sp, #12
 8007448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744a:	2700      	movs	r7, #0
 800744c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007450:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007454:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8007458:	4620      	mov	r0, r4
 800745a:	4798      	blx	r3
 800745c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007460:	3301      	adds	r3, #1
 8007462:	4639      	mov	r1, r7
 8007464:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007468:	2201      	movs	r2, #1
 800746a:	e7d1      	b.n	8007410 <d_print_cast.isra.12+0x68>
 800746c:	2500      	movs	r5, #0
 800746e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007472:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007476:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800747a:	4620      	mov	r0, r4
 800747c:	4798      	blx	r3
 800747e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007482:	3301      	adds	r3, #1
 8007484:	4629      	mov	r1, r5
 8007486:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800748a:	2201      	movs	r2, #1
 800748c:	e7d5      	b.n	800743a <d_print_cast.isra.12+0x92>
 800748e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007492:	2bff      	cmp	r3, #255	; 0xff
 8007494:	d013      	beq.n	80074be <d_print_cast.isra.12+0x116>
 8007496:	1c59      	adds	r1, r3, #1
 8007498:	2220      	movs	r2, #32
 800749a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800749e:	54e2      	strb	r2, [r4, r3]
 80074a0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80074a4:	e7b1      	b.n	800740a <d_print_cast.isra.12+0x62>
 80074a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80074aa:	2bff      	cmp	r3, #255	; 0xff
 80074ac:	d019      	beq.n	80074e2 <d_print_cast.isra.12+0x13a>
 80074ae:	1c59      	adds	r1, r3, #1
 80074b0:	2220      	movs	r2, #32
 80074b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80074b6:	54e2      	strb	r2, [r4, r3]
 80074b8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80074bc:	e7ba      	b.n	8007434 <d_print_cast.isra.12+0x8c>
 80074be:	2700      	movs	r7, #0
 80074c0:	4619      	mov	r1, r3
 80074c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80074c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80074ca:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80074ce:	4620      	mov	r0, r4
 80074d0:	4798      	blx	r3
 80074d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80074dc:	463b      	mov	r3, r7
 80074de:	2101      	movs	r1, #1
 80074e0:	e7da      	b.n	8007498 <d_print_cast.isra.12+0xf0>
 80074e2:	2500      	movs	r5, #0
 80074e4:	4619      	mov	r1, r3
 80074e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80074ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80074ee:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80074f2:	4620      	mov	r0, r4
 80074f4:	4798      	blx	r3
 80074f6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007500:	462b      	mov	r3, r5
 8007502:	2101      	movs	r1, #1
 8007504:	e7d4      	b.n	80074b0 <d_print_cast.isra.12+0x108>
 8007506:	bf00      	nop

08007508 <d_print_expr_op>:
 8007508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800750c:	7815      	ldrb	r5, [r2, #0]
 800750e:	2d31      	cmp	r5, #49	; 0x31
 8007510:	d003      	beq.n	800751a <d_print_expr_op+0x12>
 8007512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007516:	f7fd bd87 	b.w	8005028 <d_print_comp>
 800751a:	6853      	ldr	r3, [r2, #4]
 800751c:	689f      	ldr	r7, [r3, #8]
 800751e:	685d      	ldr	r5, [r3, #4]
 8007520:	b367      	cbz	r7, 800757c <d_print_expr_op+0x74>
 8007522:	4604      	mov	r4, r0
 8007524:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007528:	442f      	add	r7, r5
 800752a:	f04f 0800 	mov.w	r8, #0
 800752e:	e009      	b.n	8007544 <d_print_expr_op+0x3c>
 8007530:	460b      	mov	r3, r1
 8007532:	42bd      	cmp	r5, r7
 8007534:	f101 0101 	add.w	r1, r1, #1
 8007538:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800753c:	54e6      	strb	r6, [r4, r3]
 800753e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007542:	d019      	beq.n	8007578 <d_print_expr_op+0x70>
 8007544:	29ff      	cmp	r1, #255	; 0xff
 8007546:	f815 6b01 	ldrb.w	r6, [r5], #1
 800754a:	d1f1      	bne.n	8007530 <d_print_expr_op+0x28>
 800754c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007550:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007554:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007558:	4620      	mov	r0, r4
 800755a:	4798      	blx	r3
 800755c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007560:	3301      	adds	r3, #1
 8007562:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007566:	2300      	movs	r3, #0
 8007568:	2101      	movs	r1, #1
 800756a:	42bd      	cmp	r5, r7
 800756c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007570:	54e6      	strb	r6, [r4, r3]
 8007572:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007576:	d1e5      	bne.n	8007544 <d_print_expr_op+0x3c>
 8007578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007580 <d_print_subexpr>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	7813      	ldrb	r3, [r2, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	4604      	mov	r4, r0
 8007588:	d921      	bls.n	80075ce <d_print_subexpr+0x4e>
 800758a:	2b30      	cmp	r3, #48	; 0x30
 800758c:	d01f      	beq.n	80075ce <d_print_subexpr+0x4e>
 800758e:	2b06      	cmp	r3, #6
 8007590:	d01d      	beq.n	80075ce <d_print_subexpr+0x4e>
 8007592:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007596:	2bff      	cmp	r3, #255	; 0xff
 8007598:	460e      	mov	r6, r1
 800759a:	4615      	mov	r5, r2
 800759c:	d02d      	beq.n	80075fa <d_print_subexpr+0x7a>
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	2728      	movs	r7, #40	; 0x28
 80075a2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80075a6:	4631      	mov	r1, r6
 80075a8:	54e7      	strb	r7, [r4, r3]
 80075aa:	462a      	mov	r2, r5
 80075ac:	4620      	mov	r0, r4
 80075ae:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80075b2:	f7fd fd39 	bl	8005028 <d_print_comp>
 80075b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80075ba:	29ff      	cmp	r1, #255	; 0xff
 80075bc:	d00c      	beq.n	80075d8 <d_print_subexpr+0x58>
 80075be:	1c4a      	adds	r2, r1, #1
 80075c0:	2329      	movs	r3, #41	; 0x29
 80075c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80075c6:	5463      	strb	r3, [r4, r1]
 80075c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80075cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ce:	4620      	mov	r0, r4
 80075d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075d4:	f7fd bd28 	b.w	8005028 <d_print_comp>
 80075d8:	2500      	movs	r5, #0
 80075da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80075de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80075e2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80075e6:	4620      	mov	r0, r4
 80075e8:	4798      	blx	r3
 80075ea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80075ee:	3301      	adds	r3, #1
 80075f0:	4629      	mov	r1, r5
 80075f2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80075f6:	2201      	movs	r2, #1
 80075f8:	e7e2      	b.n	80075c0 <d_print_subexpr+0x40>
 80075fa:	2700      	movs	r7, #0
 80075fc:	4619      	mov	r1, r3
 80075fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007602:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007606:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800760a:	4798      	blx	r3
 800760c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007616:	463b      	mov	r3, r7
 8007618:	2201      	movs	r2, #1
 800761a:	e7c1      	b.n	80075a0 <d_print_subexpr+0x20>

0800761c <d_expr_primary>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	68c3      	ldr	r3, [r0, #12]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	2a4c      	cmp	r2, #76	; 0x4c
 8007624:	4604      	mov	r4, r0
 8007626:	d001      	beq.n	800762c <d_expr_primary+0x10>
 8007628:	2000      	movs	r0, #0
 800762a:	bd70      	pop	{r4, r5, r6, pc}
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	60c2      	str	r2, [r0, #12]
 8007630:	7859      	ldrb	r1, [r3, #1]
 8007632:	295f      	cmp	r1, #95	; 0x5f
 8007634:	d037      	beq.n	80076a6 <d_expr_primary+0x8a>
 8007636:	295a      	cmp	r1, #90	; 0x5a
 8007638:	d10c      	bne.n	8007654 <d_expr_primary+0x38>
 800763a:	3201      	adds	r2, #1
 800763c:	60e2      	str	r2, [r4, #12]
 800763e:	4620      	mov	r0, r4
 8007640:	2100      	movs	r1, #0
 8007642:	f003 f889 	bl	800a758 <d_encoding>
 8007646:	68e2      	ldr	r2, [r4, #12]
 8007648:	7813      	ldrb	r3, [r2, #0]
 800764a:	2b45      	cmp	r3, #69	; 0x45
 800764c:	d1ec      	bne.n	8007628 <d_expr_primary+0xc>
 800764e:	3201      	adds	r2, #1
 8007650:	60e2      	str	r2, [r4, #12]
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	f000 f842 	bl	80076dc <d_type>
 8007658:	4605      	mov	r5, r0
 800765a:	2800      	cmp	r0, #0
 800765c:	d0e4      	beq.n	8007628 <d_expr_primary+0xc>
 800765e:	7803      	ldrb	r3, [r0, #0]
 8007660:	2b27      	cmp	r3, #39	; 0x27
 8007662:	d030      	beq.n	80076c6 <d_expr_primary+0xaa>
 8007664:	68e1      	ldr	r1, [r4, #12]
 8007666:	780b      	ldrb	r3, [r1, #0]
 8007668:	2b6e      	cmp	r3, #110	; 0x6e
 800766a:	d026      	beq.n	80076ba <d_expr_primary+0x9e>
 800766c:	263b      	movs	r6, #59	; 0x3b
 800766e:	2b45      	cmp	r3, #69	; 0x45
 8007670:	d032      	beq.n	80076d8 <d_expr_primary+0xbc>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0d8      	beq.n	8007628 <d_expr_primary+0xc>
 8007676:	460a      	mov	r2, r1
 8007678:	e001      	b.n	800767e <d_expr_primary+0x62>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0d4      	beq.n	8007628 <d_expr_primary+0xc>
 800767e:	3201      	adds	r2, #1
 8007680:	60e2      	str	r2, [r4, #12]
 8007682:	7813      	ldrb	r3, [r2, #0]
 8007684:	2b45      	cmp	r3, #69	; 0x45
 8007686:	d1f8      	bne.n	800767a <d_expr_primary+0x5e>
 8007688:	1a52      	subs	r2, r2, r1
 800768a:	4620      	mov	r0, r4
 800768c:	f7fc fea0 	bl	80043d0 <d_make_name>
 8007690:	462a      	mov	r2, r5
 8007692:	4603      	mov	r3, r0
 8007694:	4631      	mov	r1, r6
 8007696:	4620      	mov	r0, r4
 8007698:	f7fc fe4e 	bl	8004338 <d_make_comp>
 800769c:	68e2      	ldr	r2, [r4, #12]
 800769e:	7813      	ldrb	r3, [r2, #0]
 80076a0:	2b45      	cmp	r3, #69	; 0x45
 80076a2:	d1c1      	bne.n	8007628 <d_expr_primary+0xc>
 80076a4:	e7d3      	b.n	800764e <d_expr_primary+0x32>
 80076a6:	1c9a      	adds	r2, r3, #2
 80076a8:	60c2      	str	r2, [r0, #12]
 80076aa:	789b      	ldrb	r3, [r3, #2]
 80076ac:	2b5a      	cmp	r3, #90	; 0x5a
 80076ae:	d0c4      	beq.n	800763a <d_expr_primary+0x1e>
 80076b0:	2b45      	cmp	r3, #69	; 0x45
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	d1b7      	bne.n	8007628 <d_expr_primary+0xc>
 80076b8:	e7c9      	b.n	800764e <d_expr_primary+0x32>
 80076ba:	1c4a      	adds	r2, r1, #1
 80076bc:	60e2      	str	r2, [r4, #12]
 80076be:	784b      	ldrb	r3, [r1, #1]
 80076c0:	263c      	movs	r6, #60	; 0x3c
 80076c2:	4611      	mov	r1, r2
 80076c4:	e7d3      	b.n	800766e <d_expr_primary+0x52>
 80076c6:	6843      	ldr	r3, [r0, #4]
 80076c8:	7c1a      	ldrb	r2, [r3, #16]
 80076ca:	2a00      	cmp	r2, #0
 80076cc:	d0ca      	beq.n	8007664 <d_expr_primary+0x48>
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076d2:	1a9b      	subs	r3, r3, r2
 80076d4:	6323      	str	r3, [r4, #48]	; 0x30
 80076d6:	e7c5      	b.n	8007664 <d_expr_primary+0x48>
 80076d8:	2200      	movs	r2, #0
 80076da:	e7d6      	b.n	800768a <d_expr_primary+0x6e>

080076dc <d_type>:
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	4604      	mov	r4, r0
 80076e2:	68c0      	ldr	r0, [r0, #12]
 80076e4:	7803      	ldrb	r3, [r0, #0]
 80076e6:	2b72      	cmp	r3, #114	; 0x72
 80076e8:	b083      	sub	sp, #12
 80076ea:	d055      	beq.n	8007798 <d_type+0xbc>
 80076ec:	2b56      	cmp	r3, #86	; 0x56
 80076ee:	d053      	beq.n	8007798 <d_type+0xbc>
 80076f0:	2b4b      	cmp	r3, #75	; 0x4b
 80076f2:	d051      	beq.n	8007798 <d_type+0xbc>
 80076f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80076f8:	2a4a      	cmp	r2, #74	; 0x4a
 80076fa:	f200 80c3 	bhi.w	8007884 <d_type+0x1a8>
 80076fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007702:	00eb      	.short	0x00eb
 8007704:	00eb00eb 	.word	0x00eb00eb
 8007708:	00eb00eb 	.word	0x00eb00eb
 800770c:	00eb00eb 	.word	0x00eb00eb
 8007710:	00eb00eb 	.word	0x00eb00eb
 8007714:	00c100eb 	.word	0x00c100eb
 8007718:	00c100c1 	.word	0x00c100c1
 800771c:	00c100c1 	.word	0x00c100c1
 8007720:	00c100c1 	.word	0x00c100c1
 8007724:	00c100f1 	.word	0x00c100f1
 8007728:	0131010f 	.word	0x0131010f
 800772c:	011d00c1 	.word	0x011d00c1
 8007730:	00c10123 	.word	0x00c10123
 8007734:	00c100c1 	.word	0x00c100c1
 8007738:	00c100c1 	.word	0x00c100c1
 800773c:	00eb01a1 	.word	0x00eb01a1
 8007740:	01c701b9 	.word	0x01c701b9
 8007744:	01d500c1 	.word	0x01d500c1
 8007748:	023c01e3 	.word	0x023c01e3
 800774c:	00c10205 	.word	0x00c10205
 8007750:	00c100c1 	.word	0x00c100c1
 8007754:	00eb00c1 	.word	0x00eb00c1
 8007758:	00c100c1 	.word	0x00c100c1
 800775c:	00c100c1 	.word	0x00c100c1
 8007760:	00c100c1 	.word	0x00c100c1
 8007764:	02170217 	.word	0x02170217
 8007768:	02170217 	.word	0x02170217
 800776c:	02170217 	.word	0x02170217
 8007770:	02170217 	.word	0x02170217
 8007774:	02170217 	.word	0x02170217
 8007778:	021700c1 	.word	0x021700c1
 800777c:	02170217 	.word	0x02170217
 8007780:	00c10217 	.word	0x00c10217
 8007784:	00c100c1 	.word	0x00c100c1
 8007788:	02170217 	.word	0x02170217
 800778c:	021700d1 	.word	0x021700d1
 8007790:	02170217 	.word	0x02170217
 8007794:	02170217 	.word	0x02170217
 8007798:	4620      	mov	r0, r4
 800779a:	a901      	add	r1, sp, #4
 800779c:	2200      	movs	r2, #0
 800779e:	f7fc fe31 	bl	8004404 <d_cv_qualifiers>
 80077a2:	4605      	mov	r5, r0
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d06d      	beq.n	8007884 <d_type+0x1a8>
 80077a8:	68e3      	ldr	r3, [r4, #12]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b46      	cmp	r3, #70	; 0x46
 80077ae:	4620      	mov	r0, r4
 80077b0:	d06d      	beq.n	800788e <d_type+0x1b2>
 80077b2:	f7ff ff93 	bl	80076dc <d_type>
 80077b6:	6028      	str	r0, [r5, #0]
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d063      	beq.n	8007884 <d_type+0x1a8>
 80077bc:	7803      	ldrb	r3, [r0, #0]
 80077be:	3b1f      	subs	r3, #31
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d968      	bls.n	8007896 <d_type+0x1ba>
 80077c4:	9a01      	ldr	r2, [sp, #4]
 80077c6:	2a00      	cmp	r2, #0
 80077c8:	d05c      	beq.n	8007884 <d_type+0x1a8>
 80077ca:	6a23      	ldr	r3, [r4, #32]
 80077cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80077ce:	428b      	cmp	r3, r1
 80077d0:	da58      	bge.n	8007884 <d_type+0x1a8>
 80077d2:	69e0      	ldr	r0, [r4, #28]
 80077d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80077d8:	1c59      	adds	r1, r3, #1
 80077da:	9d01      	ldr	r5, [sp, #4]
 80077dc:	6221      	str	r1, [r4, #32]
 80077de:	4628      	mov	r0, r5
 80077e0:	b003      	add	sp, #12
 80077e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e6:	2501      	movs	r5, #1
 80077e8:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80077ea:	6365      	str	r5, [r4, #52]	; 0x34
 80077ec:	7883      	ldrb	r3, [r0, #2]
 80077ee:	2b4c      	cmp	r3, #76	; 0x4c
 80077f0:	f000 84a8 	beq.w	8008144 <d_type+0xa68>
 80077f4:	2b54      	cmp	r3, #84	; 0x54
 80077f6:	f000 84a0 	beq.w	800813a <d_type+0xa5e>
 80077fa:	2b73      	cmp	r3, #115	; 0x73
 80077fc:	f000 83b7 	beq.w	8007f6e <d_type+0x892>
 8007800:	2b66      	cmp	r3, #102	; 0x66
 8007802:	f000 8394 	beq.w	8007f2e <d_type+0x852>
 8007806:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800780a:	2a09      	cmp	r2, #9
 800780c:	f240 831f 	bls.w	8007e4e <d_type+0x772>
 8007810:	2b6f      	cmp	r3, #111	; 0x6f
 8007812:	f000 8316 	beq.w	8007e42 <d_type+0x766>
 8007816:	2b69      	cmp	r3, #105	; 0x69
 8007818:	f000 83bc 	beq.w	8007f94 <d_type+0x8b8>
 800781c:	2b74      	cmp	r3, #116	; 0x74
 800781e:	f000 84db 	beq.w	80081d8 <d_type+0xafc>
 8007822:	4620      	mov	r0, r4
 8007824:	f001 f94e 	bl	8008ac4 <d_operator_name>
 8007828:	4605      	mov	r5, r0
 800782a:	2800      	cmp	r0, #0
 800782c:	f000 8465 	beq.w	80080fa <d_type+0xa1e>
 8007830:	7803      	ldrb	r3, [r0, #0]
 8007832:	2b31      	cmp	r3, #49	; 0x31
 8007834:	f000 83c1 	beq.w	8007fba <d_type+0x8de>
 8007838:	2b32      	cmp	r3, #50	; 0x32
 800783a:	f000 84bf 	beq.w	80081bc <d_type+0xae0>
 800783e:	2b33      	cmp	r3, #51	; 0x33
 8007840:	f040 845b 	bne.w	80080fa <d_type+0xa1e>
 8007844:	68e3      	ldr	r3, [r4, #12]
 8007846:	781a      	ldrb	r2, [r3, #0]
 8007848:	2a5f      	cmp	r2, #95	; 0x5f
 800784a:	f001 80a2 	beq.w	8008992 <d_type+0x12b6>
 800784e:	4620      	mov	r0, r4
 8007850:	f004 fedc 	bl	800c60c <d_expression_1>
 8007854:	4603      	mov	r3, r0
 8007856:	462a      	mov	r2, r5
 8007858:	4620      	mov	r0, r4
 800785a:	2135      	movs	r1, #53	; 0x35
 800785c:	f7fc fd6c 	bl	8004338 <d_make_comp>
 8007860:	4602      	mov	r2, r0
 8007862:	6367      	str	r7, [r4, #52]	; 0x34
 8007864:	4620      	mov	r0, r4
 8007866:	2141      	movs	r1, #65	; 0x41
 8007868:	2300      	movs	r3, #0
 800786a:	f7fc fd65 	bl	8004338 <d_make_comp>
 800786e:	4605      	mov	r5, r0
 8007870:	9001      	str	r0, [sp, #4]
 8007872:	b138      	cbz	r0, 8007884 <d_type+0x1a8>
 8007874:	68e3      	ldr	r3, [r4, #12]
 8007876:	781a      	ldrb	r2, [r3, #0]
 8007878:	b122      	cbz	r2, 8007884 <d_type+0x1a8>
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	60e2      	str	r2, [r4, #12]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b45      	cmp	r3, #69	; 0x45
 8007882:	d01e      	beq.n	80078c2 <d_type+0x1e6>
 8007884:	2500      	movs	r5, #0
 8007886:	4628      	mov	r0, r5
 8007888:	b003      	add	sp, #12
 800788a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788e:	f001 f8f9 	bl	8008a84 <d_function_type>
 8007892:	6028      	str	r0, [r5, #0]
 8007894:	e790      	b.n	80077b8 <d_type+0xdc>
 8007896:	9a01      	ldr	r2, [sp, #4]
 8007898:	6843      	ldr	r3, [r0, #4]
 800789a:	6042      	str	r2, [r0, #4]
 800789c:	682a      	ldr	r2, [r5, #0]
 800789e:	9201      	str	r2, [sp, #4]
 80078a0:	602b      	str	r3, [r5, #0]
 80078a2:	e78f      	b.n	80077c4 <d_type+0xe8>
 80078a4:	3001      	adds	r0, #1
 80078a6:	60e0      	str	r0, [r4, #12]
 80078a8:	4620      	mov	r0, r4
 80078aa:	f7fc ffc5 	bl	8004838 <d_source_name>
 80078ae:	2128      	movs	r1, #40	; 0x28
 80078b0:	4602      	mov	r2, r0
 80078b2:	2300      	movs	r3, #0
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7fc fd3f 	bl	8004338 <d_make_comp>
 80078ba:	4605      	mov	r5, r0
 80078bc:	9001      	str	r0, [sp, #4]
 80078be:	2d00      	cmp	r5, #0
 80078c0:	d0e0      	beq.n	8007884 <d_type+0x1a8>
 80078c2:	6a23      	ldr	r3, [r4, #32]
 80078c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80078c6:	4293      	cmp	r3, r2
 80078c8:	dadc      	bge.n	8007884 <d_type+0x1a8>
 80078ca:	69e1      	ldr	r1, [r4, #28]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 80078d2:	9d01      	ldr	r5, [sp, #4]
 80078d4:	6222      	str	r2, [r4, #32]
 80078d6:	e782      	b.n	80077de <d_type+0x102>
 80078d8:	4620      	mov	r0, r4
 80078da:	f002 fdbd 	bl	800a458 <d_name>
 80078de:	4605      	mov	r5, r0
 80078e0:	9001      	str	r0, [sp, #4]
 80078e2:	e7ec      	b.n	80078be <d_type+0x1e2>
 80078e4:	1c41      	adds	r1, r0, #1
 80078e6:	60e1      	str	r1, [r4, #12]
 80078e8:	7843      	ldrb	r3, [r0, #1]
 80078ea:	2b5f      	cmp	r3, #95	; 0x5f
 80078ec:	f000 8257 	beq.w	8007d9e <d_type+0x6c2>
 80078f0:	3b30      	subs	r3, #48	; 0x30
 80078f2:	2b09      	cmp	r3, #9
 80078f4:	f200 8261 	bhi.w	8007dba <d_type+0x6de>
 80078f8:	460a      	mov	r2, r1
 80078fa:	3201      	adds	r2, #1
 80078fc:	60e2      	str	r2, [r4, #12]
 80078fe:	7813      	ldrb	r3, [r2, #0]
 8007900:	3b30      	subs	r3, #48	; 0x30
 8007902:	2b09      	cmp	r3, #9
 8007904:	d9f9      	bls.n	80078fa <d_type+0x21e>
 8007906:	1a52      	subs	r2, r2, r1
 8007908:	4620      	mov	r0, r4
 800790a:	f7fc fd61 	bl	80043d0 <d_make_name>
 800790e:	4605      	mov	r5, r0
 8007910:	b120      	cbz	r0, 800791c <d_type+0x240>
 8007912:	68e1      	ldr	r1, [r4, #12]
 8007914:	780b      	ldrb	r3, [r1, #0]
 8007916:	2b5f      	cmp	r3, #95	; 0x5f
 8007918:	f000 8242 	beq.w	8007da0 <d_type+0x6c4>
 800791c:	2500      	movs	r5, #0
 800791e:	e0a7      	b.n	8007a70 <d_type+0x394>
 8007920:	3001      	adds	r0, #1
 8007922:	60e0      	str	r0, [r4, #12]
 8007924:	4620      	mov	r0, r4
 8007926:	f7ff fed9 	bl	80076dc <d_type>
 800792a:	2125      	movs	r1, #37	; 0x25
 800792c:	4602      	mov	r2, r0
 800792e:	2300      	movs	r3, #0
 8007930:	4620      	mov	r0, r4
 8007932:	f7fc fd01 	bl	8004338 <d_make_comp>
 8007936:	4605      	mov	r5, r0
 8007938:	9001      	str	r0, [sp, #4]
 800793a:	e7c0      	b.n	80078be <d_type+0x1e2>
 800793c:	4620      	mov	r0, r4
 800793e:	f001 f8a1 	bl	8008a84 <d_function_type>
 8007942:	4605      	mov	r5, r0
 8007944:	9001      	str	r0, [sp, #4]
 8007946:	e7ba      	b.n	80078be <d_type+0x1e2>
 8007948:	3001      	adds	r0, #1
 800794a:	60e0      	str	r0, [r4, #12]
 800794c:	4620      	mov	r0, r4
 800794e:	f7ff fec5 	bl	80076dc <d_type>
 8007952:	2126      	movs	r1, #38	; 0x26
 8007954:	4602      	mov	r2, r0
 8007956:	2300      	movs	r3, #0
 8007958:	4620      	mov	r0, r4
 800795a:	f7fc fced 	bl	8004338 <d_make_comp>
 800795e:	4605      	mov	r5, r0
 8007960:	9001      	str	r0, [sp, #4]
 8007962:	e7ac      	b.n	80078be <d_type+0x1e2>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	60e3      	str	r3, [r4, #12]
 8007968:	7843      	ldrb	r3, [r0, #1]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d08a      	beq.n	8007884 <d_type+0x1a8>
 800796e:	1c83      	adds	r3, r0, #2
 8007970:	60e3      	str	r3, [r4, #12]
 8007972:	7843      	ldrb	r3, [r0, #1]
 8007974:	3b46      	subs	r3, #70	; 0x46
 8007976:	2b30      	cmp	r3, #48	; 0x30
 8007978:	d884      	bhi.n	8007884 <d_type+0x1a8>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <d_type+0x2a4>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007d29 	.word	0x08007d29
 8007984:	08007885 	.word	0x08007885
 8007988:	08007885 	.word	0x08007885
 800798c:	08007885 	.word	0x08007885
 8007990:	08007885 	.word	0x08007885
 8007994:	08007885 	.word	0x08007885
 8007998:	08007885 	.word	0x08007885
 800799c:	08007885 	.word	0x08007885
 80079a0:	08007885 	.word	0x08007885
 80079a4:	08007885 	.word	0x08007885
 80079a8:	08007885 	.word	0x08007885
 80079ac:	08007885 	.word	0x08007885
 80079b0:	08007885 	.word	0x08007885
 80079b4:	08007885 	.word	0x08007885
 80079b8:	080077e7 	.word	0x080077e7
 80079bc:	08007885 	.word	0x08007885
 80079c0:	08007885 	.word	0x08007885
 80079c4:	08007885 	.word	0x08007885
 80079c8:	08007885 	.word	0x08007885
 80079cc:	08007885 	.word	0x08007885
 80079d0:	08007885 	.word	0x08007885
 80079d4:	08007885 	.word	0x08007885
 80079d8:	08007885 	.word	0x08007885
 80079dc:	08007885 	.word	0x08007885
 80079e0:	08007885 	.word	0x08007885
 80079e4:	08007885 	.word	0x08007885
 80079e8:	08007885 	.word	0x08007885
 80079ec:	08007d1b 	.word	0x08007d1b
 80079f0:	08007885 	.word	0x08007885
 80079f4:	08007885 	.word	0x08007885
 80079f8:	08007cfd 	.word	0x08007cfd
 80079fc:	08007c39 	.word	0x08007c39
 8007a00:	08007c0d 	.word	0x08007c0d
 8007a04:	08007885 	.word	0x08007885
 8007a08:	08007be1 	.word	0x08007be1
 8007a0c:	08007bb5 	.word	0x08007bb5
 8007a10:	08007885 	.word	0x08007885
 8007a14:	08007885 	.word	0x08007885
 8007a18:	08007885 	.word	0x08007885
 8007a1c:	08007885 	.word	0x08007885
 8007a20:	08007cd5 	.word	0x08007cd5
 8007a24:	08007885 	.word	0x08007885
 8007a28:	08007cbd 	.word	0x08007cbd
 8007a2c:	08007885 	.word	0x08007885
 8007a30:	08007885 	.word	0x08007885
 8007a34:	08007c9f 	.word	0x08007c9f
 8007a38:	080077e7 	.word	0x080077e7
 8007a3c:	08007885 	.word	0x08007885
 8007a40:	08007c65 	.word	0x08007c65
 8007a44:	3001      	adds	r0, #1
 8007a46:	60e0      	str	r0, [r4, #12]
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f7ff fe47 	bl	80076dc <d_type>
 8007a4e:	4605      	mov	r5, r0
 8007a50:	2800      	cmp	r0, #0
 8007a52:	f43f af63 	beq.w	800791c <d_type+0x240>
 8007a56:	4620      	mov	r0, r4
 8007a58:	f7ff fe40 	bl	80076dc <d_type>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f43f af5d 	beq.w	800791c <d_type+0x240>
 8007a62:	462a      	mov	r2, r5
 8007a64:	4603      	mov	r3, r0
 8007a66:	212b      	movs	r1, #43	; 0x2b
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f7fc fc65 	bl	8004338 <d_make_comp>
 8007a6e:	4605      	mov	r5, r0
 8007a70:	9501      	str	r5, [sp, #4]
 8007a72:	e724      	b.n	80078be <d_type+0x1e2>
 8007a74:	3001      	adds	r0, #1
 8007a76:	60e0      	str	r0, [r4, #12]
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f7ff fe2f 	bl	80076dc <d_type>
 8007a7e:	2124      	movs	r1, #36	; 0x24
 8007a80:	4602      	mov	r2, r0
 8007a82:	2300      	movs	r3, #0
 8007a84:	4620      	mov	r0, r4
 8007a86:	f7fc fc57 	bl	8004338 <d_make_comp>
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	9001      	str	r0, [sp, #4]
 8007a8e:	e716      	b.n	80078be <d_type+0x1e2>
 8007a90:	3001      	adds	r0, #1
 8007a92:	60e0      	str	r0, [r4, #12]
 8007a94:	4620      	mov	r0, r4
 8007a96:	f7ff fe21 	bl	80076dc <d_type>
 8007a9a:	2122      	movs	r1, #34	; 0x22
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f7fc fc49 	bl	8004338 <d_make_comp>
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	9001      	str	r0, [sp, #4]
 8007aaa:	e708      	b.n	80078be <d_type+0x1e2>
 8007aac:	3001      	adds	r0, #1
 8007aae:	60e0      	str	r0, [r4, #12]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f7ff fe13 	bl	80076dc <d_type>
 8007ab6:	2123      	movs	r1, #35	; 0x23
 8007ab8:	4602      	mov	r2, r0
 8007aba:	2300      	movs	r3, #0
 8007abc:	4620      	mov	r0, r4
 8007abe:	f7fc fc3b 	bl	8004338 <d_make_comp>
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	9001      	str	r0, [sp, #4]
 8007ac6:	e6fa      	b.n	80078be <d_type+0x1e2>
 8007ac8:	7843      	ldrb	r3, [r0, #1]
 8007aca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007ace:	2a09      	cmp	r2, #9
 8007ad0:	d905      	bls.n	8007ade <d_type+0x402>
 8007ad2:	2b5f      	cmp	r3, #95	; 0x5f
 8007ad4:	d003      	beq.n	8007ade <d_type+0x402>
 8007ad6:	3b41      	subs	r3, #65	; 0x41
 8007ad8:	2b19      	cmp	r3, #25
 8007ada:	f200 817a 	bhi.w	8007dd2 <d_type+0x6f6>
 8007ade:	4620      	mov	r0, r4
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	f7fc fd01 	bl	80044e8 <d_substitution>
 8007ae6:	68e3      	ldr	r3, [r4, #12]
 8007ae8:	9001      	str	r0, [sp, #4]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b49      	cmp	r3, #73	; 0x49
 8007aee:	4605      	mov	r5, r0
 8007af0:	f47f ae75 	bne.w	80077de <d_type+0x102>
 8007af4:	4620      	mov	r0, r4
 8007af6:	f001 f9a7 	bl	8008e48 <d_template_args>
 8007afa:	462a      	mov	r2, r5
 8007afc:	4603      	mov	r3, r0
 8007afe:	2104      	movs	r1, #4
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7fc fc19 	bl	8004338 <d_make_comp>
 8007b06:	4605      	mov	r5, r0
 8007b08:	9001      	str	r0, [sp, #4]
 8007b0a:	e6d8      	b.n	80078be <d_type+0x1e2>
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	60e0      	str	r0, [r4, #12]
 8007b10:	4620      	mov	r0, r4
 8007b12:	f7fc fe91 	bl	8004838 <d_source_name>
 8007b16:	9001      	str	r0, [sp, #4]
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f7ff fddf 	bl	80076dc <d_type>
 8007b1e:	2121      	movs	r1, #33	; 0x21
 8007b20:	4602      	mov	r2, r0
 8007b22:	9b01      	ldr	r3, [sp, #4]
 8007b24:	4620      	mov	r0, r4
 8007b26:	f7fc fc07 	bl	8004338 <d_make_comp>
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	9001      	str	r0, [sp, #4]
 8007b2e:	e6c6      	b.n	80078be <d_type+0x1e2>
 8007b30:	3b61      	subs	r3, #97	; 0x61
 8007b32:	4fae      	ldr	r7, [pc, #696]	; (8007dec <d_type+0x710>)
 8007b34:	6962      	ldr	r2, [r4, #20]
 8007b36:	69a5      	ldr	r5, [r4, #24]
 8007b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8007b42:	42aa      	cmp	r2, r5
 8007b44:	4419      	add	r1, r3
 8007b46:	f280 8126 	bge.w	8007d96 <d_type+0x6ba>
 8007b4a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8007b4e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8007b52:	00b6      	lsls	r6, r6, #2
 8007b54:	3201      	adds	r2, #1
 8007b56:	eb1e 0506 	adds.w	r5, lr, r6
 8007b5a:	6162      	str	r2, [r4, #20]
 8007b5c:	f000 811b 	beq.w	8007d96 <d_type+0x6ba>
 8007b60:	2227      	movs	r2, #39	; 0x27
 8007b62:	443b      	add	r3, r7
 8007b64:	f80e 2006 	strb.w	r2, [lr, r6]
 8007b68:	6069      	str	r1, [r5, #4]
 8007b6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007b6c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007b70:	3001      	adds	r0, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	60e0      	str	r0, [r4, #12]
 8007b76:	6323      	str	r3, [r4, #48]	; 0x30
 8007b78:	e631      	b.n	80077de <d_type+0x102>
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7fc fe2a 	bl	80047d4 <d_template_param>
 8007b80:	68e6      	ldr	r6, [r4, #12]
 8007b82:	9001      	str	r0, [sp, #4]
 8007b84:	7833      	ldrb	r3, [r6, #0]
 8007b86:	2b49      	cmp	r3, #73	; 0x49
 8007b88:	4605      	mov	r5, r0
 8007b8a:	f47f ae98 	bne.w	80078be <d_type+0x1e2>
 8007b8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 813d 	bne.w	8007e10 <d_type+0x734>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f43f ae74 	beq.w	8007884 <d_type+0x1a8>
 8007b9c:	6a23      	ldr	r3, [r4, #32]
 8007b9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	f6bf ae6f 	bge.w	8007884 <d_type+0x1a8>
 8007ba6:	69e1      	ldr	r1, [r4, #28]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007bae:	9d01      	ldr	r5, [sp, #4]
 8007bb0:	6222      	str	r2, [r4, #32]
 8007bb2:	e79f      	b.n	8007af4 <d_type+0x418>
 8007bb4:	6963      	ldr	r3, [r4, #20]
 8007bb6:	69a2      	ldr	r2, [r4, #24]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	f280 80ec 	bge.w	8007d96 <d_type+0x6ba>
 8007bbe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007bc2:	6921      	ldr	r1, [r4, #16]
 8007bc4:	0092      	lsls	r2, r2, #2
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	188d      	adds	r5, r1, r2
 8007bca:	6163      	str	r3, [r4, #20]
 8007bcc:	f000 80e3 	beq.w	8007d96 <d_type+0x6ba>
 8007bd0:	4b87      	ldr	r3, [pc, #540]	; (8007df0 <d_type+0x714>)
 8007bd2:	2027      	movs	r0, #39	; 0x27
 8007bd4:	5488      	strb	r0, [r1, r2]
 8007bd6:	606b      	str	r3, [r5, #4]
 8007bd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007bda:	3308      	adds	r3, #8
 8007bdc:	6323      	str	r3, [r4, #48]	; 0x30
 8007bde:	e5fe      	b.n	80077de <d_type+0x102>
 8007be0:	6963      	ldr	r3, [r4, #20]
 8007be2:	69a2      	ldr	r2, [r4, #24]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	f280 80d6 	bge.w	8007d96 <d_type+0x6ba>
 8007bea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007bee:	6921      	ldr	r1, [r4, #16]
 8007bf0:	0092      	lsls	r2, r2, #2
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	188d      	adds	r5, r1, r2
 8007bf6:	6163      	str	r3, [r4, #20]
 8007bf8:	f000 80cd 	beq.w	8007d96 <d_type+0x6ba>
 8007bfc:	4b7d      	ldr	r3, [pc, #500]	; (8007df4 <d_type+0x718>)
 8007bfe:	2027      	movs	r0, #39	; 0x27
 8007c00:	5488      	strb	r0, [r1, r2]
 8007c02:	606b      	str	r3, [r5, #4]
 8007c04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c06:	3304      	adds	r3, #4
 8007c08:	6323      	str	r3, [r4, #48]	; 0x30
 8007c0a:	e5e8      	b.n	80077de <d_type+0x102>
 8007c0c:	6963      	ldr	r3, [r4, #20]
 8007c0e:	69a2      	ldr	r2, [r4, #24]
 8007c10:	4293      	cmp	r3, r2
 8007c12:	f280 80c0 	bge.w	8007d96 <d_type+0x6ba>
 8007c16:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007c1a:	6921      	ldr	r1, [r4, #16]
 8007c1c:	0092      	lsls	r2, r2, #2
 8007c1e:	3301      	adds	r3, #1
 8007c20:	188d      	adds	r5, r1, r2
 8007c22:	6163      	str	r3, [r4, #20]
 8007c24:	f000 80b7 	beq.w	8007d96 <d_type+0x6ba>
 8007c28:	4b73      	ldr	r3, [pc, #460]	; (8007df8 <d_type+0x71c>)
 8007c2a:	2027      	movs	r0, #39	; 0x27
 8007c2c:	5488      	strb	r0, [r1, r2]
 8007c2e:	606b      	str	r3, [r5, #4]
 8007c30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c32:	3309      	adds	r3, #9
 8007c34:	6323      	str	r3, [r4, #48]	; 0x30
 8007c36:	e5d2      	b.n	80077de <d_type+0x102>
 8007c38:	6963      	ldr	r3, [r4, #20]
 8007c3a:	69a2      	ldr	r2, [r4, #24]
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	f280 80aa 	bge.w	8007d96 <d_type+0x6ba>
 8007c42:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007c46:	6921      	ldr	r1, [r4, #16]
 8007c48:	0092      	lsls	r2, r2, #2
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	188d      	adds	r5, r1, r2
 8007c4e:	6163      	str	r3, [r4, #20]
 8007c50:	f000 80a1 	beq.w	8007d96 <d_type+0x6ba>
 8007c54:	4b69      	ldr	r3, [pc, #420]	; (8007dfc <d_type+0x720>)
 8007c56:	2027      	movs	r0, #39	; 0x27
 8007c58:	5488      	strb	r0, [r1, r2]
 8007c5a:	606b      	str	r3, [r5, #4]
 8007c5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c5e:	330a      	adds	r3, #10
 8007c60:	6323      	str	r3, [r4, #48]	; 0x30
 8007c62:	e5bc      	b.n	80077de <d_type+0x102>
 8007c64:	7883      	ldrb	r3, [r0, #2]
 8007c66:	2b5f      	cmp	r3, #95	; 0x5f
 8007c68:	f000 8107 	beq.w	8007e7a <d_type+0x79e>
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f7fc fd7d 	bl	800476c <d_number_component>
 8007c72:	4605      	mov	r5, r0
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	f43f aefb 	beq.w	8007a70 <d_type+0x394>
 8007c7a:	68e3      	ldr	r3, [r4, #12]
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	2a5f      	cmp	r2, #95	; 0x5f
 8007c80:	f47f ae4c 	bne.w	800791c <d_type+0x240>
 8007c84:	3301      	adds	r3, #1
 8007c86:	60e3      	str	r3, [r4, #12]
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f7ff fd27 	bl	80076dc <d_type>
 8007c8e:	462a      	mov	r2, r5
 8007c90:	4603      	mov	r3, r0
 8007c92:	212d      	movs	r1, #45	; 0x2d
 8007c94:	4620      	mov	r0, r4
 8007c96:	f7fc fb4f 	bl	8004338 <d_make_comp>
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	e6e8      	b.n	8007a70 <d_type+0x394>
 8007c9e:	6963      	ldr	r3, [r4, #20]
 8007ca0:	69a2      	ldr	r2, [r4, #24]
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	da77      	bge.n	8007d96 <d_type+0x6ba>
 8007ca6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007caa:	6921      	ldr	r1, [r4, #16]
 8007cac:	0092      	lsls	r2, r2, #2
 8007cae:	3301      	adds	r3, #1
 8007cb0:	188d      	adds	r5, r1, r2
 8007cb2:	6163      	str	r3, [r4, #20]
 8007cb4:	d06f      	beq.n	8007d96 <d_type+0x6ba>
 8007cb6:	2027      	movs	r0, #39	; 0x27
 8007cb8:	4b51      	ldr	r3, [pc, #324]	; (8007e00 <d_type+0x724>)
 8007cba:	e78b      	b.n	8007bd4 <d_type+0x4f8>
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f7ff fd0d 	bl	80076dc <d_type>
 8007cc2:	2149      	movs	r1, #73	; 0x49
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7fc fb35 	bl	8004338 <d_make_comp>
 8007cce:	4605      	mov	r5, r0
 8007cd0:	9001      	str	r0, [sp, #4]
 8007cd2:	e5f4      	b.n	80078be <d_type+0x1e2>
 8007cd4:	6963      	ldr	r3, [r4, #20]
 8007cd6:	69a2      	ldr	r2, [r4, #24]
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	da5c      	bge.n	8007d96 <d_type+0x6ba>
 8007cdc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007ce0:	6921      	ldr	r1, [r4, #16]
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	188d      	adds	r5, r1, r2
 8007ce8:	6163      	str	r3, [r4, #20]
 8007cea:	d054      	beq.n	8007d96 <d_type+0x6ba>
 8007cec:	4b45      	ldr	r3, [pc, #276]	; (8007e04 <d_type+0x728>)
 8007cee:	2027      	movs	r0, #39	; 0x27
 8007cf0:	5488      	strb	r0, [r1, r2]
 8007cf2:	606b      	str	r3, [r5, #4]
 8007cf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007cf6:	3311      	adds	r3, #17
 8007cf8:	6323      	str	r3, [r4, #48]	; 0x30
 8007cfa:	e570      	b.n	80077de <d_type+0x102>
 8007cfc:	6963      	ldr	r3, [r4, #20]
 8007cfe:	69a2      	ldr	r2, [r4, #24]
 8007d00:	4293      	cmp	r3, r2
 8007d02:	da48      	bge.n	8007d96 <d_type+0x6ba>
 8007d04:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007d08:	6921      	ldr	r1, [r4, #16]
 8007d0a:	0092      	lsls	r2, r2, #2
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	188d      	adds	r5, r1, r2
 8007d10:	6163      	str	r3, [r4, #20]
 8007d12:	d040      	beq.n	8007d96 <d_type+0x6ba>
 8007d14:	2027      	movs	r0, #39	; 0x27
 8007d16:	4b3c      	ldr	r3, [pc, #240]	; (8007e08 <d_type+0x72c>)
 8007d18:	e788      	b.n	8007c2c <d_type+0x550>
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	493b      	ldr	r1, [pc, #236]	; (8007e0c <d_type+0x730>)
 8007d1e:	2204      	movs	r2, #4
 8007d20:	f7fc fb56 	bl	80043d0 <d_make_name>
 8007d24:	4605      	mov	r5, r0
 8007d26:	e55a      	b.n	80077de <d_type+0x102>
 8007d28:	6963      	ldr	r3, [r4, #20]
 8007d2a:	69a2      	ldr	r2, [r4, #24]
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	f280 8085 	bge.w	8007e3c <d_type+0x760>
 8007d32:	6925      	ldr	r5, [r4, #16]
 8007d34:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007d38:	0092      	lsls	r2, r2, #2
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	18a9      	adds	r1, r5, r2
 8007d3e:	262c      	movs	r6, #44	; 0x2c
 8007d40:	6163      	str	r3, [r4, #20]
 8007d42:	9101      	str	r1, [sp, #4]
 8007d44:	54ae      	strb	r6, [r5, r2]
 8007d46:	7883      	ldrb	r3, [r0, #2]
 8007d48:	3b30      	subs	r3, #48	; 0x30
 8007d4a:	2b09      	cmp	r3, #9
 8007d4c:	bf8c      	ite	hi
 8007d4e:	2300      	movhi	r3, #0
 8007d50:	2301      	movls	r3, #1
 8007d52:	810b      	strh	r3, [r1, #8]
 8007d54:	b11b      	cbz	r3, 8007d5e <d_type+0x682>
 8007d56:	f104 000c 	add.w	r0, r4, #12
 8007d5a:	f7fc fcdf 	bl	800471c <d_number.isra.0>
 8007d5e:	4620      	mov	r0, r4
 8007d60:	9d01      	ldr	r5, [sp, #4]
 8007d62:	f7ff fcbb 	bl	80076dc <d_type>
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	6068      	str	r0, [r5, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f43f ad89 	beq.w	8007884 <d_type+0x1a8>
 8007d72:	f104 000c 	add.w	r0, r4, #12
 8007d76:	f7fc fcd1 	bl	800471c <d_number.isra.0>
 8007d7a:	68e2      	ldr	r2, [r4, #12]
 8007d7c:	7813      	ldrb	r3, [r2, #0]
 8007d7e:	b13b      	cbz	r3, 8007d90 <d_type+0x6b4>
 8007d80:	1c53      	adds	r3, r2, #1
 8007d82:	60e3      	str	r3, [r4, #12]
 8007d84:	7813      	ldrb	r3, [r2, #0]
 8007d86:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8007d8a:	fab3 f383 	clz	r3, r3
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	9d01      	ldr	r5, [sp, #4]
 8007d92:	816b      	strh	r3, [r5, #10]
 8007d94:	e523      	b.n	80077de <d_type+0x102>
 8007d96:	2300      	movs	r3, #0
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	deff      	udf	#255	; 0xff
 8007d9e:	2500      	movs	r5, #0
 8007da0:	3101      	adds	r1, #1
 8007da2:	60e1      	str	r1, [r4, #12]
 8007da4:	4620      	mov	r0, r4
 8007da6:	f7ff fc99 	bl	80076dc <d_type>
 8007daa:	462a      	mov	r2, r5
 8007dac:	4603      	mov	r3, r0
 8007dae:	212a      	movs	r1, #42	; 0x2a
 8007db0:	4620      	mov	r0, r4
 8007db2:	f7fc fac1 	bl	8004338 <d_make_comp>
 8007db6:	4605      	mov	r5, r0
 8007db8:	e65a      	b.n	8007a70 <d_type+0x394>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007dbe:	6363      	str	r3, [r4, #52]	; 0x34
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f004 fc23 	bl	800c60c <d_expression_1>
 8007dc6:	6365      	str	r5, [r4, #52]	; 0x34
 8007dc8:	4605      	mov	r5, r0
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	f47f ada1 	bne.w	8007912 <d_type+0x236>
 8007dd0:	e5a4      	b.n	800791c <d_type+0x240>
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f002 fb40 	bl	800a458 <d_name>
 8007dd8:	4605      	mov	r5, r0
 8007dda:	9001      	str	r0, [sp, #4]
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f43f ad51 	beq.w	8007884 <d_type+0x1a8>
 8007de2:	7803      	ldrb	r3, [r0, #0]
 8007de4:	2b18      	cmp	r3, #24
 8007de6:	f47f ad6c 	bne.w	80078c2 <d_type+0x1e6>
 8007dea:	e4f8      	b.n	80077de <d_type+0x102>
 8007dec:	0801cf24 	.word	0x0801cf24
 8007df0:	0801d254 	.word	0x0801d254
 8007df4:	0801d22c 	.word	0x0801d22c
 8007df8:	0801d1f0 	.word	0x0801d1f0
 8007dfc:	0801d218 	.word	0x0801d218
 8007e00:	0801d240 	.word	0x0801d240
 8007e04:	0801d268 	.word	0x0801d268
 8007e08:	0801d204 	.word	0x0801d204
 8007e0c:	0801ddfc 	.word	0x0801ddfc
 8007e10:	4620      	mov	r0, r4
 8007e12:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8007e16:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8007e1a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8007e1c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007e1e:	f001 f813 	bl	8008e48 <d_template_args>
 8007e22:	68e2      	ldr	r2, [r4, #12]
 8007e24:	7812      	ldrb	r2, [r2, #0]
 8007e26:	2a49      	cmp	r2, #73	; 0x49
 8007e28:	d06a      	beq.n	8007f00 <d_type+0x824>
 8007e2a:	6325      	str	r5, [r4, #48]	; 0x30
 8007e2c:	60e6      	str	r6, [r4, #12]
 8007e2e:	f8c4 9014 	str.w	r9, [r4, #20]
 8007e32:	f8c4 8020 	str.w	r8, [r4, #32]
 8007e36:	62a7      	str	r7, [r4, #40]	; 0x28
 8007e38:	9d01      	ldr	r5, [sp, #4]
 8007e3a:	e540      	b.n	80078be <d_type+0x1e2>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	701b      	strb	r3, [r3, #0]
 8007e40:	deff      	udf	#255	; 0xff
 8007e42:	78c3      	ldrb	r3, [r0, #3]
 8007e44:	2b6e      	cmp	r3, #110	; 0x6e
 8007e46:	f47f acec 	bne.w	8007822 <d_type+0x146>
 8007e4a:	3004      	adds	r0, #4
 8007e4c:	60e0      	str	r0, [r4, #12]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 feba 	bl	8008bc8 <d_unqualified_name>
 8007e54:	4605      	mov	r5, r0
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f000 814f 	beq.w	80080fa <d_type+0xa1e>
 8007e5c:	68e3      	ldr	r3, [r4, #12]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b49      	cmp	r3, #73	; 0x49
 8007e62:	f47f acfd 	bne.w	8007860 <d_type+0x184>
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 ffee 	bl	8008e48 <d_template_args>
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2104      	movs	r1, #4
 8007e72:	4620      	mov	r0, r4
 8007e74:	f7fc fa60 	bl	8004338 <d_make_comp>
 8007e78:	e4f2      	b.n	8007860 <d_type+0x184>
 8007e7a:	1cc3      	adds	r3, r0, #3
 8007e7c:	2501      	movs	r5, #1
 8007e7e:	60e3      	str	r3, [r4, #12]
 8007e80:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8007e82:	6365      	str	r5, [r4, #52]	; 0x34
 8007e84:	78c3      	ldrb	r3, [r0, #3]
 8007e86:	2b4c      	cmp	r3, #76	; 0x4c
 8007e88:	f000 81e5 	beq.w	8008256 <d_type+0xb7a>
 8007e8c:	2b54      	cmp	r3, #84	; 0x54
 8007e8e:	f000 81dd 	beq.w	800824c <d_type+0xb70>
 8007e92:	2b73      	cmp	r3, #115	; 0x73
 8007e94:	f000 81c7 	beq.w	8008226 <d_type+0xb4a>
 8007e98:	2b66      	cmp	r3, #102	; 0x66
 8007e9a:	f000 81a6 	beq.w	80081ea <d_type+0xb0e>
 8007e9e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007ea2:	2a09      	cmp	r2, #9
 8007ea4:	f240 8132 	bls.w	800810c <d_type+0xa30>
 8007ea8:	2b6f      	cmp	r3, #111	; 0x6f
 8007eaa:	f000 8129 	beq.w	8008100 <d_type+0xa24>
 8007eae:	2b69      	cmp	r3, #105	; 0x69
 8007eb0:	f040 8514 	bne.w	80088dc <d_type+0x1200>
 8007eb4:	7903      	ldrb	r3, [r0, #4]
 8007eb6:	2b6c      	cmp	r3, #108	; 0x6c
 8007eb8:	f000 84ff 	beq.w	80088ba <d_type+0x11de>
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fe01 	bl	8008ac4 <d_operator_name>
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f000 8206 	beq.w	80082d6 <d_type+0xbfa>
 8007eca:	7803      	ldrb	r3, [r0, #0]
 8007ecc:	2b31      	cmp	r3, #49	; 0x31
 8007ece:	f000 81e5 	beq.w	800829c <d_type+0xbc0>
 8007ed2:	2b32      	cmp	r3, #50	; 0x32
 8007ed4:	f000 831b 	beq.w	800850e <d_type+0xe32>
 8007ed8:	2b33      	cmp	r3, #51	; 0x33
 8007eda:	f040 81fc 	bne.w	80082d6 <d_type+0xbfa>
 8007ede:	68e3      	ldr	r3, [r4, #12]
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	2a5f      	cmp	r2, #95	; 0x5f
 8007ee4:	f000 81d3 	beq.w	800828e <d_type+0xbb2>
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f004 fb8f 	bl	800c60c <d_expression_1>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	2135      	movs	r1, #53	; 0x35
 8007ef6:	f7fc fa1f 	bl	8004338 <d_make_comp>
 8007efa:	4605      	mov	r5, r0
 8007efc:	6367      	str	r7, [r4, #52]	; 0x34
 8007efe:	e6b9      	b.n	8007c74 <d_type+0x598>
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f43f acbe 	beq.w	8007884 <d_type+0x1a8>
 8007f08:	6a22      	ldr	r2, [r4, #32]
 8007f0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f0c:	428a      	cmp	r2, r1
 8007f0e:	f6bf acb9 	bge.w	8007884 <d_type+0x1a8>
 8007f12:	69e5      	ldr	r5, [r4, #28]
 8007f14:	1c51      	adds	r1, r2, #1
 8007f16:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8007f1a:	9a01      	ldr	r2, [sp, #4]
 8007f1c:	6221      	str	r1, [r4, #32]
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2104      	movs	r1, #4
 8007f22:	4620      	mov	r0, r4
 8007f24:	f7fc fa08 	bl	8004338 <d_make_comp>
 8007f28:	4605      	mov	r5, r0
 8007f2a:	9001      	str	r0, [sp, #4]
 8007f2c:	e4c7      	b.n	80078be <d_type+0x1e2>
 8007f2e:	78c3      	ldrb	r3, [r0, #3]
 8007f30:	2b70      	cmp	r3, #112	; 0x70
 8007f32:	f47f ac76 	bne.w	8007822 <d_type+0x146>
 8007f36:	1d03      	adds	r3, r0, #4
 8007f38:	60e3      	str	r3, [r4, #12]
 8007f3a:	7903      	ldrb	r3, [r0, #4]
 8007f3c:	2b54      	cmp	r3, #84	; 0x54
 8007f3e:	f040 80d6 	bne.w	80080ee <d_type+0xa12>
 8007f42:	3005      	adds	r0, #5
 8007f44:	60e0      	str	r0, [r4, #12]
 8007f46:	2500      	movs	r5, #0
 8007f48:	6962      	ldr	r2, [r4, #20]
 8007f4a:	69a3      	ldr	r3, [r4, #24]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	f280 80d4 	bge.w	80080fa <d_type+0xa1e>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6921      	ldr	r1, [r4, #16]
 8007f56:	fb03 f302 	mul.w	r3, r3, r2
 8007f5a:	3201      	adds	r2, #1
 8007f5c:	6162      	str	r2, [r4, #20]
 8007f5e:	18ca      	adds	r2, r1, r3
 8007f60:	f000 84c8 	beq.w	80088f4 <d_type+0x1218>
 8007f64:	2006      	movs	r0, #6
 8007f66:	54c8      	strb	r0, [r1, r3]
 8007f68:	4610      	mov	r0, r2
 8007f6a:	6055      	str	r5, [r2, #4]
 8007f6c:	e478      	b.n	8007860 <d_type+0x184>
 8007f6e:	78c3      	ldrb	r3, [r0, #3]
 8007f70:	2b72      	cmp	r3, #114	; 0x72
 8007f72:	f000 810c 	beq.w	800818e <d_type+0xab2>
 8007f76:	2b70      	cmp	r3, #112	; 0x70
 8007f78:	f47f ac53 	bne.w	8007822 <d_type+0x146>
 8007f7c:	3004      	adds	r0, #4
 8007f7e:	60e0      	str	r0, [r4, #12]
 8007f80:	4620      	mov	r0, r4
 8007f82:	f004 fb43 	bl	800c60c <d_expression_1>
 8007f86:	2149      	movs	r1, #73	; 0x49
 8007f88:	4602      	mov	r2, r0
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f7fc f9d3 	bl	8004338 <d_make_comp>
 8007f92:	e465      	b.n	8007860 <d_type+0x184>
 8007f94:	78c3      	ldrb	r3, [r0, #3]
 8007f96:	2b6c      	cmp	r3, #108	; 0x6c
 8007f98:	f47f ac43 	bne.w	8007822 <d_type+0x146>
 8007f9c:	2500      	movs	r5, #0
 8007f9e:	68e3      	ldr	r3, [r4, #12]
 8007fa0:	3302      	adds	r3, #2
 8007fa2:	60e3      	str	r3, [r4, #12]
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	2145      	movs	r1, #69	; 0x45
 8007fa8:	f003 f864 	bl	800b074 <d_exprlist>
 8007fac:	462a      	mov	r2, r5
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2130      	movs	r1, #48	; 0x30
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f7fc f9c0 	bl	8004338 <d_make_comp>
 8007fb8:	e452      	b.n	8007860 <d_type+0x184>
 8007fba:	6841      	ldr	r1, [r0, #4]
 8007fbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007fbe:	688b      	ldr	r3, [r1, #8]
 8007fc0:	680e      	ldr	r6, [r1, #0]
 8007fc2:	49c6      	ldr	r1, [pc, #792]	; (80082dc <d_type+0xc00>)
 8007fc4:	3b02      	subs	r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	6323      	str	r3, [r4, #48]	; 0x30
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f005 fdcc 	bl	800db68 <strcmp>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f000 84d5 	beq.w	8008980 <d_type+0x12a4>
 8007fd6:	686b      	ldr	r3, [r5, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	f200 808d 	bhi.w	80080fa <d_type+0xa1e>
 8007fe0:	e8df f003 	tbb	[pc, r3]
 8007fe4:	0340b57d 	.word	0x0340b57d
 8007fe8:	2600      	movs	r6, #0
 8007fea:	4630      	mov	r0, r6
 8007fec:	49bc      	ldr	r1, [pc, #752]	; (80082e0 <d_type+0xc04>)
 8007fee:	f005 fdbb 	bl	800db68 <strcmp>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f000 849b 	beq.w	800892e <d_type+0x1252>
 8007ff8:	7833      	ldrb	r3, [r6, #0]
 8007ffa:	2b6e      	cmp	r3, #110	; 0x6e
 8007ffc:	d17d      	bne.n	80080fa <d_type+0xa1e>
 8007ffe:	7873      	ldrb	r3, [r6, #1]
 8008000:	2b77      	cmp	r3, #119	; 0x77
 8008002:	d001      	beq.n	8008008 <d_type+0x92c>
 8008004:	2b61      	cmp	r3, #97	; 0x61
 8008006:	d178      	bne.n	80080fa <d_type+0xa1e>
 8008008:	215f      	movs	r1, #95	; 0x5f
 800800a:	4620      	mov	r0, r4
 800800c:	f003 f832 	bl	800b074 <d_exprlist>
 8008010:	4606      	mov	r6, r0
 8008012:	4620      	mov	r0, r4
 8008014:	f7ff fb62 	bl	80076dc <d_type>
 8008018:	68e3      	ldr	r3, [r4, #12]
 800801a:	781a      	ldrb	r2, [r3, #0]
 800801c:	2a45      	cmp	r2, #69	; 0x45
 800801e:	4680      	mov	r8, r0
 8008020:	f000 8480 	beq.w	8008924 <d_type+0x1248>
 8008024:	2a70      	cmp	r2, #112	; 0x70
 8008026:	f000 8471 	beq.w	800890c <d_type+0x1230>
 800802a:	2a69      	cmp	r2, #105	; 0x69
 800802c:	d165      	bne.n	80080fa <d_type+0xa1e>
 800802e:	785b      	ldrb	r3, [r3, #1]
 8008030:	2b6c      	cmp	r3, #108	; 0x6c
 8008032:	d162      	bne.n	80080fa <d_type+0xa1e>
 8008034:	4620      	mov	r0, r4
 8008036:	f004 fae9 	bl	800c60c <d_expression_1>
 800803a:	4642      	mov	r2, r8
 800803c:	4603      	mov	r3, r0
 800803e:	213a      	movs	r1, #58	; 0x3a
 8008040:	4620      	mov	r0, r4
 8008042:	f7fc f979 	bl	8004338 <d_make_comp>
 8008046:	4632      	mov	r2, r6
 8008048:	4603      	mov	r3, r0
 800804a:	2139      	movs	r1, #57	; 0x39
 800804c:	4620      	mov	r0, r4
 800804e:	f7fc f973 	bl	8004338 <d_make_comp>
 8008052:	462a      	mov	r2, r5
 8008054:	4603      	mov	r3, r0
 8008056:	2138      	movs	r1, #56	; 0x38
 8008058:	4620      	mov	r0, r4
 800805a:	f7fc f96d 	bl	8004338 <d_make_comp>
 800805e:	f7ff bbff 	b.w	8007860 <d_type+0x184>
 8008062:	2600      	movs	r6, #0
 8008064:	686b      	ldr	r3, [r5, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	785a      	ldrb	r2, [r3, #1]
 800806a:	2a63      	cmp	r2, #99	; 0x63
 800806c:	f000 8479 	beq.w	8008962 <d_type+0x1286>
 8008070:	4620      	mov	r0, r4
 8008072:	f004 facb 	bl	800c60c <d_expression_1>
 8008076:	4680      	mov	r8, r0
 8008078:	4630      	mov	r0, r6
 800807a:	499a      	ldr	r1, [pc, #616]	; (80082e4 <d_type+0xc08>)
 800807c:	f005 fd74 	bl	800db68 <strcmp>
 8008080:	2800      	cmp	r0, #0
 8008082:	f000 8467 	beq.w	8008954 <d_type+0x1278>
 8008086:	4630      	mov	r0, r6
 8008088:	4997      	ldr	r1, [pc, #604]	; (80082e8 <d_type+0xc0c>)
 800808a:	f005 fd6d 	bl	800db68 <strcmp>
 800808e:	b130      	cbz	r0, 800809e <d_type+0x9c2>
 8008090:	4630      	mov	r0, r6
 8008092:	4996      	ldr	r1, [pc, #600]	; (80082ec <d_type+0xc10>)
 8008094:	f005 fd68 	bl	800db68 <strcmp>
 8008098:	2800      	cmp	r0, #0
 800809a:	f040 8455 	bne.w	8008948 <d_type+0x126c>
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 fd92 	bl	8008bc8 <d_unqualified_name>
 80080a4:	68e3      	ldr	r3, [r4, #12]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b49      	cmp	r3, #73	; 0x49
 80080aa:	4606      	mov	r6, r0
 80080ac:	d109      	bne.n	80080c2 <d_type+0x9e6>
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 feca 	bl	8008e48 <d_template_args>
 80080b4:	4632      	mov	r2, r6
 80080b6:	4603      	mov	r3, r0
 80080b8:	2104      	movs	r1, #4
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7fc f93c 	bl	8004338 <d_make_comp>
 80080c0:	4606      	mov	r6, r0
 80080c2:	4642      	mov	r2, r8
 80080c4:	4633      	mov	r3, r6
 80080c6:	4620      	mov	r0, r4
 80080c8:	2137      	movs	r1, #55	; 0x37
 80080ca:	f7fc f935 	bl	8004338 <d_make_comp>
 80080ce:	462a      	mov	r2, r5
 80080d0:	4603      	mov	r3, r0
 80080d2:	2136      	movs	r1, #54	; 0x36
 80080d4:	4620      	mov	r0, r4
 80080d6:	f7fc f92f 	bl	8004338 <d_make_comp>
 80080da:	f7ff bbc1 	b.w	8007860 <d_type+0x184>
 80080de:	462a      	mov	r2, r5
 80080e0:	4620      	mov	r0, r4
 80080e2:	2134      	movs	r1, #52	; 0x34
 80080e4:	2300      	movs	r3, #0
 80080e6:	f7fc f927 	bl	8004338 <d_make_comp>
 80080ea:	f7ff bbb9 	b.w	8007860 <d_type+0x184>
 80080ee:	4620      	mov	r0, r4
 80080f0:	f7fc fb58 	bl	80047a4 <d_compact_number>
 80080f4:	1c45      	adds	r5, r0, #1
 80080f6:	f47f af27 	bne.w	8007f48 <d_type+0x86c>
 80080fa:	2000      	movs	r0, #0
 80080fc:	f7ff bbb0 	b.w	8007860 <d_type+0x184>
 8008100:	7903      	ldrb	r3, [r0, #4]
 8008102:	2b6e      	cmp	r3, #110	; 0x6e
 8008104:	f47f aeda 	bne.w	8007ebc <d_type+0x7e0>
 8008108:	3005      	adds	r0, #5
 800810a:	60e0      	str	r0, [r4, #12]
 800810c:	4620      	mov	r0, r4
 800810e:	f000 fd5b 	bl	8008bc8 <d_unqualified_name>
 8008112:	4605      	mov	r5, r0
 8008114:	2800      	cmp	r0, #0
 8008116:	f000 80de 	beq.w	80082d6 <d_type+0xbfa>
 800811a:	68e3      	ldr	r3, [r4, #12]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b49      	cmp	r3, #73	; 0x49
 8008120:	f47f aeec 	bne.w	8007efc <d_type+0x820>
 8008124:	4620      	mov	r0, r4
 8008126:	f000 fe8f 	bl	8008e48 <d_template_args>
 800812a:	462a      	mov	r2, r5
 800812c:	4603      	mov	r3, r0
 800812e:	2104      	movs	r1, #4
 8008130:	4620      	mov	r0, r4
 8008132:	f7fc f901 	bl	8004338 <d_make_comp>
 8008136:	4605      	mov	r5, r0
 8008138:	e6e0      	b.n	8007efc <d_type+0x820>
 800813a:	4620      	mov	r0, r4
 800813c:	f7fc fb4a 	bl	80047d4 <d_template_param>
 8008140:	f7ff bb8e 	b.w	8007860 <d_type+0x184>
 8008144:	4620      	mov	r0, r4
 8008146:	f7ff fa69 	bl	800761c <d_expr_primary>
 800814a:	f7ff bb89 	b.w	8007860 <d_type+0x184>
 800814e:	7833      	ldrb	r3, [r6, #0]
 8008150:	2b70      	cmp	r3, #112	; 0x70
 8008152:	d002      	beq.n	800815a <d_type+0xa7e>
 8008154:	2b6d      	cmp	r3, #109	; 0x6d
 8008156:	f47f ab7a 	bne.w	800784e <d_type+0x172>
 800815a:	7872      	ldrb	r2, [r6, #1]
 800815c:	429a      	cmp	r2, r3
 800815e:	f47f ab76 	bne.w	800784e <d_type+0x172>
 8008162:	68e3      	ldr	r3, [r4, #12]
 8008164:	781a      	ldrb	r2, [r3, #0]
 8008166:	2a5f      	cmp	r2, #95	; 0x5f
 8008168:	f000 840f 	beq.w	800898a <d_type+0x12ae>
 800816c:	4620      	mov	r0, r4
 800816e:	f004 fa4d 	bl	800c60c <d_expression_1>
 8008172:	4602      	mov	r2, r0
 8008174:	4613      	mov	r3, r2
 8008176:	4620      	mov	r0, r4
 8008178:	2137      	movs	r1, #55	; 0x37
 800817a:	f7fc f8dd 	bl	8004338 <d_make_comp>
 800817e:	4603      	mov	r3, r0
 8008180:	462a      	mov	r2, r5
 8008182:	4620      	mov	r0, r4
 8008184:	2135      	movs	r1, #53	; 0x35
 8008186:	f7fc f8d7 	bl	8004338 <d_make_comp>
 800818a:	f7ff bb69 	b.w	8007860 <d_type+0x184>
 800818e:	3004      	adds	r0, #4
 8008190:	60e0      	str	r0, [r4, #12]
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff faa2 	bl	80076dc <d_type>
 8008198:	4606      	mov	r6, r0
 800819a:	4620      	mov	r0, r4
 800819c:	f000 fd14 	bl	8008bc8 <d_unqualified_name>
 80081a0:	68e3      	ldr	r3, [r4, #12]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2b49      	cmp	r3, #73	; 0x49
 80081a6:	4680      	mov	r8, r0
 80081a8:	f000 83fb 	beq.w	80089a2 <d_type+0x12c6>
 80081ac:	4603      	mov	r3, r0
 80081ae:	4629      	mov	r1, r5
 80081b0:	4632      	mov	r2, r6
 80081b2:	4620      	mov	r0, r4
 80081b4:	f7fc f8c0 	bl	8004338 <d_make_comp>
 80081b8:	f7ff bb52 	b.w	8007860 <d_type+0x184>
 80081bc:	686b      	ldr	r3, [r5, #4]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d89b      	bhi.n	80080fa <d_type+0xa1e>
 80081c2:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <d_type+0xaec>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	080080df 	.word	0x080080df
 80081cc:	0800784f 	.word	0x0800784f
 80081d0:	08008063 	.word	0x08008063
 80081d4:	08007fe9 	.word	0x08007fe9
 80081d8:	78c3      	ldrb	r3, [r0, #3]
 80081da:	2b6c      	cmp	r3, #108	; 0x6c
 80081dc:	f47f ab21 	bne.w	8007822 <d_type+0x146>
 80081e0:	4620      	mov	r0, r4
 80081e2:	f7ff fa7b 	bl	80076dc <d_type>
 80081e6:	4605      	mov	r5, r0
 80081e8:	e6d9      	b.n	8007f9e <d_type+0x8c2>
 80081ea:	7903      	ldrb	r3, [r0, #4]
 80081ec:	2b70      	cmp	r3, #112	; 0x70
 80081ee:	f47f ae65 	bne.w	8007ebc <d_type+0x7e0>
 80081f2:	1d43      	adds	r3, r0, #5
 80081f4:	60e3      	str	r3, [r4, #12]
 80081f6:	7943      	ldrb	r3, [r0, #5]
 80081f8:	2b54      	cmp	r3, #84	; 0x54
 80081fa:	d167      	bne.n	80082cc <d_type+0xbf0>
 80081fc:	3006      	adds	r0, #6
 80081fe:	60e0      	str	r0, [r4, #12]
 8008200:	2000      	movs	r0, #0
 8008202:	6962      	ldr	r2, [r4, #20]
 8008204:	69a3      	ldr	r3, [r4, #24]
 8008206:	429a      	cmp	r2, r3
 8008208:	da65      	bge.n	80082d6 <d_type+0xbfa>
 800820a:	230c      	movs	r3, #12
 800820c:	6921      	ldr	r1, [r4, #16]
 800820e:	fb03 f302 	mul.w	r3, r3, r2
 8008212:	18cd      	adds	r5, r1, r3
 8008214:	f102 0201 	add.w	r2, r2, #1
 8008218:	6162      	str	r2, [r4, #20]
 800821a:	f43f ae6f 	beq.w	8007efc <d_type+0x820>
 800821e:	2206      	movs	r2, #6
 8008220:	54ca      	strb	r2, [r1, r3]
 8008222:	6068      	str	r0, [r5, #4]
 8008224:	e66a      	b.n	8007efc <d_type+0x820>
 8008226:	7903      	ldrb	r3, [r0, #4]
 8008228:	2b72      	cmp	r3, #114	; 0x72
 800822a:	d019      	beq.n	8008260 <d_type+0xb84>
 800822c:	2b70      	cmp	r3, #112	; 0x70
 800822e:	f47f ae45 	bne.w	8007ebc <d_type+0x7e0>
 8008232:	3005      	adds	r0, #5
 8008234:	60e0      	str	r0, [r4, #12]
 8008236:	4620      	mov	r0, r4
 8008238:	f004 f9e8 	bl	800c60c <d_expression_1>
 800823c:	2149      	movs	r1, #73	; 0x49
 800823e:	4602      	mov	r2, r0
 8008240:	2300      	movs	r3, #0
 8008242:	4620      	mov	r0, r4
 8008244:	f7fc f878 	bl	8004338 <d_make_comp>
 8008248:	4605      	mov	r5, r0
 800824a:	e657      	b.n	8007efc <d_type+0x820>
 800824c:	4620      	mov	r0, r4
 800824e:	f7fc fac1 	bl	80047d4 <d_template_param>
 8008252:	4605      	mov	r5, r0
 8008254:	e652      	b.n	8007efc <d_type+0x820>
 8008256:	4620      	mov	r0, r4
 8008258:	f7ff f9e0 	bl	800761c <d_expr_primary>
 800825c:	4605      	mov	r5, r0
 800825e:	e64d      	b.n	8007efc <d_type+0x820>
 8008260:	3005      	adds	r0, #5
 8008262:	60e0      	str	r0, [r4, #12]
 8008264:	4620      	mov	r0, r4
 8008266:	f7ff fa39 	bl	80076dc <d_type>
 800826a:	4606      	mov	r6, r0
 800826c:	4620      	mov	r0, r4
 800826e:	f000 fcab 	bl	8008bc8 <d_unqualified_name>
 8008272:	68e3      	ldr	r3, [r4, #12]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b49      	cmp	r3, #73	; 0x49
 8008278:	4680      	mov	r8, r0
 800827a:	f000 8157 	beq.w	800852c <d_type+0xe50>
 800827e:	4629      	mov	r1, r5
 8008280:	4603      	mov	r3, r0
 8008282:	4632      	mov	r2, r6
 8008284:	4620      	mov	r0, r4
 8008286:	f7fc f857 	bl	8004338 <d_make_comp>
 800828a:	4605      	mov	r5, r0
 800828c:	e636      	b.n	8007efc <d_type+0x820>
 800828e:	3301      	adds	r3, #1
 8008290:	60e3      	str	r3, [r4, #12]
 8008292:	4620      	mov	r0, r4
 8008294:	2145      	movs	r1, #69	; 0x45
 8008296:	f002 feed 	bl	800b074 <d_exprlist>
 800829a:	e628      	b.n	8007eee <d_type+0x812>
 800829c:	6841      	ldr	r1, [r0, #4]
 800829e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80082a0:	688b      	ldr	r3, [r1, #8]
 80082a2:	680d      	ldr	r5, [r1, #0]
 80082a4:	490d      	ldr	r1, [pc, #52]	; (80082dc <d_type+0xc00>)
 80082a6:	3b02      	subs	r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	6323      	str	r3, [r4, #48]	; 0x30
 80082ac:	4628      	mov	r0, r5
 80082ae:	f005 fc5b 	bl	800db68 <strcmp>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	f000 8127 	beq.w	8008506 <d_type+0xe2a>
 80082b8:	6873      	ldr	r3, [r6, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d80a      	bhi.n	80082d6 <d_type+0xbfa>
 80082c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80082c4:	00f20119 	.word	0x00f20119
 80082c8:	001700a6 	.word	0x001700a6
 80082cc:	4620      	mov	r0, r4
 80082ce:	f7fc fa69 	bl	80047a4 <d_compact_number>
 80082d2:	3001      	adds	r0, #1
 80082d4:	d195      	bne.n	8008202 <d_type+0xb26>
 80082d6:	2500      	movs	r5, #0
 80082d8:	e610      	b.n	8007efc <d_type+0x820>
 80082da:	bf00      	nop
 80082dc:	0801dfe8 	.word	0x0801dfe8
 80082e0:	0801dd28 	.word	0x0801dd28
 80082e4:	0801dd20 	.word	0x0801dd20
 80082e8:	0801ddf4 	.word	0x0801ddf4
 80082ec:	0801ddf8 	.word	0x0801ddf8
 80082f0:	2500      	movs	r5, #0
 80082f2:	4628      	mov	r0, r5
 80082f4:	49ad      	ldr	r1, [pc, #692]	; (80085ac <d_type+0xed0>)
 80082f6:	f005 fc37 	bl	800db68 <strcmp>
 80082fa:	4682      	mov	sl, r0
 80082fc:	b398      	cbz	r0, 8008366 <d_type+0xc8a>
 80082fe:	782b      	ldrb	r3, [r5, #0]
 8008300:	2b6e      	cmp	r3, #110	; 0x6e
 8008302:	d1e8      	bne.n	80082d6 <d_type+0xbfa>
 8008304:	786b      	ldrb	r3, [r5, #1]
 8008306:	2b77      	cmp	r3, #119	; 0x77
 8008308:	d001      	beq.n	800830e <d_type+0xc32>
 800830a:	2b61      	cmp	r3, #97	; 0x61
 800830c:	d1e3      	bne.n	80082d6 <d_type+0xbfa>
 800830e:	215f      	movs	r1, #95	; 0x5f
 8008310:	4620      	mov	r0, r4
 8008312:	f002 feaf 	bl	800b074 <d_exprlist>
 8008316:	4680      	mov	r8, r0
 8008318:	4620      	mov	r0, r4
 800831a:	f7ff f9df 	bl	80076dc <d_type>
 800831e:	68e3      	ldr	r3, [r4, #12]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	2a45      	cmp	r2, #69	; 0x45
 8008324:	4681      	mov	r9, r0
 8008326:	d06e      	beq.n	8008406 <d_type+0xd2a>
 8008328:	2a70      	cmp	r2, #112	; 0x70
 800832a:	d060      	beq.n	80083ee <d_type+0xd12>
 800832c:	2a69      	cmp	r2, #105	; 0x69
 800832e:	d1d2      	bne.n	80082d6 <d_type+0xbfa>
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b6c      	cmp	r3, #108	; 0x6c
 8008334:	d1cf      	bne.n	80082d6 <d_type+0xbfa>
 8008336:	4620      	mov	r0, r4
 8008338:	f004 f968 	bl	800c60c <d_expression_1>
 800833c:	4605      	mov	r5, r0
 800833e:	462b      	mov	r3, r5
 8008340:	464a      	mov	r2, r9
 8008342:	213a      	movs	r1, #58	; 0x3a
 8008344:	4620      	mov	r0, r4
 8008346:	f7fb fff7 	bl	8004338 <d_make_comp>
 800834a:	4642      	mov	r2, r8
 800834c:	4603      	mov	r3, r0
 800834e:	2139      	movs	r1, #57	; 0x39
 8008350:	4620      	mov	r0, r4
 8008352:	f7fb fff1 	bl	8004338 <d_make_comp>
 8008356:	4632      	mov	r2, r6
 8008358:	4603      	mov	r3, r0
 800835a:	2138      	movs	r1, #56	; 0x38
 800835c:	4620      	mov	r0, r4
 800835e:	f7fb ffeb 	bl	8004338 <d_make_comp>
 8008362:	4605      	mov	r5, r0
 8008364:	e5ca      	b.n	8007efc <d_type+0x820>
 8008366:	4620      	mov	r0, r4
 8008368:	f004 f950 	bl	800c60c <d_expression_1>
 800836c:	4680      	mov	r8, r0
 800836e:	4620      	mov	r0, r4
 8008370:	f004 f94c 	bl	800c60c <d_expression_1>
 8008374:	68e1      	ldr	r1, [r4, #12]
 8008376:	780a      	ldrb	r2, [r1, #0]
 8008378:	2a4c      	cmp	r2, #76	; 0x4c
 800837a:	4681      	mov	r9, r0
 800837c:	f000 8287 	beq.w	800888e <d_type+0x11b2>
 8008380:	2a54      	cmp	r2, #84	; 0x54
 8008382:	f000 827f 	beq.w	8008884 <d_type+0x11a8>
 8008386:	2a73      	cmp	r2, #115	; 0x73
 8008388:	f000 824d 	beq.w	8008826 <d_type+0x114a>
 800838c:	2a66      	cmp	r2, #102	; 0x66
 800838e:	f000 822b 	beq.w	80087e8 <d_type+0x110c>
 8008392:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008396:	2b09      	cmp	r3, #9
 8008398:	f240 820f 	bls.w	80087ba <d_type+0x10de>
 800839c:	2a6f      	cmp	r2, #111	; 0x6f
 800839e:	f000 8206 	beq.w	80087ae <d_type+0x10d2>
 80083a2:	2a69      	cmp	r2, #105	; 0x69
 80083a4:	f000 81fd 	beq.w	80087a2 <d_type+0x10c6>
 80083a8:	2a74      	cmp	r2, #116	; 0x74
 80083aa:	f000 81e3 	beq.w	8008774 <d_type+0x1098>
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 fb88 	bl	8008ac4 <d_operator_name>
 80083b4:	4605      	mov	r5, r0
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d0c1      	beq.n	800833e <d_type+0xc62>
 80083ba:	7803      	ldrb	r3, [r0, #0]
 80083bc:	2b31      	cmp	r3, #49	; 0x31
 80083be:	f000 80dd 	beq.w	800857c <d_type+0xea0>
 80083c2:	2b32      	cmp	r3, #50	; 0x32
 80083c4:	f000 80cc 	beq.w	8008560 <d_type+0xe84>
 80083c8:	2b33      	cmp	r3, #51	; 0x33
 80083ca:	f040 80c7 	bne.w	800855c <d_type+0xe80>
 80083ce:	68e3      	ldr	r3, [r4, #12]
 80083d0:	781a      	ldrb	r2, [r3, #0]
 80083d2:	2a5f      	cmp	r2, #95	; 0x5f
 80083d4:	f000 80bb 	beq.w	800854e <d_type+0xe72>
 80083d8:	4620      	mov	r0, r4
 80083da:	f004 f917 	bl	800c60c <d_expression_1>
 80083de:	462a      	mov	r2, r5
 80083e0:	4603      	mov	r3, r0
 80083e2:	2135      	movs	r1, #53	; 0x35
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7fb ffa7 	bl	8004338 <d_make_comp>
 80083ea:	4605      	mov	r5, r0
 80083ec:	e7a7      	b.n	800833e <d_type+0xc62>
 80083ee:	785a      	ldrb	r2, [r3, #1]
 80083f0:	2a69      	cmp	r2, #105	; 0x69
 80083f2:	f47f af70 	bne.w	80082d6 <d_type+0xbfa>
 80083f6:	3302      	adds	r3, #2
 80083f8:	60e3      	str	r3, [r4, #12]
 80083fa:	4620      	mov	r0, r4
 80083fc:	2145      	movs	r1, #69	; 0x45
 80083fe:	f002 fe39 	bl	800b074 <d_exprlist>
 8008402:	4605      	mov	r5, r0
 8008404:	e79b      	b.n	800833e <d_type+0xc62>
 8008406:	3301      	adds	r3, #1
 8008408:	60e3      	str	r3, [r4, #12]
 800840a:	2500      	movs	r5, #0
 800840c:	e797      	b.n	800833e <d_type+0xc62>
 800840e:	2500      	movs	r5, #0
 8008410:	6873      	ldr	r3, [r6, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	785a      	ldrb	r2, [r3, #1]
 8008416:	2a63      	cmp	r2, #99	; 0x63
 8008418:	d039      	beq.n	800848e <d_type+0xdb2>
 800841a:	4620      	mov	r0, r4
 800841c:	f004 f8f6 	bl	800c60c <d_expression_1>
 8008420:	4680      	mov	r8, r0
 8008422:	4628      	mov	r0, r5
 8008424:	4962      	ldr	r1, [pc, #392]	; (80085b0 <d_type+0xed4>)
 8008426:	f005 fb9f 	bl	800db68 <strcmp>
 800842a:	b350      	cbz	r0, 8008482 <d_type+0xda6>
 800842c:	4628      	mov	r0, r5
 800842e:	4961      	ldr	r1, [pc, #388]	; (80085b4 <d_type+0xed8>)
 8008430:	f005 fb9a 	bl	800db68 <strcmp>
 8008434:	b128      	cbz	r0, 8008442 <d_type+0xd66>
 8008436:	4628      	mov	r0, r5
 8008438:	495f      	ldr	r1, [pc, #380]	; (80085b8 <d_type+0xedc>)
 800843a:	f005 fb95 	bl	800db68 <strcmp>
 800843e:	2800      	cmp	r0, #0
 8008440:	d151      	bne.n	80084e6 <d_type+0xe0a>
 8008442:	4620      	mov	r0, r4
 8008444:	f000 fbc0 	bl	8008bc8 <d_unqualified_name>
 8008448:	68e3      	ldr	r3, [r4, #12]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b49      	cmp	r3, #73	; 0x49
 800844e:	4605      	mov	r5, r0
 8008450:	d109      	bne.n	8008466 <d_type+0xd8a>
 8008452:	4620      	mov	r0, r4
 8008454:	f000 fcf8 	bl	8008e48 <d_template_args>
 8008458:	462a      	mov	r2, r5
 800845a:	4603      	mov	r3, r0
 800845c:	2104      	movs	r1, #4
 800845e:	4620      	mov	r0, r4
 8008460:	f7fb ff6a 	bl	8004338 <d_make_comp>
 8008464:	4605      	mov	r5, r0
 8008466:	462b      	mov	r3, r5
 8008468:	4642      	mov	r2, r8
 800846a:	2137      	movs	r1, #55	; 0x37
 800846c:	4620      	mov	r0, r4
 800846e:	f7fb ff63 	bl	8004338 <d_make_comp>
 8008472:	4632      	mov	r2, r6
 8008474:	4603      	mov	r3, r0
 8008476:	2136      	movs	r1, #54	; 0x36
 8008478:	4620      	mov	r0, r4
 800847a:	f7fb ff5d 	bl	8004338 <d_make_comp>
 800847e:	4605      	mov	r5, r0
 8008480:	e53c      	b.n	8007efc <d_type+0x820>
 8008482:	4620      	mov	r0, r4
 8008484:	2145      	movs	r1, #69	; 0x45
 8008486:	f002 fdf5 	bl	800b074 <d_exprlist>
 800848a:	4605      	mov	r5, r0
 800848c:	e7eb      	b.n	8008466 <d_type+0xd8a>
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8008494:	2a01      	cmp	r2, #1
 8008496:	d902      	bls.n	800849e <d_type+0xdc2>
 8008498:	3b72      	subs	r3, #114	; 0x72
 800849a:	2b01      	cmp	r3, #1
 800849c:	d8bd      	bhi.n	800841a <d_type+0xd3e>
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff f91c 	bl	80076dc <d_type>
 80084a4:	4680      	mov	r8, r0
 80084a6:	e7bc      	b.n	8008422 <d_type+0xd46>
 80084a8:	782b      	ldrb	r3, [r5, #0]
 80084aa:	2b70      	cmp	r3, #112	; 0x70
 80084ac:	d002      	beq.n	80084b4 <d_type+0xdd8>
 80084ae:	2b6d      	cmp	r3, #109	; 0x6d
 80084b0:	f47f ad1a 	bne.w	8007ee8 <d_type+0x80c>
 80084b4:	786a      	ldrb	r2, [r5, #1]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	f47f ad16 	bne.w	8007ee8 <d_type+0x80c>
 80084bc:	68e3      	ldr	r3, [r4, #12]
 80084be:	781a      	ldrb	r2, [r3, #0]
 80084c0:	2a5f      	cmp	r2, #95	; 0x5f
 80084c2:	d015      	beq.n	80084f0 <d_type+0xe14>
 80084c4:	4620      	mov	r0, r4
 80084c6:	f004 f8a1 	bl	800c60c <d_expression_1>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4613      	mov	r3, r2
 80084ce:	4620      	mov	r0, r4
 80084d0:	2137      	movs	r1, #55	; 0x37
 80084d2:	f7fb ff31 	bl	8004338 <d_make_comp>
 80084d6:	4603      	mov	r3, r0
 80084d8:	4632      	mov	r2, r6
 80084da:	4620      	mov	r0, r4
 80084dc:	2135      	movs	r1, #53	; 0x35
 80084de:	f7fb ff2b 	bl	8004338 <d_make_comp>
 80084e2:	4605      	mov	r5, r0
 80084e4:	e50a      	b.n	8007efc <d_type+0x820>
 80084e6:	4620      	mov	r0, r4
 80084e8:	f004 f890 	bl	800c60c <d_expression_1>
 80084ec:	4605      	mov	r5, r0
 80084ee:	e7ba      	b.n	8008466 <d_type+0xd8a>
 80084f0:	3301      	adds	r3, #1
 80084f2:	60e3      	str	r3, [r4, #12]
 80084f4:	e4f8      	b.n	8007ee8 <d_type+0x80c>
 80084f6:	4632      	mov	r2, r6
 80084f8:	4620      	mov	r0, r4
 80084fa:	2134      	movs	r1, #52	; 0x34
 80084fc:	2300      	movs	r3, #0
 80084fe:	f7fb ff1b 	bl	8004338 <d_make_comp>
 8008502:	4605      	mov	r5, r0
 8008504:	e4fa      	b.n	8007efc <d_type+0x820>
 8008506:	4620      	mov	r0, r4
 8008508:	f7ff f8e8 	bl	80076dc <d_type>
 800850c:	e7e3      	b.n	80084d6 <d_type+0xdfa>
 800850e:	6873      	ldr	r3, [r6, #4]
 8008510:	2b03      	cmp	r3, #3
 8008512:	f63f aee0 	bhi.w	80082d6 <d_type+0xbfa>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <d_type+0xe40>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	080084f7 	.word	0x080084f7
 8008520:	08007ee9 	.word	0x08007ee9
 8008524:	0800840f 	.word	0x0800840f
 8008528:	080082f1 	.word	0x080082f1
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fc8b 	bl	8008e48 <d_template_args>
 8008532:	4642      	mov	r2, r8
 8008534:	4603      	mov	r3, r0
 8008536:	2104      	movs	r1, #4
 8008538:	4620      	mov	r0, r4
 800853a:	f7fb fefd 	bl	8004338 <d_make_comp>
 800853e:	4629      	mov	r1, r5
 8008540:	4603      	mov	r3, r0
 8008542:	4632      	mov	r2, r6
 8008544:	4620      	mov	r0, r4
 8008546:	f7fb fef7 	bl	8004338 <d_make_comp>
 800854a:	4605      	mov	r5, r0
 800854c:	e4d6      	b.n	8007efc <d_type+0x820>
 800854e:	3301      	adds	r3, #1
 8008550:	60e3      	str	r3, [r4, #12]
 8008552:	4620      	mov	r0, r4
 8008554:	2145      	movs	r1, #69	; 0x45
 8008556:	f002 fd8d 	bl	800b074 <d_exprlist>
 800855a:	e740      	b.n	80083de <d_type+0xd02>
 800855c:	2500      	movs	r5, #0
 800855e:	e6ee      	b.n	800833e <d_type+0xc62>
 8008560:	686b      	ldr	r3, [r5, #4]
 8008562:	2b03      	cmp	r3, #3
 8008564:	d8fa      	bhi.n	800855c <d_type+0xe80>
 8008566:	a201      	add	r2, pc, #4	; (adr r2, 800856c <d_type+0xe90>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	08008765 	.word	0x08008765
 8008570:	080083d9 	.word	0x080083d9
 8008574:	08008653 	.word	0x08008653
 8008578:	080085c1 	.word	0x080085c1
 800857c:	6841      	ldr	r1, [r0, #4]
 800857e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008580:	688b      	ldr	r3, [r1, #8]
 8008582:	f8d1 a000 	ldr.w	sl, [r1]
 8008586:	490d      	ldr	r1, [pc, #52]	; (80085bc <d_type+0xee0>)
 8008588:	3b02      	subs	r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	6323      	str	r3, [r4, #48]	; 0x30
 800858e:	4650      	mov	r0, sl
 8008590:	f005 faea 	bl	800db68 <strcmp>
 8008594:	2800      	cmp	r0, #0
 8008596:	f000 80de 	beq.w	8008756 <d_type+0x107a>
 800859a:	686b      	ldr	r3, [r5, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d8dc      	bhi.n	800855c <d_type+0xe80>
 80085a2:	e8df f003 	tbb	[pc, r3]
 80085a6:	b7df      	.short	0xb7df
 80085a8:	0f58      	.short	0x0f58
 80085aa:	bf00      	nop
 80085ac:	0801dd28 	.word	0x0801dd28
 80085b0:	0801dd20 	.word	0x0801dd20
 80085b4:	0801ddf4 	.word	0x0801ddf4
 80085b8:	0801ddf8 	.word	0x0801ddf8
 80085bc:	0801dfe8 	.word	0x0801dfe8
 80085c0:	f04f 0a00 	mov.w	sl, #0
 80085c4:	4650      	mov	r0, sl
 80085c6:	49cd      	ldr	r1, [pc, #820]	; (80088fc <d_type+0x1220>)
 80085c8:	f005 face 	bl	800db68 <strcmp>
 80085cc:	b3a8      	cbz	r0, 800863a <d_type+0xf5e>
 80085ce:	f89a 3000 	ldrb.w	r3, [sl]
 80085d2:	2b6e      	cmp	r3, #110	; 0x6e
 80085d4:	d1c2      	bne.n	800855c <d_type+0xe80>
 80085d6:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80085da:	2b77      	cmp	r3, #119	; 0x77
 80085dc:	d001      	beq.n	80085e2 <d_type+0xf06>
 80085de:	2b61      	cmp	r3, #97	; 0x61
 80085e0:	d1bc      	bne.n	800855c <d_type+0xe80>
 80085e2:	215f      	movs	r1, #95	; 0x5f
 80085e4:	4620      	mov	r0, r4
 80085e6:	f002 fd45 	bl	800b074 <d_exprlist>
 80085ea:	4682      	mov	sl, r0
 80085ec:	4620      	mov	r0, r4
 80085ee:	f7ff f875 	bl	80076dc <d_type>
 80085f2:	68e3      	ldr	r3, [r4, #12]
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	2a45      	cmp	r2, #69	; 0x45
 80085f8:	4683      	mov	fp, r0
 80085fa:	f000 8087 	beq.w	800870c <d_type+0x1030>
 80085fe:	2a70      	cmp	r2, #112	; 0x70
 8008600:	d079      	beq.n	80086f6 <d_type+0x101a>
 8008602:	2a69      	cmp	r2, #105	; 0x69
 8008604:	d1aa      	bne.n	800855c <d_type+0xe80>
 8008606:	785b      	ldrb	r3, [r3, #1]
 8008608:	2b6c      	cmp	r3, #108	; 0x6c
 800860a:	d1a7      	bne.n	800855c <d_type+0xe80>
 800860c:	4620      	mov	r0, r4
 800860e:	f003 fffd 	bl	800c60c <d_expression_1>
 8008612:	4603      	mov	r3, r0
 8008614:	465a      	mov	r2, fp
 8008616:	213a      	movs	r1, #58	; 0x3a
 8008618:	4620      	mov	r0, r4
 800861a:	f7fb fe8d 	bl	8004338 <d_make_comp>
 800861e:	4652      	mov	r2, sl
 8008620:	4603      	mov	r3, r0
 8008622:	2139      	movs	r1, #57	; 0x39
 8008624:	4620      	mov	r0, r4
 8008626:	f7fb fe87 	bl	8004338 <d_make_comp>
 800862a:	462a      	mov	r2, r5
 800862c:	4603      	mov	r3, r0
 800862e:	2138      	movs	r1, #56	; 0x38
 8008630:	4620      	mov	r0, r4
 8008632:	f7fb fe81 	bl	8004338 <d_make_comp>
 8008636:	4605      	mov	r5, r0
 8008638:	e681      	b.n	800833e <d_type+0xc62>
 800863a:	4620      	mov	r0, r4
 800863c:	f003 ffe6 	bl	800c60c <d_expression_1>
 8008640:	4682      	mov	sl, r0
 8008642:	4620      	mov	r0, r4
 8008644:	f003 ffe2 	bl	800c60c <d_expression_1>
 8008648:	4683      	mov	fp, r0
 800864a:	4620      	mov	r0, r4
 800864c:	f003 ffde 	bl	800c60c <d_expression_1>
 8008650:	e7df      	b.n	8008612 <d_type+0xf36>
 8008652:	f04f 0a00 	mov.w	sl, #0
 8008656:	686b      	ldr	r3, [r5, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	785a      	ldrb	r2, [r3, #1]
 800865c:	2a63      	cmp	r2, #99	; 0x63
 800865e:	d038      	beq.n	80086d2 <d_type+0xff6>
 8008660:	4620      	mov	r0, r4
 8008662:	f003 ffd3 	bl	800c60c <d_expression_1>
 8008666:	4683      	mov	fp, r0
 8008668:	4650      	mov	r0, sl
 800866a:	49a5      	ldr	r1, [pc, #660]	; (8008900 <d_type+0x1224>)
 800866c:	f005 fa7c 	bl	800db68 <strcmp>
 8008670:	b348      	cbz	r0, 80086c6 <d_type+0xfea>
 8008672:	4650      	mov	r0, sl
 8008674:	49a3      	ldr	r1, [pc, #652]	; (8008904 <d_type+0x1228>)
 8008676:	f005 fa77 	bl	800db68 <strcmp>
 800867a:	b120      	cbz	r0, 8008686 <d_type+0xfaa>
 800867c:	4650      	mov	r0, sl
 800867e:	49a2      	ldr	r1, [pc, #648]	; (8008908 <d_type+0x122c>)
 8008680:	f005 fa72 	bl	800db68 <strcmp>
 8008684:	bb90      	cbnz	r0, 80086ec <d_type+0x1010>
 8008686:	4620      	mov	r0, r4
 8008688:	f000 fa9e 	bl	8008bc8 <d_unqualified_name>
 800868c:	68e3      	ldr	r3, [r4, #12]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b49      	cmp	r3, #73	; 0x49
 8008692:	4682      	mov	sl, r0
 8008694:	d109      	bne.n	80086aa <d_type+0xfce>
 8008696:	4620      	mov	r0, r4
 8008698:	f000 fbd6 	bl	8008e48 <d_template_args>
 800869c:	4652      	mov	r2, sl
 800869e:	4603      	mov	r3, r0
 80086a0:	2104      	movs	r1, #4
 80086a2:	4620      	mov	r0, r4
 80086a4:	f7fb fe48 	bl	8004338 <d_make_comp>
 80086a8:	4682      	mov	sl, r0
 80086aa:	465a      	mov	r2, fp
 80086ac:	4653      	mov	r3, sl
 80086ae:	2137      	movs	r1, #55	; 0x37
 80086b0:	4620      	mov	r0, r4
 80086b2:	f7fb fe41 	bl	8004338 <d_make_comp>
 80086b6:	462a      	mov	r2, r5
 80086b8:	4603      	mov	r3, r0
 80086ba:	2136      	movs	r1, #54	; 0x36
 80086bc:	4620      	mov	r0, r4
 80086be:	f7fb fe3b 	bl	8004338 <d_make_comp>
 80086c2:	4605      	mov	r5, r0
 80086c4:	e63b      	b.n	800833e <d_type+0xc62>
 80086c6:	4620      	mov	r0, r4
 80086c8:	2145      	movs	r1, #69	; 0x45
 80086ca:	f002 fcd3 	bl	800b074 <d_exprlist>
 80086ce:	4682      	mov	sl, r0
 80086d0:	e7eb      	b.n	80086aa <d_type+0xfce>
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80086d8:	2a01      	cmp	r2, #1
 80086da:	d902      	bls.n	80086e2 <d_type+0x1006>
 80086dc:	3b72      	subs	r3, #114	; 0x72
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d8be      	bhi.n	8008660 <d_type+0xf84>
 80086e2:	4620      	mov	r0, r4
 80086e4:	f7fe fffa 	bl	80076dc <d_type>
 80086e8:	4683      	mov	fp, r0
 80086ea:	e7bd      	b.n	8008668 <d_type+0xf8c>
 80086ec:	4620      	mov	r0, r4
 80086ee:	f003 ff8d 	bl	800c60c <d_expression_1>
 80086f2:	4682      	mov	sl, r0
 80086f4:	e7d9      	b.n	80086aa <d_type+0xfce>
 80086f6:	785a      	ldrb	r2, [r3, #1]
 80086f8:	2a69      	cmp	r2, #105	; 0x69
 80086fa:	f47f af2f 	bne.w	800855c <d_type+0xe80>
 80086fe:	3302      	adds	r3, #2
 8008700:	60e3      	str	r3, [r4, #12]
 8008702:	4620      	mov	r0, r4
 8008704:	2145      	movs	r1, #69	; 0x45
 8008706:	f002 fcb5 	bl	800b074 <d_exprlist>
 800870a:	e782      	b.n	8008612 <d_type+0xf36>
 800870c:	3301      	adds	r3, #1
 800870e:	60e3      	str	r3, [r4, #12]
 8008710:	2000      	movs	r0, #0
 8008712:	e77e      	b.n	8008612 <d_type+0xf36>
 8008714:	f89a 3000 	ldrb.w	r3, [sl]
 8008718:	2b70      	cmp	r3, #112	; 0x70
 800871a:	d002      	beq.n	8008722 <d_type+0x1046>
 800871c:	2b6d      	cmp	r3, #109	; 0x6d
 800871e:	f47f ae5b 	bne.w	80083d8 <d_type+0xcfc>
 8008722:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008726:	429a      	cmp	r2, r3
 8008728:	f47f ae56 	bne.w	80083d8 <d_type+0xcfc>
 800872c:	68e3      	ldr	r3, [r4, #12]
 800872e:	781a      	ldrb	r2, [r3, #0]
 8008730:	2a5f      	cmp	r2, #95	; 0x5f
 8008732:	d014      	beq.n	800875e <d_type+0x1082>
 8008734:	4620      	mov	r0, r4
 8008736:	f003 ff69 	bl	800c60c <d_expression_1>
 800873a:	4602      	mov	r2, r0
 800873c:	4613      	mov	r3, r2
 800873e:	4620      	mov	r0, r4
 8008740:	2137      	movs	r1, #55	; 0x37
 8008742:	f7fb fdf9 	bl	8004338 <d_make_comp>
 8008746:	4603      	mov	r3, r0
 8008748:	462a      	mov	r2, r5
 800874a:	4620      	mov	r0, r4
 800874c:	2135      	movs	r1, #53	; 0x35
 800874e:	f7fb fdf3 	bl	8004338 <d_make_comp>
 8008752:	4605      	mov	r5, r0
 8008754:	e5f3      	b.n	800833e <d_type+0xc62>
 8008756:	4620      	mov	r0, r4
 8008758:	f7fe ffc0 	bl	80076dc <d_type>
 800875c:	e7f3      	b.n	8008746 <d_type+0x106a>
 800875e:	3301      	adds	r3, #1
 8008760:	60e3      	str	r3, [r4, #12]
 8008762:	e639      	b.n	80083d8 <d_type+0xcfc>
 8008764:	462a      	mov	r2, r5
 8008766:	4620      	mov	r0, r4
 8008768:	2134      	movs	r1, #52	; 0x34
 800876a:	2300      	movs	r3, #0
 800876c:	f7fb fde4 	bl	8004338 <d_make_comp>
 8008770:	4605      	mov	r5, r0
 8008772:	e5e4      	b.n	800833e <d_type+0xc62>
 8008774:	784b      	ldrb	r3, [r1, #1]
 8008776:	2b6c      	cmp	r3, #108	; 0x6c
 8008778:	f47f ae19 	bne.w	80083ae <d_type+0xcd2>
 800877c:	4620      	mov	r0, r4
 800877e:	f7fe ffad 	bl	80076dc <d_type>
 8008782:	68e1      	ldr	r1, [r4, #12]
 8008784:	4605      	mov	r5, r0
 8008786:	3102      	adds	r1, #2
 8008788:	60e1      	str	r1, [r4, #12]
 800878a:	4620      	mov	r0, r4
 800878c:	2145      	movs	r1, #69	; 0x45
 800878e:	f002 fc71 	bl	800b074 <d_exprlist>
 8008792:	462a      	mov	r2, r5
 8008794:	4603      	mov	r3, r0
 8008796:	2130      	movs	r1, #48	; 0x30
 8008798:	4620      	mov	r0, r4
 800879a:	f7fb fdcd 	bl	8004338 <d_make_comp>
 800879e:	4605      	mov	r5, r0
 80087a0:	e5cd      	b.n	800833e <d_type+0xc62>
 80087a2:	784a      	ldrb	r2, [r1, #1]
 80087a4:	2a6c      	cmp	r2, #108	; 0x6c
 80087a6:	f47f ae02 	bne.w	80083ae <d_type+0xcd2>
 80087aa:	4655      	mov	r5, sl
 80087ac:	e7eb      	b.n	8008786 <d_type+0x10aa>
 80087ae:	784b      	ldrb	r3, [r1, #1]
 80087b0:	2b6e      	cmp	r3, #110	; 0x6e
 80087b2:	f47f adfc 	bne.w	80083ae <d_type+0xcd2>
 80087b6:	3102      	adds	r1, #2
 80087b8:	60e1      	str	r1, [r4, #12]
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fa04 	bl	8008bc8 <d_unqualified_name>
 80087c0:	4605      	mov	r5, r0
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f43f adbb 	beq.w	800833e <d_type+0xc62>
 80087c8:	68e3      	ldr	r3, [r4, #12]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b49      	cmp	r3, #73	; 0x49
 80087ce:	f47f adb6 	bne.w	800833e <d_type+0xc62>
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 fb38 	bl	8008e48 <d_template_args>
 80087d8:	462a      	mov	r2, r5
 80087da:	4603      	mov	r3, r0
 80087dc:	2104      	movs	r1, #4
 80087de:	4620      	mov	r0, r4
 80087e0:	f7fb fdaa 	bl	8004338 <d_make_comp>
 80087e4:	4605      	mov	r5, r0
 80087e6:	e5aa      	b.n	800833e <d_type+0xc62>
 80087e8:	784b      	ldrb	r3, [r1, #1]
 80087ea:	2b70      	cmp	r3, #112	; 0x70
 80087ec:	f47f addf 	bne.w	80083ae <d_type+0xcd2>
 80087f0:	1c8b      	adds	r3, r1, #2
 80087f2:	60e3      	str	r3, [r4, #12]
 80087f4:	788b      	ldrb	r3, [r1, #2]
 80087f6:	2b54      	cmp	r3, #84	; 0x54
 80087f8:	d128      	bne.n	800884c <d_type+0x1170>
 80087fa:	3103      	adds	r1, #3
 80087fc:	60e1      	str	r1, [r4, #12]
 80087fe:	4650      	mov	r0, sl
 8008800:	6962      	ldr	r2, [r4, #20]
 8008802:	69a3      	ldr	r3, [r4, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	f6bf aea9 	bge.w	800855c <d_type+0xe80>
 800880a:	230c      	movs	r3, #12
 800880c:	6921      	ldr	r1, [r4, #16]
 800880e:	fb03 f302 	mul.w	r3, r3, r2
 8008812:	18cd      	adds	r5, r1, r3
 8008814:	f102 0201 	add.w	r2, r2, #1
 8008818:	6162      	str	r2, [r4, #20]
 800881a:	f43f ad90 	beq.w	800833e <d_type+0xc62>
 800881e:	2206      	movs	r2, #6
 8008820:	54ca      	strb	r2, [r1, r3]
 8008822:	6068      	str	r0, [r5, #4]
 8008824:	e58b      	b.n	800833e <d_type+0xc62>
 8008826:	784a      	ldrb	r2, [r1, #1]
 8008828:	2a72      	cmp	r2, #114	; 0x72
 800882a:	d015      	beq.n	8008858 <d_type+0x117c>
 800882c:	2a70      	cmp	r2, #112	; 0x70
 800882e:	f47f adbe 	bne.w	80083ae <d_type+0xcd2>
 8008832:	3102      	adds	r1, #2
 8008834:	60e1      	str	r1, [r4, #12]
 8008836:	4620      	mov	r0, r4
 8008838:	f003 fee8 	bl	800c60c <d_expression_1>
 800883c:	4653      	mov	r3, sl
 800883e:	4602      	mov	r2, r0
 8008840:	2149      	movs	r1, #73	; 0x49
 8008842:	4620      	mov	r0, r4
 8008844:	f7fb fd78 	bl	8004338 <d_make_comp>
 8008848:	4605      	mov	r5, r0
 800884a:	e578      	b.n	800833e <d_type+0xc62>
 800884c:	4620      	mov	r0, r4
 800884e:	f7fb ffa9 	bl	80047a4 <d_compact_number>
 8008852:	3001      	adds	r0, #1
 8008854:	d1d4      	bne.n	8008800 <d_type+0x1124>
 8008856:	e77c      	b.n	8008752 <d_type+0x1076>
 8008858:	3102      	adds	r1, #2
 800885a:	60e1      	str	r1, [r4, #12]
 800885c:	4620      	mov	r0, r4
 800885e:	f7fe ff3d 	bl	80076dc <d_type>
 8008862:	4605      	mov	r5, r0
 8008864:	4620      	mov	r0, r4
 8008866:	f000 f9af 	bl	8008bc8 <d_unqualified_name>
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b49      	cmp	r3, #73	; 0x49
 8008870:	4682      	mov	sl, r0
 8008872:	d011      	beq.n	8008898 <d_type+0x11bc>
 8008874:	462a      	mov	r2, r5
 8008876:	4603      	mov	r3, r0
 8008878:	2101      	movs	r1, #1
 800887a:	4620      	mov	r0, r4
 800887c:	f7fb fd5c 	bl	8004338 <d_make_comp>
 8008880:	4605      	mov	r5, r0
 8008882:	e55c      	b.n	800833e <d_type+0xc62>
 8008884:	4620      	mov	r0, r4
 8008886:	f7fb ffa5 	bl	80047d4 <d_template_param>
 800888a:	4605      	mov	r5, r0
 800888c:	e557      	b.n	800833e <d_type+0xc62>
 800888e:	4620      	mov	r0, r4
 8008890:	f7fe fec4 	bl	800761c <d_expr_primary>
 8008894:	4605      	mov	r5, r0
 8008896:	e552      	b.n	800833e <d_type+0xc62>
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fad5 	bl	8008e48 <d_template_args>
 800889e:	4652      	mov	r2, sl
 80088a0:	4603      	mov	r3, r0
 80088a2:	2104      	movs	r1, #4
 80088a4:	4620      	mov	r0, r4
 80088a6:	f7fb fd47 	bl	8004338 <d_make_comp>
 80088aa:	462a      	mov	r2, r5
 80088ac:	4603      	mov	r3, r0
 80088ae:	2101      	movs	r1, #1
 80088b0:	4620      	mov	r0, r4
 80088b2:	f7fb fd41 	bl	8004338 <d_make_comp>
 80088b6:	4605      	mov	r5, r0
 80088b8:	e541      	b.n	800833e <d_type+0xc62>
 80088ba:	2500      	movs	r5, #0
 80088bc:	68e3      	ldr	r3, [r4, #12]
 80088be:	3302      	adds	r3, #2
 80088c0:	60e3      	str	r3, [r4, #12]
 80088c2:	2145      	movs	r1, #69	; 0x45
 80088c4:	4620      	mov	r0, r4
 80088c6:	f002 fbd5 	bl	800b074 <d_exprlist>
 80088ca:	462a      	mov	r2, r5
 80088cc:	4603      	mov	r3, r0
 80088ce:	2130      	movs	r1, #48	; 0x30
 80088d0:	4620      	mov	r0, r4
 80088d2:	f7fb fd31 	bl	8004338 <d_make_comp>
 80088d6:	4605      	mov	r5, r0
 80088d8:	f7ff bb10 	b.w	8007efc <d_type+0x820>
 80088dc:	2b74      	cmp	r3, #116	; 0x74
 80088de:	f47f aaed 	bne.w	8007ebc <d_type+0x7e0>
 80088e2:	7903      	ldrb	r3, [r0, #4]
 80088e4:	2b6c      	cmp	r3, #108	; 0x6c
 80088e6:	f47f aae9 	bne.w	8007ebc <d_type+0x7e0>
 80088ea:	4620      	mov	r0, r4
 80088ec:	f7fe fef6 	bl	80076dc <d_type>
 80088f0:	4605      	mov	r5, r0
 80088f2:	e7e3      	b.n	80088bc <d_type+0x11e0>
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7fe bfb3 	b.w	8007860 <d_type+0x184>
 80088fa:	bf00      	nop
 80088fc:	0801dd28 	.word	0x0801dd28
 8008900:	0801dd20 	.word	0x0801dd20
 8008904:	0801ddf4 	.word	0x0801ddf4
 8008908:	0801ddf8 	.word	0x0801ddf8
 800890c:	785a      	ldrb	r2, [r3, #1]
 800890e:	2a69      	cmp	r2, #105	; 0x69
 8008910:	f47f abf3 	bne.w	80080fa <d_type+0xa1e>
 8008914:	3302      	adds	r3, #2
 8008916:	60e3      	str	r3, [r4, #12]
 8008918:	4620      	mov	r0, r4
 800891a:	2145      	movs	r1, #69	; 0x45
 800891c:	f002 fbaa 	bl	800b074 <d_exprlist>
 8008920:	f7ff bb8b 	b.w	800803a <d_type+0x95e>
 8008924:	3301      	adds	r3, #1
 8008926:	60e3      	str	r3, [r4, #12]
 8008928:	2000      	movs	r0, #0
 800892a:	f7ff bb86 	b.w	800803a <d_type+0x95e>
 800892e:	4620      	mov	r0, r4
 8008930:	f003 fe6c 	bl	800c60c <d_expression_1>
 8008934:	4606      	mov	r6, r0
 8008936:	4620      	mov	r0, r4
 8008938:	f003 fe68 	bl	800c60c <d_expression_1>
 800893c:	4680      	mov	r8, r0
 800893e:	4620      	mov	r0, r4
 8008940:	f003 fe64 	bl	800c60c <d_expression_1>
 8008944:	f7ff bb79 	b.w	800803a <d_type+0x95e>
 8008948:	4620      	mov	r0, r4
 800894a:	f003 fe5f 	bl	800c60c <d_expression_1>
 800894e:	4606      	mov	r6, r0
 8008950:	f7ff bbb7 	b.w	80080c2 <d_type+0x9e6>
 8008954:	4620      	mov	r0, r4
 8008956:	2145      	movs	r1, #69	; 0x45
 8008958:	f002 fb8c 	bl	800b074 <d_exprlist>
 800895c:	4606      	mov	r6, r0
 800895e:	f7ff bbb0 	b.w	80080c2 <d_type+0x9e6>
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8008968:	2a01      	cmp	r2, #1
 800896a:	d903      	bls.n	8008974 <d_type+0x1298>
 800896c:	3b72      	subs	r3, #114	; 0x72
 800896e:	2b01      	cmp	r3, #1
 8008970:	f63f ab7e 	bhi.w	8008070 <d_type+0x994>
 8008974:	4620      	mov	r0, r4
 8008976:	f7fe feb1 	bl	80076dc <d_type>
 800897a:	4680      	mov	r8, r0
 800897c:	f7ff bb7c 	b.w	8008078 <d_type+0x99c>
 8008980:	4620      	mov	r0, r4
 8008982:	f7fe feab 	bl	80076dc <d_type>
 8008986:	f7ff bbfa 	b.w	800817e <d_type+0xaa2>
 800898a:	3301      	adds	r3, #1
 800898c:	60e3      	str	r3, [r4, #12]
 800898e:	f7fe bf5e 	b.w	800784e <d_type+0x172>
 8008992:	3301      	adds	r3, #1
 8008994:	60e3      	str	r3, [r4, #12]
 8008996:	4620      	mov	r0, r4
 8008998:	2145      	movs	r1, #69	; 0x45
 800899a:	f002 fb6b 	bl	800b074 <d_exprlist>
 800899e:	f7fe bf59 	b.w	8007854 <d_type+0x178>
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fa50 	bl	8008e48 <d_template_args>
 80089a8:	4642      	mov	r2, r8
 80089aa:	4603      	mov	r3, r0
 80089ac:	2104      	movs	r1, #4
 80089ae:	4620      	mov	r0, r4
 80089b0:	f7fb fcc2 	bl	8004338 <d_make_comp>
 80089b4:	4629      	mov	r1, r5
 80089b6:	4603      	mov	r3, r0
 80089b8:	4632      	mov	r2, r6
 80089ba:	4620      	mov	r0, r4
 80089bc:	f7fb fcbc 	bl	8004338 <d_make_comp>
 80089c0:	f7fe bf4e 	b.w	8007860 <d_type+0x184>

080089c4 <d_parmlist>:
 80089c4:	b530      	push	{r4, r5, lr}
 80089c6:	68c2      	ldr	r2, [r0, #12]
 80089c8:	b083      	sub	sp, #12
 80089ca:	2300      	movs	r3, #0
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	7813      	ldrb	r3, [r2, #0]
 80089d0:	b343      	cbz	r3, 8008a24 <d_parmlist+0x60>
 80089d2:	2b45      	cmp	r3, #69	; 0x45
 80089d4:	d026      	beq.n	8008a24 <d_parmlist+0x60>
 80089d6:	2b2e      	cmp	r3, #46	; 0x2e
 80089d8:	d024      	beq.n	8008a24 <d_parmlist+0x60>
 80089da:	4604      	mov	r4, r0
 80089dc:	ad01      	add	r5, sp, #4
 80089de:	e015      	b.n	8008a0c <d_parmlist+0x48>
 80089e0:	2b4f      	cmp	r3, #79	; 0x4f
 80089e2:	d016      	beq.n	8008a12 <d_parmlist+0x4e>
 80089e4:	f7fe fe7a 	bl	80076dc <d_type>
 80089e8:	212e      	movs	r1, #46	; 0x2e
 80089ea:	4602      	mov	r2, r0
 80089ec:	2300      	movs	r3, #0
 80089ee:	b1c8      	cbz	r0, 8008a24 <d_parmlist+0x60>
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7fb fca1 	bl	8004338 <d_make_comp>
 80089f6:	6028      	str	r0, [r5, #0]
 80089f8:	b1a0      	cbz	r0, 8008a24 <d_parmlist+0x60>
 80089fa:	68e2      	ldr	r2, [r4, #12]
 80089fc:	7813      	ldrb	r3, [r2, #0]
 80089fe:	f100 0508 	add.w	r5, r0, #8
 8008a02:	b14b      	cbz	r3, 8008a18 <d_parmlist+0x54>
 8008a04:	2b45      	cmp	r3, #69	; 0x45
 8008a06:	d007      	beq.n	8008a18 <d_parmlist+0x54>
 8008a08:	2b2e      	cmp	r3, #46	; 0x2e
 8008a0a:	d005      	beq.n	8008a18 <d_parmlist+0x54>
 8008a0c:	2b52      	cmp	r3, #82	; 0x52
 8008a0e:	4620      	mov	r0, r4
 8008a10:	d1e6      	bne.n	80089e0 <d_parmlist+0x1c>
 8008a12:	7853      	ldrb	r3, [r2, #1]
 8008a14:	2b45      	cmp	r3, #69	; 0x45
 8008a16:	d1e5      	bne.n	80089e4 <d_parmlist+0x20>
 8008a18:	9801      	ldr	r0, [sp, #4]
 8008a1a:	b118      	cbz	r0, 8008a24 <d_parmlist+0x60>
 8008a1c:	6883      	ldr	r3, [r0, #8]
 8008a1e:	b123      	cbz	r3, 8008a2a <d_parmlist+0x66>
 8008a20:	b003      	add	sp, #12
 8008a22:	bd30      	pop	{r4, r5, pc}
 8008a24:	2000      	movs	r0, #0
 8008a26:	b003      	add	sp, #12
 8008a28:	bd30      	pop	{r4, r5, pc}
 8008a2a:	6842      	ldr	r2, [r0, #4]
 8008a2c:	7811      	ldrb	r1, [r2, #0]
 8008a2e:	2927      	cmp	r1, #39	; 0x27
 8008a30:	d1f6      	bne.n	8008a20 <d_parmlist+0x5c>
 8008a32:	6852      	ldr	r2, [r2, #4]
 8008a34:	7c11      	ldrb	r1, [r2, #16]
 8008a36:	2909      	cmp	r1, #9
 8008a38:	d1f2      	bne.n	8008a20 <d_parmlist+0x5c>
 8008a3a:	6851      	ldr	r1, [r2, #4]
 8008a3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008a3e:	1a52      	subs	r2, r2, r1
 8008a40:	6322      	str	r2, [r4, #48]	; 0x30
 8008a42:	6043      	str	r3, [r0, #4]
 8008a44:	e7ec      	b.n	8008a20 <d_parmlist+0x5c>
 8008a46:	bf00      	nop

08008a48 <d_bare_function_type>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	68c3      	ldr	r3, [r0, #12]
 8008a4c:	781a      	ldrb	r2, [r3, #0]
 8008a4e:	2a4a      	cmp	r2, #74	; 0x4a
 8008a50:	4604      	mov	r4, r0
 8008a52:	d00d      	beq.n	8008a70 <d_bare_function_type+0x28>
 8008a54:	b971      	cbnz	r1, 8008a74 <d_bare_function_type+0x2c>
 8008a56:	460d      	mov	r5, r1
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f7ff ffb3 	bl	80089c4 <d_parmlist>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	b170      	cbz	r0, 8008a80 <d_bare_function_type+0x38>
 8008a62:	4620      	mov	r0, r4
 8008a64:	462a      	mov	r2, r5
 8008a66:	2129      	movs	r1, #41	; 0x29
 8008a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a6c:	f7fb bc64 	b.w	8004338 <d_make_comp>
 8008a70:	3301      	adds	r3, #1
 8008a72:	60c3      	str	r3, [r0, #12]
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7fe fe31 	bl	80076dc <d_type>
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d1eb      	bne.n	8008a58 <d_bare_function_type+0x10>
 8008a80:	2000      	movs	r0, #0
 8008a82:	bd70      	pop	{r4, r5, r6, pc}

08008a84 <d_function_type>:
 8008a84:	68c3      	ldr	r3, [r0, #12]
 8008a86:	781a      	ldrb	r2, [r3, #0]
 8008a88:	2a46      	cmp	r2, #70	; 0x46
 8008a8a:	d001      	beq.n	8008a90 <d_function_type+0xc>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	4770      	bx	lr
 8008a90:	b510      	push	{r4, lr}
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	60c2      	str	r2, [r0, #12]
 8008a96:	785a      	ldrb	r2, [r3, #1]
 8008a98:	2a59      	cmp	r2, #89	; 0x59
 8008a9a:	bf04      	itt	eq
 8008a9c:	3302      	addeq	r3, #2
 8008a9e:	60c3      	streq	r3, [r0, #12]
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	f7ff ffd0 	bl	8008a48 <d_bare_function_type>
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f7fb fd02 	bl	80044b4 <d_ref_qualifier>
 8008ab0:	68e3      	ldr	r3, [r4, #12]
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	2a45      	cmp	r2, #69	; 0x45
 8008ab6:	d001      	beq.n	8008abc <d_function_type+0x38>
 8008ab8:	2000      	movs	r0, #0
 8008aba:	bd10      	pop	{r4, pc}
 8008abc:	3301      	adds	r3, #1
 8008abe:	60e3      	str	r3, [r4, #12]
 8008ac0:	bd10      	pop	{r4, pc}
 8008ac2:	bf00      	nop

08008ac4 <d_operator_name>:
 8008ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac8:	68c3      	ldr	r3, [r0, #12]
 8008aca:	781a      	ldrb	r2, [r3, #0]
 8008acc:	4684      	mov	ip, r0
 8008ace:	b312      	cbz	r2, 8008b16 <d_operator_name+0x52>
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	60c2      	str	r2, [r0, #12]
 8008ad4:	785a      	ldrb	r2, [r3, #1]
 8008ad6:	781e      	ldrb	r6, [r3, #0]
 8008ad8:	bb02      	cbnz	r2, 8008b1c <d_operator_name+0x58>
 8008ada:	4696      	mov	lr, r2
 8008adc:	4d39      	ldr	r5, [pc, #228]	; (8008bc4 <d_operator_name+0x100>)
 8008ade:	203d      	movs	r0, #61	; 0x3d
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	1a83      	subs	r3, r0, r2
 8008ae4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8008ae8:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8008aec:	0119      	lsls	r1, r3, #4
 8008aee:	186f      	adds	r7, r5, r1
 8008af0:	586c      	ldr	r4, [r5, r1]
 8008af2:	7821      	ldrb	r1, [r4, #0]
 8008af4:	428e      	cmp	r6, r1
 8008af6:	d007      	beq.n	8008b08 <d_operator_name+0x44>
 8008af8:	42b1      	cmp	r1, r6
 8008afa:	d90a      	bls.n	8008b12 <d_operator_name+0x4e>
 8008afc:	4618      	mov	r0, r3
 8008afe:	4282      	cmp	r2, r0
 8008b00:	d1ef      	bne.n	8008ae2 <d_operator_name+0x1e>
 8008b02:	2000      	movs	r0, #0
 8008b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b08:	7861      	ldrb	r1, [r4, #1]
 8008b0a:	458e      	cmp	lr, r1
 8008b0c:	d040      	beq.n	8008b90 <d_operator_name+0xcc>
 8008b0e:	4571      	cmp	r1, lr
 8008b10:	d8f4      	bhi.n	8008afc <d_operator_name+0x38>
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	e7f3      	b.n	8008afe <d_operator_name+0x3a>
 8008b16:	4696      	mov	lr, r2
 8008b18:	4616      	mov	r6, r2
 8008b1a:	e7df      	b.n	8008adc <d_operator_name+0x18>
 8008b1c:	1c9a      	adds	r2, r3, #2
 8008b1e:	60c2      	str	r2, [r0, #12]
 8008b20:	2e76      	cmp	r6, #118	; 0x76
 8008b22:	4604      	mov	r4, r0
 8008b24:	f893 e001 	ldrb.w	lr, [r3, #1]
 8008b28:	d11c      	bne.n	8008b64 <d_operator_name+0xa0>
 8008b2a:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 8008b2e:	b2eb      	uxtb	r3, r5
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	d8d3      	bhi.n	8008adc <d_operator_name+0x18>
 8008b34:	f7fb fe80 	bl	8004838 <d_source_name>
 8008b38:	6963      	ldr	r3, [r4, #20]
 8008b3a:	69a1      	ldr	r1, [r4, #24]
 8008b3c:	428b      	cmp	r3, r1
 8008b3e:	4602      	mov	r2, r0
 8008b40:	dadf      	bge.n	8008b02 <d_operator_name+0x3e>
 8008b42:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008b46:	6920      	ldr	r0, [r4, #16]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	0089      	lsls	r1, r1, #2
 8008b4c:	6163      	str	r3, [r4, #20]
 8008b4e:	1843      	adds	r3, r0, r1
 8008b50:	d0d7      	beq.n	8008b02 <d_operator_name+0x3e>
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	d0d5      	beq.n	8008b02 <d_operator_name+0x3e>
 8008b56:	2432      	movs	r4, #50	; 0x32
 8008b58:	5444      	strb	r4, [r0, r1]
 8008b5a:	605d      	str	r5, [r3, #4]
 8008b5c:	609a      	str	r2, [r3, #8]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b64:	2e63      	cmp	r6, #99	; 0x63
 8008b66:	d1b9      	bne.n	8008adc <d_operator_name+0x18>
 8008b68:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 8008b6c:	d1b6      	bne.n	8008adc <d_operator_name+0x18>
 8008b6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008b70:	fab3 f383 	clz	r3, r3
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8008b78:	6383      	str	r3, [r0, #56]	; 0x38
 8008b7a:	f7fe fdaf 	bl	80076dc <d_type>
 8008b7e:	63a5      	str	r5, [r4, #56]	; 0x38
 8008b80:	4602      	mov	r2, r0
 8008b82:	2133      	movs	r1, #51	; 0x33
 8008b84:	4620      	mov	r0, r4
 8008b86:	2300      	movs	r3, #0
 8008b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8c:	f7fb bbd4 	b.w	8004338 <d_make_comp>
 8008b90:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8008b94:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	dab2      	bge.n	8008b02 <d_operator_name+0x3e>
 8008b9c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008ba0:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	0092      	lsls	r2, r2, #2
 8008ba8:	f8cc 3014 	str.w	r3, [ip, #20]
 8008bac:	188b      	adds	r3, r1, r2
 8008bae:	d005      	beq.n	8008bbc <d_operator_name+0xf8>
 8008bb0:	2031      	movs	r0, #49	; 0x31
 8008bb2:	5488      	strb	r0, [r1, r2]
 8008bb4:	605f      	str	r7, [r3, #4]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc2:	bf00      	nop
 8008bc4:	0801d27c 	.word	0x0801d27c

08008bc8 <d_unqualified_name>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	68c2      	ldr	r2, [r0, #12]
 8008bcc:	7813      	ldrb	r3, [r2, #0]
 8008bce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008bd2:	2909      	cmp	r1, #9
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	d92e      	bls.n	8008c36 <d_unqualified_name+0x6e>
 8008bd8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8008bdc:	2919      	cmp	r1, #25
 8008bde:	d933      	bls.n	8008c48 <d_unqualified_name+0x80>
 8008be0:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 8008be4:	2901      	cmp	r1, #1
 8008be6:	d971      	bls.n	8008ccc <d_unqualified_name+0x104>
 8008be8:	2b4c      	cmp	r3, #76	; 0x4c
 8008bea:	f000 808d 	beq.w	8008d08 <d_unqualified_name+0x140>
 8008bee:	2b55      	cmp	r3, #85	; 0x55
 8008bf0:	f040 8088 	bne.w	8008d04 <d_unqualified_name+0x13c>
 8008bf4:	7853      	ldrb	r3, [r2, #1]
 8008bf6:	2b6c      	cmp	r3, #108	; 0x6c
 8008bf8:	d030      	beq.n	8008c5c <d_unqualified_name+0x94>
 8008bfa:	2b74      	cmp	r3, #116	; 0x74
 8008bfc:	f040 8082 	bne.w	8008d04 <d_unqualified_name+0x13c>
 8008c00:	1c53      	adds	r3, r2, #1
 8008c02:	60c3      	str	r3, [r0, #12]
 8008c04:	7851      	ldrb	r1, [r2, #1]
 8008c06:	2974      	cmp	r1, #116	; 0x74
 8008c08:	f000 80c6 	beq.w	8008d98 <d_unqualified_name+0x1d0>
 8008c0c:	2942      	cmp	r1, #66	; 0x42
 8008c0e:	f04f 0500 	mov.w	r5, #0
 8008c12:	d117      	bne.n	8008c44 <d_unqualified_name+0x7c>
 8008c14:	3301      	adds	r3, #1
 8008c16:	60e3      	str	r3, [r4, #12]
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f7fb fe0d 	bl	8004838 <d_source_name>
 8008c1e:	462a      	mov	r2, r5
 8008c20:	4603      	mov	r3, r0
 8008c22:	214a      	movs	r1, #74	; 0x4a
 8008c24:	4620      	mov	r0, r4
 8008c26:	f7fb fb87 	bl	8004338 <d_make_comp>
 8008c2a:	68e3      	ldr	r3, [r4, #12]
 8008c2c:	7819      	ldrb	r1, [r3, #0]
 8008c2e:	2942      	cmp	r1, #66	; 0x42
 8008c30:	4605      	mov	r5, r0
 8008c32:	d0ef      	beq.n	8008c14 <d_unqualified_name+0x4c>
 8008c34:	e006      	b.n	8008c44 <d_unqualified_name+0x7c>
 8008c36:	f7fb fdff 	bl	8004838 <d_source_name>
 8008c3a:	68e3      	ldr	r3, [r4, #12]
 8008c3c:	7819      	ldrb	r1, [r3, #0]
 8008c3e:	4605      	mov	r5, r0
 8008c40:	2942      	cmp	r1, #66	; 0x42
 8008c42:	d0e7      	beq.n	8008c14 <d_unqualified_name+0x4c>
 8008c44:	4628      	mov	r0, r5
 8008c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c48:	f7ff ff3c 	bl	8008ac4 <d_operator_name>
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	b110      	cbz	r0, 8008c56 <d_unqualified_name+0x8e>
 8008c50:	7803      	ldrb	r3, [r0, #0]
 8008c52:	2b31      	cmp	r3, #49	; 0x31
 8008c54:	d065      	beq.n	8008d22 <d_unqualified_name+0x15a>
 8008c56:	68e3      	ldr	r3, [r4, #12]
 8008c58:	7819      	ldrb	r1, [r3, #0]
 8008c5a:	e7f1      	b.n	8008c40 <d_unqualified_name+0x78>
 8008c5c:	1c53      	adds	r3, r2, #1
 8008c5e:	60c3      	str	r3, [r0, #12]
 8008c60:	7851      	ldrb	r1, [r2, #1]
 8008c62:	296c      	cmp	r1, #108	; 0x6c
 8008c64:	d1d2      	bne.n	8008c0c <d_unqualified_name+0x44>
 8008c66:	3202      	adds	r2, #2
 8008c68:	60c2      	str	r2, [r0, #12]
 8008c6a:	f7ff feab 	bl	80089c4 <d_parmlist>
 8008c6e:	68e3      	ldr	r3, [r4, #12]
 8008c70:	4606      	mov	r6, r0
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f000 80e2 	beq.w	8008e3c <d_unqualified_name+0x274>
 8008c78:	7819      	ldrb	r1, [r3, #0]
 8008c7a:	2945      	cmp	r1, #69	; 0x45
 8008c7c:	d1c6      	bne.n	8008c0c <d_unqualified_name+0x44>
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60e3      	str	r3, [r4, #12]
 8008c82:	4620      	mov	r0, r4
 8008c84:	f7fb fd8e 	bl	80047a4 <d_compact_number>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	f2c0 809f 	blt.w	8008dcc <d_unqualified_name+0x204>
 8008c8e:	6963      	ldr	r3, [r4, #20]
 8008c90:	69a2      	ldr	r2, [r4, #24]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	f280 809a 	bge.w	8008dcc <d_unqualified_name+0x204>
 8008c98:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008c9c:	6921      	ldr	r1, [r4, #16]
 8008c9e:	0092      	lsls	r2, r2, #2
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	188d      	adds	r5, r1, r2
 8008ca4:	6163      	str	r3, [r4, #20]
 8008ca6:	f000 8091 	beq.w	8008dcc <d_unqualified_name+0x204>
 8008caa:	2344      	movs	r3, #68	; 0x44
 8008cac:	548b      	strb	r3, [r1, r2]
 8008cae:	606e      	str	r6, [r5, #4]
 8008cb0:	60a8      	str	r0, [r5, #8]
 8008cb2:	6a23      	ldr	r3, [r4, #32]
 8008cb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	f280 8088 	bge.w	8008dcc <d_unqualified_name+0x204>
 8008cbc:	69e2      	ldr	r2, [r4, #28]
 8008cbe:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	68e3      	ldr	r3, [r4, #12]
 8008cc6:	6222      	str	r2, [r4, #32]
 8008cc8:	7819      	ldrb	r1, [r3, #0]
 8008cca:	e7b9      	b.n	8008c40 <d_unqualified_name+0x78>
 8008ccc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008cce:	b1a8      	cbz	r0, 8008cfc <d_unqualified_name+0x134>
 8008cd0:	7801      	ldrb	r1, [r0, #0]
 8008cd2:	b989      	cbnz	r1, 8008cf8 <d_unqualified_name+0x130>
 8008cd4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008cd6:	6883      	ldr	r3, [r0, #8]
 8008cd8:	440b      	add	r3, r1
 8008cda:	6323      	str	r3, [r4, #48]	; 0x30
 8008cdc:	7811      	ldrb	r1, [r2, #0]
 8008cde:	2943      	cmp	r1, #67	; 0x43
 8008ce0:	d07e      	beq.n	8008de0 <d_unqualified_name+0x218>
 8008ce2:	2944      	cmp	r1, #68	; 0x44
 8008ce4:	d179      	bne.n	8008dda <d_unqualified_name+0x212>
 8008ce6:	7853      	ldrb	r3, [r2, #1]
 8008ce8:	3b30      	subs	r3, #48	; 0x30
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	d80a      	bhi.n	8008d04 <d_unqualified_name+0x13c>
 8008cee:	e8df f003 	tbb	[pc, r3]
 8008cf2:	472f      	.short	0x472f
 8008cf4:	4a4d0950 	.word	0x4a4d0950
 8008cf8:	2918      	cmp	r1, #24
 8008cfa:	d0eb      	beq.n	8008cd4 <d_unqualified_name+0x10c>
 8008cfc:	2b43      	cmp	r3, #67	; 0x43
 8008cfe:	d06f      	beq.n	8008de0 <d_unqualified_name+0x218>
 8008d00:	2b44      	cmp	r3, #68	; 0x44
 8008d02:	d0f0      	beq.n	8008ce6 <d_unqualified_name+0x11e>
 8008d04:	2000      	movs	r0, #0
 8008d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d08:	3201      	adds	r2, #1
 8008d0a:	60c2      	str	r2, [r0, #12]
 8008d0c:	f7fb fd94 	bl	8004838 <d_source_name>
 8008d10:	4605      	mov	r5, r0
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d0f6      	beq.n	8008d04 <d_unqualified_name+0x13c>
 8008d16:	4620      	mov	r0, r4
 8008d18:	f7fb fd7e 	bl	8004818 <d_discriminator>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d19a      	bne.n	8008c56 <d_unqualified_name+0x8e>
 8008d20:	e7f0      	b.n	8008d04 <d_unqualified_name+0x13c>
 8008d22:	6842      	ldr	r2, [r0, #4]
 8008d24:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008d26:	6893      	ldr	r3, [r2, #8]
 8008d28:	6810      	ldr	r0, [r2, #0]
 8008d2a:	4946      	ldr	r1, [pc, #280]	; (8008e44 <d_unqualified_name+0x27c>)
 8008d2c:	4433      	add	r3, r6
 8008d2e:	3307      	adds	r3, #7
 8008d30:	6323      	str	r3, [r4, #48]	; 0x30
 8008d32:	f004 ff19 	bl	800db68 <strcmp>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d18d      	bne.n	8008c56 <d_unqualified_name+0x8e>
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7fb fd7c 	bl	8004838 <d_source_name>
 8008d40:	462a      	mov	r2, r5
 8008d42:	4603      	mov	r3, r0
 8008d44:	2135      	movs	r1, #53	; 0x35
 8008d46:	4620      	mov	r0, r4
 8008d48:	f7fb faf6 	bl	8004338 <d_make_comp>
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	e782      	b.n	8008c56 <d_unqualified_name+0x8e>
 8008d50:	f04f 0e01 	mov.w	lr, #1
 8008d54:	6961      	ldr	r1, [r4, #20]
 8008d56:	69a5      	ldr	r5, [r4, #24]
 8008d58:	1c93      	adds	r3, r2, #2
 8008d5a:	42a9      	cmp	r1, r5
 8008d5c:	60e3      	str	r3, [r4, #12]
 8008d5e:	da39      	bge.n	8008dd4 <d_unqualified_name+0x20c>
 8008d60:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8008d64:	6927      	ldr	r7, [r4, #16]
 8008d66:	00b6      	lsls	r6, r6, #2
 8008d68:	3101      	adds	r1, #1
 8008d6a:	19bd      	adds	r5, r7, r6
 8008d6c:	6161      	str	r1, [r4, #20]
 8008d6e:	d031      	beq.n	8008dd4 <d_unqualified_name+0x20c>
 8008d70:	b380      	cbz	r0, 8008dd4 <d_unqualified_name+0x20c>
 8008d72:	2108      	movs	r1, #8
 8008d74:	55b9      	strb	r1, [r7, r6]
 8008d76:	f885 e004 	strb.w	lr, [r5, #4]
 8008d7a:	60a8      	str	r0, [r5, #8]
 8008d7c:	7891      	ldrb	r1, [r2, #2]
 8008d7e:	e75f      	b.n	8008c40 <d_unqualified_name+0x78>
 8008d80:	f04f 0e02 	mov.w	lr, #2
 8008d84:	e7e6      	b.n	8008d54 <d_unqualified_name+0x18c>
 8008d86:	f04f 0e05 	mov.w	lr, #5
 8008d8a:	e7e3      	b.n	8008d54 <d_unqualified_name+0x18c>
 8008d8c:	f04f 0e04 	mov.w	lr, #4
 8008d90:	e7e0      	b.n	8008d54 <d_unqualified_name+0x18c>
 8008d92:	f04f 0e03 	mov.w	lr, #3
 8008d96:	e7dd      	b.n	8008d54 <d_unqualified_name+0x18c>
 8008d98:	3202      	adds	r2, #2
 8008d9a:	60c2      	str	r2, [r0, #12]
 8008d9c:	f7fb fd02 	bl	80047a4 <d_compact_number>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	db13      	blt.n	8008dcc <d_unqualified_name+0x204>
 8008da4:	6963      	ldr	r3, [r4, #20]
 8008da6:	69a2      	ldr	r2, [r4, #24]
 8008da8:	4293      	cmp	r3, r2
 8008daa:	da0f      	bge.n	8008dcc <d_unqualified_name+0x204>
 8008dac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008db0:	6921      	ldr	r1, [r4, #16]
 8008db2:	0092      	lsls	r2, r2, #2
 8008db4:	3301      	adds	r3, #1
 8008db6:	188d      	adds	r5, r1, r2
 8008db8:	6163      	str	r3, [r4, #20]
 8008dba:	d007      	beq.n	8008dcc <d_unqualified_name+0x204>
 8008dbc:	2346      	movs	r3, #70	; 0x46
 8008dbe:	548b      	strb	r3, [r1, r2]
 8008dc0:	6068      	str	r0, [r5, #4]
 8008dc2:	6a23      	ldr	r3, [r4, #32]
 8008dc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	f6ff af78 	blt.w	8008cbc <d_unqualified_name+0xf4>
 8008dcc:	68e3      	ldr	r3, [r4, #12]
 8008dce:	2500      	movs	r5, #0
 8008dd0:	7819      	ldrb	r1, [r3, #0]
 8008dd2:	e735      	b.n	8008c40 <d_unqualified_name+0x78>
 8008dd4:	7891      	ldrb	r1, [r2, #2]
 8008dd6:	2500      	movs	r5, #0
 8008dd8:	e732      	b.n	8008c40 <d_unqualified_name+0x78>
 8008dda:	4613      	mov	r3, r2
 8008ddc:	2500      	movs	r5, #0
 8008dde:	e72f      	b.n	8008c40 <d_unqualified_name+0x78>
 8008de0:	7853      	ldrb	r3, [r2, #1]
 8008de2:	3b31      	subs	r3, #49	; 0x31
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d88d      	bhi.n	8008d04 <d_unqualified_name+0x13c>
 8008de8:	e8df f003 	tbb	[pc, r3]
 8008dec:	1f222503 	.word	0x1f222503
 8008df0:	1c          	.byte	0x1c
 8008df1:	00          	.byte	0x00
 8008df2:	f04f 0e01 	mov.w	lr, #1
 8008df6:	6961      	ldr	r1, [r4, #20]
 8008df8:	69a5      	ldr	r5, [r4, #24]
 8008dfa:	1c93      	adds	r3, r2, #2
 8008dfc:	42a9      	cmp	r1, r5
 8008dfe:	60e3      	str	r3, [r4, #12]
 8008e00:	dae8      	bge.n	8008dd4 <d_unqualified_name+0x20c>
 8008e02:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8008e06:	6927      	ldr	r7, [r4, #16]
 8008e08:	00b6      	lsls	r6, r6, #2
 8008e0a:	3101      	adds	r1, #1
 8008e0c:	19bd      	adds	r5, r7, r6
 8008e0e:	6161      	str	r1, [r4, #20]
 8008e10:	d0e0      	beq.n	8008dd4 <d_unqualified_name+0x20c>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d0de      	beq.n	8008dd4 <d_unqualified_name+0x20c>
 8008e16:	2107      	movs	r1, #7
 8008e18:	55b9      	strb	r1, [r7, r6]
 8008e1a:	f885 e004 	strb.w	lr, [r5, #4]
 8008e1e:	60a8      	str	r0, [r5, #8]
 8008e20:	7891      	ldrb	r1, [r2, #2]
 8008e22:	e70d      	b.n	8008c40 <d_unqualified_name+0x78>
 8008e24:	f04f 0e05 	mov.w	lr, #5
 8008e28:	e7e5      	b.n	8008df6 <d_unqualified_name+0x22e>
 8008e2a:	f04f 0e04 	mov.w	lr, #4
 8008e2e:	e7e2      	b.n	8008df6 <d_unqualified_name+0x22e>
 8008e30:	f04f 0e03 	mov.w	lr, #3
 8008e34:	e7df      	b.n	8008df6 <d_unqualified_name+0x22e>
 8008e36:	f04f 0e02 	mov.w	lr, #2
 8008e3a:	e7dc      	b.n	8008df6 <d_unqualified_name+0x22e>
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	7819      	ldrb	r1, [r3, #0]
 8008e40:	e6fe      	b.n	8008c40 <d_unqualified_name+0x78>
 8008e42:	bf00      	nop
 8008e44:	0801de04 	.word	0x0801de04

08008e48 <d_template_args>:
 8008e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	68c1      	ldr	r1, [r0, #12]
 8008e4e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 8008e52:	780b      	ldrb	r3, [r1, #0]
 8008e54:	3b49      	subs	r3, #73	; 0x49
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	b085      	sub	sp, #20
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	f200 808a 	bhi.w	8008f74 <d_template_args+0x12c>
 8008e60:	1c4a      	adds	r2, r1, #1
 8008e62:	60c2      	str	r2, [r0, #12]
 8008e64:	784b      	ldrb	r3, [r1, #1]
 8008e66:	2b45      	cmp	r3, #69	; 0x45
 8008e68:	f000 8186 	beq.w	8009178 <d_template_args+0x330>
 8008e6c:	ad04      	add	r5, sp, #16
 8008e6e:	2100      	movs	r1, #0
 8008e70:	f845 1d04 	str.w	r1, [r5, #-4]!
 8008e74:	3b49      	subs	r3, #73	; 0x49
 8008e76:	2b0f      	cmp	r3, #15
 8008e78:	d861      	bhi.n	8008f3e <d_template_args+0xf6>
 8008e7a:	e8df f003 	tbb	[pc, r3]
 8008e7e:	5b5b      	.short	0x5b5b
 8008e80:	60604060 	.word	0x60604060
 8008e84:	60606060 	.word	0x60606060
 8008e88:	60606060 	.word	0x60606060
 8008e8c:	0860      	.short	0x0860
 8008e8e:	1c51      	adds	r1, r2, #1
 8008e90:	2701      	movs	r7, #1
 8008e92:	60e1      	str	r1, [r4, #12]
 8008e94:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8008e96:	6367      	str	r7, [r4, #52]	; 0x34
 8008e98:	7853      	ldrb	r3, [r2, #1]
 8008e9a:	2b4c      	cmp	r3, #76	; 0x4c
 8008e9c:	f000 80d5 	beq.w	800904a <d_template_args+0x202>
 8008ea0:	2b54      	cmp	r3, #84	; 0x54
 8008ea2:	f000 80d8 	beq.w	8009056 <d_template_args+0x20e>
 8008ea6:	2b73      	cmp	r3, #115	; 0x73
 8008ea8:	d07d      	beq.n	8008fa6 <d_template_args+0x15e>
 8008eaa:	2b66      	cmp	r3, #102	; 0x66
 8008eac:	f000 808f 	beq.w	8008fce <d_template_args+0x186>
 8008eb0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008eb4:	2809      	cmp	r0, #9
 8008eb6:	d94c      	bls.n	8008f52 <d_template_args+0x10a>
 8008eb8:	2b6f      	cmp	r3, #111	; 0x6f
 8008eba:	d045      	beq.n	8008f48 <d_template_args+0x100>
 8008ebc:	2b69      	cmp	r3, #105	; 0x69
 8008ebe:	f000 80a6 	beq.w	800900e <d_template_args+0x1c6>
 8008ec2:	2b74      	cmp	r3, #116	; 0x74
 8008ec4:	f000 80b7 	beq.w	8009036 <d_template_args+0x1ee>
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7ff fdfb 	bl	8008ac4 <d_operator_name>
 8008ece:	4607      	mov	r7, r0
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d065      	beq.n	8008fa0 <d_template_args+0x158>
 8008ed4:	7803      	ldrb	r3, [r0, #0]
 8008ed6:	2b31      	cmp	r3, #49	; 0x31
 8008ed8:	f000 80c3 	beq.w	8009062 <d_template_args+0x21a>
 8008edc:	2b32      	cmp	r3, #50	; 0x32
 8008ede:	f000 8121 	beq.w	8009124 <d_template_args+0x2dc>
 8008ee2:	2b33      	cmp	r3, #51	; 0x33
 8008ee4:	d15c      	bne.n	8008fa0 <d_template_args+0x158>
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	2a5f      	cmp	r2, #95	; 0x5f
 8008eec:	f040 8138 	bne.w	8009160 <d_template_args+0x318>
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	60e3      	str	r3, [r4, #12]
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	2145      	movs	r1, #69	; 0x45
 8008ef8:	f002 f8bc 	bl	800b074 <d_exprlist>
 8008efc:	e133      	b.n	8009166 <d_template_args+0x31e>
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7fe fb8c 	bl	800761c <d_expr_primary>
 8008f04:	4602      	mov	r2, r0
 8008f06:	2a00      	cmp	r2, #0
 8008f08:	d034      	beq.n	8008f74 <d_template_args+0x12c>
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	212f      	movs	r1, #47	; 0x2f
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f7fb fa12 	bl	8004338 <d_make_comp>
 8008f14:	6028      	str	r0, [r5, #0]
 8008f16:	b368      	cbz	r0, 8008f74 <d_template_args+0x12c>
 8008f18:	68e2      	ldr	r2, [r4, #12]
 8008f1a:	7813      	ldrb	r3, [r2, #0]
 8008f1c:	2b45      	cmp	r3, #69	; 0x45
 8008f1e:	f100 0508 	add.w	r5, r0, #8
 8008f22:	d1a7      	bne.n	8008e74 <d_template_args+0x2c>
 8008f24:	9803      	ldr	r0, [sp, #12]
 8008f26:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8008f2a:	3201      	adds	r2, #1
 8008f2c:	60e2      	str	r2, [r4, #12]
 8008f2e:	b005      	add	sp, #20
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f34:	4620      	mov	r0, r4
 8008f36:	f7ff ff87 	bl	8008e48 <d_template_args>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	e7e3      	b.n	8008f06 <d_template_args+0xbe>
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f7fe fbcc 	bl	80076dc <d_type>
 8008f44:	4602      	mov	r2, r0
 8008f46:	e7de      	b.n	8008f06 <d_template_args+0xbe>
 8008f48:	7893      	ldrb	r3, [r2, #2]
 8008f4a:	2b6e      	cmp	r3, #110	; 0x6e
 8008f4c:	d1bc      	bne.n	8008ec8 <d_template_args+0x80>
 8008f4e:	3203      	adds	r2, #3
 8008f50:	60e2      	str	r2, [r4, #12]
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff fe38 	bl	8008bc8 <d_unqualified_name>
 8008f58:	4607      	mov	r7, r0
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	f000 827f 	beq.w	800945e <d_template_args+0x616>
 8008f60:	68e3      	ldr	r3, [r4, #12]
 8008f62:	7819      	ldrb	r1, [r3, #0]
 8008f64:	2949      	cmp	r1, #73	; 0x49
 8008f66:	f000 80ed 	beq.w	8009144 <d_template_args+0x2fc>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	6366      	str	r6, [r4, #52]	; 0x34
 8008f6e:	7819      	ldrb	r1, [r3, #0]
 8008f70:	2945      	cmp	r1, #69	; 0x45
 8008f72:	d003      	beq.n	8008f7c <d_template_args+0x134>
 8008f74:	2000      	movs	r0, #0
 8008f76:	b005      	add	sp, #20
 8008f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	60e3      	str	r3, [r4, #12]
 8008f80:	e7c1      	b.n	8008f06 <d_template_args+0xbe>
 8008f82:	f04f 0a00 	mov.w	sl, #0
 8008f86:	4650      	mov	r0, sl
 8008f88:	49ce      	ldr	r1, [pc, #824]	; (80092c4 <d_template_args+0x47c>)
 8008f8a:	f004 fded 	bl	800db68 <strcmp>
 8008f8e:	4681      	mov	r9, r0
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f000 81af 	beq.w	80092f4 <d_template_args+0x4ac>
 8008f96:	f89a 3000 	ldrb.w	r3, [sl]
 8008f9a:	2b6e      	cmp	r3, #110	; 0x6e
 8008f9c:	f000 8134 	beq.w	8009208 <d_template_args+0x3c0>
 8008fa0:	68e3      	ldr	r3, [r4, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	e7e2      	b.n	8008f6c <d_template_args+0x124>
 8008fa6:	7893      	ldrb	r3, [r2, #2]
 8008fa8:	2b72      	cmp	r3, #114	; 0x72
 8008faa:	f000 810f 	beq.w	80091cc <d_template_args+0x384>
 8008fae:	2b70      	cmp	r3, #112	; 0x70
 8008fb0:	d18a      	bne.n	8008ec8 <d_template_args+0x80>
 8008fb2:	3203      	adds	r2, #3
 8008fb4:	60e2      	str	r2, [r4, #12]
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f003 fb28 	bl	800c60c <d_expression_1>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	2149      	movs	r1, #73	; 0x49
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7fb f9b8 	bl	8004338 <d_make_comp>
 8008fc8:	68e3      	ldr	r3, [r4, #12]
 8008fca:	4602      	mov	r2, r0
 8008fcc:	e7ce      	b.n	8008f6c <d_template_args+0x124>
 8008fce:	7893      	ldrb	r3, [r2, #2]
 8008fd0:	2b70      	cmp	r3, #112	; 0x70
 8008fd2:	f47f af79 	bne.w	8008ec8 <d_template_args+0x80>
 8008fd6:	1cd3      	adds	r3, r2, #3
 8008fd8:	60e3      	str	r3, [r4, #12]
 8008fda:	78d3      	ldrb	r3, [r2, #3]
 8008fdc:	2b54      	cmp	r3, #84	; 0x54
 8008fde:	f040 810c 	bne.w	80091fa <d_template_args+0x3b2>
 8008fe2:	3204      	adds	r2, #4
 8008fe4:	60e2      	str	r2, [r4, #12]
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	6963      	ldr	r3, [r4, #20]
 8008fea:	69a1      	ldr	r1, [r4, #24]
 8008fec:	428b      	cmp	r3, r1
 8008fee:	dad7      	bge.n	8008fa0 <d_template_args+0x158>
 8008ff0:	6921      	ldr	r1, [r4, #16]
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008ff8:	6162      	str	r2, [r4, #20]
 8008ffa:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 8008ffe:	f000 80e3 	beq.w	80091c8 <d_template_args+0x380>
 8009002:	2706      	movs	r7, #6
 8009004:	f801 7023 	strb.w	r7, [r1, r3, lsl #2]
 8009008:	6050      	str	r0, [r2, #4]
 800900a:	68e3      	ldr	r3, [r4, #12]
 800900c:	e7ae      	b.n	8008f6c <d_template_args+0x124>
 800900e:	7893      	ldrb	r3, [r2, #2]
 8009010:	2b6c      	cmp	r3, #108	; 0x6c
 8009012:	f47f af59 	bne.w	8008ec8 <d_template_args+0x80>
 8009016:	2700      	movs	r7, #0
 8009018:	3102      	adds	r1, #2
 800901a:	60e1      	str	r1, [r4, #12]
 800901c:	4620      	mov	r0, r4
 800901e:	2145      	movs	r1, #69	; 0x45
 8009020:	f002 f828 	bl	800b074 <d_exprlist>
 8009024:	463a      	mov	r2, r7
 8009026:	4603      	mov	r3, r0
 8009028:	2130      	movs	r1, #48	; 0x30
 800902a:	4620      	mov	r0, r4
 800902c:	f7fb f984 	bl	8004338 <d_make_comp>
 8009030:	68e3      	ldr	r3, [r4, #12]
 8009032:	4602      	mov	r2, r0
 8009034:	e79a      	b.n	8008f6c <d_template_args+0x124>
 8009036:	7893      	ldrb	r3, [r2, #2]
 8009038:	2b6c      	cmp	r3, #108	; 0x6c
 800903a:	f47f af45 	bne.w	8008ec8 <d_template_args+0x80>
 800903e:	4620      	mov	r0, r4
 8009040:	f7fe fb4c 	bl	80076dc <d_type>
 8009044:	68e1      	ldr	r1, [r4, #12]
 8009046:	4607      	mov	r7, r0
 8009048:	e7e6      	b.n	8009018 <d_template_args+0x1d0>
 800904a:	4620      	mov	r0, r4
 800904c:	f7fe fae6 	bl	800761c <d_expr_primary>
 8009050:	68e3      	ldr	r3, [r4, #12]
 8009052:	4602      	mov	r2, r0
 8009054:	e78a      	b.n	8008f6c <d_template_args+0x124>
 8009056:	4620      	mov	r0, r4
 8009058:	f7fb fbbc 	bl	80047d4 <d_template_param>
 800905c:	68e3      	ldr	r3, [r4, #12]
 800905e:	4602      	mov	r2, r0
 8009060:	e784      	b.n	8008f6c <d_template_args+0x124>
 8009062:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009066:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009068:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800906c:	f8d9 a000 	ldr.w	sl, [r9]
 8009070:	4995      	ldr	r1, [pc, #596]	; (80092c8 <d_template_args+0x480>)
 8009072:	3b02      	subs	r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	6323      	str	r3, [r4, #48]	; 0x30
 8009078:	4650      	mov	r0, sl
 800907a:	f004 fd75 	bl	800db68 <strcmp>
 800907e:	2800      	cmp	r0, #0
 8009080:	f000 8115 	beq.w	80092ae <d_template_args+0x466>
 8009084:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009088:	2b03      	cmp	r3, #3
 800908a:	d889      	bhi.n	8008fa0 <d_template_args+0x158>
 800908c:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <d_template_args+0x24c>)
 800908e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009092:	bf00      	nop
 8009094:	08009113 	.word	0x08009113
 8009098:	0800918d 	.word	0x0800918d
 800909c:	080090a9 	.word	0x080090a9
 80090a0:	08008f87 	.word	0x08008f87
 80090a4:	f04f 0a00 	mov.w	sl, #0
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	785a      	ldrb	r2, [r3, #1]
 80090ae:	2a63      	cmp	r2, #99	; 0x63
 80090b0:	f000 8112 	beq.w	80092d8 <d_template_args+0x490>
 80090b4:	4620      	mov	r0, r4
 80090b6:	f003 faa9 	bl	800c60c <d_expression_1>
 80090ba:	4681      	mov	r9, r0
 80090bc:	4650      	mov	r0, sl
 80090be:	4983      	ldr	r1, [pc, #524]	; (80092cc <d_template_args+0x484>)
 80090c0:	f004 fd52 	bl	800db68 <strcmp>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	f000 80f6 	beq.w	80092b6 <d_template_args+0x46e>
 80090ca:	4650      	mov	r0, sl
 80090cc:	4980      	ldr	r1, [pc, #512]	; (80092d0 <d_template_args+0x488>)
 80090ce:	f004 fd4b 	bl	800db68 <strcmp>
 80090d2:	b130      	cbz	r0, 80090e2 <d_template_args+0x29a>
 80090d4:	4650      	mov	r0, sl
 80090d6:	497f      	ldr	r1, [pc, #508]	; (80092d4 <d_template_args+0x48c>)
 80090d8:	f004 fd46 	bl	800db68 <strcmp>
 80090dc:	2800      	cmp	r0, #0
 80090de:	f040 81c3 	bne.w	8009468 <d_template_args+0x620>
 80090e2:	4620      	mov	r0, r4
 80090e4:	f7ff fd70 	bl	8008bc8 <d_unqualified_name>
 80090e8:	68e3      	ldr	r3, [r4, #12]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b49      	cmp	r3, #73	; 0x49
 80090ee:	4682      	mov	sl, r0
 80090f0:	f000 820b 	beq.w	800950a <d_template_args+0x6c2>
 80090f4:	464a      	mov	r2, r9
 80090f6:	4653      	mov	r3, sl
 80090f8:	2137      	movs	r1, #55	; 0x37
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7fb f91c 	bl	8004338 <d_make_comp>
 8009100:	463a      	mov	r2, r7
 8009102:	4603      	mov	r3, r0
 8009104:	2136      	movs	r1, #54	; 0x36
 8009106:	4620      	mov	r0, r4
 8009108:	f7fb f916 	bl	8004338 <d_make_comp>
 800910c:	68e3      	ldr	r3, [r4, #12]
 800910e:	4602      	mov	r2, r0
 8009110:	e72c      	b.n	8008f6c <d_template_args+0x124>
 8009112:	463a      	mov	r2, r7
 8009114:	2300      	movs	r3, #0
 8009116:	4620      	mov	r0, r4
 8009118:	2134      	movs	r1, #52	; 0x34
 800911a:	f7fb f90d 	bl	8004338 <d_make_comp>
 800911e:	68e3      	ldr	r3, [r4, #12]
 8009120:	4602      	mov	r2, r0
 8009122:	e723      	b.n	8008f6c <d_template_args+0x124>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b03      	cmp	r3, #3
 8009128:	f63f af3a 	bhi.w	8008fa0 <d_template_args+0x158>
 800912c:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <d_template_args+0x2ec>)
 800912e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009132:	bf00      	nop
 8009134:	08009113 	.word	0x08009113
 8009138:	08009161 	.word	0x08009161
 800913c:	080090a5 	.word	0x080090a5
 8009140:	08008f83 	.word	0x08008f83
 8009144:	4620      	mov	r0, r4
 8009146:	f7ff fe7f 	bl	8008e48 <d_template_args>
 800914a:	463a      	mov	r2, r7
 800914c:	4603      	mov	r3, r0
 800914e:	2104      	movs	r1, #4
 8009150:	4620      	mov	r0, r4
 8009152:	f7fb f8f1 	bl	8004338 <d_make_comp>
 8009156:	68e3      	ldr	r3, [r4, #12]
 8009158:	4602      	mov	r2, r0
 800915a:	e707      	b.n	8008f6c <d_template_args+0x124>
 800915c:	3301      	adds	r3, #1
 800915e:	60e3      	str	r3, [r4, #12]
 8009160:	4620      	mov	r0, r4
 8009162:	f003 fa53 	bl	800c60c <d_expression_1>
 8009166:	4603      	mov	r3, r0
 8009168:	463a      	mov	r2, r7
 800916a:	4620      	mov	r0, r4
 800916c:	2135      	movs	r1, #53	; 0x35
 800916e:	f7fb f8e3 	bl	8004338 <d_make_comp>
 8009172:	68e3      	ldr	r3, [r4, #12]
 8009174:	4602      	mov	r2, r0
 8009176:	e6f9      	b.n	8008f6c <d_template_args+0x124>
 8009178:	3102      	adds	r1, #2
 800917a:	2200      	movs	r2, #0
 800917c:	60c1      	str	r1, [r0, #12]
 800917e:	4613      	mov	r3, r2
 8009180:	212f      	movs	r1, #47	; 0x2f
 8009182:	b005      	add	sp, #20
 8009184:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	f7fb b8d6 	b.w	8004338 <d_make_comp>
 800918c:	f89a 3000 	ldrb.w	r3, [sl]
 8009190:	2b70      	cmp	r3, #112	; 0x70
 8009192:	d001      	beq.n	8009198 <d_template_args+0x350>
 8009194:	2b6d      	cmp	r3, #109	; 0x6d
 8009196:	d1e3      	bne.n	8009160 <d_template_args+0x318>
 8009198:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800919c:	429a      	cmp	r2, r3
 800919e:	d1df      	bne.n	8009160 <d_template_args+0x318>
 80091a0:	68e3      	ldr	r3, [r4, #12]
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	2a5f      	cmp	r2, #95	; 0x5f
 80091a6:	d0d9      	beq.n	800915c <d_template_args+0x314>
 80091a8:	4620      	mov	r0, r4
 80091aa:	f003 fa2f 	bl	800c60c <d_expression_1>
 80091ae:	4602      	mov	r2, r0
 80091b0:	4613      	mov	r3, r2
 80091b2:	4620      	mov	r0, r4
 80091b4:	2137      	movs	r1, #55	; 0x37
 80091b6:	f7fb f8bf 	bl	8004338 <d_make_comp>
 80091ba:	4603      	mov	r3, r0
 80091bc:	463a      	mov	r2, r7
 80091be:	4620      	mov	r0, r4
 80091c0:	2135      	movs	r1, #53	; 0x35
 80091c2:	f7fb f8b9 	bl	8004338 <d_make_comp>
 80091c6:	4602      	mov	r2, r0
 80091c8:	68e3      	ldr	r3, [r4, #12]
 80091ca:	e6cf      	b.n	8008f6c <d_template_args+0x124>
 80091cc:	3203      	adds	r2, #3
 80091ce:	60e2      	str	r2, [r4, #12]
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7fe fa83 	bl	80076dc <d_type>
 80091d6:	4681      	mov	r9, r0
 80091d8:	4620      	mov	r0, r4
 80091da:	f7ff fcf5 	bl	8008bc8 <d_unqualified_name>
 80091de:	68e3      	ldr	r3, [r4, #12]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b49      	cmp	r3, #73	; 0x49
 80091e4:	4682      	mov	sl, r0
 80091e6:	d050      	beq.n	800928a <d_template_args+0x442>
 80091e8:	4603      	mov	r3, r0
 80091ea:	464a      	mov	r2, r9
 80091ec:	4639      	mov	r1, r7
 80091ee:	4620      	mov	r0, r4
 80091f0:	f7fb f8a2 	bl	8004338 <d_make_comp>
 80091f4:	68e3      	ldr	r3, [r4, #12]
 80091f6:	4602      	mov	r2, r0
 80091f8:	e6b8      	b.n	8008f6c <d_template_args+0x124>
 80091fa:	4620      	mov	r0, r4
 80091fc:	f7fb fad2 	bl	80047a4 <d_compact_number>
 8009200:	3001      	adds	r0, #1
 8009202:	f47f aef1 	bne.w	8008fe8 <d_template_args+0x1a0>
 8009206:	e7de      	b.n	80091c6 <d_template_args+0x37e>
 8009208:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800920c:	2b77      	cmp	r3, #119	; 0x77
 800920e:	d002      	beq.n	8009216 <d_template_args+0x3ce>
 8009210:	2b61      	cmp	r3, #97	; 0x61
 8009212:	f47f aec5 	bne.w	8008fa0 <d_template_args+0x158>
 8009216:	215f      	movs	r1, #95	; 0x5f
 8009218:	4620      	mov	r0, r4
 800921a:	f001 ff2b 	bl	800b074 <d_exprlist>
 800921e:	4682      	mov	sl, r0
 8009220:	4620      	mov	r0, r4
 8009222:	f7fe fa5b 	bl	80076dc <d_type>
 8009226:	68e3      	ldr	r3, [r4, #12]
 8009228:	781a      	ldrb	r2, [r3, #0]
 800922a:	2a45      	cmp	r2, #69	; 0x45
 800922c:	4681      	mov	r9, r0
 800922e:	f000 8156 	beq.w	80094de <d_template_args+0x696>
 8009232:	2a70      	cmp	r2, #112	; 0x70
 8009234:	f000 81cf 	beq.w	80095d6 <d_template_args+0x78e>
 8009238:	2a69      	cmp	r2, #105	; 0x69
 800923a:	f040 8113 	bne.w	8009464 <d_template_args+0x61c>
 800923e:	785a      	ldrb	r2, [r3, #1]
 8009240:	2a6c      	cmp	r2, #108	; 0x6c
 8009242:	f040 810f 	bne.w	8009464 <d_template_args+0x61c>
 8009246:	3302      	adds	r3, #2
 8009248:	60e3      	str	r3, [r4, #12]
 800924a:	2145      	movs	r1, #69	; 0x45
 800924c:	4620      	mov	r0, r4
 800924e:	f001 ff11 	bl	800b074 <d_exprlist>
 8009252:	2130      	movs	r1, #48	; 0x30
 8009254:	4603      	mov	r3, r0
 8009256:	2200      	movs	r2, #0
 8009258:	4620      	mov	r0, r4
 800925a:	f7fb f86d 	bl	8004338 <d_make_comp>
 800925e:	4683      	mov	fp, r0
 8009260:	464a      	mov	r2, r9
 8009262:	465b      	mov	r3, fp
 8009264:	213a      	movs	r1, #58	; 0x3a
 8009266:	4620      	mov	r0, r4
 8009268:	f7fb f866 	bl	8004338 <d_make_comp>
 800926c:	4652      	mov	r2, sl
 800926e:	4603      	mov	r3, r0
 8009270:	2139      	movs	r1, #57	; 0x39
 8009272:	4620      	mov	r0, r4
 8009274:	f7fb f860 	bl	8004338 <d_make_comp>
 8009278:	463a      	mov	r2, r7
 800927a:	4603      	mov	r3, r0
 800927c:	2138      	movs	r1, #56	; 0x38
 800927e:	4620      	mov	r0, r4
 8009280:	f7fb f85a 	bl	8004338 <d_make_comp>
 8009284:	68e3      	ldr	r3, [r4, #12]
 8009286:	4602      	mov	r2, r0
 8009288:	e670      	b.n	8008f6c <d_template_args+0x124>
 800928a:	4620      	mov	r0, r4
 800928c:	f7ff fddc 	bl	8008e48 <d_template_args>
 8009290:	4652      	mov	r2, sl
 8009292:	4603      	mov	r3, r0
 8009294:	2104      	movs	r1, #4
 8009296:	4620      	mov	r0, r4
 8009298:	f7fb f84e 	bl	8004338 <d_make_comp>
 800929c:	464a      	mov	r2, r9
 800929e:	4603      	mov	r3, r0
 80092a0:	4639      	mov	r1, r7
 80092a2:	4620      	mov	r0, r4
 80092a4:	f7fb f848 	bl	8004338 <d_make_comp>
 80092a8:	68e3      	ldr	r3, [r4, #12]
 80092aa:	4602      	mov	r2, r0
 80092ac:	e65e      	b.n	8008f6c <d_template_args+0x124>
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7fe fa14 	bl	80076dc <d_type>
 80092b4:	e781      	b.n	80091ba <d_template_args+0x372>
 80092b6:	4620      	mov	r0, r4
 80092b8:	2145      	movs	r1, #69	; 0x45
 80092ba:	f001 fedb 	bl	800b074 <d_exprlist>
 80092be:	4682      	mov	sl, r0
 80092c0:	e718      	b.n	80090f4 <d_template_args+0x2ac>
 80092c2:	bf00      	nop
 80092c4:	0801dd28 	.word	0x0801dd28
 80092c8:	0801dfe8 	.word	0x0801dfe8
 80092cc:	0801dd20 	.word	0x0801dd20
 80092d0:	0801ddf4 	.word	0x0801ddf4
 80092d4:	0801ddf8 	.word	0x0801ddf8
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80092de:	2a01      	cmp	r2, #1
 80092e0:	d903      	bls.n	80092ea <d_template_args+0x4a2>
 80092e2:	3b72      	subs	r3, #114	; 0x72
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	f63f aee5 	bhi.w	80090b4 <d_template_args+0x26c>
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7fe f9f6 	bl	80076dc <d_type>
 80092f0:	4681      	mov	r9, r0
 80092f2:	e6e3      	b.n	80090bc <d_template_args+0x274>
 80092f4:	68e3      	ldr	r3, [r4, #12]
 80092f6:	781a      	ldrb	r2, [r3, #0]
 80092f8:	2a4c      	cmp	r2, #76	; 0x4c
 80092fa:	f000 8203 	beq.w	8009704 <d_template_args+0x8bc>
 80092fe:	2a54      	cmp	r2, #84	; 0x54
 8009300:	f000 836b 	beq.w	80099da <d_template_args+0xb92>
 8009304:	2a73      	cmp	r2, #115	; 0x73
 8009306:	f000 8172 	beq.w	80095ee <d_template_args+0x7a6>
 800930a:	2a66      	cmp	r2, #102	; 0x66
 800930c:	f000 81af 	beq.w	800966e <d_template_args+0x826>
 8009310:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009314:	2909      	cmp	r1, #9
 8009316:	f240 8126 	bls.w	8009566 <d_template_args+0x71e>
 800931a:	2a6f      	cmp	r2, #111	; 0x6f
 800931c:	f000 811d 	beq.w	800955a <d_template_args+0x712>
 8009320:	2a69      	cmp	r2, #105	; 0x69
 8009322:	f000 81f6 	beq.w	8009712 <d_template_args+0x8ca>
 8009326:	2a74      	cmp	r2, #116	; 0x74
 8009328:	f000 835e 	beq.w	80099e8 <d_template_args+0xba0>
 800932c:	4620      	mov	r0, r4
 800932e:	f7ff fbc9 	bl	8008ac4 <d_operator_name>
 8009332:	4682      	mov	sl, r0
 8009334:	2800      	cmp	r0, #0
 8009336:	f000 83b4 	beq.w	8009aa2 <d_template_args+0xc5a>
 800933a:	7803      	ldrb	r3, [r0, #0]
 800933c:	2b31      	cmp	r3, #49	; 0x31
 800933e:	f000 83f6 	beq.w	8009b2e <d_template_args+0xce6>
 8009342:	2b32      	cmp	r3, #50	; 0x32
 8009344:	f000 835a 	beq.w	80099fc <d_template_args+0xbb4>
 8009348:	2b33      	cmp	r3, #51	; 0x33
 800934a:	f040 81f6 	bne.w	800973a <d_template_args+0x8f2>
 800934e:	68e3      	ldr	r3, [r4, #12]
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	2a5f      	cmp	r2, #95	; 0x5f
 8009354:	f001 8061 	beq.w	800a41a <d_template_args+0x15d2>
 8009358:	4620      	mov	r0, r4
 800935a:	f003 f957 	bl	800c60c <d_expression_1>
 800935e:	4603      	mov	r3, r0
 8009360:	4652      	mov	r2, sl
 8009362:	4620      	mov	r0, r4
 8009364:	2135      	movs	r1, #53	; 0x35
 8009366:	f7fa ffe7 	bl	8004338 <d_make_comp>
 800936a:	68e2      	ldr	r2, [r4, #12]
 800936c:	7813      	ldrb	r3, [r2, #0]
 800936e:	4682      	mov	sl, r0
 8009370:	2b4c      	cmp	r3, #76	; 0x4c
 8009372:	f000 8203 	beq.w	800977c <d_template_args+0x934>
 8009376:	2b54      	cmp	r3, #84	; 0x54
 8009378:	f000 8267 	beq.w	800984a <d_template_args+0xa02>
 800937c:	2b73      	cmp	r3, #115	; 0x73
 800937e:	f000 8160 	beq.w	8009642 <d_template_args+0x7fa>
 8009382:	2b66      	cmp	r3, #102	; 0x66
 8009384:	f000 8188 	beq.w	8009698 <d_template_args+0x850>
 8009388:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800938c:	2909      	cmp	r1, #9
 800938e:	f240 8109 	bls.w	80095a4 <d_template_args+0x75c>
 8009392:	2b6f      	cmp	r3, #111	; 0x6f
 8009394:	f000 8100 	beq.w	8009598 <d_template_args+0x750>
 8009398:	2b69      	cmp	r3, #105	; 0x69
 800939a:	f000 81d8 	beq.w	800974e <d_template_args+0x906>
 800939e:	2b74      	cmp	r3, #116	; 0x74
 80093a0:	f000 8312 	beq.w	80099c8 <d_template_args+0xb80>
 80093a4:	4620      	mov	r0, r4
 80093a6:	f7ff fb8d 	bl	8008ac4 <d_operator_name>
 80093aa:	4681      	mov	r9, r0
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f000 82aa 	beq.w	8009906 <d_template_args+0xabe>
 80093b2:	7803      	ldrb	r3, [r0, #0]
 80093b4:	2b31      	cmp	r3, #49	; 0x31
 80093b6:	f000 82e6 	beq.w	8009986 <d_template_args+0xb3e>
 80093ba:	2b32      	cmp	r3, #50	; 0x32
 80093bc:	f000 8251 	beq.w	8009862 <d_template_args+0xa1a>
 80093c0:	2b33      	cmp	r3, #51	; 0x33
 80093c2:	f040 81e7 	bne.w	8009794 <d_template_args+0x94c>
 80093c6:	68e3      	ldr	r3, [r4, #12]
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	2a5f      	cmp	r2, #95	; 0x5f
 80093cc:	f000 878b 	beq.w	800a2e6 <d_template_args+0x149e>
 80093d0:	4620      	mov	r0, r4
 80093d2:	f003 f91b 	bl	800c60c <d_expression_1>
 80093d6:	4603      	mov	r3, r0
 80093d8:	464a      	mov	r2, r9
 80093da:	4620      	mov	r0, r4
 80093dc:	2135      	movs	r1, #53	; 0x35
 80093de:	f7fa ffab 	bl	8004338 <d_make_comp>
 80093e2:	68e3      	ldr	r3, [r4, #12]
 80093e4:	781a      	ldrb	r2, [r3, #0]
 80093e6:	4681      	mov	r9, r0
 80093e8:	2a4c      	cmp	r2, #76	; 0x4c
 80093ea:	f000 81ce 	beq.w	800978a <d_template_args+0x942>
 80093ee:	2a54      	cmp	r2, #84	; 0x54
 80093f0:	f000 8232 	beq.w	8009858 <d_template_args+0xa10>
 80093f4:	2a73      	cmp	r2, #115	; 0x73
 80093f6:	f000 8110 	beq.w	800961a <d_template_args+0x7d2>
 80093fa:	2a66      	cmp	r2, #102	; 0x66
 80093fc:	f000 8162 	beq.w	80096c4 <d_template_args+0x87c>
 8009400:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009404:	2909      	cmp	r1, #9
 8009406:	f240 8091 	bls.w	800952c <d_template_args+0x6e4>
 800940a:	2a6f      	cmp	r2, #111	; 0x6f
 800940c:	f000 8088 	beq.w	8009520 <d_template_args+0x6d8>
 8009410:	2a69      	cmp	r2, #105	; 0x69
 8009412:	f000 81c6 	beq.w	80097a2 <d_template_args+0x95a>
 8009416:	2a74      	cmp	r2, #116	; 0x74
 8009418:	f000 820e 	beq.w	8009838 <d_template_args+0x9f0>
 800941c:	4620      	mov	r0, r4
 800941e:	f7ff fb51 	bl	8008ac4 <d_operator_name>
 8009422:	4683      	mov	fp, r0
 8009424:	2800      	cmp	r0, #0
 8009426:	f43f af1b 	beq.w	8009260 <d_template_args+0x418>
 800942a:	7803      	ldrb	r3, [r0, #0]
 800942c:	2b31      	cmp	r3, #49	; 0x31
 800942e:	f000 8448 	beq.w	8009cc2 <d_template_args+0xe7a>
 8009432:	2b32      	cmp	r3, #50	; 0x32
 8009434:	f000 83a6 	beq.w	8009b84 <d_template_args+0xd3c>
 8009438:	2b33      	cmp	r3, #51	; 0x33
 800943a:	f040 8183 	bne.w	8009744 <d_template_args+0x8fc>
 800943e:	68e3      	ldr	r3, [r4, #12]
 8009440:	781a      	ldrb	r2, [r3, #0]
 8009442:	2a5f      	cmp	r2, #95	; 0x5f
 8009444:	f000 86bd 	beq.w	800a1c2 <d_template_args+0x137a>
 8009448:	4620      	mov	r0, r4
 800944a:	f003 f8df 	bl	800c60c <d_expression_1>
 800944e:	465a      	mov	r2, fp
 8009450:	4603      	mov	r3, r0
 8009452:	2135      	movs	r1, #53	; 0x35
 8009454:	4620      	mov	r0, r4
 8009456:	f7fa ff6f 	bl	8004338 <d_make_comp>
 800945a:	4683      	mov	fp, r0
 800945c:	e700      	b.n	8009260 <d_template_args+0x418>
 800945e:	4602      	mov	r2, r0
 8009460:	68e3      	ldr	r3, [r4, #12]
 8009462:	e583      	b.n	8008f6c <d_template_args+0x124>
 8009464:	2200      	movs	r2, #0
 8009466:	e581      	b.n	8008f6c <d_template_args+0x124>
 8009468:	68e3      	ldr	r3, [r4, #12]
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	2a4c      	cmp	r2, #76	; 0x4c
 800946e:	f000 84e4 	beq.w	8009e3a <d_template_args+0xff2>
 8009472:	2a54      	cmp	r2, #84	; 0x54
 8009474:	f000 84c4 	beq.w	8009e00 <d_template_args+0xfb8>
 8009478:	2a73      	cmp	r2, #115	; 0x73
 800947a:	f000 81c9 	beq.w	8009810 <d_template_args+0x9c8>
 800947e:	2a66      	cmp	r2, #102	; 0x66
 8009480:	f000 81a4 	beq.w	80097cc <d_template_args+0x984>
 8009484:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009488:	2909      	cmp	r1, #9
 800948a:	d932      	bls.n	80094f2 <d_template_args+0x6aa>
 800948c:	2a6f      	cmp	r2, #111	; 0x6f
 800948e:	d02b      	beq.n	80094e8 <d_template_args+0x6a0>
 8009490:	2a69      	cmp	r2, #105	; 0x69
 8009492:	f000 8610 	beq.w	800a0b6 <d_template_args+0x126e>
 8009496:	2a74      	cmp	r2, #116	; 0x74
 8009498:	f000 850e 	beq.w	8009eb8 <d_template_args+0x1070>
 800949c:	4620      	mov	r0, r4
 800949e:	f7ff fb11 	bl	8008ac4 <d_operator_name>
 80094a2:	4682      	mov	sl, r0
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f000 8369 	beq.w	8009b7c <d_template_args+0xd34>
 80094aa:	7803      	ldrb	r3, [r0, #0]
 80094ac:	2b31      	cmp	r3, #49	; 0x31
 80094ae:	f000 846d 	beq.w	8009d8c <d_template_args+0xf44>
 80094b2:	2b32      	cmp	r3, #50	; 0x32
 80094b4:	f000 85a8 	beq.w	800a008 <d_template_args+0x11c0>
 80094b8:	2b33      	cmp	r3, #51	; 0x33
 80094ba:	f040 835f 	bne.w	8009b7c <d_template_args+0xd34>
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	781a      	ldrb	r2, [r3, #0]
 80094c2:	2a5f      	cmp	r2, #95	; 0x5f
 80094c4:	f000 8750 	beq.w	800a368 <d_template_args+0x1520>
 80094c8:	4620      	mov	r0, r4
 80094ca:	f003 f89f 	bl	800c60c <d_expression_1>
 80094ce:	4652      	mov	r2, sl
 80094d0:	4603      	mov	r3, r0
 80094d2:	2135      	movs	r1, #53	; 0x35
 80094d4:	4620      	mov	r0, r4
 80094d6:	f7fa ff2f 	bl	8004338 <d_make_comp>
 80094da:	4682      	mov	sl, r0
 80094dc:	e60a      	b.n	80090f4 <d_template_args+0x2ac>
 80094de:	3301      	adds	r3, #1
 80094e0:	60e3      	str	r3, [r4, #12]
 80094e2:	f04f 0b00 	mov.w	fp, #0
 80094e6:	e6bb      	b.n	8009260 <d_template_args+0x418>
 80094e8:	785a      	ldrb	r2, [r3, #1]
 80094ea:	2a6e      	cmp	r2, #110	; 0x6e
 80094ec:	d1d6      	bne.n	800949c <d_template_args+0x654>
 80094ee:	3302      	adds	r3, #2
 80094f0:	60e3      	str	r3, [r4, #12]
 80094f2:	4620      	mov	r0, r4
 80094f4:	f7ff fb68 	bl	8008bc8 <d_unqualified_name>
 80094f8:	4682      	mov	sl, r0
 80094fa:	2800      	cmp	r0, #0
 80094fc:	f000 833e 	beq.w	8009b7c <d_template_args+0xd34>
 8009500:	68e3      	ldr	r3, [r4, #12]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b49      	cmp	r3, #73	; 0x49
 8009506:	f47f adf5 	bne.w	80090f4 <d_template_args+0x2ac>
 800950a:	4620      	mov	r0, r4
 800950c:	f7ff fc9c 	bl	8008e48 <d_template_args>
 8009510:	4652      	mov	r2, sl
 8009512:	4603      	mov	r3, r0
 8009514:	2104      	movs	r1, #4
 8009516:	4620      	mov	r0, r4
 8009518:	f7fa ff0e 	bl	8004338 <d_make_comp>
 800951c:	4682      	mov	sl, r0
 800951e:	e5e9      	b.n	80090f4 <d_template_args+0x2ac>
 8009520:	785a      	ldrb	r2, [r3, #1]
 8009522:	2a6e      	cmp	r2, #110	; 0x6e
 8009524:	f47f af7a 	bne.w	800941c <d_template_args+0x5d4>
 8009528:	3302      	adds	r3, #2
 800952a:	60e3      	str	r3, [r4, #12]
 800952c:	4620      	mov	r0, r4
 800952e:	f7ff fb4b 	bl	8008bc8 <d_unqualified_name>
 8009532:	4683      	mov	fp, r0
 8009534:	2800      	cmp	r0, #0
 8009536:	f43f ae93 	beq.w	8009260 <d_template_args+0x418>
 800953a:	68e3      	ldr	r3, [r4, #12]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b49      	cmp	r3, #73	; 0x49
 8009540:	f47f ae8e 	bne.w	8009260 <d_template_args+0x418>
 8009544:	4620      	mov	r0, r4
 8009546:	f7ff fc7f 	bl	8008e48 <d_template_args>
 800954a:	465a      	mov	r2, fp
 800954c:	4603      	mov	r3, r0
 800954e:	2104      	movs	r1, #4
 8009550:	4620      	mov	r0, r4
 8009552:	f7fa fef1 	bl	8004338 <d_make_comp>
 8009556:	4683      	mov	fp, r0
 8009558:	e682      	b.n	8009260 <d_template_args+0x418>
 800955a:	785a      	ldrb	r2, [r3, #1]
 800955c:	2a6e      	cmp	r2, #110	; 0x6e
 800955e:	f47f aee5 	bne.w	800932c <d_template_args+0x4e4>
 8009562:	3302      	adds	r3, #2
 8009564:	60e3      	str	r3, [r4, #12]
 8009566:	4620      	mov	r0, r4
 8009568:	f7ff fb2e 	bl	8008bc8 <d_unqualified_name>
 800956c:	68e2      	ldr	r2, [r4, #12]
 800956e:	4682      	mov	sl, r0
 8009570:	7813      	ldrb	r3, [r2, #0]
 8009572:	2800      	cmp	r0, #0
 8009574:	f43f aefc 	beq.w	8009370 <d_template_args+0x528>
 8009578:	2b49      	cmp	r3, #73	; 0x49
 800957a:	f47f aef9 	bne.w	8009370 <d_template_args+0x528>
 800957e:	4620      	mov	r0, r4
 8009580:	f7ff fc62 	bl	8008e48 <d_template_args>
 8009584:	4652      	mov	r2, sl
 8009586:	4603      	mov	r3, r0
 8009588:	2104      	movs	r1, #4
 800958a:	4620      	mov	r0, r4
 800958c:	f7fa fed4 	bl	8004338 <d_make_comp>
 8009590:	68e2      	ldr	r2, [r4, #12]
 8009592:	4682      	mov	sl, r0
 8009594:	7813      	ldrb	r3, [r2, #0]
 8009596:	e6eb      	b.n	8009370 <d_template_args+0x528>
 8009598:	7853      	ldrb	r3, [r2, #1]
 800959a:	2b6e      	cmp	r3, #110	; 0x6e
 800959c:	f47f af02 	bne.w	80093a4 <d_template_args+0x55c>
 80095a0:	1c93      	adds	r3, r2, #2
 80095a2:	60e3      	str	r3, [r4, #12]
 80095a4:	4620      	mov	r0, r4
 80095a6:	f7ff fb0f 	bl	8008bc8 <d_unqualified_name>
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	4681      	mov	r9, r0
 80095ae:	781a      	ldrb	r2, [r3, #0]
 80095b0:	2800      	cmp	r0, #0
 80095b2:	f43f af19 	beq.w	80093e8 <d_template_args+0x5a0>
 80095b6:	2a49      	cmp	r2, #73	; 0x49
 80095b8:	f47f af16 	bne.w	80093e8 <d_template_args+0x5a0>
 80095bc:	4620      	mov	r0, r4
 80095be:	f7ff fc43 	bl	8008e48 <d_template_args>
 80095c2:	464a      	mov	r2, r9
 80095c4:	4603      	mov	r3, r0
 80095c6:	2104      	movs	r1, #4
 80095c8:	4620      	mov	r0, r4
 80095ca:	f7fa feb5 	bl	8004338 <d_make_comp>
 80095ce:	68e3      	ldr	r3, [r4, #12]
 80095d0:	4681      	mov	r9, r0
 80095d2:	781a      	ldrb	r2, [r3, #0]
 80095d4:	e708      	b.n	80093e8 <d_template_args+0x5a0>
 80095d6:	785a      	ldrb	r2, [r3, #1]
 80095d8:	2a69      	cmp	r2, #105	; 0x69
 80095da:	f47f af43 	bne.w	8009464 <d_template_args+0x61c>
 80095de:	3302      	adds	r3, #2
 80095e0:	60e3      	str	r3, [r4, #12]
 80095e2:	4620      	mov	r0, r4
 80095e4:	2145      	movs	r1, #69	; 0x45
 80095e6:	f001 fd45 	bl	800b074 <d_exprlist>
 80095ea:	4683      	mov	fp, r0
 80095ec:	e638      	b.n	8009260 <d_template_args+0x418>
 80095ee:	785a      	ldrb	r2, [r3, #1]
 80095f0:	2a72      	cmp	r2, #114	; 0x72
 80095f2:	f000 8447 	beq.w	8009e84 <d_template_args+0x103c>
 80095f6:	2a70      	cmp	r2, #112	; 0x70
 80095f8:	f47f ae98 	bne.w	800932c <d_template_args+0x4e4>
 80095fc:	3302      	adds	r3, #2
 80095fe:	60e3      	str	r3, [r4, #12]
 8009600:	4620      	mov	r0, r4
 8009602:	f003 f803 	bl	800c60c <d_expression_1>
 8009606:	464b      	mov	r3, r9
 8009608:	4602      	mov	r2, r0
 800960a:	2149      	movs	r1, #73	; 0x49
 800960c:	4620      	mov	r0, r4
 800960e:	f7fa fe93 	bl	8004338 <d_make_comp>
 8009612:	68e2      	ldr	r2, [r4, #12]
 8009614:	4682      	mov	sl, r0
 8009616:	7813      	ldrb	r3, [r2, #0]
 8009618:	e6aa      	b.n	8009370 <d_template_args+0x528>
 800961a:	785a      	ldrb	r2, [r3, #1]
 800961c:	2a72      	cmp	r2, #114	; 0x72
 800961e:	f000 83f5 	beq.w	8009e0c <d_template_args+0xfc4>
 8009622:	2a70      	cmp	r2, #112	; 0x70
 8009624:	f47f aefa 	bne.w	800941c <d_template_args+0x5d4>
 8009628:	3302      	adds	r3, #2
 800962a:	60e3      	str	r3, [r4, #12]
 800962c:	4620      	mov	r0, r4
 800962e:	f002 ffed 	bl	800c60c <d_expression_1>
 8009632:	2149      	movs	r1, #73	; 0x49
 8009634:	4602      	mov	r2, r0
 8009636:	2300      	movs	r3, #0
 8009638:	4620      	mov	r0, r4
 800963a:	f7fa fe7d 	bl	8004338 <d_make_comp>
 800963e:	4683      	mov	fp, r0
 8009640:	e60e      	b.n	8009260 <d_template_args+0x418>
 8009642:	7853      	ldrb	r3, [r2, #1]
 8009644:	2b72      	cmp	r3, #114	; 0x72
 8009646:	f000 8366 	beq.w	8009d16 <d_template_args+0xece>
 800964a:	2b70      	cmp	r3, #112	; 0x70
 800964c:	f47f aeaa 	bne.w	80093a4 <d_template_args+0x55c>
 8009650:	1c93      	adds	r3, r2, #2
 8009652:	60e3      	str	r3, [r4, #12]
 8009654:	4620      	mov	r0, r4
 8009656:	f002 ffd9 	bl	800c60c <d_expression_1>
 800965a:	2149      	movs	r1, #73	; 0x49
 800965c:	4602      	mov	r2, r0
 800965e:	4620      	mov	r0, r4
 8009660:	2300      	movs	r3, #0
 8009662:	f7fa fe69 	bl	8004338 <d_make_comp>
 8009666:	68e3      	ldr	r3, [r4, #12]
 8009668:	4681      	mov	r9, r0
 800966a:	781a      	ldrb	r2, [r3, #0]
 800966c:	e6bc      	b.n	80093e8 <d_template_args+0x5a0>
 800966e:	785a      	ldrb	r2, [r3, #1]
 8009670:	2a70      	cmp	r2, #112	; 0x70
 8009672:	f47f ae5b 	bne.w	800932c <d_template_args+0x4e4>
 8009676:	1c9a      	adds	r2, r3, #2
 8009678:	60e2      	str	r2, [r4, #12]
 800967a:	789a      	ldrb	r2, [r3, #2]
 800967c:	2a54      	cmp	r2, #84	; 0x54
 800967e:	f040 83f6 	bne.w	8009e6e <d_template_args+0x1026>
 8009682:	1cda      	adds	r2, r3, #3
 8009684:	60e2      	str	r2, [r4, #12]
 8009686:	6963      	ldr	r3, [r4, #20]
 8009688:	69a1      	ldr	r1, [r4, #24]
 800968a:	428b      	cmp	r3, r1
 800968c:	f2c0 83db 	blt.w	8009e46 <d_template_args+0xffe>
 8009690:	7813      	ldrb	r3, [r2, #0]
 8009692:	f04f 0a00 	mov.w	sl, #0
 8009696:	e66b      	b.n	8009370 <d_template_args+0x528>
 8009698:	7853      	ldrb	r3, [r2, #1]
 800969a:	2b70      	cmp	r3, #112	; 0x70
 800969c:	f47f ae82 	bne.w	80093a4 <d_template_args+0x55c>
 80096a0:	1c93      	adds	r3, r2, #2
 80096a2:	60e3      	str	r3, [r4, #12]
 80096a4:	7893      	ldrb	r3, [r2, #2]
 80096a6:	2b54      	cmp	r3, #84	; 0x54
 80096a8:	f040 84fa 	bne.w	800a0a0 <d_template_args+0x1258>
 80096ac:	1cd3      	adds	r3, r2, #3
 80096ae:	60e3      	str	r3, [r4, #12]
 80096b0:	2000      	movs	r0, #0
 80096b2:	6962      	ldr	r2, [r4, #20]
 80096b4:	69a1      	ldr	r1, [r4, #24]
 80096b6:	428a      	cmp	r2, r1
 80096b8:	f2c0 84de 	blt.w	800a078 <d_template_args+0x1230>
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	f04f 0900 	mov.w	r9, #0
 80096c2:	e691      	b.n	80093e8 <d_template_args+0x5a0>
 80096c4:	785a      	ldrb	r2, [r3, #1]
 80096c6:	2a70      	cmp	r2, #112	; 0x70
 80096c8:	f47f aea8 	bne.w	800941c <d_template_args+0x5d4>
 80096cc:	1c9a      	adds	r2, r3, #2
 80096ce:	60e2      	str	r2, [r4, #12]
 80096d0:	789a      	ldrb	r2, [r3, #2]
 80096d2:	2a54      	cmp	r2, #84	; 0x54
 80096d4:	f040 8316 	bne.w	8009d04 <d_template_args+0xebc>
 80096d8:	3303      	adds	r3, #3
 80096da:	60e3      	str	r3, [r4, #12]
 80096dc:	2000      	movs	r0, #0
 80096de:	6963      	ldr	r3, [r4, #20]
 80096e0:	69a2      	ldr	r2, [r4, #24]
 80096e2:	4293      	cmp	r3, r2
 80096e4:	da2e      	bge.n	8009744 <d_template_args+0x8fc>
 80096e6:	6922      	ldr	r2, [r4, #16]
 80096e8:	1c59      	adds	r1, r3, #1
 80096ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80096ee:	eb12 0b83 	adds.w	fp, r2, r3, lsl #2
 80096f2:	6161      	str	r1, [r4, #20]
 80096f4:	f43f adb4 	beq.w	8009260 <d_template_args+0x418>
 80096f8:	2106      	movs	r1, #6
 80096fa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 80096fe:	f8cb 0004 	str.w	r0, [fp, #4]
 8009702:	e5ad      	b.n	8009260 <d_template_args+0x418>
 8009704:	4620      	mov	r0, r4
 8009706:	f7fd ff89 	bl	800761c <d_expr_primary>
 800970a:	68e2      	ldr	r2, [r4, #12]
 800970c:	4682      	mov	sl, r0
 800970e:	7813      	ldrb	r3, [r2, #0]
 8009710:	e62e      	b.n	8009370 <d_template_args+0x528>
 8009712:	785a      	ldrb	r2, [r3, #1]
 8009714:	2a6c      	cmp	r2, #108	; 0x6c
 8009716:	f47f ae09 	bne.w	800932c <d_template_args+0x4e4>
 800971a:	3302      	adds	r3, #2
 800971c:	60e3      	str	r3, [r4, #12]
 800971e:	2145      	movs	r1, #69	; 0x45
 8009720:	4620      	mov	r0, r4
 8009722:	f001 fca7 	bl	800b074 <d_exprlist>
 8009726:	464a      	mov	r2, r9
 8009728:	4603      	mov	r3, r0
 800972a:	2130      	movs	r1, #48	; 0x30
 800972c:	4620      	mov	r0, r4
 800972e:	f7fa fe03 	bl	8004338 <d_make_comp>
 8009732:	68e2      	ldr	r2, [r4, #12]
 8009734:	4682      	mov	sl, r0
 8009736:	7813      	ldrb	r3, [r2, #0]
 8009738:	e61a      	b.n	8009370 <d_template_args+0x528>
 800973a:	68e2      	ldr	r2, [r4, #12]
 800973c:	f04f 0a00 	mov.w	sl, #0
 8009740:	7813      	ldrb	r3, [r2, #0]
 8009742:	e615      	b.n	8009370 <d_template_args+0x528>
 8009744:	f04f 0b00 	mov.w	fp, #0
 8009748:	e58a      	b.n	8009260 <d_template_args+0x418>
 800974a:	f04f 0a00 	mov.w	sl, #0
 800974e:	7853      	ldrb	r3, [r2, #1]
 8009750:	2b6c      	cmp	r3, #108	; 0x6c
 8009752:	f47f ae27 	bne.w	80093a4 <d_template_args+0x55c>
 8009756:	f04f 0900 	mov.w	r9, #0
 800975a:	68e3      	ldr	r3, [r4, #12]
 800975c:	3302      	adds	r3, #2
 800975e:	60e3      	str	r3, [r4, #12]
 8009760:	2145      	movs	r1, #69	; 0x45
 8009762:	4620      	mov	r0, r4
 8009764:	f001 fc86 	bl	800b074 <d_exprlist>
 8009768:	464a      	mov	r2, r9
 800976a:	4603      	mov	r3, r0
 800976c:	2130      	movs	r1, #48	; 0x30
 800976e:	4620      	mov	r0, r4
 8009770:	f7fa fde2 	bl	8004338 <d_make_comp>
 8009774:	68e3      	ldr	r3, [r4, #12]
 8009776:	4681      	mov	r9, r0
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	e635      	b.n	80093e8 <d_template_args+0x5a0>
 800977c:	4620      	mov	r0, r4
 800977e:	f7fd ff4d 	bl	800761c <d_expr_primary>
 8009782:	68e3      	ldr	r3, [r4, #12]
 8009784:	4681      	mov	r9, r0
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	e62e      	b.n	80093e8 <d_template_args+0x5a0>
 800978a:	4620      	mov	r0, r4
 800978c:	f7fd ff46 	bl	800761c <d_expr_primary>
 8009790:	4683      	mov	fp, r0
 8009792:	e565      	b.n	8009260 <d_template_args+0x418>
 8009794:	68e3      	ldr	r3, [r4, #12]
 8009796:	f04f 0900 	mov.w	r9, #0
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	e624      	b.n	80093e8 <d_template_args+0x5a0>
 800979e:	f04f 0900 	mov.w	r9, #0
 80097a2:	785b      	ldrb	r3, [r3, #1]
 80097a4:	2b6c      	cmp	r3, #108	; 0x6c
 80097a6:	f47f ae39 	bne.w	800941c <d_template_args+0x5d4>
 80097aa:	f04f 0b00 	mov.w	fp, #0
 80097ae:	68e3      	ldr	r3, [r4, #12]
 80097b0:	3302      	adds	r3, #2
 80097b2:	60e3      	str	r3, [r4, #12]
 80097b4:	2145      	movs	r1, #69	; 0x45
 80097b6:	4620      	mov	r0, r4
 80097b8:	f001 fc5c 	bl	800b074 <d_exprlist>
 80097bc:	465a      	mov	r2, fp
 80097be:	4603      	mov	r3, r0
 80097c0:	2130      	movs	r1, #48	; 0x30
 80097c2:	4620      	mov	r0, r4
 80097c4:	f7fa fdb8 	bl	8004338 <d_make_comp>
 80097c8:	4683      	mov	fp, r0
 80097ca:	e549      	b.n	8009260 <d_template_args+0x418>
 80097cc:	785a      	ldrb	r2, [r3, #1]
 80097ce:	2a70      	cmp	r2, #112	; 0x70
 80097d0:	f47f ae64 	bne.w	800949c <d_template_args+0x654>
 80097d4:	1c9a      	adds	r2, r3, #2
 80097d6:	60e2      	str	r2, [r4, #12]
 80097d8:	789a      	ldrb	r2, [r3, #2]
 80097da:	2a54      	cmp	r2, #84	; 0x54
 80097dc:	f040 81c8 	bne.w	8009b70 <d_template_args+0xd28>
 80097e0:	3303      	adds	r3, #3
 80097e2:	60e3      	str	r3, [r4, #12]
 80097e4:	2000      	movs	r0, #0
 80097e6:	6962      	ldr	r2, [r4, #20]
 80097e8:	69a3      	ldr	r3, [r4, #24]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	f280 81c6 	bge.w	8009b7c <d_template_args+0xd34>
 80097f0:	230c      	movs	r3, #12
 80097f2:	6921      	ldr	r1, [r4, #16]
 80097f4:	fb03 f302 	mul.w	r3, r3, r2
 80097f8:	eb11 0a03 	adds.w	sl, r1, r3
 80097fc:	f102 0201 	add.w	r2, r2, #1
 8009800:	6162      	str	r2, [r4, #20]
 8009802:	f43f ac77 	beq.w	80090f4 <d_template_args+0x2ac>
 8009806:	2206      	movs	r2, #6
 8009808:	54ca      	strb	r2, [r1, r3]
 800980a:	f8ca 0004 	str.w	r0, [sl, #4]
 800980e:	e471      	b.n	80090f4 <d_template_args+0x2ac>
 8009810:	785a      	ldrb	r2, [r3, #1]
 8009812:	2a72      	cmp	r2, #114	; 0x72
 8009814:	f000 856f 	beq.w	800a2f6 <d_template_args+0x14ae>
 8009818:	2a70      	cmp	r2, #112	; 0x70
 800981a:	f47f ae3f 	bne.w	800949c <d_template_args+0x654>
 800981e:	3302      	adds	r3, #2
 8009820:	60e3      	str	r3, [r4, #12]
 8009822:	4620      	mov	r0, r4
 8009824:	f002 fef2 	bl	800c60c <d_expression_1>
 8009828:	2149      	movs	r1, #73	; 0x49
 800982a:	4602      	mov	r2, r0
 800982c:	2300      	movs	r3, #0
 800982e:	4620      	mov	r0, r4
 8009830:	f7fa fd82 	bl	8004338 <d_make_comp>
 8009834:	4682      	mov	sl, r0
 8009836:	e45d      	b.n	80090f4 <d_template_args+0x2ac>
 8009838:	785b      	ldrb	r3, [r3, #1]
 800983a:	2b6c      	cmp	r3, #108	; 0x6c
 800983c:	f47f adee 	bne.w	800941c <d_template_args+0x5d4>
 8009840:	4620      	mov	r0, r4
 8009842:	f7fd ff4b 	bl	80076dc <d_type>
 8009846:	4683      	mov	fp, r0
 8009848:	e7b1      	b.n	80097ae <d_template_args+0x966>
 800984a:	4620      	mov	r0, r4
 800984c:	f7fa ffc2 	bl	80047d4 <d_template_param>
 8009850:	68e3      	ldr	r3, [r4, #12]
 8009852:	4681      	mov	r9, r0
 8009854:	781a      	ldrb	r2, [r3, #0]
 8009856:	e5c7      	b.n	80093e8 <d_template_args+0x5a0>
 8009858:	4620      	mov	r0, r4
 800985a:	f7fa ffbb 	bl	80047d4 <d_template_param>
 800985e:	4683      	mov	fp, r0
 8009860:	e4fe      	b.n	8009260 <d_template_args+0x418>
 8009862:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009866:	2b03      	cmp	r3, #3
 8009868:	d894      	bhi.n	8009794 <d_template_args+0x94c>
 800986a:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <d_template_args+0xa28>)
 800986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009870:	0800997f 	.word	0x0800997f
 8009874:	080093d1 	.word	0x080093d1
 8009878:	0800990d 	.word	0x0800990d
 800987c:	08009881 	.word	0x08009881
 8009880:	f04f 0b00 	mov.w	fp, #0
 8009884:	4658      	mov	r0, fp
 8009886:	49c7      	ldr	r1, [pc, #796]	; (8009ba4 <d_template_args+0xd5c>)
 8009888:	f004 f96e 	bl	800db68 <strcmp>
 800988c:	2800      	cmp	r0, #0
 800988e:	f000 85a4 	beq.w	800a3da <d_template_args+0x1592>
 8009892:	f89b 2000 	ldrb.w	r2, [fp]
 8009896:	2a6e      	cmp	r2, #110	; 0x6e
 8009898:	f47f af7c 	bne.w	8009794 <d_template_args+0x94c>
 800989c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80098a0:	2b77      	cmp	r3, #119	; 0x77
 80098a2:	d002      	beq.n	80098aa <d_template_args+0xa62>
 80098a4:	2b61      	cmp	r3, #97	; 0x61
 80098a6:	f47f af75 	bne.w	8009794 <d_template_args+0x94c>
 80098aa:	215f      	movs	r1, #95	; 0x5f
 80098ac:	4620      	mov	r0, r4
 80098ae:	f001 fbe1 	bl	800b074 <d_exprlist>
 80098b2:	9000      	str	r0, [sp, #0]
 80098b4:	4620      	mov	r0, r4
 80098b6:	f7fd ff11 	bl	80076dc <d_type>
 80098ba:	68e3      	ldr	r3, [r4, #12]
 80098bc:	781a      	ldrb	r2, [r3, #0]
 80098be:	2a45      	cmp	r2, #69	; 0x45
 80098c0:	4683      	mov	fp, r0
 80098c2:	f000 8579 	beq.w	800a3b8 <d_template_args+0x1570>
 80098c6:	2a70      	cmp	r2, #112	; 0x70
 80098c8:	f000 856f 	beq.w	800a3aa <d_template_args+0x1562>
 80098cc:	2a69      	cmp	r2, #105	; 0x69
 80098ce:	f040 8568 	bne.w	800a3a2 <d_template_args+0x155a>
 80098d2:	785a      	ldrb	r2, [r3, #1]
 80098d4:	2a6c      	cmp	r2, #108	; 0x6c
 80098d6:	f47f af62 	bne.w	800979e <d_template_args+0x956>
 80098da:	4620      	mov	r0, r4
 80098dc:	f002 fe96 	bl	800c60c <d_expression_1>
 80098e0:	4603      	mov	r3, r0
 80098e2:	465a      	mov	r2, fp
 80098e4:	213a      	movs	r1, #58	; 0x3a
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7fa fd26 	bl	8004338 <d_make_comp>
 80098ec:	9a00      	ldr	r2, [sp, #0]
 80098ee:	4603      	mov	r3, r0
 80098f0:	2139      	movs	r1, #57	; 0x39
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7fa fd20 	bl	8004338 <d_make_comp>
 80098f8:	464a      	mov	r2, r9
 80098fa:	4603      	mov	r3, r0
 80098fc:	2138      	movs	r1, #56	; 0x38
 80098fe:	4620      	mov	r0, r4
 8009900:	f7fa fd1a 	bl	8004338 <d_make_comp>
 8009904:	4681      	mov	r9, r0
 8009906:	68e3      	ldr	r3, [r4, #12]
 8009908:	781a      	ldrb	r2, [r3, #0]
 800990a:	e56d      	b.n	80093e8 <d_template_args+0x5a0>
 800990c:	f04f 0b00 	mov.w	fp, #0
 8009910:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009914:	6812      	ldr	r2, [r2, #0]
 8009916:	7851      	ldrb	r1, [r2, #1]
 8009918:	2963      	cmp	r1, #99	; 0x63
 800991a:	f000 852d 	beq.w	800a378 <d_template_args+0x1530>
 800991e:	4620      	mov	r0, r4
 8009920:	f002 fe74 	bl	800c60c <d_expression_1>
 8009924:	9000      	str	r0, [sp, #0]
 8009926:	4658      	mov	r0, fp
 8009928:	499f      	ldr	r1, [pc, #636]	; (8009ba8 <d_template_args+0xd60>)
 800992a:	f004 f91d 	bl	800db68 <strcmp>
 800992e:	2800      	cmp	r0, #0
 8009930:	f000 856c 	beq.w	800a40c <d_template_args+0x15c4>
 8009934:	4658      	mov	r0, fp
 8009936:	499d      	ldr	r1, [pc, #628]	; (8009bac <d_template_args+0xd64>)
 8009938:	f004 f916 	bl	800db68 <strcmp>
 800993c:	b130      	cbz	r0, 800994c <d_template_args+0xb04>
 800993e:	4658      	mov	r0, fp
 8009940:	499b      	ldr	r1, [pc, #620]	; (8009bb0 <d_template_args+0xd68>)
 8009942:	f004 f911 	bl	800db68 <strcmp>
 8009946:	2800      	cmp	r0, #0
 8009948:	f040 8525 	bne.w	800a396 <d_template_args+0x154e>
 800994c:	4620      	mov	r0, r4
 800994e:	f7ff f93b 	bl	8008bc8 <d_unqualified_name>
 8009952:	68e3      	ldr	r3, [r4, #12]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	2b49      	cmp	r3, #73	; 0x49
 8009958:	4683      	mov	fp, r0
 800995a:	f000 8532 	beq.w	800a3c2 <d_template_args+0x157a>
 800995e:	9a00      	ldr	r2, [sp, #0]
 8009960:	465b      	mov	r3, fp
 8009962:	2137      	movs	r1, #55	; 0x37
 8009964:	4620      	mov	r0, r4
 8009966:	f7fa fce7 	bl	8004338 <d_make_comp>
 800996a:	464a      	mov	r2, r9
 800996c:	4603      	mov	r3, r0
 800996e:	2136      	movs	r1, #54	; 0x36
 8009970:	4620      	mov	r0, r4
 8009972:	f7fa fce1 	bl	8004338 <d_make_comp>
 8009976:	68e3      	ldr	r3, [r4, #12]
 8009978:	4681      	mov	r9, r0
 800997a:	781a      	ldrb	r2, [r3, #0]
 800997c:	e534      	b.n	80093e8 <d_template_args+0x5a0>
 800997e:	464a      	mov	r2, r9
 8009980:	4620      	mov	r0, r4
 8009982:	2134      	movs	r1, #52	; 0x34
 8009984:	e66c      	b.n	8009660 <d_template_args+0x818>
 8009986:	6843      	ldr	r3, [r0, #4]
 8009988:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	f8d3 b000 	ldr.w	fp, [r3]
 8009990:	4988      	ldr	r1, [pc, #544]	; (8009bb4 <d_template_args+0xd6c>)
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	3a02      	subs	r2, #2
 8009996:	4410      	add	r0, r2
 8009998:	6320      	str	r0, [r4, #48]	; 0x30
 800999a:	4658      	mov	r0, fp
 800999c:	f004 f8e4 	bl	800db68 <strcmp>
 80099a0:	9b00      	ldr	r3, [sp, #0]
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f000 852e 	beq.w	800a404 <d_template_args+0x15bc>
 80099a8:	68da      	ldr	r2, [r3, #12]
 80099aa:	2a03      	cmp	r2, #3
 80099ac:	f63f aef2 	bhi.w	8009794 <d_template_args+0x94c>
 80099b0:	a301      	add	r3, pc, #4	; (adr r3, 80099b8 <d_template_args+0xb70>)
 80099b2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	0800997f 	.word	0x0800997f
 80099bc:	08009dc3 	.word	0x08009dc3
 80099c0:	08009911 	.word	0x08009911
 80099c4:	08009885 	.word	0x08009885
 80099c8:	7853      	ldrb	r3, [r2, #1]
 80099ca:	2b6c      	cmp	r3, #108	; 0x6c
 80099cc:	f47f acea 	bne.w	80093a4 <d_template_args+0x55c>
 80099d0:	4620      	mov	r0, r4
 80099d2:	f7fd fe83 	bl	80076dc <d_type>
 80099d6:	4681      	mov	r9, r0
 80099d8:	e6bf      	b.n	800975a <d_template_args+0x912>
 80099da:	4620      	mov	r0, r4
 80099dc:	f7fa fefa 	bl	80047d4 <d_template_param>
 80099e0:	68e2      	ldr	r2, [r4, #12]
 80099e2:	4682      	mov	sl, r0
 80099e4:	7813      	ldrb	r3, [r2, #0]
 80099e6:	e4c3      	b.n	8009370 <d_template_args+0x528>
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	2b6c      	cmp	r3, #108	; 0x6c
 80099ec:	f47f ac9e 	bne.w	800932c <d_template_args+0x4e4>
 80099f0:	4620      	mov	r0, r4
 80099f2:	f7fd fe73 	bl	80076dc <d_type>
 80099f6:	68e3      	ldr	r3, [r4, #12]
 80099f8:	4681      	mov	r9, r0
 80099fa:	e68e      	b.n	800971a <d_template_args+0x8d2>
 80099fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	f63f ae9a 	bhi.w	800973a <d_template_args+0x8f2>
 8009a06:	a201      	add	r2, pc, #4	; (adr r2, 8009a0c <d_template_args+0xbc4>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009b1b 	.word	0x08009b1b
 8009a10:	08009359 	.word	0x08009359
 8009a14:	08009aa9 	.word	0x08009aa9
 8009a18:	08009a1d 	.word	0x08009a1d
 8009a1c:	f04f 0900 	mov.w	r9, #0
 8009a20:	4648      	mov	r0, r9
 8009a22:	4960      	ldr	r1, [pc, #384]	; (8009ba4 <d_template_args+0xd5c>)
 8009a24:	f004 f8a0 	bl	800db68 <strcmp>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f000 8370 	beq.w	800a10e <d_template_args+0x12c6>
 8009a2e:	f899 3000 	ldrb.w	r3, [r9]
 8009a32:	2b6e      	cmp	r3, #110	; 0x6e
 8009a34:	f47f ae81 	bne.w	800973a <d_template_args+0x8f2>
 8009a38:	f899 3001 	ldrb.w	r3, [r9, #1]
 8009a3c:	2b77      	cmp	r3, #119	; 0x77
 8009a3e:	d002      	beq.n	8009a46 <d_template_args+0xbfe>
 8009a40:	2b61      	cmp	r3, #97	; 0x61
 8009a42:	f47f ae7a 	bne.w	800973a <d_template_args+0x8f2>
 8009a46:	215f      	movs	r1, #95	; 0x5f
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f001 fb13 	bl	800b074 <d_exprlist>
 8009a4e:	4681      	mov	r9, r0
 8009a50:	4620      	mov	r0, r4
 8009a52:	f7fd fe43 	bl	80076dc <d_type>
 8009a56:	68e2      	ldr	r2, [r4, #12]
 8009a58:	7813      	ldrb	r3, [r2, #0]
 8009a5a:	2b45      	cmp	r3, #69	; 0x45
 8009a5c:	4683      	mov	fp, r0
 8009a5e:	f000 839a 	beq.w	800a196 <d_template_args+0x134e>
 8009a62:	2b70      	cmp	r3, #112	; 0x70
 8009a64:	f000 8390 	beq.w	800a188 <d_template_args+0x1340>
 8009a68:	2b69      	cmp	r3, #105	; 0x69
 8009a6a:	f040 8389 	bne.w	800a180 <d_template_args+0x1338>
 8009a6e:	7853      	ldrb	r3, [r2, #1]
 8009a70:	2b6c      	cmp	r3, #108	; 0x6c
 8009a72:	f47f ae6a 	bne.w	800974a <d_template_args+0x902>
 8009a76:	4620      	mov	r0, r4
 8009a78:	f002 fdc8 	bl	800c60c <d_expression_1>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	465a      	mov	r2, fp
 8009a80:	213a      	movs	r1, #58	; 0x3a
 8009a82:	4620      	mov	r0, r4
 8009a84:	f7fa fc58 	bl	8004338 <d_make_comp>
 8009a88:	464a      	mov	r2, r9
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2139      	movs	r1, #57	; 0x39
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7fa fc52 	bl	8004338 <d_make_comp>
 8009a94:	4652      	mov	r2, sl
 8009a96:	4603      	mov	r3, r0
 8009a98:	2138      	movs	r1, #56	; 0x38
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7fa fc4c 	bl	8004338 <d_make_comp>
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	68e2      	ldr	r2, [r4, #12]
 8009aa4:	7813      	ldrb	r3, [r2, #0]
 8009aa6:	e463      	b.n	8009370 <d_template_args+0x528>
 8009aa8:	f04f 0900 	mov.w	r9, #0
 8009aac:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	785a      	ldrb	r2, [r3, #1]
 8009ab4:	2a63      	cmp	r2, #99	; 0x63
 8009ab6:	f000 831c 	beq.w	800a0f2 <d_template_args+0x12aa>
 8009aba:	4620      	mov	r0, r4
 8009abc:	f002 fda6 	bl	800c60c <d_expression_1>
 8009ac0:	4683      	mov	fp, r0
 8009ac2:	4648      	mov	r0, r9
 8009ac4:	4938      	ldr	r1, [pc, #224]	; (8009ba8 <d_template_args+0xd60>)
 8009ac6:	f004 f84f 	bl	800db68 <strcmp>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	f000 830b 	beq.w	800a0e6 <d_template_args+0x129e>
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	4936      	ldr	r1, [pc, #216]	; (8009bac <d_template_args+0xd64>)
 8009ad4:	f004 f848 	bl	800db68 <strcmp>
 8009ad8:	b130      	cbz	r0, 8009ae8 <d_template_args+0xca0>
 8009ada:	4648      	mov	r0, r9
 8009adc:	4934      	ldr	r1, [pc, #208]	; (8009bb0 <d_template_args+0xd68>)
 8009ade:	f004 f843 	bl	800db68 <strcmp>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	f040 831f 	bne.w	800a126 <d_template_args+0x12de>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f7ff f86d 	bl	8008bc8 <d_unqualified_name>
 8009aee:	68e3      	ldr	r3, [r4, #12]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b49      	cmp	r3, #73	; 0x49
 8009af4:	4681      	mov	r9, r0
 8009af6:	f000 8359 	beq.w	800a1ac <d_template_args+0x1364>
 8009afa:	465a      	mov	r2, fp
 8009afc:	464b      	mov	r3, r9
 8009afe:	2137      	movs	r1, #55	; 0x37
 8009b00:	4620      	mov	r0, r4
 8009b02:	f7fa fc19 	bl	8004338 <d_make_comp>
 8009b06:	4652      	mov	r2, sl
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2136      	movs	r1, #54	; 0x36
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f7fa fc13 	bl	8004338 <d_make_comp>
 8009b12:	68e2      	ldr	r2, [r4, #12]
 8009b14:	4682      	mov	sl, r0
 8009b16:	7813      	ldrb	r3, [r2, #0]
 8009b18:	e42a      	b.n	8009370 <d_template_args+0x528>
 8009b1a:	4652      	mov	r2, sl
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	2134      	movs	r1, #52	; 0x34
 8009b22:	f7fa fc09 	bl	8004338 <d_make_comp>
 8009b26:	68e2      	ldr	r2, [r4, #12]
 8009b28:	4682      	mov	sl, r0
 8009b2a:	7813      	ldrb	r3, [r2, #0]
 8009b2c:	e420      	b.n	8009370 <d_template_args+0x528>
 8009b2e:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8009b32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009b34:	f8db 3008 	ldr.w	r3, [fp, #8]
 8009b38:	f8db 9000 	ldr.w	r9, [fp]
 8009b3c:	491d      	ldr	r1, [pc, #116]	; (8009bb4 <d_template_args+0xd6c>)
 8009b3e:	3b02      	subs	r3, #2
 8009b40:	4413      	add	r3, r2
 8009b42:	6323      	str	r3, [r4, #48]	; 0x30
 8009b44:	4648      	mov	r0, r9
 8009b46:	f004 f80f 	bl	800db68 <strcmp>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f000 82ba 	beq.w	800a0c4 <d_template_args+0x127c>
 8009b50:	f8db 300c 	ldr.w	r3, [fp, #12]
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	f63f adf0 	bhi.w	800973a <d_template_args+0x8f2>
 8009b5a:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <d_template_args+0xd18>)
 8009b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b60:	08009b1b 	.word	0x08009b1b
 8009b64:	0800a029 	.word	0x0800a029
 8009b68:	08009aad 	.word	0x08009aad
 8009b6c:	08009a21 	.word	0x08009a21
 8009b70:	4620      	mov	r0, r4
 8009b72:	f7fa fe17 	bl	80047a4 <d_compact_number>
 8009b76:	3001      	adds	r0, #1
 8009b78:	f47f ae35 	bne.w	80097e6 <d_template_args+0x99e>
 8009b7c:	f04f 0a00 	mov.w	sl, #0
 8009b80:	f7ff bab8 	b.w	80090f4 <d_template_args+0x2ac>
 8009b84:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	f63f addb 	bhi.w	8009744 <d_template_args+0x8fc>
 8009b8e:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <d_template_args+0xd4c>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009cb1 	.word	0x08009cb1
 8009b98:	08009449 	.word	0x08009449
 8009b9c:	08009c41 	.word	0x08009c41
 8009ba0:	08009bb9 	.word	0x08009bb9
 8009ba4:	0801dd28 	.word	0x0801dd28
 8009ba8:	0801dd20 	.word	0x0801dd20
 8009bac:	0801ddf4 	.word	0x0801ddf4
 8009bb0:	0801ddf8 	.word	0x0801ddf8
 8009bb4:	0801dfe8 	.word	0x0801dfe8
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	9800      	ldr	r0, [sp, #0]
 8009bbe:	49ca      	ldr	r1, [pc, #808]	; (8009ee8 <d_template_args+0x10a0>)
 8009bc0:	f003 ffd2 	bl	800db68 <strcmp>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f000 82c2 	beq.w	800a14e <d_template_args+0x1306>
 8009bca:	9900      	ldr	r1, [sp, #0]
 8009bcc:	780a      	ldrb	r2, [r1, #0]
 8009bce:	2a6e      	cmp	r2, #110	; 0x6e
 8009bd0:	f47f adb8 	bne.w	8009744 <d_template_args+0x8fc>
 8009bd4:	784b      	ldrb	r3, [r1, #1]
 8009bd6:	2b77      	cmp	r3, #119	; 0x77
 8009bd8:	d002      	beq.n	8009be0 <d_template_args+0xd98>
 8009bda:	2b61      	cmp	r3, #97	; 0x61
 8009bdc:	f47f adb2 	bne.w	8009744 <d_template_args+0x8fc>
 8009be0:	215f      	movs	r1, #95	; 0x5f
 8009be2:	4620      	mov	r0, r4
 8009be4:	f001 fa46 	bl	800b074 <d_exprlist>
 8009be8:	9000      	str	r0, [sp, #0]
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7fd fd76 	bl	80076dc <d_type>
 8009bf0:	68e3      	ldr	r3, [r4, #12]
 8009bf2:	9001      	str	r0, [sp, #4]
 8009bf4:	781a      	ldrb	r2, [r3, #0]
 8009bf6:	2a45      	cmp	r2, #69	; 0x45
 8009bf8:	f000 82a5 	beq.w	800a146 <d_template_args+0x12fe>
 8009bfc:	2a70      	cmp	r2, #112	; 0x70
 8009bfe:	f000 8297 	beq.w	800a130 <d_template_args+0x12e8>
 8009c02:	2a69      	cmp	r2, #105	; 0x69
 8009c04:	f47f ad9e 	bne.w	8009744 <d_template_args+0x8fc>
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	2b6c      	cmp	r3, #108	; 0x6c
 8009c0c:	f47f ad9a 	bne.w	8009744 <d_template_args+0x8fc>
 8009c10:	4620      	mov	r0, r4
 8009c12:	f002 fcfb 	bl	800c60c <d_expression_1>
 8009c16:	4603      	mov	r3, r0
 8009c18:	9a01      	ldr	r2, [sp, #4]
 8009c1a:	213a      	movs	r1, #58	; 0x3a
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f7fa fb8b 	bl	8004338 <d_make_comp>
 8009c22:	9a00      	ldr	r2, [sp, #0]
 8009c24:	4603      	mov	r3, r0
 8009c26:	2139      	movs	r1, #57	; 0x39
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7fa fb85 	bl	8004338 <d_make_comp>
 8009c2e:	465a      	mov	r2, fp
 8009c30:	4603      	mov	r3, r0
 8009c32:	2138      	movs	r1, #56	; 0x38
 8009c34:	4620      	mov	r0, r4
 8009c36:	f7fa fb7f 	bl	8004338 <d_make_comp>
 8009c3a:	4683      	mov	fp, r0
 8009c3c:	f7ff bb10 	b.w	8009260 <d_template_args+0x418>
 8009c40:	2300      	movs	r3, #0
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	f8db 2004 	ldr.w	r2, [fp, #4]
 8009c48:	6812      	ldr	r2, [r2, #0]
 8009c4a:	7851      	ldrb	r1, [r2, #1]
 8009c4c:	2963      	cmp	r1, #99	; 0x63
 8009c4e:	f000 831b 	beq.w	800a288 <d_template_args+0x1440>
 8009c52:	4620      	mov	r0, r4
 8009c54:	f002 fcda 	bl	800c60c <d_expression_1>
 8009c58:	9001      	str	r0, [sp, #4]
 8009c5a:	9800      	ldr	r0, [sp, #0]
 8009c5c:	49a3      	ldr	r1, [pc, #652]	; (8009eec <d_template_args+0x10a4>)
 8009c5e:	f003 ff83 	bl	800db68 <strcmp>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	f000 835e 	beq.w	800a324 <d_template_args+0x14dc>
 8009c68:	9800      	ldr	r0, [sp, #0]
 8009c6a:	49a1      	ldr	r1, [pc, #644]	; (8009ef0 <d_template_args+0x10a8>)
 8009c6c:	f003 ff7c 	bl	800db68 <strcmp>
 8009c70:	b130      	cbz	r0, 8009c80 <d_template_args+0xe38>
 8009c72:	9800      	ldr	r0, [sp, #0]
 8009c74:	499f      	ldr	r1, [pc, #636]	; (8009ef4 <d_template_args+0x10ac>)
 8009c76:	f003 ff77 	bl	800db68 <strcmp>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f040 832a 	bne.w	800a2d4 <d_template_args+0x148c>
 8009c80:	4620      	mov	r0, r4
 8009c82:	f7fe ffa1 	bl	8008bc8 <d_unqualified_name>
 8009c86:	68e3      	ldr	r3, [r4, #12]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	2b49      	cmp	r3, #73	; 0x49
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	f000 826a 	beq.w	800a166 <d_template_args+0x131e>
 8009c92:	460b      	mov	r3, r1
 8009c94:	9a01      	ldr	r2, [sp, #4]
 8009c96:	2137      	movs	r1, #55	; 0x37
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7fa fb4d 	bl	8004338 <d_make_comp>
 8009c9e:	465a      	mov	r2, fp
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2136      	movs	r1, #54	; 0x36
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f7fa fb47 	bl	8004338 <d_make_comp>
 8009caa:	4683      	mov	fp, r0
 8009cac:	f7ff bad8 	b.w	8009260 <d_template_args+0x418>
 8009cb0:	465a      	mov	r2, fp
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	2134      	movs	r1, #52	; 0x34
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f7fa fb3e 	bl	8004338 <d_make_comp>
 8009cbc:	4683      	mov	fp, r0
 8009cbe:	f7ff bacf 	b.w	8009260 <d_template_args+0x418>
 8009cc2:	6843      	ldr	r3, [r0, #4]
 8009cc4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	6819      	ldr	r1, [r3, #0]
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	3a02      	subs	r2, #2
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4410      	add	r0, r2
 8009cd2:	9100      	str	r1, [sp, #0]
 8009cd4:	6320      	str	r0, [r4, #48]	; 0x30
 8009cd6:	4988      	ldr	r1, [pc, #544]	; (8009ef8 <d_template_args+0x10b0>)
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f003 ff45 	bl	800db68 <strcmp>
 8009cde:	9b01      	ldr	r3, [sp, #4]
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	f000 8276 	beq.w	800a1d2 <d_template_args+0x138a>
 8009ce6:	68da      	ldr	r2, [r3, #12]
 8009ce8:	2a03      	cmp	r2, #3
 8009cea:	f63f ad2b 	bhi.w	8009744 <d_template_args+0x8fc>
 8009cee:	a301      	add	r3, pc, #4	; (adr r3, 8009cf4 <d_template_args+0xeac>)
 8009cf0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8009cf4:	08009cb1 	.word	0x08009cb1
 8009cf8:	08009d4b 	.word	0x08009d4b
 8009cfc:	08009c45 	.word	0x08009c45
 8009d00:	08009bbd 	.word	0x08009bbd
 8009d04:	4620      	mov	r0, r4
 8009d06:	f7fa fd4d 	bl	80047a4 <d_compact_number>
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f47f ace7 	bne.w	80096de <d_template_args+0x896>
 8009d10:	4683      	mov	fp, r0
 8009d12:	f7ff baa5 	b.w	8009260 <d_template_args+0x418>
 8009d16:	1c93      	adds	r3, r2, #2
 8009d18:	60e3      	str	r3, [r4, #12]
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7fd fcde 	bl	80076dc <d_type>
 8009d20:	4681      	mov	r9, r0
 8009d22:	4620      	mov	r0, r4
 8009d24:	f7fe ff50 	bl	8008bc8 <d_unqualified_name>
 8009d28:	68e3      	ldr	r3, [r4, #12]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b49      	cmp	r3, #73	; 0x49
 8009d2e:	4683      	mov	fp, r0
 8009d30:	f000 8253 	beq.w	800a1da <d_template_args+0x1392>
 8009d34:	4603      	mov	r3, r0
 8009d36:	464a      	mov	r2, r9
 8009d38:	4620      	mov	r0, r4
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	f7fa fafc 	bl	8004338 <d_make_comp>
 8009d40:	68e3      	ldr	r3, [r4, #12]
 8009d42:	4681      	mov	r9, r0
 8009d44:	781a      	ldrb	r2, [r3, #0]
 8009d46:	f7ff bb4f 	b.w	80093e8 <d_template_args+0x5a0>
 8009d4a:	9b00      	ldr	r3, [sp, #0]
 8009d4c:	781a      	ldrb	r2, [r3, #0]
 8009d4e:	2a70      	cmp	r2, #112	; 0x70
 8009d50:	d002      	beq.n	8009d58 <d_template_args+0xf10>
 8009d52:	2a6d      	cmp	r2, #109	; 0x6d
 8009d54:	f47f ab78 	bne.w	8009448 <d_template_args+0x600>
 8009d58:	9b00      	ldr	r3, [sp, #0]
 8009d5a:	785b      	ldrb	r3, [r3, #1]
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	f47f ab73 	bne.w	8009448 <d_template_args+0x600>
 8009d62:	68e3      	ldr	r3, [r4, #12]
 8009d64:	781a      	ldrb	r2, [r3, #0]
 8009d66:	2a5f      	cmp	r2, #95	; 0x5f
 8009d68:	f000 82e2 	beq.w	800a330 <d_template_args+0x14e8>
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f002 fc4d 	bl	800c60c <d_expression_1>
 8009d72:	4602      	mov	r2, r0
 8009d74:	4613      	mov	r3, r2
 8009d76:	4620      	mov	r0, r4
 8009d78:	2137      	movs	r1, #55	; 0x37
 8009d7a:	f7fa fadd 	bl	8004338 <d_make_comp>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	465a      	mov	r2, fp
 8009d82:	4620      	mov	r0, r4
 8009d84:	2135      	movs	r1, #53	; 0x35
 8009d86:	f7fa fad7 	bl	8004338 <d_make_comp>
 8009d8a:	e7c1      	b.n	8009d10 <d_template_args+0xec8>
 8009d8c:	6843      	ldr	r3, [r0, #4]
 8009d8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009d90:	689a      	ldr	r2, [r3, #8]
 8009d92:	f8d3 b000 	ldr.w	fp, [r3]
 8009d96:	4958      	ldr	r1, [pc, #352]	; (8009ef8 <d_template_args+0x10b0>)
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	3a02      	subs	r2, #2
 8009d9c:	4410      	add	r0, r2
 8009d9e:	6320      	str	r0, [r4, #48]	; 0x30
 8009da0:	4658      	mov	r0, fp
 8009da2:	f003 fee1 	bl	800db68 <strcmp>
 8009da6:	9b00      	ldr	r3, [sp, #0]
 8009da8:	2800      	cmp	r0, #0
 8009daa:	f000 834d 	beq.w	800a448 <d_template_args+0x1600>
 8009dae:	68da      	ldr	r2, [r3, #12]
 8009db0:	2a03      	cmp	r2, #3
 8009db2:	f63f aee3 	bhi.w	8009b7c <d_template_args+0xd34>
 8009db6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009dba:	0156      	.short	0x0156
 8009dbc:	00e80245 	.word	0x00e80245
 8009dc0:	00a3      	.short	0x00a3
 8009dc2:	f89b 2000 	ldrb.w	r2, [fp]
 8009dc6:	2a70      	cmp	r2, #112	; 0x70
 8009dc8:	d002      	beq.n	8009dd0 <d_template_args+0xf88>
 8009dca:	2a6d      	cmp	r2, #109	; 0x6d
 8009dcc:	f47f ab00 	bne.w	80093d0 <d_template_args+0x588>
 8009dd0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	f47f aafb 	bne.w	80093d0 <d_template_args+0x588>
 8009dda:	68e3      	ldr	r3, [r4, #12]
 8009ddc:	781a      	ldrb	r2, [r3, #0]
 8009dde:	2a5f      	cmp	r2, #95	; 0x5f
 8009de0:	f000 8260 	beq.w	800a2a4 <d_template_args+0x145c>
 8009de4:	4620      	mov	r0, r4
 8009de6:	f002 fc11 	bl	800c60c <d_expression_1>
 8009dea:	4602      	mov	r2, r0
 8009dec:	4613      	mov	r3, r2
 8009dee:	4620      	mov	r0, r4
 8009df0:	2137      	movs	r1, #55	; 0x37
 8009df2:	f7fa faa1 	bl	8004338 <d_make_comp>
 8009df6:	4603      	mov	r3, r0
 8009df8:	464a      	mov	r2, r9
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f7ff baee 	b.w	80093dc <d_template_args+0x594>
 8009e00:	4620      	mov	r0, r4
 8009e02:	f7fa fce7 	bl	80047d4 <d_template_param>
 8009e06:	4682      	mov	sl, r0
 8009e08:	f7ff b974 	b.w	80090f4 <d_template_args+0x2ac>
 8009e0c:	3302      	adds	r3, #2
 8009e0e:	60e3      	str	r3, [r4, #12]
 8009e10:	4620      	mov	r0, r4
 8009e12:	f7fd fc63 	bl	80076dc <d_type>
 8009e16:	4683      	mov	fp, r0
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f7fe fed5 	bl	8008bc8 <d_unqualified_name>
 8009e1e:	68e3      	ldr	r3, [r4, #12]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b49      	cmp	r3, #73	; 0x49
 8009e24:	f000 8242 	beq.w	800a2ac <d_template_args+0x1464>
 8009e28:	465a      	mov	r2, fp
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f7fa fa82 	bl	8004338 <d_make_comp>
 8009e34:	4683      	mov	fp, r0
 8009e36:	f7ff ba13 	b.w	8009260 <d_template_args+0x418>
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7fd fbee 	bl	800761c <d_expr_primary>
 8009e40:	4682      	mov	sl, r0
 8009e42:	f7ff b957 	b.w	80090f4 <d_template_args+0x2ac>
 8009e46:	6921      	ldr	r1, [r4, #16]
 8009e48:	f103 0e01 	add.w	lr, r3, #1
 8009e4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009e50:	eb11 0a83 	adds.w	sl, r1, r3, lsl #2
 8009e54:	f8c4 e014 	str.w	lr, [r4, #20]
 8009e58:	f43f ae24 	beq.w	8009aa4 <d_template_args+0xc5c>
 8009e5c:	f04f 0e06 	mov.w	lr, #6
 8009e60:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 8009e64:	f8ca 0004 	str.w	r0, [sl, #4]
 8009e68:	7813      	ldrb	r3, [r2, #0]
 8009e6a:	f7ff ba81 	b.w	8009370 <d_template_args+0x528>
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f7fa fc98 	bl	80047a4 <d_compact_number>
 8009e74:	3001      	adds	r0, #1
 8009e76:	68e2      	ldr	r2, [r4, #12]
 8009e78:	f47f ac05 	bne.w	8009686 <d_template_args+0x83e>
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	7813      	ldrb	r3, [r2, #0]
 8009e80:	f7ff ba76 	b.w	8009370 <d_template_args+0x528>
 8009e84:	3302      	adds	r3, #2
 8009e86:	60e3      	str	r3, [r4, #12]
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f7fd fc27 	bl	80076dc <d_type>
 8009e8e:	4681      	mov	r9, r0
 8009e90:	4620      	mov	r0, r4
 8009e92:	f7fe fe99 	bl	8008bc8 <d_unqualified_name>
 8009e96:	68e3      	ldr	r3, [r4, #12]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2b49      	cmp	r3, #73	; 0x49
 8009e9c:	4682      	mov	sl, r0
 8009e9e:	f000 8115 	beq.w	800a0cc <d_template_args+0x1284>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	464a      	mov	r2, r9
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	f7fa fa45 	bl	8004338 <d_make_comp>
 8009eae:	68e2      	ldr	r2, [r4, #12]
 8009eb0:	4682      	mov	sl, r0
 8009eb2:	7813      	ldrb	r3, [r2, #0]
 8009eb4:	f7ff ba5c 	b.w	8009370 <d_template_args+0x528>
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	2b6c      	cmp	r3, #108	; 0x6c
 8009ebc:	f47f aaee 	bne.w	800949c <d_template_args+0x654>
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7fd fc0b 	bl	80076dc <d_type>
 8009ec6:	68e3      	ldr	r3, [r4, #12]
 8009ec8:	4682      	mov	sl, r0
 8009eca:	3302      	adds	r3, #2
 8009ecc:	60e3      	str	r3, [r4, #12]
 8009ece:	2145      	movs	r1, #69	; 0x45
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f001 f8cf 	bl	800b074 <d_exprlist>
 8009ed6:	4652      	mov	r2, sl
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2130      	movs	r1, #48	; 0x30
 8009edc:	4620      	mov	r0, r4
 8009ede:	f7fa fa2b 	bl	8004338 <d_make_comp>
 8009ee2:	4682      	mov	sl, r0
 8009ee4:	f7ff b906 	b.w	80090f4 <d_template_args+0x2ac>
 8009ee8:	0801dd28 	.word	0x0801dd28
 8009eec:	0801dd20 	.word	0x0801dd20
 8009ef0:	0801ddf4 	.word	0x0801ddf4
 8009ef4:	0801ddf8 	.word	0x0801ddf8
 8009ef8:	0801dfe8 	.word	0x0801dfe8
 8009efc:	f04f 0b00 	mov.w	fp, #0
 8009f00:	4658      	mov	r0, fp
 8009f02:	49cc      	ldr	r1, [pc, #816]	; (800a234 <d_template_args+0x13ec>)
 8009f04:	f003 fe30 	bl	800db68 <strcmp>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	f000 8186 	beq.w	800a21a <d_template_args+0x13d2>
 8009f0e:	f89b 2000 	ldrb.w	r2, [fp]
 8009f12:	2a6e      	cmp	r2, #110	; 0x6e
 8009f14:	f47f ae32 	bne.w	8009b7c <d_template_args+0xd34>
 8009f18:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8009f1c:	2b77      	cmp	r3, #119	; 0x77
 8009f1e:	d002      	beq.n	8009f26 <d_template_args+0x10de>
 8009f20:	2b61      	cmp	r3, #97	; 0x61
 8009f22:	f47f ae2b 	bne.w	8009b7c <d_template_args+0xd34>
 8009f26:	215f      	movs	r1, #95	; 0x5f
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f001 f8a3 	bl	800b074 <d_exprlist>
 8009f2e:	9000      	str	r0, [sp, #0]
 8009f30:	4620      	mov	r0, r4
 8009f32:	f7fd fbd3 	bl	80076dc <d_type>
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	781a      	ldrb	r2, [r3, #0]
 8009f3a:	2a45      	cmp	r2, #69	; 0x45
 8009f3c:	4683      	mov	fp, r0
 8009f3e:	f000 827f 	beq.w	800a440 <d_template_args+0x15f8>
 8009f42:	2a70      	cmp	r2, #112	; 0x70
 8009f44:	f000 8271 	beq.w	800a42a <d_template_args+0x15e2>
 8009f48:	2a69      	cmp	r2, #105	; 0x69
 8009f4a:	f47f ae17 	bne.w	8009b7c <d_template_args+0xd34>
 8009f4e:	785b      	ldrb	r3, [r3, #1]
 8009f50:	2b6c      	cmp	r3, #108	; 0x6c
 8009f52:	f47f ae13 	bne.w	8009b7c <d_template_args+0xd34>
 8009f56:	4620      	mov	r0, r4
 8009f58:	f002 fb58 	bl	800c60c <d_expression_1>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	465a      	mov	r2, fp
 8009f60:	213a      	movs	r1, #58	; 0x3a
 8009f62:	4620      	mov	r0, r4
 8009f64:	f7fa f9e8 	bl	8004338 <d_make_comp>
 8009f68:	9a00      	ldr	r2, [sp, #0]
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2139      	movs	r1, #57	; 0x39
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f7fa f9e2 	bl	8004338 <d_make_comp>
 8009f74:	4652      	mov	r2, sl
 8009f76:	4603      	mov	r3, r0
 8009f78:	2138      	movs	r1, #56	; 0x38
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7fa f9dc 	bl	8004338 <d_make_comp>
 8009f80:	4682      	mov	sl, r0
 8009f82:	f7ff b8b7 	b.w	80090f4 <d_template_args+0x2ac>
 8009f86:	f04f 0b00 	mov.w	fp, #0
 8009f8a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009f8e:	6812      	ldr	r2, [r2, #0]
 8009f90:	7851      	ldrb	r1, [r2, #1]
 8009f92:	2963      	cmp	r1, #99	; 0x63
 8009f94:	f000 812e 	beq.w	800a1f4 <d_template_args+0x13ac>
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f002 fb37 	bl	800c60c <d_expression_1>
 8009f9e:	9000      	str	r0, [sp, #0]
 8009fa0:	4658      	mov	r0, fp
 8009fa2:	49a5      	ldr	r1, [pc, #660]	; (800a238 <d_template_args+0x13f0>)
 8009fa4:	f003 fde0 	bl	800db68 <strcmp>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	f000 81d7 	beq.w	800a35c <d_template_args+0x1514>
 8009fae:	4658      	mov	r0, fp
 8009fb0:	49a2      	ldr	r1, [pc, #648]	; (800a23c <d_template_args+0x13f4>)
 8009fb2:	f003 fdd9 	bl	800db68 <strcmp>
 8009fb6:	b130      	cbz	r0, 8009fc6 <d_template_args+0x117e>
 8009fb8:	4658      	mov	r0, fp
 8009fba:	49a1      	ldr	r1, [pc, #644]	; (800a240 <d_template_args+0x13f8>)
 8009fbc:	f003 fdd4 	bl	800db68 <strcmp>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	f040 8125 	bne.w	800a210 <d_template_args+0x13c8>
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f7fe fdfe 	bl	8008bc8 <d_unqualified_name>
 8009fcc:	68e3      	ldr	r3, [r4, #12]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b49      	cmp	r3, #73	; 0x49
 8009fd2:	4683      	mov	fp, r0
 8009fd4:	d109      	bne.n	8009fea <d_template_args+0x11a2>
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f7fe ff36 	bl	8008e48 <d_template_args>
 8009fdc:	465a      	mov	r2, fp
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2104      	movs	r1, #4
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7fa f9a8 	bl	8004338 <d_make_comp>
 8009fe8:	4683      	mov	fp, r0
 8009fea:	9a00      	ldr	r2, [sp, #0]
 8009fec:	465b      	mov	r3, fp
 8009fee:	2137      	movs	r1, #55	; 0x37
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f7fa f9a1 	bl	8004338 <d_make_comp>
 8009ff6:	4652      	mov	r2, sl
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2136      	movs	r1, #54	; 0x36
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f7fa f99b 	bl	8004338 <d_make_comp>
 800a002:	4682      	mov	sl, r0
 800a004:	f7ff b876 	b.w	80090f4 <d_template_args+0x2ac>
 800a008:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	f63f adb5 	bhi.w	8009b7c <d_template_args+0xd34>
 800a012:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <d_template_args+0x11d0>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a067 	.word	0x0800a067
 800a01c:	080094c9 	.word	0x080094c9
 800a020:	08009f87 	.word	0x08009f87
 800a024:	08009efd 	.word	0x08009efd
 800a028:	f899 3000 	ldrb.w	r3, [r9]
 800a02c:	2b70      	cmp	r3, #112	; 0x70
 800a02e:	d002      	beq.n	800a036 <d_template_args+0x11ee>
 800a030:	2b6d      	cmp	r3, #109	; 0x6d
 800a032:	f47f a991 	bne.w	8009358 <d_template_args+0x510>
 800a036:	f899 2001 	ldrb.w	r2, [r9, #1]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	f47f a98c 	bne.w	8009358 <d_template_args+0x510>
 800a040:	68e3      	ldr	r3, [r4, #12]
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	2a5f      	cmp	r2, #95	; 0x5f
 800a046:	f000 8203 	beq.w	800a450 <d_template_args+0x1608>
 800a04a:	4620      	mov	r0, r4
 800a04c:	f002 fade 	bl	800c60c <d_expression_1>
 800a050:	4602      	mov	r2, r0
 800a052:	4613      	mov	r3, r2
 800a054:	4620      	mov	r0, r4
 800a056:	2137      	movs	r1, #55	; 0x37
 800a058:	f7fa f96e 	bl	8004338 <d_make_comp>
 800a05c:	4603      	mov	r3, r0
 800a05e:	4652      	mov	r2, sl
 800a060:	4620      	mov	r0, r4
 800a062:	f7ff b97f 	b.w	8009364 <d_template_args+0x51c>
 800a066:	4652      	mov	r2, sl
 800a068:	4620      	mov	r0, r4
 800a06a:	2134      	movs	r1, #52	; 0x34
 800a06c:	2300      	movs	r3, #0
 800a06e:	f7fa f963 	bl	8004338 <d_make_comp>
 800a072:	4682      	mov	sl, r0
 800a074:	f7ff b83e 	b.w	80090f4 <d_template_args+0x2ac>
 800a078:	6921      	ldr	r1, [r4, #16]
 800a07a:	f102 0e01 	add.w	lr, r2, #1
 800a07e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a082:	eb11 0982 	adds.w	r9, r1, r2, lsl #2
 800a086:	f8c4 e014 	str.w	lr, [r4, #20]
 800a08a:	f43f ac3d 	beq.w	8009908 <d_template_args+0xac0>
 800a08e:	f04f 0e06 	mov.w	lr, #6
 800a092:	f801 e022 	strb.w	lr, [r1, r2, lsl #2]
 800a096:	f8c9 0004 	str.w	r0, [r9, #4]
 800a09a:	781a      	ldrb	r2, [r3, #0]
 800a09c:	f7ff b9a4 	b.w	80093e8 <d_template_args+0x5a0>
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f7fa fb7f 	bl	80047a4 <d_compact_number>
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	68e3      	ldr	r3, [r4, #12]
 800a0aa:	f47f ab02 	bne.w	80096b2 <d_template_args+0x86a>
 800a0ae:	4681      	mov	r9, r0
 800a0b0:	781a      	ldrb	r2, [r3, #0]
 800a0b2:	f7ff b999 	b.w	80093e8 <d_template_args+0x5a0>
 800a0b6:	785a      	ldrb	r2, [r3, #1]
 800a0b8:	2a6c      	cmp	r2, #108	; 0x6c
 800a0ba:	f47f a9ef 	bne.w	800949c <d_template_args+0x654>
 800a0be:	f04f 0a00 	mov.w	sl, #0
 800a0c2:	e702      	b.n	8009eca <d_template_args+0x1082>
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f7fd fb09 	bl	80076dc <d_type>
 800a0ca:	e7c7      	b.n	800a05c <d_template_args+0x1214>
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f7fe febb 	bl	8008e48 <d_template_args>
 800a0d2:	4652      	mov	r2, sl
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2104      	movs	r1, #4
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f7fa f92d 	bl	8004338 <d_make_comp>
 800a0de:	464a      	mov	r2, r9
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	e6e0      	b.n	8009ea8 <d_template_args+0x1060>
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	2145      	movs	r1, #69	; 0x45
 800a0ea:	f000 ffc3 	bl	800b074 <d_exprlist>
 800a0ee:	4681      	mov	r9, r0
 800a0f0:	e503      	b.n	8009afa <d_template_args+0xcb2>
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800a0f8:	2a01      	cmp	r2, #1
 800a0fa:	d903      	bls.n	800a104 <d_template_args+0x12bc>
 800a0fc:	3b72      	subs	r3, #114	; 0x72
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	f63f acdb 	bhi.w	8009aba <d_template_args+0xc72>
 800a104:	4620      	mov	r0, r4
 800a106:	f7fd fae9 	bl	80076dc <d_type>
 800a10a:	4683      	mov	fp, r0
 800a10c:	e4d9      	b.n	8009ac2 <d_template_args+0xc7a>
 800a10e:	4620      	mov	r0, r4
 800a110:	f002 fa7c 	bl	800c60c <d_expression_1>
 800a114:	4681      	mov	r9, r0
 800a116:	4620      	mov	r0, r4
 800a118:	f002 fa78 	bl	800c60c <d_expression_1>
 800a11c:	4683      	mov	fp, r0
 800a11e:	4620      	mov	r0, r4
 800a120:	f002 fa74 	bl	800c60c <d_expression_1>
 800a124:	e4aa      	b.n	8009a7c <d_template_args+0xc34>
 800a126:	4620      	mov	r0, r4
 800a128:	f002 fa70 	bl	800c60c <d_expression_1>
 800a12c:	4681      	mov	r9, r0
 800a12e:	e4e4      	b.n	8009afa <d_template_args+0xcb2>
 800a130:	785a      	ldrb	r2, [r3, #1]
 800a132:	2a69      	cmp	r2, #105	; 0x69
 800a134:	f47f ab06 	bne.w	8009744 <d_template_args+0x8fc>
 800a138:	3302      	adds	r3, #2
 800a13a:	60e3      	str	r3, [r4, #12]
 800a13c:	4620      	mov	r0, r4
 800a13e:	2145      	movs	r1, #69	; 0x45
 800a140:	f000 ff98 	bl	800b074 <d_exprlist>
 800a144:	e567      	b.n	8009c16 <d_template_args+0xdce>
 800a146:	3301      	adds	r3, #1
 800a148:	60e3      	str	r3, [r4, #12]
 800a14a:	2000      	movs	r0, #0
 800a14c:	e563      	b.n	8009c16 <d_template_args+0xdce>
 800a14e:	4620      	mov	r0, r4
 800a150:	f002 fa5c 	bl	800c60c <d_expression_1>
 800a154:	9000      	str	r0, [sp, #0]
 800a156:	4620      	mov	r0, r4
 800a158:	f002 fa58 	bl	800c60c <d_expression_1>
 800a15c:	9001      	str	r0, [sp, #4]
 800a15e:	4620      	mov	r0, r4
 800a160:	f002 fa54 	bl	800c60c <d_expression_1>
 800a164:	e557      	b.n	8009c16 <d_template_args+0xdce>
 800a166:	9000      	str	r0, [sp, #0]
 800a168:	4620      	mov	r0, r4
 800a16a:	f7fe fe6d 	bl	8008e48 <d_template_args>
 800a16e:	9900      	ldr	r1, [sp, #0]
 800a170:	4603      	mov	r3, r0
 800a172:	460a      	mov	r2, r1
 800a174:	4620      	mov	r0, r4
 800a176:	2104      	movs	r1, #4
 800a178:	f7fa f8de 	bl	8004338 <d_make_comp>
 800a17c:	4601      	mov	r1, r0
 800a17e:	e588      	b.n	8009c92 <d_template_args+0xe4a>
 800a180:	f04f 0a00 	mov.w	sl, #0
 800a184:	f7ff b8f4 	b.w	8009370 <d_template_args+0x528>
 800a188:	7853      	ldrb	r3, [r2, #1]
 800a18a:	2b69      	cmp	r3, #105	; 0x69
 800a18c:	d007      	beq.n	800a19e <d_template_args+0x1356>
 800a18e:	f04f 0a00 	mov.w	sl, #0
 800a192:	f7ff b907 	b.w	80093a4 <d_template_args+0x55c>
 800a196:	1c53      	adds	r3, r2, #1
 800a198:	60e3      	str	r3, [r4, #12]
 800a19a:	2000      	movs	r0, #0
 800a19c:	e46e      	b.n	8009a7c <d_template_args+0xc34>
 800a19e:	1c93      	adds	r3, r2, #2
 800a1a0:	60e3      	str	r3, [r4, #12]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	2145      	movs	r1, #69	; 0x45
 800a1a6:	f000 ff65 	bl	800b074 <d_exprlist>
 800a1aa:	e467      	b.n	8009a7c <d_template_args+0xc34>
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f7fe fe4b 	bl	8008e48 <d_template_args>
 800a1b2:	464a      	mov	r2, r9
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2104      	movs	r1, #4
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f7fa f8bd 	bl	8004338 <d_make_comp>
 800a1be:	4681      	mov	r9, r0
 800a1c0:	e49b      	b.n	8009afa <d_template_args+0xcb2>
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60e3      	str	r3, [r4, #12]
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	2145      	movs	r1, #69	; 0x45
 800a1ca:	f000 ff53 	bl	800b074 <d_exprlist>
 800a1ce:	f7ff b93e 	b.w	800944e <d_template_args+0x606>
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f7fd fa82 	bl	80076dc <d_type>
 800a1d8:	e5d1      	b.n	8009d7e <d_template_args+0xf36>
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f7fe fe34 	bl	8008e48 <d_template_args>
 800a1e0:	465a      	mov	r2, fp
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2104      	movs	r1, #4
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f7fa f8a6 	bl	8004338 <d_make_comp>
 800a1ec:	464a      	mov	r2, r9
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	e5a2      	b.n	8009d3a <d_template_args+0xef2>
 800a1f4:	7812      	ldrb	r2, [r2, #0]
 800a1f6:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800a1fa:	2901      	cmp	r1, #1
 800a1fc:	d903      	bls.n	800a206 <d_template_args+0x13be>
 800a1fe:	3a72      	subs	r2, #114	; 0x72
 800a200:	2a01      	cmp	r2, #1
 800a202:	f63f aec9 	bhi.w	8009f98 <d_template_args+0x1150>
 800a206:	4620      	mov	r0, r4
 800a208:	f7fd fa68 	bl	80076dc <d_type>
 800a20c:	9000      	str	r0, [sp, #0]
 800a20e:	e6c7      	b.n	8009fa0 <d_template_args+0x1158>
 800a210:	4620      	mov	r0, r4
 800a212:	f002 f9fb 	bl	800c60c <d_expression_1>
 800a216:	4683      	mov	fp, r0
 800a218:	e6e7      	b.n	8009fea <d_template_args+0x11a2>
 800a21a:	4620      	mov	r0, r4
 800a21c:	f002 f9f6 	bl	800c60c <d_expression_1>
 800a220:	9000      	str	r0, [sp, #0]
 800a222:	4620      	mov	r0, r4
 800a224:	f002 f9f2 	bl	800c60c <d_expression_1>
 800a228:	4683      	mov	fp, r0
 800a22a:	4620      	mov	r0, r4
 800a22c:	f002 f9ee 	bl	800c60c <d_expression_1>
 800a230:	e694      	b.n	8009f5c <d_template_args+0x1114>
 800a232:	bf00      	nop
 800a234:	0801dd28 	.word	0x0801dd28
 800a238:	0801dd20 	.word	0x0801dd20
 800a23c:	0801ddf4 	.word	0x0801ddf4
 800a240:	0801ddf8 	.word	0x0801ddf8
 800a244:	f89b 2000 	ldrb.w	r2, [fp]
 800a248:	2a70      	cmp	r2, #112	; 0x70
 800a24a:	d002      	beq.n	800a252 <d_template_args+0x140a>
 800a24c:	2a6d      	cmp	r2, #109	; 0x6d
 800a24e:	f47f a93b 	bne.w	80094c8 <d_template_args+0x680>
 800a252:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800a256:	4293      	cmp	r3, r2
 800a258:	f47f a936 	bne.w	80094c8 <d_template_args+0x680>
 800a25c:	68e3      	ldr	r3, [r4, #12]
 800a25e:	781a      	ldrb	r2, [r3, #0]
 800a260:	2a5f      	cmp	r2, #95	; 0x5f
 800a262:	d03c      	beq.n	800a2de <d_template_args+0x1496>
 800a264:	4620      	mov	r0, r4
 800a266:	f002 f9d1 	bl	800c60c <d_expression_1>
 800a26a:	4602      	mov	r2, r0
 800a26c:	4613      	mov	r3, r2
 800a26e:	4620      	mov	r0, r4
 800a270:	2137      	movs	r1, #55	; 0x37
 800a272:	f7fa f861 	bl	8004338 <d_make_comp>
 800a276:	4603      	mov	r3, r0
 800a278:	4652      	mov	r2, sl
 800a27a:	4620      	mov	r0, r4
 800a27c:	2135      	movs	r1, #53	; 0x35
 800a27e:	f7fa f85b 	bl	8004338 <d_make_comp>
 800a282:	4682      	mov	sl, r0
 800a284:	f7fe bf36 	b.w	80090f4 <d_template_args+0x2ac>
 800a288:	7812      	ldrb	r2, [r2, #0]
 800a28a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800a28e:	2901      	cmp	r1, #1
 800a290:	d903      	bls.n	800a29a <d_template_args+0x1452>
 800a292:	3a72      	subs	r2, #114	; 0x72
 800a294:	2a01      	cmp	r2, #1
 800a296:	f63f acdc 	bhi.w	8009c52 <d_template_args+0xe0a>
 800a29a:	4620      	mov	r0, r4
 800a29c:	f7fd fa1e 	bl	80076dc <d_type>
 800a2a0:	9001      	str	r0, [sp, #4]
 800a2a2:	e4da      	b.n	8009c5a <d_template_args+0xe12>
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	60e3      	str	r3, [r4, #12]
 800a2a8:	f7ff b892 	b.w	80093d0 <d_template_args+0x588>
 800a2ac:	9000      	str	r0, [sp, #0]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f7fe fdca 	bl	8008e48 <d_template_args>
 800a2b4:	9900      	ldr	r1, [sp, #0]
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	2104      	movs	r1, #4
 800a2be:	f7fa f83b 	bl	8004338 <d_make_comp>
 800a2c2:	465a      	mov	r2, fp
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f7fa f835 	bl	8004338 <d_make_comp>
 800a2ce:	4683      	mov	fp, r0
 800a2d0:	f7fe bfc6 	b.w	8009260 <d_template_args+0x418>
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f002 f999 	bl	800c60c <d_expression_1>
 800a2da:	4601      	mov	r1, r0
 800a2dc:	e4d9      	b.n	8009c92 <d_template_args+0xe4a>
 800a2de:	3301      	adds	r3, #1
 800a2e0:	60e3      	str	r3, [r4, #12]
 800a2e2:	f7ff b8f1 	b.w	80094c8 <d_template_args+0x680>
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	60e3      	str	r3, [r4, #12]
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	2145      	movs	r1, #69	; 0x45
 800a2ee:	f000 fec1 	bl	800b074 <d_exprlist>
 800a2f2:	f7ff b870 	b.w	80093d6 <d_template_args+0x58e>
 800a2f6:	3302      	adds	r3, #2
 800a2f8:	60e3      	str	r3, [r4, #12]
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7fd f9ee 	bl	80076dc <d_type>
 800a300:	4682      	mov	sl, r0
 800a302:	4620      	mov	r0, r4
 800a304:	f7fe fc60 	bl	8008bc8 <d_unqualified_name>
 800a308:	68e3      	ldr	r3, [r4, #12]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b49      	cmp	r3, #73	; 0x49
 800a30e:	4683      	mov	fp, r0
 800a310:	d012      	beq.n	800a338 <d_template_args+0x14f0>
 800a312:	4652      	mov	r2, sl
 800a314:	4603      	mov	r3, r0
 800a316:	2101      	movs	r1, #1
 800a318:	4620      	mov	r0, r4
 800a31a:	f7fa f80d 	bl	8004338 <d_make_comp>
 800a31e:	4682      	mov	sl, r0
 800a320:	f7fe bee8 	b.w	80090f4 <d_template_args+0x2ac>
 800a324:	2145      	movs	r1, #69	; 0x45
 800a326:	4620      	mov	r0, r4
 800a328:	f000 fea4 	bl	800b074 <d_exprlist>
 800a32c:	4601      	mov	r1, r0
 800a32e:	e4b0      	b.n	8009c92 <d_template_args+0xe4a>
 800a330:	3301      	adds	r3, #1
 800a332:	60e3      	str	r3, [r4, #12]
 800a334:	f7ff b888 	b.w	8009448 <d_template_args+0x600>
 800a338:	4620      	mov	r0, r4
 800a33a:	f7fe fd85 	bl	8008e48 <d_template_args>
 800a33e:	465a      	mov	r2, fp
 800a340:	4603      	mov	r3, r0
 800a342:	2104      	movs	r1, #4
 800a344:	4620      	mov	r0, r4
 800a346:	f7f9 fff7 	bl	8004338 <d_make_comp>
 800a34a:	4652      	mov	r2, sl
 800a34c:	4603      	mov	r3, r0
 800a34e:	2101      	movs	r1, #1
 800a350:	4620      	mov	r0, r4
 800a352:	f7f9 fff1 	bl	8004338 <d_make_comp>
 800a356:	4682      	mov	sl, r0
 800a358:	f7fe becc 	b.w	80090f4 <d_template_args+0x2ac>
 800a35c:	4620      	mov	r0, r4
 800a35e:	2145      	movs	r1, #69	; 0x45
 800a360:	f000 fe88 	bl	800b074 <d_exprlist>
 800a364:	4683      	mov	fp, r0
 800a366:	e640      	b.n	8009fea <d_template_args+0x11a2>
 800a368:	3301      	adds	r3, #1
 800a36a:	60e3      	str	r3, [r4, #12]
 800a36c:	4620      	mov	r0, r4
 800a36e:	2145      	movs	r1, #69	; 0x45
 800a370:	f000 fe80 	bl	800b074 <d_exprlist>
 800a374:	f7ff b8ab 	b.w	80094ce <d_template_args+0x686>
 800a378:	7812      	ldrb	r2, [r2, #0]
 800a37a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800a37e:	2901      	cmp	r1, #1
 800a380:	d903      	bls.n	800a38a <d_template_args+0x1542>
 800a382:	3a72      	subs	r2, #114	; 0x72
 800a384:	2a01      	cmp	r2, #1
 800a386:	f63f aaca 	bhi.w	800991e <d_template_args+0xad6>
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7fd f9a6 	bl	80076dc <d_type>
 800a390:	9000      	str	r0, [sp, #0]
 800a392:	f7ff bac8 	b.w	8009926 <d_template_args+0xade>
 800a396:	4620      	mov	r0, r4
 800a398:	f002 f938 	bl	800c60c <d_expression_1>
 800a39c:	4683      	mov	fp, r0
 800a39e:	f7ff bade 	b.w	800995e <d_template_args+0xb16>
 800a3a2:	f04f 0900 	mov.w	r9, #0
 800a3a6:	f7ff b81f 	b.w	80093e8 <d_template_args+0x5a0>
 800a3aa:	785a      	ldrb	r2, [r3, #1]
 800a3ac:	2a69      	cmp	r2, #105	; 0x69
 800a3ae:	d021      	beq.n	800a3f4 <d_template_args+0x15ac>
 800a3b0:	f04f 0900 	mov.w	r9, #0
 800a3b4:	f7ff b832 	b.w	800941c <d_template_args+0x5d4>
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	60e3      	str	r3, [r4, #12]
 800a3bc:	2000      	movs	r0, #0
 800a3be:	f7ff ba8f 	b.w	80098e0 <d_template_args+0xa98>
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7fe fd40 	bl	8008e48 <d_template_args>
 800a3c8:	465a      	mov	r2, fp
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2104      	movs	r1, #4
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f7f9 ffb2 	bl	8004338 <d_make_comp>
 800a3d4:	4683      	mov	fp, r0
 800a3d6:	f7ff bac2 	b.w	800995e <d_template_args+0xb16>
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f002 f916 	bl	800c60c <d_expression_1>
 800a3e0:	9000      	str	r0, [sp, #0]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f002 f912 	bl	800c60c <d_expression_1>
 800a3e8:	4683      	mov	fp, r0
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f002 f90e 	bl	800c60c <d_expression_1>
 800a3f0:	f7ff ba76 	b.w	80098e0 <d_template_args+0xa98>
 800a3f4:	3302      	adds	r3, #2
 800a3f6:	60e3      	str	r3, [r4, #12]
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	2145      	movs	r1, #69	; 0x45
 800a3fc:	f000 fe3a 	bl	800b074 <d_exprlist>
 800a400:	f7ff ba6e 	b.w	80098e0 <d_template_args+0xa98>
 800a404:	4620      	mov	r0, r4
 800a406:	f7fd f969 	bl	80076dc <d_type>
 800a40a:	e4f4      	b.n	8009df6 <d_template_args+0xfae>
 800a40c:	4620      	mov	r0, r4
 800a40e:	2145      	movs	r1, #69	; 0x45
 800a410:	f000 fe30 	bl	800b074 <d_exprlist>
 800a414:	4683      	mov	fp, r0
 800a416:	f7ff baa2 	b.w	800995e <d_template_args+0xb16>
 800a41a:	3301      	adds	r3, #1
 800a41c:	60e3      	str	r3, [r4, #12]
 800a41e:	4620      	mov	r0, r4
 800a420:	2145      	movs	r1, #69	; 0x45
 800a422:	f000 fe27 	bl	800b074 <d_exprlist>
 800a426:	f7fe bf9a 	b.w	800935e <d_template_args+0x516>
 800a42a:	785a      	ldrb	r2, [r3, #1]
 800a42c:	2a69      	cmp	r2, #105	; 0x69
 800a42e:	f47f aba5 	bne.w	8009b7c <d_template_args+0xd34>
 800a432:	3302      	adds	r3, #2
 800a434:	60e3      	str	r3, [r4, #12]
 800a436:	4620      	mov	r0, r4
 800a438:	2145      	movs	r1, #69	; 0x45
 800a43a:	f000 fe1b 	bl	800b074 <d_exprlist>
 800a43e:	e58d      	b.n	8009f5c <d_template_args+0x1114>
 800a440:	3301      	adds	r3, #1
 800a442:	60e3      	str	r3, [r4, #12]
 800a444:	2000      	movs	r0, #0
 800a446:	e589      	b.n	8009f5c <d_template_args+0x1114>
 800a448:	4620      	mov	r0, r4
 800a44a:	f7fd f947 	bl	80076dc <d_type>
 800a44e:	e712      	b.n	800a276 <d_template_args+0x142e>
 800a450:	3301      	adds	r3, #1
 800a452:	60e3      	str	r3, [r4, #12]
 800a454:	f7fe bf80 	b.w	8009358 <d_template_args+0x510>

0800a458 <d_name>:
 800a458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a45c:	68c2      	ldr	r2, [r0, #12]
 800a45e:	7813      	ldrb	r3, [r2, #0]
 800a460:	3b4e      	subs	r3, #78	; 0x4e
 800a462:	b084      	sub	sp, #16
 800a464:	4605      	mov	r5, r0
 800a466:	2b0c      	cmp	r3, #12
 800a468:	d86c      	bhi.n	800a544 <d_name+0xec>
 800a46a:	e8df f003 	tbb	[pc, r3]
 800a46e:	6b1b      	.short	0x6b1b
 800a470:	5c6b6b6b 	.word	0x5c6b6b6b
 800a474:	6b6b166b 	.word	0x6b6b166b
 800a478:	6b6b      	.short	0x6b6b
 800a47a:	07          	.byte	0x07
 800a47b:	00          	.byte	0x00
 800a47c:	3201      	adds	r2, #1
 800a47e:	60c2      	str	r2, [r0, #12]
 800a480:	2100      	movs	r1, #0
 800a482:	f000 f969 	bl	800a758 <d_encoding>
 800a486:	68eb      	ldr	r3, [r5, #12]
 800a488:	781a      	ldrb	r2, [r3, #0]
 800a48a:	2a45      	cmp	r2, #69	; 0x45
 800a48c:	4606      	mov	r6, r0
 800a48e:	f000 80e7 	beq.w	800a660 <d_name+0x208>
 800a492:	2000      	movs	r0, #0
 800a494:	b004      	add	sp, #16
 800a496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a49a:	f7fe fb95 	bl	8008bc8 <d_unqualified_name>
 800a49e:	b004      	add	sp, #16
 800a4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a4:	3201      	adds	r2, #1
 800a4a6:	60c2      	str	r2, [r0, #12]
 800a4a8:	a903      	add	r1, sp, #12
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f7f9 ffaa 	bl	8004404 <d_cv_qualifiers>
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d0ed      	beq.n	800a492 <d_name+0x3a>
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	f7f9 fffb 	bl	80044b4 <d_ref_qualifier>
 800a4be:	68ea      	ldr	r2, [r5, #12]
 800a4c0:	7814      	ldrb	r4, [r2, #0]
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	2600      	movs	r6, #0
 800a4c6:	2c00      	cmp	r4, #0
 800a4c8:	f000 80b4 	beq.w	800a634 <d_name+0x1dc>
 800a4cc:	2c44      	cmp	r4, #68	; 0x44
 800a4ce:	f000 809b 	beq.w	800a608 <d_name+0x1b0>
 800a4d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b09      	cmp	r3, #9
 800a4da:	d976      	bls.n	800a5ca <d_name+0x172>
 800a4dc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b19      	cmp	r3, #25
 800a4e4:	d971      	bls.n	800a5ca <d_name+0x172>
 800a4e6:	2c43      	cmp	r4, #67	; 0x43
 800a4e8:	f000 809f 	beq.w	800a62a <d_name+0x1d2>
 800a4ec:	2c55      	cmp	r4, #85	; 0x55
 800a4ee:	f000 809c 	beq.w	800a62a <d_name+0x1d2>
 800a4f2:	2c4c      	cmp	r4, #76	; 0x4c
 800a4f4:	f000 8099 	beq.w	800a62a <d_name+0x1d2>
 800a4f8:	2c53      	cmp	r4, #83	; 0x53
 800a4fa:	f000 80a7 	beq.w	800a64c <d_name+0x1f4>
 800a4fe:	2c49      	cmp	r4, #73	; 0x49
 800a500:	f000 809d 	beq.w	800a63e <d_name+0x1e6>
 800a504:	2c54      	cmp	r4, #84	; 0x54
 800a506:	f000 80c2 	beq.w	800a68e <d_name+0x236>
 800a50a:	2c45      	cmp	r4, #69	; 0x45
 800a50c:	f000 810a 	beq.w	800a724 <d_name+0x2cc>
 800a510:	2c4d      	cmp	r4, #77	; 0x4d
 800a512:	f040 808f 	bne.w	800a634 <d_name+0x1dc>
 800a516:	2e00      	cmp	r6, #0
 800a518:	f000 808c 	beq.w	800a634 <d_name+0x1dc>
 800a51c:	1c53      	adds	r3, r2, #1
 800a51e:	60eb      	str	r3, [r5, #12]
 800a520:	7854      	ldrb	r4, [r2, #1]
 800a522:	461a      	mov	r2, r3
 800a524:	e7cf      	b.n	800a4c6 <d_name+0x6e>
 800a526:	7853      	ldrb	r3, [r2, #1]
 800a528:	2b74      	cmp	r3, #116	; 0x74
 800a52a:	d01f      	beq.n	800a56c <d_name+0x114>
 800a52c:	2100      	movs	r1, #0
 800a52e:	f7f9 ffdb 	bl	80044e8 <d_substitution>
 800a532:	68eb      	ldr	r3, [r5, #12]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	2b49      	cmp	r3, #73	; 0x49
 800a538:	4604      	mov	r4, r0
 800a53a:	d03c      	beq.n	800a5b6 <d_name+0x15e>
 800a53c:	4620      	mov	r0, r4
 800a53e:	b004      	add	sp, #16
 800a540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a544:	f7fe fb40 	bl	8008bc8 <d_unqualified_name>
 800a548:	68eb      	ldr	r3, [r5, #12]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b49      	cmp	r3, #73	; 0x49
 800a54e:	4604      	mov	r4, r0
 800a550:	d1f4      	bne.n	800a53c <d_name+0xe4>
 800a552:	2800      	cmp	r0, #0
 800a554:	d09d      	beq.n	800a492 <d_name+0x3a>
 800a556:	6a2b      	ldr	r3, [r5, #32]
 800a558:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a55a:	4293      	cmp	r3, r2
 800a55c:	da99      	bge.n	800a492 <d_name+0x3a>
 800a55e:	69e9      	ldr	r1, [r5, #28]
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800a566:	4628      	mov	r0, r5
 800a568:	622a      	str	r2, [r5, #32]
 800a56a:	e025      	b.n	800a5b8 <d_name+0x160>
 800a56c:	3202      	adds	r2, #2
 800a56e:	4978      	ldr	r1, [pc, #480]	; (800a750 <d_name+0x2f8>)
 800a570:	60c2      	str	r2, [r0, #12]
 800a572:	2203      	movs	r2, #3
 800a574:	f7f9 ff2c 	bl	80043d0 <d_make_name>
 800a578:	4604      	mov	r4, r0
 800a57a:	4628      	mov	r0, r5
 800a57c:	f7fe fb24 	bl	8008bc8 <d_unqualified_name>
 800a580:	4622      	mov	r2, r4
 800a582:	4603      	mov	r3, r0
 800a584:	2101      	movs	r1, #1
 800a586:	4628      	mov	r0, r5
 800a588:	f7f9 fed6 	bl	8004338 <d_make_comp>
 800a58c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a58e:	68ea      	ldr	r2, [r5, #12]
 800a590:	3303      	adds	r3, #3
 800a592:	632b      	str	r3, [r5, #48]	; 0x30
 800a594:	7813      	ldrb	r3, [r2, #0]
 800a596:	2b49      	cmp	r3, #73	; 0x49
 800a598:	4604      	mov	r4, r0
 800a59a:	d1cf      	bne.n	800a53c <d_name+0xe4>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	f43f af78 	beq.w	800a492 <d_name+0x3a>
 800a5a2:	6a2b      	ldr	r3, [r5, #32]
 800a5a4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	f6bf af73 	bge.w	800a492 <d_name+0x3a>
 800a5ac:	69e9      	ldr	r1, [r5, #28]
 800a5ae:	1c5a      	adds	r2, r3, #1
 800a5b0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800a5b4:	622a      	str	r2, [r5, #32]
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f7fe fc46 	bl	8008e48 <d_template_args>
 800a5bc:	4622      	mov	r2, r4
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2104      	movs	r1, #4
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f7f9 feb8 	bl	8004338 <d_make_comp>
 800a5c8:	e769      	b.n	800a49e <d_name+0x46>
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	f7fe fafc 	bl	8008bc8 <d_unqualified_name>
 800a5d0:	b34e      	cbz	r6, 800a626 <d_name+0x1ce>
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f7f9 fead 	bl	8004338 <d_make_comp>
 800a5de:	4606      	mov	r6, r0
 800a5e0:	2c53      	cmp	r4, #83	; 0x53
 800a5e2:	d01d      	beq.n	800a620 <d_name+0x1c8>
 800a5e4:	68ea      	ldr	r2, [r5, #12]
 800a5e6:	7814      	ldrb	r4, [r2, #0]
 800a5e8:	2c45      	cmp	r4, #69	; 0x45
 800a5ea:	f43f af72 	beq.w	800a4d2 <d_name+0x7a>
 800a5ee:	b30e      	cbz	r6, 800a634 <d_name+0x1dc>
 800a5f0:	6a2b      	ldr	r3, [r5, #32]
 800a5f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	da1d      	bge.n	800a634 <d_name+0x1dc>
 800a5f8:	69ea      	ldr	r2, [r5, #28]
 800a5fa:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 800a5fe:	3301      	adds	r3, #1
 800a600:	68ea      	ldr	r2, [r5, #12]
 800a602:	622b      	str	r3, [r5, #32]
 800a604:	7814      	ldrb	r4, [r2, #0]
 800a606:	e75e      	b.n	800a4c6 <d_name+0x6e>
 800a608:	7853      	ldrb	r3, [r2, #1]
 800a60a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a60e:	2b54      	cmp	r3, #84	; 0x54
 800a610:	4628      	mov	r0, r5
 800a612:	d00c      	beq.n	800a62e <d_name+0x1d6>
 800a614:	f7fe fad8 	bl	8008bc8 <d_unqualified_name>
 800a618:	2e00      	cmp	r6, #0
 800a61a:	d1da      	bne.n	800a5d2 <d_name+0x17a>
 800a61c:	4606      	mov	r6, r0
 800a61e:	e7e1      	b.n	800a5e4 <d_name+0x18c>
 800a620:	68ea      	ldr	r2, [r5, #12]
 800a622:	7814      	ldrb	r4, [r2, #0]
 800a624:	e74f      	b.n	800a4c6 <d_name+0x6e>
 800a626:	4606      	mov	r6, r0
 800a628:	e7da      	b.n	800a5e0 <d_name+0x188>
 800a62a:	4628      	mov	r0, r5
 800a62c:	e7f2      	b.n	800a614 <d_name+0x1bc>
 800a62e:	f7fd f855 	bl	80076dc <d_type>
 800a632:	e7f1      	b.n	800a618 <d_name+0x1c0>
 800a634:	2000      	movs	r0, #0
 800a636:	6038      	str	r0, [r7, #0]
 800a638:	b004      	add	sp, #16
 800a63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a63e:	2e00      	cmp	r6, #0
 800a640:	d0f8      	beq.n	800a634 <d_name+0x1dc>
 800a642:	4628      	mov	r0, r5
 800a644:	f7fe fc00 	bl	8008e48 <d_template_args>
 800a648:	2104      	movs	r1, #4
 800a64a:	e7c3      	b.n	800a5d4 <d_name+0x17c>
 800a64c:	4628      	mov	r0, r5
 800a64e:	2101      	movs	r1, #1
 800a650:	f7f9 ff4a 	bl	80044e8 <d_substitution>
 800a654:	2e00      	cmp	r6, #0
 800a656:	d1bc      	bne.n	800a5d2 <d_name+0x17a>
 800a658:	68ea      	ldr	r2, [r5, #12]
 800a65a:	4606      	mov	r6, r0
 800a65c:	7814      	ldrb	r4, [r2, #0]
 800a65e:	e732      	b.n	800a4c6 <d_name+0x6e>
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	60ea      	str	r2, [r5, #12]
 800a664:	785a      	ldrb	r2, [r3, #1]
 800a666:	2a73      	cmp	r2, #115	; 0x73
 800a668:	d048      	beq.n	800a6fc <d_name+0x2a4>
 800a66a:	2a64      	cmp	r2, #100	; 0x64
 800a66c:	d013      	beq.n	800a696 <d_name+0x23e>
 800a66e:	4628      	mov	r0, r5
 800a670:	f7ff fef2 	bl	800a458 <d_name>
 800a674:	4603      	mov	r3, r0
 800a676:	b120      	cbz	r0, 800a682 <d_name+0x22a>
 800a678:	7802      	ldrb	r2, [r0, #0]
 800a67a:	2a44      	cmp	r2, #68	; 0x44
 800a67c:	d001      	beq.n	800a682 <d_name+0x22a>
 800a67e:	2a46      	cmp	r2, #70	; 0x46
 800a680:	d134      	bne.n	800a6ec <d_name+0x294>
 800a682:	4628      	mov	r0, r5
 800a684:	4632      	mov	r2, r6
 800a686:	2102      	movs	r1, #2
 800a688:	f7f9 fe56 	bl	8004338 <d_make_comp>
 800a68c:	e707      	b.n	800a49e <d_name+0x46>
 800a68e:	4628      	mov	r0, r5
 800a690:	f7fa f8a0 	bl	80047d4 <d_template_param>
 800a694:	e7c0      	b.n	800a618 <d_name+0x1c0>
 800a696:	3302      	adds	r3, #2
 800a698:	60eb      	str	r3, [r5, #12]
 800a69a:	4628      	mov	r0, r5
 800a69c:	f7fa f882 	bl	80047a4 <d_compact_number>
 800a6a0:	1e07      	subs	r7, r0, #0
 800a6a2:	f6ff aef6 	blt.w	800a492 <d_name+0x3a>
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f7ff fed6 	bl	800a458 <d_name>
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	b120      	cbz	r0, 800a6ba <d_name+0x262>
 800a6b0:	7803      	ldrb	r3, [r0, #0]
 800a6b2:	2b44      	cmp	r3, #68	; 0x44
 800a6b4:	d001      	beq.n	800a6ba <d_name+0x262>
 800a6b6:	2b46      	cmp	r3, #70	; 0x46
 800a6b8:	d112      	bne.n	800a6e0 <d_name+0x288>
 800a6ba:	696b      	ldr	r3, [r5, #20]
 800a6bc:	69aa      	ldr	r2, [r5, #24]
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	da0c      	bge.n	800a6dc <d_name+0x284>
 800a6c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a6c6:	6929      	ldr	r1, [r5, #16]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	0092      	lsls	r2, r2, #2
 800a6cc:	616b      	str	r3, [r5, #20]
 800a6ce:	188b      	adds	r3, r1, r2
 800a6d0:	d0d7      	beq.n	800a682 <d_name+0x22a>
 800a6d2:	2045      	movs	r0, #69	; 0x45
 800a6d4:	5488      	strb	r0, [r1, r2]
 800a6d6:	609f      	str	r7, [r3, #8]
 800a6d8:	605c      	str	r4, [r3, #4]
 800a6da:	e7d2      	b.n	800a682 <d_name+0x22a>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	e7d0      	b.n	800a682 <d_name+0x22a>
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	f7fa f899 	bl	8004818 <d_discriminator>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d1e7      	bne.n	800a6ba <d_name+0x262>
 800a6ea:	e6d2      	b.n	800a492 <d_name+0x3a>
 800a6ec:	9001      	str	r0, [sp, #4]
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f7fa f892 	bl	8004818 <d_discriminator>
 800a6f4:	9b01      	ldr	r3, [sp, #4]
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d1c3      	bne.n	800a682 <d_name+0x22a>
 800a6fa:	e6ca      	b.n	800a492 <d_name+0x3a>
 800a6fc:	3302      	adds	r3, #2
 800a6fe:	60eb      	str	r3, [r5, #12]
 800a700:	4628      	mov	r0, r5
 800a702:	f7fa f889 	bl	8004818 <d_discriminator>
 800a706:	2800      	cmp	r0, #0
 800a708:	f43f aec3 	beq.w	800a492 <d_name+0x3a>
 800a70c:	4628      	mov	r0, r5
 800a70e:	4911      	ldr	r1, [pc, #68]	; (800a754 <d_name+0x2fc>)
 800a710:	220e      	movs	r2, #14
 800a712:	f7f9 fe5d 	bl	80043d0 <d_make_name>
 800a716:	4632      	mov	r2, r6
 800a718:	4603      	mov	r3, r0
 800a71a:	2102      	movs	r1, #2
 800a71c:	4628      	mov	r0, r5
 800a71e:	f7f9 fe0b 	bl	8004338 <d_make_comp>
 800a722:	e6bc      	b.n	800a49e <d_name+0x46>
 800a724:	603e      	str	r6, [r7, #0]
 800a726:	2e00      	cmp	r6, #0
 800a728:	f43f aeb3 	beq.w	800a492 <d_name+0x3a>
 800a72c:	f1b8 0f00 	cmp.w	r8, #0
 800a730:	d004      	beq.n	800a73c <d_name+0x2e4>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	f8c8 3004 	str.w	r3, [r8, #4]
 800a738:	f8cd 800c 	str.w	r8, [sp, #12]
 800a73c:	68eb      	ldr	r3, [r5, #12]
 800a73e:	781a      	ldrb	r2, [r3, #0]
 800a740:	2a45      	cmp	r2, #69	; 0x45
 800a742:	f47f aea6 	bne.w	800a492 <d_name+0x3a>
 800a746:	3301      	adds	r3, #1
 800a748:	60eb      	str	r3, [r5, #12]
 800a74a:	9803      	ldr	r0, [sp, #12]
 800a74c:	e6a7      	b.n	800a49e <d_name+0x46>
 800a74e:	bf00      	nop
 800a750:	0801de18 	.word	0x0801de18
 800a754:	0801de08 	.word	0x0801de08

0800a758 <d_encoding>:
 800a758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a75c:	68c3      	ldr	r3, [r0, #12]
 800a75e:	781a      	ldrb	r2, [r3, #0]
 800a760:	2a47      	cmp	r2, #71	; 0x47
 800a762:	4605      	mov	r5, r0
 800a764:	d03b      	beq.n	800a7de <d_encoding+0x86>
 800a766:	2a54      	cmp	r2, #84	; 0x54
 800a768:	d039      	beq.n	800a7de <d_encoding+0x86>
 800a76a:	460e      	mov	r6, r1
 800a76c:	f7ff fe74 	bl	800a458 <d_name>
 800a770:	4604      	mov	r4, r0
 800a772:	b388      	cbz	r0, 800a7d8 <d_encoding+0x80>
 800a774:	b116      	cbz	r6, 800a77c <d_encoding+0x24>
 800a776:	68ab      	ldr	r3, [r5, #8]
 800a778:	07db      	lsls	r3, r3, #31
 800a77a:	d51f      	bpl.n	800a7bc <d_encoding+0x64>
 800a77c:	68eb      	ldr	r3, [r5, #12]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	b323      	cbz	r3, 800a7cc <d_encoding+0x74>
 800a782:	2b45      	cmp	r3, #69	; 0x45
 800a784:	d022      	beq.n	800a7cc <d_encoding+0x74>
 800a786:	4621      	mov	r1, r4
 800a788:	780b      	ldrb	r3, [r1, #0]
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	f1a3 021c 	sub.w	r2, r3, #28
 800a790:	f000 811a 	beq.w	800a9c8 <d_encoding+0x270>
 800a794:	f0c0 8116 	bcc.w	800a9c4 <d_encoding+0x26c>
 800a798:	2a04      	cmp	r2, #4
 800a79a:	f200 8113 	bhi.w	800a9c4 <d_encoding+0x26c>
 800a79e:	6849      	ldr	r1, [r1, #4]
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	d1f1      	bne.n	800a788 <d_encoding+0x30>
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f7fe f94f 	bl	8008a48 <d_bare_function_type>
 800a7aa:	4622      	mov	r2, r4
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2103      	movs	r1, #3
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b6:	f7f9 bdbf 	b.w	8004338 <d_make_comp>
 800a7ba:	6864      	ldr	r4, [r4, #4]
 800a7bc:	7823      	ldrb	r3, [r4, #0]
 800a7be:	f1a3 021c 	sub.w	r2, r3, #28
 800a7c2:	2a04      	cmp	r2, #4
 800a7c4:	d9f9      	bls.n	800a7ba <d_encoding+0x62>
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	f000 816e 	beq.w	800aaa8 <d_encoding+0x350>
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d2:	68eb      	ldr	r3, [r5, #12]
 800a7d4:	3302      	adds	r3, #2
 800a7d6:	60eb      	str	r3, [r5, #12]
 800a7d8:	2000      	movs	r0, #0
 800a7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7de:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800a7e0:	f101 0214 	add.w	r2, r1, #20
 800a7e4:	632a      	str	r2, [r5, #48]	; 0x30
 800a7e6:	781a      	ldrb	r2, [r3, #0]
 800a7e8:	2a54      	cmp	r2, #84	; 0x54
 800a7ea:	d073      	beq.n	800a8d4 <d_encoding+0x17c>
 800a7ec:	2a47      	cmp	r2, #71	; 0x47
 800a7ee:	d1f3      	bne.n	800a7d8 <d_encoding+0x80>
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	60ea      	str	r2, [r5, #12]
 800a7f4:	785a      	ldrb	r2, [r3, #1]
 800a7f6:	2a00      	cmp	r2, #0
 800a7f8:	d0ee      	beq.n	800a7d8 <d_encoding+0x80>
 800a7fa:	1c9a      	adds	r2, r3, #2
 800a7fc:	60ea      	str	r2, [r5, #12]
 800a7fe:	785a      	ldrb	r2, [r3, #1]
 800a800:	3a41      	subs	r2, #65	; 0x41
 800a802:	2a31      	cmp	r2, #49	; 0x31
 800a804:	d8e8      	bhi.n	800a7d8 <d_encoding+0x80>
 800a806:	a101      	add	r1, pc, #4	; (adr r1, 800a80c <d_encoding+0xb4>)
 800a808:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a80c:	0800ab99 	.word	0x0800ab99
 800a810:	0800a7d9 	.word	0x0800a7d9
 800a814:	0800a7d9 	.word	0x0800a7d9
 800a818:	0800a7d9 	.word	0x0800a7d9
 800a81c:	0800a7d9 	.word	0x0800a7d9
 800a820:	0800a7d9 	.word	0x0800a7d9
 800a824:	0800a7d9 	.word	0x0800a7d9
 800a828:	0800a7d9 	.word	0x0800a7d9
 800a82c:	0800a7d9 	.word	0x0800a7d9
 800a830:	0800a7d9 	.word	0x0800a7d9
 800a834:	0800a7d9 	.word	0x0800a7d9
 800a838:	0800a7d9 	.word	0x0800a7d9
 800a83c:	0800a7d9 	.word	0x0800a7d9
 800a840:	0800a7d9 	.word	0x0800a7d9
 800a844:	0800a7d9 	.word	0x0800a7d9
 800a848:	0800a7d9 	.word	0x0800a7d9
 800a84c:	0800a7d9 	.word	0x0800a7d9
 800a850:	0800ab7b 	.word	0x0800ab7b
 800a854:	0800a7d9 	.word	0x0800a7d9
 800a858:	0800abb1 	.word	0x0800abb1
 800a85c:	0800a7d9 	.word	0x0800a7d9
 800a860:	0800ab65 	.word	0x0800ab65
 800a864:	0800a7d9 	.word	0x0800a7d9
 800a868:	0800a7d9 	.word	0x0800a7d9
 800a86c:	0800a7d9 	.word	0x0800a7d9
 800a870:	0800a7d9 	.word	0x0800a7d9
 800a874:	0800a7d9 	.word	0x0800a7d9
 800a878:	0800a7d9 	.word	0x0800a7d9
 800a87c:	0800a7d9 	.word	0x0800a7d9
 800a880:	0800a7d9 	.word	0x0800a7d9
 800a884:	0800a7d9 	.word	0x0800a7d9
 800a888:	0800a7d9 	.word	0x0800a7d9
 800a88c:	0800a7d9 	.word	0x0800a7d9
 800a890:	0800a7d9 	.word	0x0800a7d9
 800a894:	0800a7d9 	.word	0x0800a7d9
 800a898:	0800a7d9 	.word	0x0800a7d9
 800a89c:	0800a7d9 	.word	0x0800a7d9
 800a8a0:	0800a7d9 	.word	0x0800a7d9
 800a8a4:	0800a7d9 	.word	0x0800a7d9
 800a8a8:	0800a7d9 	.word	0x0800a7d9
 800a8ac:	0800a7d9 	.word	0x0800a7d9
 800a8b0:	0800a7d9 	.word	0x0800a7d9
 800a8b4:	0800a7d9 	.word	0x0800a7d9
 800a8b8:	0800a7d9 	.word	0x0800a7d9
 800a8bc:	0800a7d9 	.word	0x0800a7d9
 800a8c0:	0800a7d9 	.word	0x0800a7d9
 800a8c4:	0800a7d9 	.word	0x0800a7d9
 800a8c8:	0800a7d9 	.word	0x0800a7d9
 800a8cc:	0800a7d9 	.word	0x0800a7d9
 800a8d0:	0800aacb 	.word	0x0800aacb
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	60ea      	str	r2, [r5, #12]
 800a8d8:	785a      	ldrb	r2, [r3, #1]
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	f43f af7c 	beq.w	800a7d8 <d_encoding+0x80>
 800a8e0:	1c9a      	adds	r2, r3, #2
 800a8e2:	60ea      	str	r2, [r5, #12]
 800a8e4:	785b      	ldrb	r3, [r3, #1]
 800a8e6:	3b43      	subs	r3, #67	; 0x43
 800a8e8:	2b33      	cmp	r3, #51	; 0x33
 800a8ea:	f63f af75 	bhi.w	800a7d8 <d_encoding+0x80>
 800a8ee:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <d_encoding+0x19c>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800ac2f 	.word	0x0800ac2f
 800a8f8:	0800a7d9 	.word	0x0800a7d9
 800a8fc:	0800a7d9 	.word	0x0800a7d9
 800a900:	0800ac19 	.word	0x0800ac19
 800a904:	0800a7d9 	.word	0x0800a7d9
 800a908:	0800ac03 	.word	0x0800ac03
 800a90c:	0800ad3f 	.word	0x0800ad3f
 800a910:	0800ad29 	.word	0x0800ad29
 800a914:	0800a7d9 	.word	0x0800a7d9
 800a918:	0800a7d9 	.word	0x0800a7d9
 800a91c:	0800a7d9 	.word	0x0800a7d9
 800a920:	0800a7d9 	.word	0x0800a7d9
 800a924:	0800a7d9 	.word	0x0800a7d9
 800a928:	0800a7d9 	.word	0x0800a7d9
 800a92c:	0800a7d9 	.word	0x0800a7d9
 800a930:	0800a7d9 	.word	0x0800a7d9
 800a934:	0800ad13 	.word	0x0800ad13
 800a938:	0800acf9 	.word	0x0800acf9
 800a93c:	0800a7d9 	.word	0x0800a7d9
 800a940:	0800acdf 	.word	0x0800acdf
 800a944:	0800acc9 	.word	0x0800acc9
 800a948:	0800a7d9 	.word	0x0800a7d9
 800a94c:	0800a7d9 	.word	0x0800a7d9
 800a950:	0800a7d9 	.word	0x0800a7d9
 800a954:	0800a7d9 	.word	0x0800a7d9
 800a958:	0800a7d9 	.word	0x0800a7d9
 800a95c:	0800a7d9 	.word	0x0800a7d9
 800a960:	0800a7d9 	.word	0x0800a7d9
 800a964:	0800a7d9 	.word	0x0800a7d9
 800a968:	0800a7d9 	.word	0x0800a7d9
 800a96c:	0800a7d9 	.word	0x0800a7d9
 800a970:	0800a7d9 	.word	0x0800a7d9
 800a974:	0800ac95 	.word	0x0800ac95
 800a978:	0800a7d9 	.word	0x0800a7d9
 800a97c:	0800a7d9 	.word	0x0800a7d9
 800a980:	0800a7d9 	.word	0x0800a7d9
 800a984:	0800a7d9 	.word	0x0800a7d9
 800a988:	0800ac6f 	.word	0x0800ac6f
 800a98c:	0800a7d9 	.word	0x0800a7d9
 800a990:	0800a7d9 	.word	0x0800a7d9
 800a994:	0800a7d9 	.word	0x0800a7d9
 800a998:	0800a7d9 	.word	0x0800a7d9
 800a99c:	0800a7d9 	.word	0x0800a7d9
 800a9a0:	0800a7d9 	.word	0x0800a7d9
 800a9a4:	0800a7d9 	.word	0x0800a7d9
 800a9a8:	0800a7d9 	.word	0x0800a7d9
 800a9ac:	0800a7d9 	.word	0x0800a7d9
 800a9b0:	0800a7d9 	.word	0x0800a7d9
 800a9b4:	0800a7d9 	.word	0x0800a7d9
 800a9b8:	0800a7d9 	.word	0x0800a7d9
 800a9bc:	0800a7d9 	.word	0x0800a7d9
 800a9c0:	0800abdd 	.word	0x0800abdd
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	e6ed      	b.n	800a7a4 <d_encoding+0x4c>
 800a9c8:	684a      	ldr	r2, [r1, #4]
 800a9ca:	2a00      	cmp	r2, #0
 800a9cc:	d07b      	beq.n	800aac6 <d_encoding+0x36e>
 800a9ce:	7813      	ldrb	r3, [r2, #0]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	2b32      	cmp	r3, #50	; 0x32
 800a9d4:	d877      	bhi.n	800aac6 <d_encoding+0x36e>
 800a9d6:	a101      	add	r1, pc, #4	; (adr r1, 800a9dc <d_encoding+0x284>)
 800a9d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9dc:	0800aac1 	.word	0x0800aac1
 800a9e0:	0800aac1 	.word	0x0800aac1
 800a9e4:	0800aac7 	.word	0x0800aac7
 800a9e8:	0800aac7 	.word	0x0800aac7
 800a9ec:	0800aac7 	.word	0x0800aac7
 800a9f0:	0800aac7 	.word	0x0800aac7
 800a9f4:	0800a9c5 	.word	0x0800a9c5
 800a9f8:	0800a9c5 	.word	0x0800a9c5
 800a9fc:	0800aac7 	.word	0x0800aac7
 800aa00:	0800aac7 	.word	0x0800aac7
 800aa04:	0800aac7 	.word	0x0800aac7
 800aa08:	0800aac7 	.word	0x0800aac7
 800aa0c:	0800aac7 	.word	0x0800aac7
 800aa10:	0800aac7 	.word	0x0800aac7
 800aa14:	0800aac7 	.word	0x0800aac7
 800aa18:	0800aac7 	.word	0x0800aac7
 800aa1c:	0800aac7 	.word	0x0800aac7
 800aa20:	0800aac7 	.word	0x0800aac7
 800aa24:	0800aac7 	.word	0x0800aac7
 800aa28:	0800aac7 	.word	0x0800aac7
 800aa2c:	0800aac7 	.word	0x0800aac7
 800aa30:	0800aac7 	.word	0x0800aac7
 800aa34:	0800aac7 	.word	0x0800aac7
 800aa38:	0800aac7 	.word	0x0800aac7
 800aa3c:	0800aac7 	.word	0x0800aac7
 800aa40:	0800aac7 	.word	0x0800aac7
 800aa44:	0800aac7 	.word	0x0800aac7
 800aa48:	0800aac7 	.word	0x0800aac7
 800aa4c:	0800aac7 	.word	0x0800aac7
 800aa50:	0800aac7 	.word	0x0800aac7
 800aa54:	0800aac7 	.word	0x0800aac7
 800aa58:	0800aac7 	.word	0x0800aac7
 800aa5c:	0800aac7 	.word	0x0800aac7
 800aa60:	0800aac7 	.word	0x0800aac7
 800aa64:	0800aac7 	.word	0x0800aac7
 800aa68:	0800aac7 	.word	0x0800aac7
 800aa6c:	0800aac7 	.word	0x0800aac7
 800aa70:	0800aac7 	.word	0x0800aac7
 800aa74:	0800aac7 	.word	0x0800aac7
 800aa78:	0800aac7 	.word	0x0800aac7
 800aa7c:	0800aac7 	.word	0x0800aac7
 800aa80:	0800aac7 	.word	0x0800aac7
 800aa84:	0800aac7 	.word	0x0800aac7
 800aa88:	0800aac7 	.word	0x0800aac7
 800aa8c:	0800aac7 	.word	0x0800aac7
 800aa90:	0800aac7 	.word	0x0800aac7
 800aa94:	0800aac7 	.word	0x0800aac7
 800aa98:	0800aac7 	.word	0x0800aac7
 800aa9c:	0800aac7 	.word	0x0800aac7
 800aaa0:	0800aac7 	.word	0x0800aac7
 800aaa4:	0800a9c5 	.word	0x0800a9c5
 800aaa8:	68a2      	ldr	r2, [r4, #8]
 800aaaa:	7813      	ldrb	r3, [r2, #0]
 800aaac:	3b1c      	subs	r3, #28
 800aaae:	2b04      	cmp	r3, #4
 800aab0:	d804      	bhi.n	800aabc <d_encoding+0x364>
 800aab2:	6852      	ldr	r2, [r2, #4]
 800aab4:	7813      	ldrb	r3, [r2, #0]
 800aab6:	3b1c      	subs	r3, #28
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d9fa      	bls.n	800aab2 <d_encoding+0x35a>
 800aabc:	60a2      	str	r2, [r4, #8]
 800aabe:	e685      	b.n	800a7cc <d_encoding+0x74>
 800aac0:	6892      	ldr	r2, [r2, #8]
 800aac2:	2a00      	cmp	r2, #0
 800aac4:	d183      	bne.n	800a9ce <d_encoding+0x276>
 800aac6:	2101      	movs	r1, #1
 800aac8:	e66c      	b.n	800a7a4 <d_encoding+0x4c>
 800aaca:	f105 000c 	add.w	r0, r5, #12
 800aace:	f7f9 fe25 	bl	800471c <d_number.isra.0>
 800aad2:	2801      	cmp	r0, #1
 800aad4:	f77f ae80 	ble.w	800a7d8 <d_encoding+0x80>
 800aad8:	68eb      	ldr	r3, [r5, #12]
 800aada:	781a      	ldrb	r2, [r3, #0]
 800aadc:	2a00      	cmp	r2, #0
 800aade:	f43f ae7b 	beq.w	800a7d8 <d_encoding+0x80>
 800aae2:	1c5f      	adds	r7, r3, #1
 800aae4:	60ef      	str	r7, [r5, #12]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b5f      	cmp	r3, #95	; 0x5f
 800aaea:	f47f ae75 	bne.w	800a7d8 <d_encoding+0x80>
 800aaee:	1e46      	subs	r6, r0, #1
 800aaf0:	f04f 0800 	mov.w	r8, #0
 800aaf4:	f04f 093f 	mov.w	r9, #63	; 0x3f
 800aaf8:	783b      	ldrb	r3, [r7, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f43f ae6c 	beq.w	800a7d8 <d_encoding+0x80>
 800ab00:	2b24      	cmp	r3, #36	; 0x24
 800ab02:	f000 8127 	beq.w	800ad54 <d_encoding+0x5fc>
 800ab06:	463a      	mov	r2, r7
 800ab08:	2400      	movs	r4, #0
 800ab0a:	e004      	b.n	800ab16 <d_encoding+0x3be>
 800ab0c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ab10:	b123      	cbz	r3, 800ab1c <d_encoding+0x3c4>
 800ab12:	2b24      	cmp	r3, #36	; 0x24
 800ab14:	d002      	beq.n	800ab1c <d_encoding+0x3c4>
 800ab16:	3401      	adds	r4, #1
 800ab18:	42b4      	cmp	r4, r6
 800ab1a:	dbf7      	blt.n	800ab0c <d_encoding+0x3b4>
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	4628      	mov	r0, r5
 800ab20:	4622      	mov	r2, r4
 800ab22:	f7f9 fc55 	bl	80043d0 <d_make_name>
 800ab26:	68ef      	ldr	r7, [r5, #12]
 800ab28:	4427      	add	r7, r4
 800ab2a:	1b36      	subs	r6, r6, r4
 800ab2c:	60ef      	str	r7, [r5, #12]
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f43f ae52 	beq.w	800a7d8 <d_encoding+0x80>
 800ab34:	f1b8 0f00 	cmp.w	r8, #0
 800ab38:	f000 812b 	beq.w	800ad92 <d_encoding+0x63a>
 800ab3c:	4642      	mov	r2, r8
 800ab3e:	4603      	mov	r3, r0
 800ab40:	213e      	movs	r1, #62	; 0x3e
 800ab42:	4628      	mov	r0, r5
 800ab44:	f7f9 fbf8 	bl	8004338 <d_make_comp>
 800ab48:	4680      	mov	r8, r0
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	f43f ae44 	beq.w	800a7d8 <d_encoding+0x80>
 800ab50:	2e00      	cmp	r6, #0
 800ab52:	dcd1      	bgt.n	800aaf8 <d_encoding+0x3a0>
 800ab54:	4628      	mov	r0, r5
 800ab56:	4642      	mov	r2, r8
 800ab58:	213d      	movs	r1, #61	; 0x3d
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab60:	f7f9 bbea 	b.w	8004338 <d_make_comp>
 800ab64:	4628      	mov	r0, r5
 800ab66:	f7ff fc77 	bl	800a458 <d_name>
 800ab6a:	2113      	movs	r1, #19
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	2300      	movs	r3, #0
 800ab70:	4628      	mov	r0, r5
 800ab72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab76:	f7f9 bbdf 	b.w	8004338 <d_make_comp>
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f7ff fc6c 	bl	800a458 <d_name>
 800ab80:	4604      	mov	r4, r0
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7f9 fdf2 	bl	800476c <d_number_component>
 800ab88:	4622      	mov	r2, r4
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2116      	movs	r1, #22
 800ab8e:	4628      	mov	r0, r5
 800ab90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab94:	f7f9 bbd0 	b.w	8004338 <d_make_comp>
 800ab98:	4628      	mov	r0, r5
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	f7ff fddc 	bl	800a758 <d_encoding>
 800aba0:	2117      	movs	r1, #23
 800aba2:	4602      	mov	r2, r0
 800aba4:	2300      	movs	r3, #0
 800aba6:	4628      	mov	r0, r5
 800aba8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abac:	f7f9 bbc4 	b.w	8004338 <d_make_comp>
 800abb0:	789a      	ldrb	r2, [r3, #2]
 800abb2:	4628      	mov	r0, r5
 800abb4:	2100      	movs	r1, #0
 800abb6:	2a00      	cmp	r2, #0
 800abb8:	f000 80ed 	beq.w	800ad96 <d_encoding+0x63e>
 800abbc:	1cda      	adds	r2, r3, #3
 800abbe:	60ea      	str	r2, [r5, #12]
 800abc0:	789b      	ldrb	r3, [r3, #2]
 800abc2:	2b6e      	cmp	r3, #110	; 0x6e
 800abc4:	f040 80e7 	bne.w	800ad96 <d_encoding+0x63e>
 800abc8:	f7ff fdc6 	bl	800a758 <d_encoding>
 800abcc:	2148      	movs	r1, #72	; 0x48
 800abce:	4602      	mov	r2, r0
 800abd0:	2300      	movs	r3, #0
 800abd2:	4628      	mov	r0, r5
 800abd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd8:	f7f9 bbae 	b.w	8004338 <d_make_comp>
 800abdc:	4628      	mov	r0, r5
 800abde:	2176      	movs	r1, #118	; 0x76
 800abe0:	f7f9 fe6c 	bl	80048bc <d_call_offset>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	f43f adf7 	beq.w	800a7d8 <d_encoding+0x80>
 800abea:	4628      	mov	r0, r5
 800abec:	2100      	movs	r1, #0
 800abee:	f7ff fdb3 	bl	800a758 <d_encoding>
 800abf2:	2110      	movs	r1, #16
 800abf4:	4602      	mov	r2, r0
 800abf6:	2300      	movs	r3, #0
 800abf8:	4628      	mov	r0, r5
 800abfa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abfe:	f7f9 bb9b 	b.w	8004338 <d_make_comp>
 800ac02:	4628      	mov	r0, r5
 800ac04:	f7ff fc28 	bl	800a458 <d_name>
 800ac08:	2114      	movs	r1, #20
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	4628      	mov	r0, r5
 800ac10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac14:	f7f9 bb90 	b.w	8004338 <d_make_comp>
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f7fc fd5f 	bl	80076dc <d_type>
 800ac1e:	210e      	movs	r1, #14
 800ac20:	4602      	mov	r2, r0
 800ac22:	2300      	movs	r3, #0
 800ac24:	4628      	mov	r0, r5
 800ac26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2a:	f7f9 bb85 	b.w	8004338 <d_make_comp>
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f7fc fd54 	bl	80076dc <d_type>
 800ac34:	4604      	mov	r4, r0
 800ac36:	f105 000c 	add.w	r0, r5, #12
 800ac3a:	f7f9 fd6f 	bl	800471c <d_number.isra.0>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f6ff adca 	blt.w	800a7d8 <d_encoding+0x80>
 800ac44:	68eb      	ldr	r3, [r5, #12]
 800ac46:	781a      	ldrb	r2, [r3, #0]
 800ac48:	2a5f      	cmp	r2, #95	; 0x5f
 800ac4a:	f47f adc5 	bne.w	800a7d8 <d_encoding+0x80>
 800ac4e:	3301      	adds	r3, #1
 800ac50:	60eb      	str	r3, [r5, #12]
 800ac52:	4628      	mov	r0, r5
 800ac54:	f7fc fd42 	bl	80076dc <d_type>
 800ac58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ac5a:	1d59      	adds	r1, r3, #5
 800ac5c:	6329      	str	r1, [r5, #48]	; 0x30
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4623      	mov	r3, r4
 800ac62:	4628      	mov	r0, r5
 800ac64:	210b      	movs	r1, #11
 800ac66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac6a:	f7f9 bb65 	b.w	8004338 <d_make_comp>
 800ac6e:	4628      	mov	r0, r5
 800ac70:	2168      	movs	r1, #104	; 0x68
 800ac72:	f7f9 fe23 	bl	80048bc <d_call_offset>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f43f adae 	beq.w	800a7d8 <d_encoding+0x80>
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	2100      	movs	r1, #0
 800ac80:	f7ff fd6a 	bl	800a758 <d_encoding>
 800ac84:	210f      	movs	r1, #15
 800ac86:	4602      	mov	r2, r0
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac90:	f7f9 bb52 	b.w	8004338 <d_make_comp>
 800ac94:	4628      	mov	r0, r5
 800ac96:	2100      	movs	r1, #0
 800ac98:	f7f9 fe10 	bl	80048bc <d_call_offset>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	f43f ad9b 	beq.w	800a7d8 <d_encoding+0x80>
 800aca2:	4628      	mov	r0, r5
 800aca4:	2100      	movs	r1, #0
 800aca6:	f7f9 fe09 	bl	80048bc <d_call_offset>
 800acaa:	2800      	cmp	r0, #0
 800acac:	f43f ad94 	beq.w	800a7d8 <d_encoding+0x80>
 800acb0:	4628      	mov	r0, r5
 800acb2:	2100      	movs	r1, #0
 800acb4:	f7ff fd50 	bl	800a758 <d_encoding>
 800acb8:	2111      	movs	r1, #17
 800acba:	4602      	mov	r2, r0
 800acbc:	2300      	movs	r3, #0
 800acbe:	4628      	mov	r0, r5
 800acc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc4:	f7f9 bb38 	b.w	8004338 <d_make_comp>
 800acc8:	4628      	mov	r0, r5
 800acca:	f7ff fbc5 	bl	800a458 <d_name>
 800acce:	2115      	movs	r1, #21
 800acd0:	4602      	mov	r2, r0
 800acd2:	2300      	movs	r3, #0
 800acd4:	4628      	mov	r0, r5
 800acd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acda:	f7f9 bb2d 	b.w	8004338 <d_make_comp>
 800acde:	310f      	adds	r1, #15
 800ace0:	6329      	str	r1, [r5, #48]	; 0x30
 800ace2:	4628      	mov	r0, r5
 800ace4:	f7fc fcfa 	bl	80076dc <d_type>
 800ace8:	2109      	movs	r1, #9
 800acea:	4602      	mov	r2, r0
 800acec:	2300      	movs	r3, #0
 800acee:	4628      	mov	r0, r5
 800acf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acf4:	f7f9 bb20 	b.w	8004338 <d_make_comp>
 800acf8:	310a      	adds	r1, #10
 800acfa:	6329      	str	r1, [r5, #48]	; 0x30
 800acfc:	4628      	mov	r0, r5
 800acfe:	f7fc fced 	bl	80076dc <d_type>
 800ad02:	210a      	movs	r1, #10
 800ad04:	4602      	mov	r2, r0
 800ad06:	2300      	movs	r3, #0
 800ad08:	4628      	mov	r0, r5
 800ad0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad0e:	f7f9 bb13 	b.w	8004338 <d_make_comp>
 800ad12:	4628      	mov	r0, r5
 800ad14:	f7fc fce2 	bl	80076dc <d_type>
 800ad18:	210d      	movs	r1, #13
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4628      	mov	r0, r5
 800ad20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad24:	f7f9 bb08 	b.w	8004338 <d_make_comp>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f7fc fcd7 	bl	80076dc <d_type>
 800ad2e:	2112      	movs	r1, #18
 800ad30:	4602      	mov	r2, r0
 800ad32:	2300      	movs	r3, #0
 800ad34:	4628      	mov	r0, r5
 800ad36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3a:	f7f9 bafd 	b.w	8004338 <d_make_comp>
 800ad3e:	4628      	mov	r0, r5
 800ad40:	f7fc fccc 	bl	80076dc <d_type>
 800ad44:	210c      	movs	r1, #12
 800ad46:	4602      	mov	r2, r0
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad50:	f7f9 baf2 	b.w	8004338 <d_make_comp>
 800ad54:	787b      	ldrb	r3, [r7, #1]
 800ad56:	2b53      	cmp	r3, #83	; 0x53
 800ad58:	d029      	beq.n	800adae <d_encoding+0x656>
 800ad5a:	2b5f      	cmp	r3, #95	; 0x5f
 800ad5c:	d025      	beq.n	800adaa <d_encoding+0x652>
 800ad5e:	2b24      	cmp	r3, #36	; 0x24
 800ad60:	f47f ad3a 	bne.w	800a7d8 <d_encoding+0x80>
 800ad64:	461a      	mov	r2, r3
 800ad66:	696b      	ldr	r3, [r5, #20]
 800ad68:	69a9      	ldr	r1, [r5, #24]
 800ad6a:	428b      	cmp	r3, r1
 800ad6c:	f6bf ad31 	bge.w	800a7d2 <d_encoding+0x7a>
 800ad70:	6929      	ldr	r1, [r5, #16]
 800ad72:	1c58      	adds	r0, r3, #1
 800ad74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ad78:	6168      	str	r0, [r5, #20]
 800ad7a:	eb11 0083 	adds.w	r0, r1, r3, lsl #2
 800ad7e:	f43f ad28 	beq.w	800a7d2 <d_encoding+0x7a>
 800ad82:	f801 9023 	strb.w	r9, [r1, r3, lsl #2]
 800ad86:	6042      	str	r2, [r0, #4]
 800ad88:	68ef      	ldr	r7, [r5, #12]
 800ad8a:	3702      	adds	r7, #2
 800ad8c:	3e02      	subs	r6, #2
 800ad8e:	60ef      	str	r7, [r5, #12]
 800ad90:	e6d0      	b.n	800ab34 <d_encoding+0x3dc>
 800ad92:	4680      	mov	r8, r0
 800ad94:	e6dc      	b.n	800ab50 <d_encoding+0x3f8>
 800ad96:	f7ff fcdf 	bl	800a758 <d_encoding>
 800ad9a:	2147      	movs	r1, #71	; 0x47
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	2300      	movs	r3, #0
 800ada0:	4628      	mov	r0, r5
 800ada2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada6:	f7f9 bac7 	b.w	8004338 <d_make_comp>
 800adaa:	222e      	movs	r2, #46	; 0x2e
 800adac:	e7db      	b.n	800ad66 <d_encoding+0x60e>
 800adae:	222f      	movs	r2, #47	; 0x2f
 800adb0:	e7d9      	b.n	800ad66 <d_encoding+0x60e>
 800adb2:	bf00      	nop

0800adb4 <d_demangle_callback.constprop.16>:
 800adb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adb8:	b0e1      	sub	sp, #388	; 0x184
 800adba:	f890 8000 	ldrb.w	r8, [r0]
 800adbe:	f1b8 0f5f 	cmp.w	r8, #95	; 0x5f
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	4606      	mov	r6, r0
 800adc6:	460d      	mov	r5, r1
 800adc8:	4614      	mov	r4, r2
 800adca:	f000 80d2 	beq.w	800af72 <d_demangle_callback.constprop.16+0x1be>
 800adce:	4630      	mov	r0, r6
 800add0:	49a7      	ldr	r1, [pc, #668]	; (800b070 <d_demangle_callback.constprop.16+0x2bc>)
 800add2:	2208      	movs	r2, #8
 800add4:	f00c fe42 	bl	8017a5c <strncmp>
 800add8:	b978      	cbnz	r0, 800adfa <d_demangle_callback.constprop.16+0x46>
 800adda:	7a33      	ldrb	r3, [r6, #8]
 800addc:	2b2e      	cmp	r3, #46	; 0x2e
 800adde:	d005      	beq.n	800adec <d_demangle_callback.constprop.16+0x38>
 800ade0:	2b5f      	cmp	r3, #95	; 0x5f
 800ade2:	d003      	beq.n	800adec <d_demangle_callback.constprop.16+0x38>
 800ade4:	2b24      	cmp	r3, #36	; 0x24
 800ade6:	d001      	beq.n	800adec <d_demangle_callback.constprop.16+0x38>
 800ade8:	4681      	mov	r9, r0
 800adea:	e008      	b.n	800adfe <d_demangle_callback.constprop.16+0x4a>
 800adec:	7a73      	ldrb	r3, [r6, #9]
 800adee:	2b44      	cmp	r3, #68	; 0x44
 800adf0:	f000 80cf 	beq.w	800af92 <d_demangle_callback.constprop.16+0x1de>
 800adf4:	2b49      	cmp	r3, #73	; 0x49
 800adf6:	f000 80cc 	beq.w	800af92 <d_demangle_callback.constprop.16+0x1de>
 800adfa:	f04f 0900 	mov.w	r9, #0
 800adfe:	4630      	mov	r0, r6
 800ae00:	f00c fdfe 	bl	8017a00 <strlen>
 800ae04:	0041      	lsls	r1, r0, #1
 800ae06:	0083      	lsls	r3, r0, #2
 800ae08:	185a      	adds	r2, r3, r1
 800ae0a:	0092      	lsls	r2, r2, #2
 800ae0c:	3208      	adds	r2, #8
 800ae0e:	330a      	adds	r3, #10
 800ae10:	ebad 0d02 	sub.w	sp, sp, r2
 800ae14:	f023 0307 	bic.w	r3, r3, #7
 800ae18:	46ec      	mov	ip, sp
 800ae1a:	eb06 0e00 	add.w	lr, r6, r0
 800ae1e:	ebad 0d03 	sub.w	sp, sp, r3
 800ae22:	2211      	movs	r2, #17
 800ae24:	2300      	movs	r3, #0
 800ae26:	f1b9 0f01 	cmp.w	r9, #1
 800ae2a:	f8c7 c014 	str.w	ip, [r7, #20]
 800ae2e:	f8c7 d020 	str.w	sp, [r7, #32]
 800ae32:	61f9      	str	r1, [r7, #28]
 800ae34:	607e      	str	r6, [r7, #4]
 800ae36:	613e      	str	r6, [r7, #16]
 800ae38:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae3a:	f8c7 e008 	str.w	lr, [r7, #8]
 800ae3e:	60fa      	str	r2, [r7, #12]
 800ae40:	61bb      	str	r3, [r7, #24]
 800ae42:	627b      	str	r3, [r7, #36]	; 0x24
 800ae44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae46:	633b      	str	r3, [r7, #48]	; 0x30
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34
 800ae4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae4e:	f000 8097 	beq.w	800af80 <d_demangle_callback.constprop.16+0x1cc>
 800ae52:	f0c0 80a9 	bcc.w	800afa8 <d_demangle_callback.constprop.16+0x1f4>
 800ae56:	f1b9 0f03 	cmp.w	r9, #3
 800ae5a:	f200 80a5 	bhi.w	800afa8 <d_demangle_callback.constprop.16+0x1f4>
 800ae5e:	7af2      	ldrb	r2, [r6, #11]
 800ae60:	f1b9 0f02 	cmp.w	r9, #2
 800ae64:	f106 080b 	add.w	r8, r6, #11
 800ae68:	bf0c      	ite	eq
 800ae6a:	f04f 0942 	moveq.w	r9, #66	; 0x42
 800ae6e:	f04f 0943 	movne.w	r9, #67	; 0x43
 800ae72:	2a5f      	cmp	r2, #95	; 0x5f
 800ae74:	f8c7 8010 	str.w	r8, [r7, #16]
 800ae78:	d103      	bne.n	800ae82 <d_demangle_callback.constprop.16+0xce>
 800ae7a:	7b32      	ldrb	r2, [r6, #12]
 800ae7c:	2a5a      	cmp	r2, #90	; 0x5a
 800ae7e:	f000 80ee 	beq.w	800b05e <d_demangle_callback.constprop.16+0x2aa>
 800ae82:	4640      	mov	r0, r8
 800ae84:	f00c fdbc 	bl	8017a00 <strlen>
 800ae88:	4641      	mov	r1, r8
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	1d38      	adds	r0, r7, #4
 800ae8e:	f7f9 fa9f 	bl	80043d0 <d_make_name>
 800ae92:	4602      	mov	r2, r0
 800ae94:	4649      	mov	r1, r9
 800ae96:	2300      	movs	r3, #0
 800ae98:	1d38      	adds	r0, r7, #4
 800ae9a:	f7f9 fa4d 	bl	8004338 <d_make_comp>
 800ae9e:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800aea2:	4606      	mov	r6, r0
 800aea4:	4640      	mov	r0, r8
 800aea6:	f00c fdab 	bl	8017a00 <strlen>
 800aeaa:	eb08 0300 	add.w	r3, r8, r0
 800aeae:	613b      	str	r3, [r7, #16]
 800aeb0:	f818 9000 	ldrb.w	r9, [r8, r0]
 800aeb4:	f1b9 0f00 	cmp.w	r9, #0
 800aeb8:	d165      	bne.n	800af86 <d_demangle_callback.constprop.16+0x1d2>
 800aeba:	2e00      	cmp	r6, #0
 800aebc:	f000 80cd 	beq.w	800b05a <d_demangle_callback.constprop.16+0x2a6>
 800aec0:	f107 0840 	add.w	r8, r7, #64	; 0x40
 800aec4:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 800aec8:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800aecc:	4632      	mov	r2, r6
 800aece:	f8c8 5108 	str.w	r5, [r8, #264]	; 0x108
 800aed2:	f8c8 410c 	str.w	r4, [r8, #268]	; 0x10c
 800aed6:	f8c8 9100 	str.w	r9, [r8, #256]	; 0x100
 800aeda:	f888 9104 	strb.w	r9, [r8, #260]	; 0x104
 800aede:	f8c8 9110 	str.w	r9, [r8, #272]	; 0x110
 800aee2:	f8c8 9114 	str.w	r9, [r8, #276]	; 0x114
 800aee6:	f8c8 911c 	str.w	r9, [r8, #284]	; 0x11c
 800aeea:	f8c8 9120 	str.w	r9, [r8, #288]	; 0x120
 800aeee:	f8c8 9118 	str.w	r9, [r8, #280]	; 0x118
 800aef2:	f8c8 9124 	str.w	r9, [r8, #292]	; 0x124
 800aef6:	f8c8 9128 	str.w	r9, [r8, #296]	; 0x128
 800aefa:	f8c8 912c 	str.w	r9, [r8, #300]	; 0x12c
 800aefe:	f8c8 9130 	str.w	r9, [r8, #304]	; 0x130
 800af02:	f8c8 9134 	str.w	r9, [r8, #308]	; 0x134
 800af06:	f8c8 9138 	str.w	r9, [r8, #312]	; 0x138
 800af0a:	f7f9 fb93 	bl	8004634 <d_count_templates_scopes>
 800af0e:	f8d8 112c 	ldr.w	r1, [r8, #300]	; 0x12c
 800af12:	f8d8 3138 	ldr.w	r3, [r8, #312]	; 0x138
 800af16:	f8c8 913c 	str.w	r9, [r8, #316]	; 0x13c
 800af1a:	fb03 f301 	mul.w	r3, r3, r1
 800af1e:	00ca      	lsls	r2, r1, #3
 800af20:	3208      	adds	r2, #8
 800af22:	00d9      	lsls	r1, r3, #3
 800af24:	466c      	mov	r4, sp
 800af26:	3108      	adds	r1, #8
 800af28:	ebad 0d02 	sub.w	sp, sp, r2
 800af2c:	466d      	mov	r5, sp
 800af2e:	4632      	mov	r2, r6
 800af30:	ebad 0d01 	sub.w	sp, sp, r1
 800af34:	4640      	mov	r0, r8
 800af36:	2111      	movs	r1, #17
 800af38:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
 800af3c:	f8c8 d130 	str.w	sp, [r8, #304]	; 0x130
 800af40:	f8c8 5124 	str.w	r5, [r8, #292]	; 0x124
 800af44:	f7fa f870 	bl	8005028 <d_print_comp>
 800af48:	f8d8 1100 	ldr.w	r1, [r8, #256]	; 0x100
 800af4c:	f8d8 3108 	ldr.w	r3, [r8, #264]	; 0x108
 800af50:	f808 9001 	strb.w	r9, [r8, r1]
 800af54:	4640      	mov	r0, r8
 800af56:	46a5      	mov	sp, r4
 800af58:	f8d8 210c 	ldr.w	r2, [r8, #268]	; 0x10c
 800af5c:	4798      	blx	r3
 800af5e:	f8d8 0118 	ldr.w	r0, [r8, #280]	; 0x118
 800af62:	fab0 f080 	clz	r0, r0
 800af66:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 800af6a:	0940      	lsrs	r0, r0, #5
 800af6c:	46bd      	mov	sp, r7
 800af6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af72:	7843      	ldrb	r3, [r0, #1]
 800af74:	2b5a      	cmp	r3, #90	; 0x5a
 800af76:	f47f af2a 	bne.w	800adce <d_demangle_callback.constprop.16+0x1a>
 800af7a:	f04f 0901 	mov.w	r9, #1
 800af7e:	e73e      	b.n	800adfe <d_demangle_callback.constprop.16+0x4a>
 800af80:	f1b8 0f5f 	cmp.w	r8, #95	; 0x5f
 800af84:	d018      	beq.n	800afb8 <d_demangle_callback.constprop.16+0x204>
 800af86:	2000      	movs	r0, #0
 800af88:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 800af8c:	46bd      	mov	sp, r7
 800af8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af92:	7ab2      	ldrb	r2, [r6, #10]
 800af94:	2a5f      	cmp	r2, #95	; 0x5f
 800af96:	f47f af30 	bne.w	800adfa <d_demangle_callback.constprop.16+0x46>
 800af9a:	2b49      	cmp	r3, #73	; 0x49
 800af9c:	bf0c      	ite	eq
 800af9e:	f04f 0902 	moveq.w	r9, #2
 800afa2:	f04f 0903 	movne.w	r9, #3
 800afa6:	e72a      	b.n	800adfe <d_demangle_callback.constprop.16+0x4a>
 800afa8:	1d38      	adds	r0, r7, #4
 800afaa:	f7fc fb97 	bl	80076dc <d_type>
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	4606      	mov	r6, r0
 800afb2:	f893 9000 	ldrb.w	r9, [r3]
 800afb6:	e77d      	b.n	800aeb4 <d_demangle_callback.constprop.16+0x100>
 800afb8:	7873      	ldrb	r3, [r6, #1]
 800afba:	2b5a      	cmp	r3, #90	; 0x5a
 800afbc:	d1e3      	bne.n	800af86 <d_demangle_callback.constprop.16+0x1d2>
 800afbe:	3602      	adds	r6, #2
 800afc0:	4649      	mov	r1, r9
 800afc2:	1d38      	adds	r0, r7, #4
 800afc4:	613e      	str	r6, [r7, #16]
 800afc6:	f7ff fbc7 	bl	800a758 <d_encoding>
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	07db      	lsls	r3, r3, #31
 800afce:	4606      	mov	r6, r0
 800afd0:	d40f      	bmi.n	800aff2 <d_demangle_callback.constprop.16+0x23e>
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f893 9000 	ldrb.w	r9, [r3]
 800afd8:	e76c      	b.n	800aeb4 <d_demangle_callback.constprop.16+0x100>
 800afda:	1a5a      	subs	r2, r3, r1
 800afdc:	1d38      	adds	r0, r7, #4
 800afde:	613b      	str	r3, [r7, #16]
 800afe0:	f7f9 f9f6 	bl	80043d0 <d_make_name>
 800afe4:	4632      	mov	r2, r6
 800afe6:	4603      	mov	r3, r0
 800afe8:	214b      	movs	r1, #75	; 0x4b
 800afea:	1d38      	adds	r0, r7, #4
 800afec:	f7f9 f9a4 	bl	8004338 <d_make_comp>
 800aff0:	4606      	mov	r6, r0
 800aff2:	6939      	ldr	r1, [r7, #16]
 800aff4:	f891 9000 	ldrb.w	r9, [r1]
 800aff8:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 800affc:	f47f af5a 	bne.w	800aeb4 <d_demangle_callback.constprop.16+0x100>
 800b000:	784b      	ldrb	r3, [r1, #1]
 800b002:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b006:	2a19      	cmp	r2, #25
 800b008:	d91a      	bls.n	800b040 <d_demangle_callback.constprop.16+0x28c>
 800b00a:	2b5f      	cmp	r3, #95	; 0x5f
 800b00c:	d018      	beq.n	800b040 <d_demangle_callback.constprop.16+0x28c>
 800b00e:	3b30      	subs	r3, #48	; 0x30
 800b010:	2b09      	cmp	r3, #9
 800b012:	d8de      	bhi.n	800afd2 <d_demangle_callback.constprop.16+0x21e>
 800b014:	780a      	ldrb	r2, [r1, #0]
 800b016:	460b      	mov	r3, r1
 800b018:	2a2e      	cmp	r2, #46	; 0x2e
 800b01a:	d1de      	bne.n	800afda <d_demangle_callback.constprop.16+0x226>
 800b01c:	785a      	ldrb	r2, [r3, #1]
 800b01e:	3a30      	subs	r2, #48	; 0x30
 800b020:	2a09      	cmp	r2, #9
 800b022:	d8da      	bhi.n	800afda <d_demangle_callback.constprop.16+0x226>
 800b024:	789a      	ldrb	r2, [r3, #2]
 800b026:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800b02a:	2809      	cmp	r0, #9
 800b02c:	f103 0302 	add.w	r3, r3, #2
 800b030:	d8f2      	bhi.n	800b018 <d_demangle_callback.constprop.16+0x264>
 800b032:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b036:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800b03a:	2809      	cmp	r0, #9
 800b03c:	d9f9      	bls.n	800b032 <d_demangle_callback.constprop.16+0x27e>
 800b03e:	e7eb      	b.n	800b018 <d_demangle_callback.constprop.16+0x264>
 800b040:	1c88      	adds	r0, r1, #2
 800b042:	7802      	ldrb	r2, [r0, #0]
 800b044:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800b048:	f1be 0f19 	cmp.w	lr, #25
 800b04c:	4603      	mov	r3, r0
 800b04e:	f100 0001 	add.w	r0, r0, #1
 800b052:	d9f6      	bls.n	800b042 <d_demangle_callback.constprop.16+0x28e>
 800b054:	2a5f      	cmp	r2, #95	; 0x5f
 800b056:	d0f4      	beq.n	800b042 <d_demangle_callback.constprop.16+0x28e>
 800b058:	e7de      	b.n	800b018 <d_demangle_callback.constprop.16+0x264>
 800b05a:	4630      	mov	r0, r6
 800b05c:	e794      	b.n	800af88 <d_demangle_callback.constprop.16+0x1d4>
 800b05e:	360d      	adds	r6, #13
 800b060:	4619      	mov	r1, r3
 800b062:	1d38      	adds	r0, r7, #4
 800b064:	613e      	str	r6, [r7, #16]
 800b066:	f7ff fb77 	bl	800a758 <d_encoding>
 800b06a:	4602      	mov	r2, r0
 800b06c:	e712      	b.n	800ae94 <d_demangle_callback.constprop.16+0xe0>
 800b06e:	bf00      	nop
 800b070:	0801dafc 	.word	0x0801dafc

0800b074 <d_exprlist>:
 800b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	68c2      	ldr	r2, [r0, #12]
 800b07a:	7815      	ldrb	r5, [r2, #0]
 800b07c:	b087      	sub	sp, #28
 800b07e:	2300      	movs	r3, #0
 800b080:	428d      	cmp	r5, r1
 800b082:	4604      	mov	r4, r0
 800b084:	9305      	str	r3, [sp, #20]
 800b086:	f000 82d5 	beq.w	800b634 <d_exprlist+0x5c0>
 800b08a:	460f      	mov	r7, r1
 800b08c:	ae05      	add	r6, sp, #20
 800b08e:	f04f 0801 	mov.w	r8, #1
 800b092:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b094:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800b098:	7813      	ldrb	r3, [r2, #0]
 800b09a:	2b4c      	cmp	r3, #76	; 0x4c
 800b09c:	f000 8090 	beq.w	800b1c0 <d_exprlist+0x14c>
 800b0a0:	2b54      	cmp	r3, #84	; 0x54
 800b0a2:	f000 80a9 	beq.w	800b1f8 <d_exprlist+0x184>
 800b0a6:	2b73      	cmp	r3, #115	; 0x73
 800b0a8:	d052      	beq.n	800b150 <d_exprlist+0xdc>
 800b0aa:	2b66      	cmp	r3, #102	; 0x66
 800b0ac:	d063      	beq.n	800b176 <d_exprlist+0x102>
 800b0ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b0b2:	2909      	cmp	r1, #9
 800b0b4:	d92b      	bls.n	800b10e <d_exprlist+0x9a>
 800b0b6:	2b6f      	cmp	r3, #111	; 0x6f
 800b0b8:	d024      	beq.n	800b104 <d_exprlist+0x90>
 800b0ba:	2b69      	cmp	r3, #105	; 0x69
 800b0bc:	f000 8088 	beq.w	800b1d0 <d_exprlist+0x15c>
 800b0c0:	2b74      	cmp	r3, #116	; 0x74
 800b0c2:	f000 80b7 	beq.w	800b234 <d_exprlist+0x1c0>
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f7fd fcfc 	bl	8008ac4 <d_operator_name>
 800b0cc:	4680      	mov	r8, r0
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d071      	beq.n	800b1b6 <d_exprlist+0x142>
 800b0d2:	7803      	ldrb	r3, [r0, #0]
 800b0d4:	2b31      	cmp	r3, #49	; 0x31
 800b0d6:	f000 8094 	beq.w	800b202 <d_exprlist+0x18e>
 800b0da:	2b32      	cmp	r3, #50	; 0x32
 800b0dc:	f000 80b4 	beq.w	800b248 <d_exprlist+0x1d4>
 800b0e0:	2b33      	cmp	r3, #51	; 0x33
 800b0e2:	d168      	bne.n	800b1b6 <d_exprlist+0x142>
 800b0e4:	68e3      	ldr	r3, [r4, #12]
 800b0e6:	781a      	ldrb	r2, [r3, #0]
 800b0e8:	2a5f      	cmp	r2, #95	; 0x5f
 800b0ea:	f000 82e8 	beq.w	800b6be <d_exprlist+0x64a>
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f001 fa8c 	bl	800c60c <d_expression_1>
 800b0f4:	4642      	mov	r2, r8
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2135      	movs	r1, #53	; 0x35
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f7f9 f91c 	bl	8004338 <d_make_comp>
 800b100:	4602      	mov	r2, r0
 800b102:	e061      	b.n	800b1c8 <d_exprlist+0x154>
 800b104:	7853      	ldrb	r3, [r2, #1]
 800b106:	2b6e      	cmp	r3, #110	; 0x6e
 800b108:	d1dd      	bne.n	800b0c6 <d_exprlist+0x52>
 800b10a:	3202      	adds	r2, #2
 800b10c:	60e2      	str	r2, [r4, #12]
 800b10e:	4620      	mov	r0, r4
 800b110:	f7fd fd5a 	bl	8008bc8 <d_unqualified_name>
 800b114:	4680      	mov	r8, r0
 800b116:	2800      	cmp	r0, #0
 800b118:	d04d      	beq.n	800b1b6 <d_exprlist+0x142>
 800b11a:	68e3      	ldr	r3, [r4, #12]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b49      	cmp	r3, #73	; 0x49
 800b120:	f000 80a2 	beq.w	800b268 <d_exprlist+0x1f4>
 800b124:	4602      	mov	r2, r0
 800b126:	6365      	str	r5, [r4, #52]	; 0x34
 800b128:	4620      	mov	r0, r4
 800b12a:	212e      	movs	r1, #46	; 0x2e
 800b12c:	2300      	movs	r3, #0
 800b12e:	f7f9 f903 	bl	8004338 <d_make_comp>
 800b132:	6030      	str	r0, [r6, #0]
 800b134:	2800      	cmp	r0, #0
 800b136:	d03f      	beq.n	800b1b8 <d_exprlist+0x144>
 800b138:	68e2      	ldr	r2, [r4, #12]
 800b13a:	7813      	ldrb	r3, [r2, #0]
 800b13c:	42bb      	cmp	r3, r7
 800b13e:	f100 0608 	add.w	r6, r0, #8
 800b142:	d1a4      	bne.n	800b08e <d_exprlist+0x1a>
 800b144:	9805      	ldr	r0, [sp, #20]
 800b146:	3201      	adds	r2, #1
 800b148:	60e2      	str	r2, [r4, #12]
 800b14a:	b007      	add	sp, #28
 800b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b150:	7853      	ldrb	r3, [r2, #1]
 800b152:	2b72      	cmp	r3, #114	; 0x72
 800b154:	f000 813d 	beq.w	800b3d2 <d_exprlist+0x35e>
 800b158:	2b70      	cmp	r3, #112	; 0x70
 800b15a:	d1b4      	bne.n	800b0c6 <d_exprlist+0x52>
 800b15c:	3202      	adds	r2, #2
 800b15e:	60e2      	str	r2, [r4, #12]
 800b160:	4620      	mov	r0, r4
 800b162:	f001 fa53 	bl	800c60c <d_expression_1>
 800b166:	2149      	movs	r1, #73	; 0x49
 800b168:	4602      	mov	r2, r0
 800b16a:	2300      	movs	r3, #0
 800b16c:	4620      	mov	r0, r4
 800b16e:	f7f9 f8e3 	bl	8004338 <d_make_comp>
 800b172:	4602      	mov	r2, r0
 800b174:	e028      	b.n	800b1c8 <d_exprlist+0x154>
 800b176:	7853      	ldrb	r3, [r2, #1]
 800b178:	2b70      	cmp	r3, #112	; 0x70
 800b17a:	d1a4      	bne.n	800b0c6 <d_exprlist+0x52>
 800b17c:	1c93      	adds	r3, r2, #2
 800b17e:	60e3      	str	r3, [r4, #12]
 800b180:	7893      	ldrb	r3, [r2, #2]
 800b182:	2b54      	cmp	r3, #84	; 0x54
 800b184:	d07b      	beq.n	800b27e <d_exprlist+0x20a>
 800b186:	4620      	mov	r0, r4
 800b188:	f7f9 fb0c 	bl	80047a4 <d_compact_number>
 800b18c:	3001      	adds	r0, #1
 800b18e:	d012      	beq.n	800b1b6 <d_exprlist+0x142>
 800b190:	6963      	ldr	r3, [r4, #20]
 800b192:	69a2      	ldr	r2, [r4, #24]
 800b194:	4293      	cmp	r3, r2
 800b196:	da0e      	bge.n	800b1b6 <d_exprlist+0x142>
 800b198:	6922      	ldr	r2, [r4, #16]
 800b19a:	1c59      	adds	r1, r3, #1
 800b19c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b1a0:	6161      	str	r1, [r4, #20]
 800b1a2:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 800b1a6:	d006      	beq.n	800b1b6 <d_exprlist+0x142>
 800b1a8:	f04f 0e06 	mov.w	lr, #6
 800b1ac:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800b1b0:	460a      	mov	r2, r1
 800b1b2:	6048      	str	r0, [r1, #4]
 800b1b4:	e7b7      	b.n	800b126 <d_exprlist+0xb2>
 800b1b6:	6365      	str	r5, [r4, #52]	; 0x34
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	b007      	add	sp, #28
 800b1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f7fc fa2b 	bl	800761c <d_expr_primary>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	6365      	str	r5, [r4, #52]	; 0x34
 800b1ca:	2a00      	cmp	r2, #0
 800b1cc:	d1ac      	bne.n	800b128 <d_exprlist+0xb4>
 800b1ce:	e7f3      	b.n	800b1b8 <d_exprlist+0x144>
 800b1d0:	7853      	ldrb	r3, [r2, #1]
 800b1d2:	2b6c      	cmp	r3, #108	; 0x6c
 800b1d4:	f47f af77 	bne.w	800b0c6 <d_exprlist+0x52>
 800b1d8:	f04f 0800 	mov.w	r8, #0
 800b1dc:	1c93      	adds	r3, r2, #2
 800b1de:	60e3      	str	r3, [r4, #12]
 800b1e0:	2145      	movs	r1, #69	; 0x45
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f7ff ff46 	bl	800b074 <d_exprlist>
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2130      	movs	r1, #48	; 0x30
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f7f9 f8a2 	bl	8004338 <d_make_comp>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	e7e7      	b.n	800b1c8 <d_exprlist+0x154>
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f7f9 faeb 	bl	80047d4 <d_template_param>
 800b1fe:	4602      	mov	r2, r0
 800b200:	e7e2      	b.n	800b1c8 <d_exprlist+0x154>
 800b202:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b206:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b208:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b20c:	f8da 9000 	ldr.w	r9, [sl]
 800b210:	4986      	ldr	r1, [pc, #536]	; (800b42c <d_exprlist+0x3b8>)
 800b212:	3b02      	subs	r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	6323      	str	r3, [r4, #48]	; 0x30
 800b218:	4648      	mov	r0, r9
 800b21a:	f002 fca5 	bl	800db68 <strcmp>
 800b21e:	2800      	cmp	r0, #0
 800b220:	f000 80f3 	beq.w	800b40a <d_exprlist+0x396>
 800b224:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b228:	2b03      	cmp	r3, #3
 800b22a:	d8c4      	bhi.n	800b1b6 <d_exprlist+0x142>
 800b22c:	e8df f003 	tbb	[pc, r3]
 800b230:	3583b62b 	.word	0x3583b62b
 800b234:	7853      	ldrb	r3, [r2, #1]
 800b236:	2b6c      	cmp	r3, #108	; 0x6c
 800b238:	f47f af45 	bne.w	800b0c6 <d_exprlist+0x52>
 800b23c:	4620      	mov	r0, r4
 800b23e:	f7fc fa4d 	bl	80076dc <d_type>
 800b242:	68e2      	ldr	r2, [r4, #12]
 800b244:	4680      	mov	r8, r0
 800b246:	e7c9      	b.n	800b1dc <d_exprlist+0x168>
 800b248:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d8b2      	bhi.n	800b1b6 <d_exprlist+0x142>
 800b250:	a201      	add	r2, pc, #4	; (adr r2, 800b258 <d_exprlist+0x1e4>)
 800b252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b256:	bf00      	nop
 800b258:	0800b287 	.word	0x0800b287
 800b25c:	0800b0ef 	.word	0x0800b0ef
 800b260:	0800b333 	.word	0x0800b333
 800b264:	0800b297 	.word	0x0800b297
 800b268:	4620      	mov	r0, r4
 800b26a:	f7fd fded 	bl	8008e48 <d_template_args>
 800b26e:	4642      	mov	r2, r8
 800b270:	4603      	mov	r3, r0
 800b272:	2104      	movs	r1, #4
 800b274:	4620      	mov	r0, r4
 800b276:	f7f9 f85f 	bl	8004338 <d_make_comp>
 800b27a:	4602      	mov	r2, r0
 800b27c:	e7a4      	b.n	800b1c8 <d_exprlist+0x154>
 800b27e:	3203      	adds	r2, #3
 800b280:	60e2      	str	r2, [r4, #12]
 800b282:	2000      	movs	r0, #0
 800b284:	e784      	b.n	800b190 <d_exprlist+0x11c>
 800b286:	4642      	mov	r2, r8
 800b288:	4620      	mov	r0, r4
 800b28a:	2134      	movs	r1, #52	; 0x34
 800b28c:	2300      	movs	r3, #0
 800b28e:	f7f9 f853 	bl	8004338 <d_make_comp>
 800b292:	4602      	mov	r2, r0
 800b294:	e798      	b.n	800b1c8 <d_exprlist+0x154>
 800b296:	f04f 0900 	mov.w	r9, #0
 800b29a:	4648      	mov	r0, r9
 800b29c:	4964      	ldr	r1, [pc, #400]	; (800b430 <d_exprlist+0x3bc>)
 800b29e:	f002 fc63 	bl	800db68 <strcmp>
 800b2a2:	4682      	mov	sl, r0
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	f000 80cb 	beq.w	800b440 <d_exprlist+0x3cc>
 800b2aa:	f899 3000 	ldrb.w	r3, [r9]
 800b2ae:	2b6e      	cmp	r3, #110	; 0x6e
 800b2b0:	d181      	bne.n	800b1b6 <d_exprlist+0x142>
 800b2b2:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b2b6:	2b77      	cmp	r3, #119	; 0x77
 800b2b8:	d002      	beq.n	800b2c0 <d_exprlist+0x24c>
 800b2ba:	2b61      	cmp	r3, #97	; 0x61
 800b2bc:	f47f af7b 	bne.w	800b1b6 <d_exprlist+0x142>
 800b2c0:	215f      	movs	r1, #95	; 0x5f
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff fed6 	bl	800b074 <d_exprlist>
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f7fc fa06 	bl	80076dc <d_type>
 800b2d0:	68e3      	ldr	r3, [r4, #12]
 800b2d2:	781a      	ldrb	r2, [r3, #0]
 800b2d4:	2a45      	cmp	r2, #69	; 0x45
 800b2d6:	4681      	mov	r9, r0
 800b2d8:	f000 81b5 	beq.w	800b646 <d_exprlist+0x5d2>
 800b2dc:	2a70      	cmp	r2, #112	; 0x70
 800b2de:	f000 8254 	beq.w	800b78a <d_exprlist+0x716>
 800b2e2:	2a69      	cmp	r2, #105	; 0x69
 800b2e4:	f47f af67 	bne.w	800b1b6 <d_exprlist+0x142>
 800b2e8:	785a      	ldrb	r2, [r3, #1]
 800b2ea:	2a6c      	cmp	r2, #108	; 0x6c
 800b2ec:	f47f af63 	bne.w	800b1b6 <d_exprlist+0x142>
 800b2f0:	3302      	adds	r3, #2
 800b2f2:	60e3      	str	r3, [r4, #12]
 800b2f4:	2145      	movs	r1, #69	; 0x45
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f7ff febc 	bl	800b074 <d_exprlist>
 800b2fc:	2130      	movs	r1, #48	; 0x30
 800b2fe:	4603      	mov	r3, r0
 800b300:	2200      	movs	r2, #0
 800b302:	4620      	mov	r0, r4
 800b304:	f7f9 f818 	bl	8004338 <d_make_comp>
 800b308:	4683      	mov	fp, r0
 800b30a:	464a      	mov	r2, r9
 800b30c:	465b      	mov	r3, fp
 800b30e:	213a      	movs	r1, #58	; 0x3a
 800b310:	4620      	mov	r0, r4
 800b312:	f7f9 f811 	bl	8004338 <d_make_comp>
 800b316:	4652      	mov	r2, sl
 800b318:	4603      	mov	r3, r0
 800b31a:	2139      	movs	r1, #57	; 0x39
 800b31c:	4620      	mov	r0, r4
 800b31e:	f7f9 f80b 	bl	8004338 <d_make_comp>
 800b322:	4642      	mov	r2, r8
 800b324:	4603      	mov	r3, r0
 800b326:	2138      	movs	r1, #56	; 0x38
 800b328:	4620      	mov	r0, r4
 800b32a:	f7f9 f805 	bl	8004338 <d_make_comp>
 800b32e:	4602      	mov	r2, r0
 800b330:	e74a      	b.n	800b1c8 <d_exprlist+0x154>
 800b332:	f04f 0900 	mov.w	r9, #0
 800b336:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	785a      	ldrb	r2, [r3, #1]
 800b33e:	2a63      	cmp	r2, #99	; 0x63
 800b340:	f000 8159 	beq.w	800b5f6 <d_exprlist+0x582>
 800b344:	4620      	mov	r0, r4
 800b346:	f001 f961 	bl	800c60c <d_expression_1>
 800b34a:	4682      	mov	sl, r0
 800b34c:	4648      	mov	r0, r9
 800b34e:	4939      	ldr	r1, [pc, #228]	; (800b434 <d_exprlist+0x3c0>)
 800b350:	f002 fc0a 	bl	800db68 <strcmp>
 800b354:	2800      	cmp	r0, #0
 800b356:	d063      	beq.n	800b420 <d_exprlist+0x3ac>
 800b358:	4648      	mov	r0, r9
 800b35a:	4937      	ldr	r1, [pc, #220]	; (800b438 <d_exprlist+0x3c4>)
 800b35c:	f002 fc04 	bl	800db68 <strcmp>
 800b360:	b128      	cbz	r0, 800b36e <d_exprlist+0x2fa>
 800b362:	4648      	mov	r0, r9
 800b364:	4935      	ldr	r1, [pc, #212]	; (800b43c <d_exprlist+0x3c8>)
 800b366:	f002 fbff 	bl	800db68 <strcmp>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d148      	bne.n	800b400 <d_exprlist+0x38c>
 800b36e:	4620      	mov	r0, r4
 800b370:	f7fd fc2a 	bl	8008bc8 <d_unqualified_name>
 800b374:	68e3      	ldr	r3, [r4, #12]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	2b49      	cmp	r3, #73	; 0x49
 800b37a:	4681      	mov	r9, r0
 800b37c:	f000 8168 	beq.w	800b650 <d_exprlist+0x5dc>
 800b380:	4652      	mov	r2, sl
 800b382:	464b      	mov	r3, r9
 800b384:	2137      	movs	r1, #55	; 0x37
 800b386:	4620      	mov	r0, r4
 800b388:	f7f8 ffd6 	bl	8004338 <d_make_comp>
 800b38c:	4642      	mov	r2, r8
 800b38e:	4603      	mov	r3, r0
 800b390:	2136      	movs	r1, #54	; 0x36
 800b392:	4620      	mov	r0, r4
 800b394:	f7f8 ffd0 	bl	8004338 <d_make_comp>
 800b398:	4602      	mov	r2, r0
 800b39a:	e715      	b.n	800b1c8 <d_exprlist+0x154>
 800b39c:	f899 3000 	ldrb.w	r3, [r9]
 800b3a0:	2b70      	cmp	r3, #112	; 0x70
 800b3a2:	d002      	beq.n	800b3aa <d_exprlist+0x336>
 800b3a4:	2b6d      	cmp	r3, #109	; 0x6d
 800b3a6:	f47f aea2 	bne.w	800b0ee <d_exprlist+0x7a>
 800b3aa:	f899 2001 	ldrb.w	r2, [r9, #1]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	f47f ae9d 	bne.w	800b0ee <d_exprlist+0x7a>
 800b3b4:	68e3      	ldr	r3, [r4, #12]
 800b3b6:	781a      	ldrb	r2, [r3, #0]
 800b3b8:	2a5f      	cmp	r2, #95	; 0x5f
 800b3ba:	f000 827c 	beq.w	800b8b6 <d_exprlist+0x842>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f001 f924 	bl	800c60c <d_expression_1>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	2137      	movs	r1, #55	; 0x37
 800b3cc:	f7f8 ffb4 	bl	8004338 <d_make_comp>
 800b3d0:	e01e      	b.n	800b410 <d_exprlist+0x39c>
 800b3d2:	3202      	adds	r2, #2
 800b3d4:	60e2      	str	r2, [r4, #12]
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7fc f980 	bl	80076dc <d_type>
 800b3dc:	4681      	mov	r9, r0
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f7fd fbf2 	bl	8008bc8 <d_unqualified_name>
 800b3e4:	68e3      	ldr	r3, [r4, #12]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b49      	cmp	r3, #73	; 0x49
 800b3ea:	4682      	mov	sl, r0
 800b3ec:	f000 8111 	beq.w	800b612 <d_exprlist+0x59e>
 800b3f0:	464a      	mov	r2, r9
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	4641      	mov	r1, r8
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f7f8 ff9e 	bl	8004338 <d_make_comp>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	e6e3      	b.n	800b1c8 <d_exprlist+0x154>
 800b400:	4620      	mov	r0, r4
 800b402:	f001 f903 	bl	800c60c <d_expression_1>
 800b406:	4681      	mov	r9, r0
 800b408:	e7ba      	b.n	800b380 <d_exprlist+0x30c>
 800b40a:	4620      	mov	r0, r4
 800b40c:	f7fc f966 	bl	80076dc <d_type>
 800b410:	4603      	mov	r3, r0
 800b412:	4642      	mov	r2, r8
 800b414:	4620      	mov	r0, r4
 800b416:	2135      	movs	r1, #53	; 0x35
 800b418:	f7f8 ff8e 	bl	8004338 <d_make_comp>
 800b41c:	4602      	mov	r2, r0
 800b41e:	e6d3      	b.n	800b1c8 <d_exprlist+0x154>
 800b420:	4620      	mov	r0, r4
 800b422:	2145      	movs	r1, #69	; 0x45
 800b424:	f7ff fe26 	bl	800b074 <d_exprlist>
 800b428:	4681      	mov	r9, r0
 800b42a:	e7a9      	b.n	800b380 <d_exprlist+0x30c>
 800b42c:	0801dfe8 	.word	0x0801dfe8
 800b430:	0801dd28 	.word	0x0801dd28
 800b434:	0801dd20 	.word	0x0801dd20
 800b438:	0801ddf4 	.word	0x0801ddf4
 800b43c:	0801ddf8 	.word	0x0801ddf8
 800b440:	68e2      	ldr	r2, [r4, #12]
 800b442:	7813      	ldrb	r3, [r2, #0]
 800b444:	2b4c      	cmp	r3, #76	; 0x4c
 800b446:	f000 8254 	beq.w	800b8f2 <d_exprlist+0x87e>
 800b44a:	2b54      	cmp	r3, #84	; 0x54
 800b44c:	f000 8258 	beq.w	800b900 <d_exprlist+0x88c>
 800b450:	2b73      	cmp	r3, #115	; 0x73
 800b452:	f000 81d0 	beq.w	800b7f6 <d_exprlist+0x782>
 800b456:	2b66      	cmp	r3, #102	; 0x66
 800b458:	f000 8138 	beq.w	800b6cc <d_exprlist+0x658>
 800b45c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b460:	2909      	cmp	r1, #9
 800b462:	f200 8100 	bhi.w	800b666 <d_exprlist+0x5f2>
 800b466:	4620      	mov	r0, r4
 800b468:	f7fd fbae 	bl	8008bc8 <d_unqualified_name>
 800b46c:	68e2      	ldr	r2, [r4, #12]
 800b46e:	4682      	mov	sl, r0
 800b470:	7813      	ldrb	r3, [r2, #0]
 800b472:	b110      	cbz	r0, 800b47a <d_exprlist+0x406>
 800b474:	2b49      	cmp	r3, #73	; 0x49
 800b476:	f000 84f5 	beq.w	800be64 <d_exprlist+0xdf0>
 800b47a:	2b4c      	cmp	r3, #76	; 0x4c
 800b47c:	f000 8226 	beq.w	800b8cc <d_exprlist+0x858>
 800b480:	2b54      	cmp	r3, #84	; 0x54
 800b482:	f000 8279 	beq.w	800b978 <d_exprlist+0x904>
 800b486:	2b73      	cmp	r3, #115	; 0x73
 800b488:	f000 818b 	beq.w	800b7a2 <d_exprlist+0x72e>
 800b48c:	2b66      	cmp	r3, #102	; 0x66
 800b48e:	f000 81c8 	beq.w	800b822 <d_exprlist+0x7ae>
 800b492:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b496:	2909      	cmp	r1, #9
 800b498:	f240 815e 	bls.w	800b758 <d_exprlist+0x6e4>
 800b49c:	2b6f      	cmp	r3, #111	; 0x6f
 800b49e:	f000 8155 	beq.w	800b74c <d_exprlist+0x6d8>
 800b4a2:	2b69      	cmp	r3, #105	; 0x69
 800b4a4:	f000 8251 	beq.w	800b94a <d_exprlist+0x8d6>
 800b4a8:	2b74      	cmp	r3, #116	; 0x74
 800b4aa:	f000 84a1 	beq.w	800bdf0 <d_exprlist+0xd7c>
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7fd fb08 	bl	8008ac4 <d_operator_name>
 800b4b4:	4681      	mov	r9, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	f000 82d7 	beq.w	800ba6a <d_exprlist+0x9f6>
 800b4bc:	7803      	ldrb	r3, [r0, #0]
 800b4be:	2b31      	cmp	r3, #49	; 0x31
 800b4c0:	f000 8275 	beq.w	800b9ae <d_exprlist+0x93a>
 800b4c4:	2b32      	cmp	r3, #50	; 0x32
 800b4c6:	f000 84ad 	beq.w	800be24 <d_exprlist+0xdb0>
 800b4ca:	2b33      	cmp	r3, #51	; 0x33
 800b4cc:	f040 81f6 	bne.w	800b8bc <d_exprlist+0x848>
 800b4d0:	68e3      	ldr	r3, [r4, #12]
 800b4d2:	781a      	ldrb	r2, [r3, #0]
 800b4d4:	2a5f      	cmp	r2, #95	; 0x5f
 800b4d6:	f000 8722 	beq.w	800c31e <d_exprlist+0x12aa>
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f001 f896 	bl	800c60c <d_expression_1>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	464a      	mov	r2, r9
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	2135      	movs	r1, #53	; 0x35
 800b4e8:	f7f8 ff26 	bl	8004338 <d_make_comp>
 800b4ec:	68e2      	ldr	r2, [r4, #12]
 800b4ee:	7813      	ldrb	r3, [r2, #0]
 800b4f0:	4681      	mov	r9, r0
 800b4f2:	2b4c      	cmp	r3, #76	; 0x4c
 800b4f4:	f000 81f8 	beq.w	800b8e8 <d_exprlist+0x874>
 800b4f8:	2b54      	cmp	r3, #84	; 0x54
 800b4fa:	f000 821f 	beq.w	800b93c <d_exprlist+0x8c8>
 800b4fe:	2b73      	cmp	r3, #115	; 0x73
 800b500:	f000 8165 	beq.w	800b7ce <d_exprlist+0x75a>
 800b504:	2b66      	cmp	r3, #102	; 0x66
 800b506:	f000 81b1 	beq.w	800b86c <d_exprlist+0x7f8>
 800b50a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b50e:	2909      	cmp	r1, #9
 800b510:	f240 8105 	bls.w	800b71e <d_exprlist+0x6aa>
 800b514:	2b6f      	cmp	r3, #111	; 0x6f
 800b516:	f000 80fc 	beq.w	800b712 <d_exprlist+0x69e>
 800b51a:	2b69      	cmp	r3, #105	; 0x69
 800b51c:	f000 81f9 	beq.w	800b912 <d_exprlist+0x89e>
 800b520:	2b74      	cmp	r3, #116	; 0x74
 800b522:	f000 845c 	beq.w	800bdde <d_exprlist+0xd6a>
 800b526:	4620      	mov	r0, r4
 800b528:	f7fd facc 	bl	8008ac4 <d_operator_name>
 800b52c:	9000      	str	r0, [sp, #0]
 800b52e:	2800      	cmp	r0, #0
 800b530:	f000 85f3 	beq.w	800c11a <d_exprlist+0x10a6>
 800b534:	f890 c000 	ldrb.w	ip, [r0]
 800b538:	f1bc 0f31 	cmp.w	ip, #49	; 0x31
 800b53c:	f000 838c 	beq.w	800bc58 <d_exprlist+0xbe4>
 800b540:	f1bc 0f32 	cmp.w	ip, #50	; 0x32
 800b544:	f000 845d 	beq.w	800be02 <d_exprlist+0xd8e>
 800b548:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800b54c:	f040 81bb 	bne.w	800b8c6 <d_exprlist+0x852>
 800b550:	68e3      	ldr	r3, [r4, #12]
 800b552:	781a      	ldrb	r2, [r3, #0]
 800b554:	2a5f      	cmp	r2, #95	; 0x5f
 800b556:	f000 856a 	beq.w	800c02e <d_exprlist+0xfba>
 800b55a:	2100      	movs	r1, #0
 800b55c:	9102      	str	r1, [sp, #8]
 800b55e:	2a4c      	cmp	r2, #76	; 0x4c
 800b560:	f000 8691 	beq.w	800c286 <d_exprlist+0x1212>
 800b564:	2a54      	cmp	r2, #84	; 0x54
 800b566:	f000 8688 	beq.w	800c27a <d_exprlist+0x1206>
 800b56a:	2a73      	cmp	r2, #115	; 0x73
 800b56c:	f000 85c0 	beq.w	800c0f0 <d_exprlist+0x107c>
 800b570:	2a66      	cmp	r2, #102	; 0x66
 800b572:	f000 859b 	beq.w	800c0ac <d_exprlist+0x1038>
 800b576:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b57a:	2909      	cmp	r1, #9
 800b57c:	f240 8571 	bls.w	800c062 <d_exprlist+0xfee>
 800b580:	2a6f      	cmp	r2, #111	; 0x6f
 800b582:	f000 8568 	beq.w	800c056 <d_exprlist+0xfe2>
 800b586:	2a69      	cmp	r2, #105	; 0x69
 800b588:	f001 8007 	beq.w	800c59a <d_exprlist+0x1526>
 800b58c:	2a74      	cmp	r2, #116	; 0x74
 800b58e:	f000 87ec 	beq.w	800c56a <d_exprlist+0x14f6>
 800b592:	4620      	mov	r0, r4
 800b594:	f7fd fa96 	bl	8008ac4 <d_operator_name>
 800b598:	9001      	str	r0, [sp, #4]
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f000 8703 	beq.w	800c3a6 <d_exprlist+0x1332>
 800b5a0:	7803      	ldrb	r3, [r0, #0]
 800b5a2:	2b31      	cmp	r3, #49	; 0x31
 800b5a4:	f000 86e2 	beq.w	800c36c <d_exprlist+0x12f8>
 800b5a8:	2b32      	cmp	r3, #50	; 0x32
 800b5aa:	f001 8001 	beq.w	800c5b0 <d_exprlist+0x153c>
 800b5ae:	2b33      	cmp	r3, #51	; 0x33
 800b5b0:	f040 874a 	bne.w	800c448 <d_exprlist+0x13d4>
 800b5b4:	68e3      	ldr	r3, [r4, #12]
 800b5b6:	781a      	ldrb	r2, [r3, #0]
 800b5b8:	2a5f      	cmp	r2, #95	; 0x5f
 800b5ba:	f000 86a8 	beq.w	800c30e <d_exprlist+0x129a>
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f001 f824 	bl	800c60c <d_expression_1>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	9a01      	ldr	r2, [sp, #4]
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	2135      	movs	r1, #53	; 0x35
 800b5cc:	f7f8 feb4 	bl	8004338 <d_make_comp>
 800b5d0:	4683      	mov	fp, r0
 800b5d2:	9b02      	ldr	r3, [sp, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 8531 	beq.w	800c03c <d_exprlist+0xfc8>
 800b5da:	4620      	mov	r0, r4
 800b5dc:	2137      	movs	r1, #55	; 0x37
 800b5de:	465a      	mov	r2, fp
 800b5e0:	465b      	mov	r3, fp
 800b5e2:	f7f8 fea9 	bl	8004338 <d_make_comp>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	9a00      	ldr	r2, [sp, #0]
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	2135      	movs	r1, #53	; 0x35
 800b5ee:	f7f8 fea3 	bl	8004338 <d_make_comp>
 800b5f2:	4683      	mov	fp, r0
 800b5f4:	e689      	b.n	800b30a <d_exprlist+0x296>
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800b5fc:	2a01      	cmp	r2, #1
 800b5fe:	d903      	bls.n	800b608 <d_exprlist+0x594>
 800b600:	3b72      	subs	r3, #114	; 0x72
 800b602:	2b01      	cmp	r3, #1
 800b604:	f63f ae9e 	bhi.w	800b344 <d_exprlist+0x2d0>
 800b608:	4620      	mov	r0, r4
 800b60a:	f7fc f867 	bl	80076dc <d_type>
 800b60e:	4682      	mov	sl, r0
 800b610:	e69c      	b.n	800b34c <d_exprlist+0x2d8>
 800b612:	4620      	mov	r0, r4
 800b614:	f7fd fc18 	bl	8008e48 <d_template_args>
 800b618:	4652      	mov	r2, sl
 800b61a:	4603      	mov	r3, r0
 800b61c:	2104      	movs	r1, #4
 800b61e:	4620      	mov	r0, r4
 800b620:	f7f8 fe8a 	bl	8004338 <d_make_comp>
 800b624:	464a      	mov	r2, r9
 800b626:	4603      	mov	r3, r0
 800b628:	4641      	mov	r1, r8
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7f8 fe84 	bl	8004338 <d_make_comp>
 800b630:	4602      	mov	r2, r0
 800b632:	e5c9      	b.n	800b1c8 <d_exprlist+0x154>
 800b634:	3201      	adds	r2, #1
 800b636:	60c2      	str	r2, [r0, #12]
 800b638:	212e      	movs	r1, #46	; 0x2e
 800b63a:	461a      	mov	r2, r3
 800b63c:	b007      	add	sp, #28
 800b63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b642:	f7f8 be79 	b.w	8004338 <d_make_comp>
 800b646:	3301      	adds	r3, #1
 800b648:	60e3      	str	r3, [r4, #12]
 800b64a:	f04f 0b00 	mov.w	fp, #0
 800b64e:	e65c      	b.n	800b30a <d_exprlist+0x296>
 800b650:	4620      	mov	r0, r4
 800b652:	f7fd fbf9 	bl	8008e48 <d_template_args>
 800b656:	464a      	mov	r2, r9
 800b658:	4603      	mov	r3, r0
 800b65a:	2104      	movs	r1, #4
 800b65c:	4620      	mov	r0, r4
 800b65e:	f7f8 fe6b 	bl	8004338 <d_make_comp>
 800b662:	4681      	mov	r9, r0
 800b664:	e68c      	b.n	800b380 <d_exprlist+0x30c>
 800b666:	2b6f      	cmp	r3, #111	; 0x6f
 800b668:	f000 8137 	beq.w	800b8da <d_exprlist+0x866>
 800b66c:	2b69      	cmp	r3, #105	; 0x69
 800b66e:	f000 818a 	beq.w	800b986 <d_exprlist+0x912>
 800b672:	2b74      	cmp	r3, #116	; 0x74
 800b674:	f000 83a9 	beq.w	800bdca <d_exprlist+0xd56>
 800b678:	4620      	mov	r0, r4
 800b67a:	f7fd fa23 	bl	8008ac4 <d_operator_name>
 800b67e:	4682      	mov	sl, r0
 800b680:	2800      	cmp	r0, #0
 800b682:	f000 829a 	beq.w	800bbba <d_exprlist+0xb46>
 800b686:	7803      	ldrb	r3, [r0, #0]
 800b688:	2b31      	cmp	r3, #49	; 0x31
 800b68a:	f000 8237 	beq.w	800bafc <d_exprlist+0xa88>
 800b68e:	2b32      	cmp	r3, #50	; 0x32
 800b690:	f000 83d8 	beq.w	800be44 <d_exprlist+0xdd0>
 800b694:	2b33      	cmp	r3, #51	; 0x33
 800b696:	f040 8109 	bne.w	800b8ac <d_exprlist+0x838>
 800b69a:	68e3      	ldr	r3, [r4, #12]
 800b69c:	781a      	ldrb	r2, [r3, #0]
 800b69e:	2a5f      	cmp	r2, #95	; 0x5f
 800b6a0:	f000 8645 	beq.w	800c32e <d_exprlist+0x12ba>
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f000 ffb1 	bl	800c60c <d_expression_1>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	4652      	mov	r2, sl
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	2135      	movs	r1, #53	; 0x35
 800b6b2:	f7f8 fe41 	bl	8004338 <d_make_comp>
 800b6b6:	68e2      	ldr	r2, [r4, #12]
 800b6b8:	4682      	mov	sl, r0
 800b6ba:	7813      	ldrb	r3, [r2, #0]
 800b6bc:	e6dd      	b.n	800b47a <d_exprlist+0x406>
 800b6be:	3301      	adds	r3, #1
 800b6c0:	60e3      	str	r3, [r4, #12]
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	2145      	movs	r1, #69	; 0x45
 800b6c6:	f7ff fcd5 	bl	800b074 <d_exprlist>
 800b6ca:	e513      	b.n	800b0f4 <d_exprlist+0x80>
 800b6cc:	7853      	ldrb	r3, [r2, #1]
 800b6ce:	2b70      	cmp	r3, #112	; 0x70
 800b6d0:	d1d2      	bne.n	800b678 <d_exprlist+0x604>
 800b6d2:	1c93      	adds	r3, r2, #2
 800b6d4:	60e3      	str	r3, [r4, #12]
 800b6d6:	7893      	ldrb	r3, [r2, #2]
 800b6d8:	2b54      	cmp	r3, #84	; 0x54
 800b6da:	f040 848a 	bne.w	800bff2 <d_exprlist+0xf7e>
 800b6de:	3203      	adds	r2, #3
 800b6e0:	60e2      	str	r2, [r4, #12]
 800b6e2:	6963      	ldr	r3, [r4, #20]
 800b6e4:	69a1      	ldr	r1, [r4, #24]
 800b6e6:	428b      	cmp	r3, r1
 800b6e8:	f280 840c 	bge.w	800bf04 <d_exprlist+0xe90>
 800b6ec:	6921      	ldr	r1, [r4, #16]
 800b6ee:	f103 0e01 	add.w	lr, r3, #1
 800b6f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b6f6:	eb11 0a83 	adds.w	sl, r1, r3, lsl #2
 800b6fa:	f8c4 e014 	str.w	lr, [r4, #20]
 800b6fe:	f000 825d 	beq.w	800bbbc <d_exprlist+0xb48>
 800b702:	f04f 0e06 	mov.w	lr, #6
 800b706:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 800b70a:	f8ca 0004 	str.w	r0, [sl, #4]
 800b70e:	7813      	ldrb	r3, [r2, #0]
 800b710:	e6b3      	b.n	800b47a <d_exprlist+0x406>
 800b712:	7853      	ldrb	r3, [r2, #1]
 800b714:	2b6e      	cmp	r3, #110	; 0x6e
 800b716:	f47f af06 	bne.w	800b526 <d_exprlist+0x4b2>
 800b71a:	3202      	adds	r2, #2
 800b71c:	60e2      	str	r2, [r4, #12]
 800b71e:	4620      	mov	r0, r4
 800b720:	f7fd fa52 	bl	8008bc8 <d_unqualified_name>
 800b724:	4683      	mov	fp, r0
 800b726:	2800      	cmp	r0, #0
 800b728:	f43f adef 	beq.w	800b30a <d_exprlist+0x296>
 800b72c:	68e3      	ldr	r3, [r4, #12]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b49      	cmp	r3, #73	; 0x49
 800b732:	f47f adea 	bne.w	800b30a <d_exprlist+0x296>
 800b736:	4620      	mov	r0, r4
 800b738:	f7fd fb86 	bl	8008e48 <d_template_args>
 800b73c:	465a      	mov	r2, fp
 800b73e:	4603      	mov	r3, r0
 800b740:	2104      	movs	r1, #4
 800b742:	4620      	mov	r0, r4
 800b744:	f7f8 fdf8 	bl	8004338 <d_make_comp>
 800b748:	4683      	mov	fp, r0
 800b74a:	e5de      	b.n	800b30a <d_exprlist+0x296>
 800b74c:	7853      	ldrb	r3, [r2, #1]
 800b74e:	2b6e      	cmp	r3, #110	; 0x6e
 800b750:	f47f aead 	bne.w	800b4ae <d_exprlist+0x43a>
 800b754:	3202      	adds	r2, #2
 800b756:	60e2      	str	r2, [r4, #12]
 800b758:	4620      	mov	r0, r4
 800b75a:	f7fd fa35 	bl	8008bc8 <d_unqualified_name>
 800b75e:	68e2      	ldr	r2, [r4, #12]
 800b760:	4681      	mov	r9, r0
 800b762:	7813      	ldrb	r3, [r2, #0]
 800b764:	2800      	cmp	r0, #0
 800b766:	f43f aec4 	beq.w	800b4f2 <d_exprlist+0x47e>
 800b76a:	2b49      	cmp	r3, #73	; 0x49
 800b76c:	f47f aec1 	bne.w	800b4f2 <d_exprlist+0x47e>
 800b770:	4620      	mov	r0, r4
 800b772:	f7fd fb69 	bl	8008e48 <d_template_args>
 800b776:	464a      	mov	r2, r9
 800b778:	4603      	mov	r3, r0
 800b77a:	2104      	movs	r1, #4
 800b77c:	4620      	mov	r0, r4
 800b77e:	f7f8 fddb 	bl	8004338 <d_make_comp>
 800b782:	68e2      	ldr	r2, [r4, #12]
 800b784:	4681      	mov	r9, r0
 800b786:	7813      	ldrb	r3, [r2, #0]
 800b788:	e6b3      	b.n	800b4f2 <d_exprlist+0x47e>
 800b78a:	785a      	ldrb	r2, [r3, #1]
 800b78c:	2a69      	cmp	r2, #105	; 0x69
 800b78e:	f47f ad12 	bne.w	800b1b6 <d_exprlist+0x142>
 800b792:	3302      	adds	r3, #2
 800b794:	60e3      	str	r3, [r4, #12]
 800b796:	4620      	mov	r0, r4
 800b798:	2145      	movs	r1, #69	; 0x45
 800b79a:	f7ff fc6b 	bl	800b074 <d_exprlist>
 800b79e:	4683      	mov	fp, r0
 800b7a0:	e5b3      	b.n	800b30a <d_exprlist+0x296>
 800b7a2:	7853      	ldrb	r3, [r2, #1]
 800b7a4:	2b72      	cmp	r3, #114	; 0x72
 800b7a6:	f000 83e6 	beq.w	800bf76 <d_exprlist+0xf02>
 800b7aa:	2b70      	cmp	r3, #112	; 0x70
 800b7ac:	f47f ae7f 	bne.w	800b4ae <d_exprlist+0x43a>
 800b7b0:	3202      	adds	r2, #2
 800b7b2:	60e2      	str	r2, [r4, #12]
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 ff29 	bl	800c60c <d_expression_1>
 800b7ba:	2149      	movs	r1, #73	; 0x49
 800b7bc:	4602      	mov	r2, r0
 800b7be:	4620      	mov	r0, r4
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f7f8 fdb9 	bl	8004338 <d_make_comp>
 800b7c6:	68e2      	ldr	r2, [r4, #12]
 800b7c8:	4681      	mov	r9, r0
 800b7ca:	7813      	ldrb	r3, [r2, #0]
 800b7cc:	e691      	b.n	800b4f2 <d_exprlist+0x47e>
 800b7ce:	7853      	ldrb	r3, [r2, #1]
 800b7d0:	2b72      	cmp	r3, #114	; 0x72
 800b7d2:	f000 83b9 	beq.w	800bf48 <d_exprlist+0xed4>
 800b7d6:	2b70      	cmp	r3, #112	; 0x70
 800b7d8:	f47f aea5 	bne.w	800b526 <d_exprlist+0x4b2>
 800b7dc:	3202      	adds	r2, #2
 800b7de:	60e2      	str	r2, [r4, #12]
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f000 ff13 	bl	800c60c <d_expression_1>
 800b7e6:	2149      	movs	r1, #73	; 0x49
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f7f8 fda3 	bl	8004338 <d_make_comp>
 800b7f2:	4683      	mov	fp, r0
 800b7f4:	e589      	b.n	800b30a <d_exprlist+0x296>
 800b7f6:	7853      	ldrb	r3, [r2, #1]
 800b7f8:	2b72      	cmp	r3, #114	; 0x72
 800b7fa:	f000 8369 	beq.w	800bed0 <d_exprlist+0xe5c>
 800b7fe:	2b70      	cmp	r3, #112	; 0x70
 800b800:	f47f af3a 	bne.w	800b678 <d_exprlist+0x604>
 800b804:	3202      	adds	r2, #2
 800b806:	60e2      	str	r2, [r4, #12]
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 feff 	bl	800c60c <d_expression_1>
 800b80e:	4653      	mov	r3, sl
 800b810:	4602      	mov	r2, r0
 800b812:	2149      	movs	r1, #73	; 0x49
 800b814:	4620      	mov	r0, r4
 800b816:	f7f8 fd8f 	bl	8004338 <d_make_comp>
 800b81a:	68e2      	ldr	r2, [r4, #12]
 800b81c:	4682      	mov	sl, r0
 800b81e:	7813      	ldrb	r3, [r2, #0]
 800b820:	e62b      	b.n	800b47a <d_exprlist+0x406>
 800b822:	7853      	ldrb	r3, [r2, #1]
 800b824:	2b70      	cmp	r3, #112	; 0x70
 800b826:	f47f ae42 	bne.w	800b4ae <d_exprlist+0x43a>
 800b82a:	1c93      	adds	r3, r2, #2
 800b82c:	60e3      	str	r3, [r4, #12]
 800b82e:	7893      	ldrb	r3, [r2, #2]
 800b830:	2b54      	cmp	r3, #84	; 0x54
 800b832:	f040 83f1 	bne.w	800c018 <d_exprlist+0xfa4>
 800b836:	3203      	adds	r2, #3
 800b838:	60e2      	str	r2, [r4, #12]
 800b83a:	2000      	movs	r0, #0
 800b83c:	6963      	ldr	r3, [r4, #20]
 800b83e:	69a1      	ldr	r1, [r4, #24]
 800b840:	428b      	cmp	r3, r1
 800b842:	f280 83b2 	bge.w	800bfaa <d_exprlist+0xf36>
 800b846:	6921      	ldr	r1, [r4, #16]
 800b848:	f103 0e01 	add.w	lr, r3, #1
 800b84c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b850:	eb11 0983 	adds.w	r9, r1, r3, lsl #2
 800b854:	f8c4 e014 	str.w	lr, [r4, #20]
 800b858:	f000 8108 	beq.w	800ba6c <d_exprlist+0x9f8>
 800b85c:	f04f 0e06 	mov.w	lr, #6
 800b860:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 800b864:	f8c9 0004 	str.w	r0, [r9, #4]
 800b868:	7813      	ldrb	r3, [r2, #0]
 800b86a:	e642      	b.n	800b4f2 <d_exprlist+0x47e>
 800b86c:	7853      	ldrb	r3, [r2, #1]
 800b86e:	2b70      	cmp	r3, #112	; 0x70
 800b870:	f47f ae59 	bne.w	800b526 <d_exprlist+0x4b2>
 800b874:	1c93      	adds	r3, r2, #2
 800b876:	60e3      	str	r3, [r4, #12]
 800b878:	7893      	ldrb	r3, [r2, #2]
 800b87a:	2b54      	cmp	r3, #84	; 0x54
 800b87c:	f040 831f 	bne.w	800bebe <d_exprlist+0xe4a>
 800b880:	3203      	adds	r2, #3
 800b882:	60e2      	str	r2, [r4, #12]
 800b884:	2000      	movs	r0, #0
 800b886:	6963      	ldr	r3, [r4, #20]
 800b888:	69a2      	ldr	r2, [r4, #24]
 800b88a:	4293      	cmp	r3, r2
 800b88c:	da1b      	bge.n	800b8c6 <d_exprlist+0x852>
 800b88e:	6922      	ldr	r2, [r4, #16]
 800b890:	1c59      	adds	r1, r3, #1
 800b892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b896:	eb12 0b83 	adds.w	fp, r2, r3, lsl #2
 800b89a:	6161      	str	r1, [r4, #20]
 800b89c:	f43f ad35 	beq.w	800b30a <d_exprlist+0x296>
 800b8a0:	2106      	movs	r1, #6
 800b8a2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800b8a6:	f8cb 0004 	str.w	r0, [fp, #4]
 800b8aa:	e52e      	b.n	800b30a <d_exprlist+0x296>
 800b8ac:	68e2      	ldr	r2, [r4, #12]
 800b8ae:	f04f 0a00 	mov.w	sl, #0
 800b8b2:	7813      	ldrb	r3, [r2, #0]
 800b8b4:	e5e1      	b.n	800b47a <d_exprlist+0x406>
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	60e3      	str	r3, [r4, #12]
 800b8ba:	e418      	b.n	800b0ee <d_exprlist+0x7a>
 800b8bc:	68e2      	ldr	r2, [r4, #12]
 800b8be:	f04f 0900 	mov.w	r9, #0
 800b8c2:	7813      	ldrb	r3, [r2, #0]
 800b8c4:	e615      	b.n	800b4f2 <d_exprlist+0x47e>
 800b8c6:	f04f 0b00 	mov.w	fp, #0
 800b8ca:	e51e      	b.n	800b30a <d_exprlist+0x296>
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f7fb fea5 	bl	800761c <d_expr_primary>
 800b8d2:	68e2      	ldr	r2, [r4, #12]
 800b8d4:	4681      	mov	r9, r0
 800b8d6:	7813      	ldrb	r3, [r2, #0]
 800b8d8:	e60b      	b.n	800b4f2 <d_exprlist+0x47e>
 800b8da:	7853      	ldrb	r3, [r2, #1]
 800b8dc:	2b6e      	cmp	r3, #110	; 0x6e
 800b8de:	f47f aecb 	bne.w	800b678 <d_exprlist+0x604>
 800b8e2:	3202      	adds	r2, #2
 800b8e4:	60e2      	str	r2, [r4, #12]
 800b8e6:	e5be      	b.n	800b466 <d_exprlist+0x3f2>
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f7fb fe97 	bl	800761c <d_expr_primary>
 800b8ee:	4683      	mov	fp, r0
 800b8f0:	e50b      	b.n	800b30a <d_exprlist+0x296>
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f7fb fe92 	bl	800761c <d_expr_primary>
 800b8f8:	68e2      	ldr	r2, [r4, #12]
 800b8fa:	4682      	mov	sl, r0
 800b8fc:	7813      	ldrb	r3, [r2, #0]
 800b8fe:	e5bc      	b.n	800b47a <d_exprlist+0x406>
 800b900:	4620      	mov	r0, r4
 800b902:	f7f8 ff67 	bl	80047d4 <d_template_param>
 800b906:	68e2      	ldr	r2, [r4, #12]
 800b908:	4682      	mov	sl, r0
 800b90a:	7813      	ldrb	r3, [r2, #0]
 800b90c:	e5b5      	b.n	800b47a <d_exprlist+0x406>
 800b90e:	f04f 0900 	mov.w	r9, #0
 800b912:	7853      	ldrb	r3, [r2, #1]
 800b914:	2b6c      	cmp	r3, #108	; 0x6c
 800b916:	f47f ae06 	bne.w	800b526 <d_exprlist+0x4b2>
 800b91a:	f04f 0b00 	mov.w	fp, #0
 800b91e:	68e3      	ldr	r3, [r4, #12]
 800b920:	3302      	adds	r3, #2
 800b922:	60e3      	str	r3, [r4, #12]
 800b924:	2145      	movs	r1, #69	; 0x45
 800b926:	4620      	mov	r0, r4
 800b928:	f7ff fba4 	bl	800b074 <d_exprlist>
 800b92c:	465a      	mov	r2, fp
 800b92e:	4603      	mov	r3, r0
 800b930:	2130      	movs	r1, #48	; 0x30
 800b932:	4620      	mov	r0, r4
 800b934:	f7f8 fd00 	bl	8004338 <d_make_comp>
 800b938:	4683      	mov	fp, r0
 800b93a:	e4e6      	b.n	800b30a <d_exprlist+0x296>
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7f8 ff49 	bl	80047d4 <d_template_param>
 800b942:	4683      	mov	fp, r0
 800b944:	e4e1      	b.n	800b30a <d_exprlist+0x296>
 800b946:	f04f 0a00 	mov.w	sl, #0
 800b94a:	7853      	ldrb	r3, [r2, #1]
 800b94c:	2b6c      	cmp	r3, #108	; 0x6c
 800b94e:	f47f adae 	bne.w	800b4ae <d_exprlist+0x43a>
 800b952:	f04f 0900 	mov.w	r9, #0
 800b956:	68e3      	ldr	r3, [r4, #12]
 800b958:	3302      	adds	r3, #2
 800b95a:	60e3      	str	r3, [r4, #12]
 800b95c:	2145      	movs	r1, #69	; 0x45
 800b95e:	4620      	mov	r0, r4
 800b960:	f7ff fb88 	bl	800b074 <d_exprlist>
 800b964:	464a      	mov	r2, r9
 800b966:	4603      	mov	r3, r0
 800b968:	2130      	movs	r1, #48	; 0x30
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7f8 fce4 	bl	8004338 <d_make_comp>
 800b970:	68e2      	ldr	r2, [r4, #12]
 800b972:	4681      	mov	r9, r0
 800b974:	7813      	ldrb	r3, [r2, #0]
 800b976:	e5bc      	b.n	800b4f2 <d_exprlist+0x47e>
 800b978:	4620      	mov	r0, r4
 800b97a:	f7f8 ff2b 	bl	80047d4 <d_template_param>
 800b97e:	68e2      	ldr	r2, [r4, #12]
 800b980:	4681      	mov	r9, r0
 800b982:	7813      	ldrb	r3, [r2, #0]
 800b984:	e5b5      	b.n	800b4f2 <d_exprlist+0x47e>
 800b986:	7853      	ldrb	r3, [r2, #1]
 800b988:	2b6c      	cmp	r3, #108	; 0x6c
 800b98a:	f47f ae75 	bne.w	800b678 <d_exprlist+0x604>
 800b98e:	3202      	adds	r2, #2
 800b990:	60e2      	str	r2, [r4, #12]
 800b992:	2145      	movs	r1, #69	; 0x45
 800b994:	4620      	mov	r0, r4
 800b996:	f7ff fb6d 	bl	800b074 <d_exprlist>
 800b99a:	4652      	mov	r2, sl
 800b99c:	4603      	mov	r3, r0
 800b99e:	2130      	movs	r1, #48	; 0x30
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f7f8 fcc9 	bl	8004338 <d_make_comp>
 800b9a6:	68e2      	ldr	r2, [r4, #12]
 800b9a8:	4682      	mov	sl, r0
 800b9aa:	7813      	ldrb	r3, [r2, #0]
 800b9ac:	e565      	b.n	800b47a <d_exprlist+0x406>
 800b9ae:	6843      	ldr	r3, [r0, #4]
 800b9b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	f8d3 b000 	ldr.w	fp, [r3]
 800b9b8:	49b7      	ldr	r1, [pc, #732]	; (800bc98 <d_exprlist+0xc24>)
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	3a02      	subs	r2, #2
 800b9be:	4410      	add	r0, r2
 800b9c0:	6320      	str	r0, [r4, #48]	; 0x30
 800b9c2:	4658      	mov	r0, fp
 800b9c4:	f002 f8d0 	bl	800db68 <strcmp>
 800b9c8:	9b00      	ldr	r3, [sp, #0]
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	f000 833f 	beq.w	800c04e <d_exprlist+0xfda>
 800b9d0:	68da      	ldr	r2, [r3, #12]
 800b9d2:	2a03      	cmp	r2, #3
 800b9d4:	f63f af72 	bhi.w	800b8bc <d_exprlist+0x848>
 800b9d8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b9dc:	02ec008c 	.word	0x02ec008c
 800b9e0:	0006004c 	.word	0x0006004c
 800b9e4:	f04f 0b00 	mov.w	fp, #0
 800b9e8:	4658      	mov	r0, fp
 800b9ea:	49ac      	ldr	r1, [pc, #688]	; (800bc9c <d_exprlist+0xc28>)
 800b9ec:	f002 f8bc 	bl	800db68 <strcmp>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	f000 83d6 	beq.w	800c1a2 <d_exprlist+0x112e>
 800b9f6:	f89b 2000 	ldrb.w	r2, [fp]
 800b9fa:	2a6e      	cmp	r2, #110	; 0x6e
 800b9fc:	f47f af5e 	bne.w	800b8bc <d_exprlist+0x848>
 800ba00:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800ba04:	2b77      	cmp	r3, #119	; 0x77
 800ba06:	d002      	beq.n	800ba0e <d_exprlist+0x99a>
 800ba08:	2b61      	cmp	r3, #97	; 0x61
 800ba0a:	f47f af57 	bne.w	800b8bc <d_exprlist+0x848>
 800ba0e:	215f      	movs	r1, #95	; 0x5f
 800ba10:	4620      	mov	r0, r4
 800ba12:	f7ff fb2f 	bl	800b074 <d_exprlist>
 800ba16:	9000      	str	r0, [sp, #0]
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f7fb fe5f 	bl	80076dc <d_type>
 800ba1e:	68e2      	ldr	r2, [r4, #12]
 800ba20:	7813      	ldrb	r3, [r2, #0]
 800ba22:	2b45      	cmp	r3, #69	; 0x45
 800ba24:	4683      	mov	fp, r0
 800ba26:	f000 833d 	beq.w	800c0a4 <d_exprlist+0x1030>
 800ba2a:	2b70      	cmp	r3, #112	; 0x70
 800ba2c:	f000 8496 	beq.w	800c35c <d_exprlist+0x12e8>
 800ba30:	2b69      	cmp	r3, #105	; 0x69
 800ba32:	f040 848f 	bne.w	800c354 <d_exprlist+0x12e0>
 800ba36:	7853      	ldrb	r3, [r2, #1]
 800ba38:	2b6c      	cmp	r3, #108	; 0x6c
 800ba3a:	f47f af68 	bne.w	800b90e <d_exprlist+0x89a>
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 fde4 	bl	800c60c <d_expression_1>
 800ba44:	4603      	mov	r3, r0
 800ba46:	465a      	mov	r2, fp
 800ba48:	213a      	movs	r1, #58	; 0x3a
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f7f8 fc74 	bl	8004338 <d_make_comp>
 800ba50:	9a00      	ldr	r2, [sp, #0]
 800ba52:	4603      	mov	r3, r0
 800ba54:	2139      	movs	r1, #57	; 0x39
 800ba56:	4620      	mov	r0, r4
 800ba58:	f7f8 fc6e 	bl	8004338 <d_make_comp>
 800ba5c:	464a      	mov	r2, r9
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2138      	movs	r1, #56	; 0x38
 800ba62:	4620      	mov	r0, r4
 800ba64:	f7f8 fc68 	bl	8004338 <d_make_comp>
 800ba68:	4681      	mov	r9, r0
 800ba6a:	68e2      	ldr	r2, [r4, #12]
 800ba6c:	7813      	ldrb	r3, [r2, #0]
 800ba6e:	e540      	b.n	800b4f2 <d_exprlist+0x47e>
 800ba70:	f04f 0b00 	mov.w	fp, #0
 800ba74:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ba78:	6812      	ldr	r2, [r2, #0]
 800ba7a:	7851      	ldrb	r1, [r2, #1]
 800ba7c:	2963      	cmp	r1, #99	; 0x63
 800ba7e:	f000 83e2 	beq.w	800c246 <d_exprlist+0x11d2>
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fdc2 	bl	800c60c <d_expression_1>
 800ba88:	9000      	str	r0, [sp, #0]
 800ba8a:	4658      	mov	r0, fp
 800ba8c:	4984      	ldr	r1, [pc, #528]	; (800bca0 <d_exprlist+0xc2c>)
 800ba8e:	f002 f86b 	bl	800db68 <strcmp>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	f000 837f 	beq.w	800c196 <d_exprlist+0x1122>
 800ba98:	4658      	mov	r0, fp
 800ba9a:	4982      	ldr	r1, [pc, #520]	; (800bca4 <d_exprlist+0xc30>)
 800ba9c:	f002 f864 	bl	800db68 <strcmp>
 800baa0:	b130      	cbz	r0, 800bab0 <d_exprlist+0xa3c>
 800baa2:	4658      	mov	r0, fp
 800baa4:	4980      	ldr	r1, [pc, #512]	; (800bca8 <d_exprlist+0xc34>)
 800baa6:	f002 f85f 	bl	800db68 <strcmp>
 800baaa:	2800      	cmp	r0, #0
 800baac:	f040 83d9 	bne.w	800c262 <d_exprlist+0x11ee>
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7fd f889 	bl	8008bc8 <d_unqualified_name>
 800bab6:	68e3      	ldr	r3, [r4, #12]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	2b49      	cmp	r3, #73	; 0x49
 800babc:	4683      	mov	fp, r0
 800babe:	d109      	bne.n	800bad4 <d_exprlist+0xa60>
 800bac0:	4620      	mov	r0, r4
 800bac2:	f7fd f9c1 	bl	8008e48 <d_template_args>
 800bac6:	465a      	mov	r2, fp
 800bac8:	4603      	mov	r3, r0
 800baca:	2104      	movs	r1, #4
 800bacc:	4620      	mov	r0, r4
 800bace:	f7f8 fc33 	bl	8004338 <d_make_comp>
 800bad2:	4683      	mov	fp, r0
 800bad4:	9a00      	ldr	r2, [sp, #0]
 800bad6:	465b      	mov	r3, fp
 800bad8:	2137      	movs	r1, #55	; 0x37
 800bada:	4620      	mov	r0, r4
 800badc:	f7f8 fc2c 	bl	8004338 <d_make_comp>
 800bae0:	464a      	mov	r2, r9
 800bae2:	4603      	mov	r3, r0
 800bae4:	2136      	movs	r1, #54	; 0x36
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7f8 fc26 	bl	8004338 <d_make_comp>
 800baec:	68e2      	ldr	r2, [r4, #12]
 800baee:	4681      	mov	r9, r0
 800baf0:	7813      	ldrb	r3, [r2, #0]
 800baf2:	e4fe      	b.n	800b4f2 <d_exprlist+0x47e>
 800baf4:	464a      	mov	r2, r9
 800baf6:	4620      	mov	r0, r4
 800baf8:	2134      	movs	r1, #52	; 0x34
 800bafa:	e661      	b.n	800b7c0 <d_exprlist+0x74c>
 800bafc:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800bb00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bb02:	f8db 3008 	ldr.w	r3, [fp, #8]
 800bb06:	f8db 9000 	ldr.w	r9, [fp]
 800bb0a:	4963      	ldr	r1, [pc, #396]	; (800bc98 <d_exprlist+0xc24>)
 800bb0c:	3b02      	subs	r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	6323      	str	r3, [r4, #48]	; 0x30
 800bb12:	4648      	mov	r0, r9
 800bb14:	f002 f828 	bl	800db68 <strcmp>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	f000 82bf 	beq.w	800c09c <d_exprlist+0x1028>
 800bb1e:	f8db 300c 	ldr.w	r3, [fp, #12]
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	f63f aec2 	bhi.w	800b8ac <d_exprlist+0x838>
 800bb28:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb2c:	01aa008c 	.word	0x01aa008c
 800bb30:	0006004c 	.word	0x0006004c
 800bb34:	f04f 0900 	mov.w	r9, #0
 800bb38:	4648      	mov	r0, r9
 800bb3a:	4958      	ldr	r1, [pc, #352]	; (800bc9c <d_exprlist+0xc28>)
 800bb3c:	f002 f814 	bl	800db68 <strcmp>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	f000 8370 	beq.w	800c226 <d_exprlist+0x11b2>
 800bb46:	f899 3000 	ldrb.w	r3, [r9]
 800bb4a:	2b6e      	cmp	r3, #110	; 0x6e
 800bb4c:	f47f aeae 	bne.w	800b8ac <d_exprlist+0x838>
 800bb50:	f899 3001 	ldrb.w	r3, [r9, #1]
 800bb54:	2b77      	cmp	r3, #119	; 0x77
 800bb56:	d002      	beq.n	800bb5e <d_exprlist+0xaea>
 800bb58:	2b61      	cmp	r3, #97	; 0x61
 800bb5a:	f47f aea7 	bne.w	800b8ac <d_exprlist+0x838>
 800bb5e:	215f      	movs	r1, #95	; 0x5f
 800bb60:	4620      	mov	r0, r4
 800bb62:	f7ff fa87 	bl	800b074 <d_exprlist>
 800bb66:	4681      	mov	r9, r0
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f7fb fdb7 	bl	80076dc <d_type>
 800bb6e:	68e2      	ldr	r2, [r4, #12]
 800bb70:	7813      	ldrb	r3, [r2, #0]
 800bb72:	2b45      	cmp	r3, #69	; 0x45
 800bb74:	4683      	mov	fp, r0
 800bb76:	f000 8362 	beq.w	800c23e <d_exprlist+0x11ca>
 800bb7a:	2b70      	cmp	r3, #112	; 0x70
 800bb7c:	f000 8376 	beq.w	800c26c <d_exprlist+0x11f8>
 800bb80:	2b69      	cmp	r3, #105	; 0x69
 800bb82:	f040 83ac 	bne.w	800c2de <d_exprlist+0x126a>
 800bb86:	7853      	ldrb	r3, [r2, #1]
 800bb88:	2b6c      	cmp	r3, #108	; 0x6c
 800bb8a:	f47f aedc 	bne.w	800b946 <d_exprlist+0x8d2>
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f000 fd3c 	bl	800c60c <d_expression_1>
 800bb94:	4603      	mov	r3, r0
 800bb96:	465a      	mov	r2, fp
 800bb98:	213a      	movs	r1, #58	; 0x3a
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f7f8 fbcc 	bl	8004338 <d_make_comp>
 800bba0:	464a      	mov	r2, r9
 800bba2:	4603      	mov	r3, r0
 800bba4:	2139      	movs	r1, #57	; 0x39
 800bba6:	4620      	mov	r0, r4
 800bba8:	f7f8 fbc6 	bl	8004338 <d_make_comp>
 800bbac:	4652      	mov	r2, sl
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2138      	movs	r1, #56	; 0x38
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f7f8 fbc0 	bl	8004338 <d_make_comp>
 800bbb8:	4682      	mov	sl, r0
 800bbba:	68e2      	ldr	r2, [r4, #12]
 800bbbc:	7813      	ldrb	r3, [r2, #0]
 800bbbe:	e45c      	b.n	800b47a <d_exprlist+0x406>
 800bbc0:	f04f 0900 	mov.w	r9, #0
 800bbc4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	785a      	ldrb	r2, [r3, #1]
 800bbcc:	2a63      	cmp	r2, #99	; 0x63
 800bbce:	f000 82a8 	beq.w	800c122 <d_exprlist+0x10ae>
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fd1a 	bl	800c60c <d_expression_1>
 800bbd8:	4683      	mov	fp, r0
 800bbda:	4648      	mov	r0, r9
 800bbdc:	4930      	ldr	r1, [pc, #192]	; (800bca0 <d_exprlist+0xc2c>)
 800bbde:	f001 ffc3 	bl	800db68 <strcmp>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	f000 82c4 	beq.w	800c170 <d_exprlist+0x10fc>
 800bbe8:	4648      	mov	r0, r9
 800bbea:	492e      	ldr	r1, [pc, #184]	; (800bca4 <d_exprlist+0xc30>)
 800bbec:	f001 ffbc 	bl	800db68 <strcmp>
 800bbf0:	b130      	cbz	r0, 800bc00 <d_exprlist+0xb8c>
 800bbf2:	4648      	mov	r0, r9
 800bbf4:	492c      	ldr	r1, [pc, #176]	; (800bca8 <d_exprlist+0xc34>)
 800bbf6:	f001 ffb7 	bl	800db68 <strcmp>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	f040 829f 	bne.w	800c13e <d_exprlist+0x10ca>
 800bc00:	4620      	mov	r0, r4
 800bc02:	f7fc ffe1 	bl	8008bc8 <d_unqualified_name>
 800bc06:	68e3      	ldr	r3, [r4, #12]
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b49      	cmp	r3, #73	; 0x49
 800bc0c:	4681      	mov	r9, r0
 800bc0e:	d109      	bne.n	800bc24 <d_exprlist+0xbb0>
 800bc10:	4620      	mov	r0, r4
 800bc12:	f7fd f919 	bl	8008e48 <d_template_args>
 800bc16:	464a      	mov	r2, r9
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2104      	movs	r1, #4
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f7f8 fb8b 	bl	8004338 <d_make_comp>
 800bc22:	4681      	mov	r9, r0
 800bc24:	465a      	mov	r2, fp
 800bc26:	464b      	mov	r3, r9
 800bc28:	2137      	movs	r1, #55	; 0x37
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7f8 fb84 	bl	8004338 <d_make_comp>
 800bc30:	4652      	mov	r2, sl
 800bc32:	4603      	mov	r3, r0
 800bc34:	2136      	movs	r1, #54	; 0x36
 800bc36:	4620      	mov	r0, r4
 800bc38:	f7f8 fb7e 	bl	8004338 <d_make_comp>
 800bc3c:	68e2      	ldr	r2, [r4, #12]
 800bc3e:	4682      	mov	sl, r0
 800bc40:	7813      	ldrb	r3, [r2, #0]
 800bc42:	e41a      	b.n	800b47a <d_exprlist+0x406>
 800bc44:	4652      	mov	r2, sl
 800bc46:	2300      	movs	r3, #0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	2134      	movs	r1, #52	; 0x34
 800bc4c:	f7f8 fb74 	bl	8004338 <d_make_comp>
 800bc50:	68e2      	ldr	r2, [r4, #12]
 800bc52:	4682      	mov	sl, r0
 800bc54:	7813      	ldrb	r3, [r2, #0]
 800bc56:	e410      	b.n	800b47a <d_exprlist+0x406>
 800bc58:	6843      	ldr	r3, [r0, #4]
 800bc5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bc5c:	689a      	ldr	r2, [r3, #8]
 800bc5e:	f8d3 b000 	ldr.w	fp, [r3]
 800bc62:	490d      	ldr	r1, [pc, #52]	; (800bc98 <d_exprlist+0xc24>)
 800bc64:	f8cd c008 	str.w	ip, [sp, #8]
 800bc68:	3a02      	subs	r2, #2
 800bc6a:	4402      	add	r2, r0
 800bc6c:	6322      	str	r2, [r4, #48]	; 0x30
 800bc6e:	4658      	mov	r0, fp
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	f001 ff79 	bl	800db68 <strcmp>
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	f000 8208 	beq.w	800c092 <d_exprlist+0x101e>
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	f63f ae1e 	bhi.w	800b8c6 <d_exprlist+0x852>
 800bc8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bc8e:	0095      	.short	0x0095
 800bc90:	0056014a 	.word	0x0056014a
 800bc94:	0011      	.short	0x0011
 800bc96:	bf00      	nop
 800bc98:	0801dfe8 	.word	0x0801dfe8
 800bc9c:	0801dd28 	.word	0x0801dd28
 800bca0:	0801dd20 	.word	0x0801dd20
 800bca4:	0801ddf4 	.word	0x0801ddf4
 800bca8:	0801ddf8 	.word	0x0801ddf8
 800bcac:	f04f 0b00 	mov.w	fp, #0
 800bcb0:	4658      	mov	r0, fp
 800bcb2:	49d5      	ldr	r1, [pc, #852]	; (800c008 <d_exprlist+0xf94>)
 800bcb4:	f001 ff58 	bl	800db68 <strcmp>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	f000 8296 	beq.w	800c1ea <d_exprlist+0x1176>
 800bcbe:	f89b 3000 	ldrb.w	r3, [fp]
 800bcc2:	2b6e      	cmp	r3, #110	; 0x6e
 800bcc4:	f47f adff 	bne.w	800b8c6 <d_exprlist+0x852>
 800bcc8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bccc:	2b77      	cmp	r3, #119	; 0x77
 800bcce:	d002      	beq.n	800bcd6 <d_exprlist+0xc62>
 800bcd0:	2b61      	cmp	r3, #97	; 0x61
 800bcd2:	f47f adf8 	bne.w	800b8c6 <d_exprlist+0x852>
 800bcd6:	215f      	movs	r1, #95	; 0x5f
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f7ff f9cb 	bl	800b074 <d_exprlist>
 800bcde:	9001      	str	r0, [sp, #4]
 800bce0:	4620      	mov	r0, r4
 800bce2:	f7fb fcfb 	bl	80076dc <d_type>
 800bce6:	68e3      	ldr	r3, [r4, #12]
 800bce8:	781a      	ldrb	r2, [r3, #0]
 800bcea:	2a45      	cmp	r2, #69	; 0x45
 800bcec:	4683      	mov	fp, r0
 800bcee:	f000 8278 	beq.w	800c1e2 <d_exprlist+0x116e>
 800bcf2:	2a70      	cmp	r2, #112	; 0x70
 800bcf4:	f000 846c 	beq.w	800c5d0 <d_exprlist+0x155c>
 800bcf8:	2a69      	cmp	r2, #105	; 0x69
 800bcfa:	f47f ade4 	bne.w	800b8c6 <d_exprlist+0x852>
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2b6c      	cmp	r3, #108	; 0x6c
 800bd02:	f47f ade0 	bne.w	800b8c6 <d_exprlist+0x852>
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 fc80 	bl	800c60c <d_expression_1>
 800bd0c:	465a      	mov	r2, fp
 800bd0e:	4603      	mov	r3, r0
 800bd10:	213a      	movs	r1, #58	; 0x3a
 800bd12:	4620      	mov	r0, r4
 800bd14:	f7f8 fb10 	bl	8004338 <d_make_comp>
 800bd18:	9a01      	ldr	r2, [sp, #4]
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2139      	movs	r1, #57	; 0x39
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f7f8 fb0a 	bl	8004338 <d_make_comp>
 800bd24:	9a00      	ldr	r2, [sp, #0]
 800bd26:	4603      	mov	r3, r0
 800bd28:	2138      	movs	r1, #56	; 0x38
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f7f8 fb04 	bl	8004338 <d_make_comp>
 800bd30:	4683      	mov	fp, r0
 800bd32:	f7ff baea 	b.w	800b30a <d_exprlist+0x296>
 800bd36:	f04f 0b00 	mov.w	fp, #0
 800bd3a:	9b00      	ldr	r3, [sp, #0]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	785a      	ldrb	r2, [r3, #1]
 800bd42:	2a63      	cmp	r2, #99	; 0x63
 800bd44:	f000 823f 	beq.w	800c1c6 <d_exprlist+0x1152>
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f000 fc5f 	bl	800c60c <d_expression_1>
 800bd4e:	9001      	str	r0, [sp, #4]
 800bd50:	4658      	mov	r0, fp
 800bd52:	49ae      	ldr	r1, [pc, #696]	; (800c00c <d_exprlist+0xf98>)
 800bd54:	f001 ff08 	bl	800db68 <strcmp>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	f000 822e 	beq.w	800c1ba <d_exprlist+0x1146>
 800bd5e:	4658      	mov	r0, fp
 800bd60:	49ab      	ldr	r1, [pc, #684]	; (800c010 <d_exprlist+0xf9c>)
 800bd62:	f001 ff01 	bl	800db68 <strcmp>
 800bd66:	b130      	cbz	r0, 800bd76 <d_exprlist+0xd02>
 800bd68:	4658      	mov	r0, fp
 800bd6a:	49aa      	ldr	r1, [pc, #680]	; (800c014 <d_exprlist+0xfa0>)
 800bd6c:	f001 fefc 	bl	800db68 <strcmp>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	f040 8246 	bne.w	800c202 <d_exprlist+0x118e>
 800bd76:	4620      	mov	r0, r4
 800bd78:	f7fc ff26 	bl	8008bc8 <d_unqualified_name>
 800bd7c:	68e3      	ldr	r3, [r4, #12]
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	2b49      	cmp	r3, #73	; 0x49
 800bd82:	4683      	mov	fp, r0
 800bd84:	d109      	bne.n	800bd9a <d_exprlist+0xd26>
 800bd86:	4620      	mov	r0, r4
 800bd88:	f7fd f85e 	bl	8008e48 <d_template_args>
 800bd8c:	465a      	mov	r2, fp
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2104      	movs	r1, #4
 800bd92:	4620      	mov	r0, r4
 800bd94:	f7f8 fad0 	bl	8004338 <d_make_comp>
 800bd98:	4683      	mov	fp, r0
 800bd9a:	465b      	mov	r3, fp
 800bd9c:	9a01      	ldr	r2, [sp, #4]
 800bd9e:	2137      	movs	r1, #55	; 0x37
 800bda0:	4620      	mov	r0, r4
 800bda2:	f7f8 fac9 	bl	8004338 <d_make_comp>
 800bda6:	9a00      	ldr	r2, [sp, #0]
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2136      	movs	r1, #54	; 0x36
 800bdac:	4620      	mov	r0, r4
 800bdae:	f7f8 fac3 	bl	8004338 <d_make_comp>
 800bdb2:	4683      	mov	fp, r0
 800bdb4:	f7ff baa9 	b.w	800b30a <d_exprlist+0x296>
 800bdb8:	9a00      	ldr	r2, [sp, #0]
 800bdba:	4620      	mov	r0, r4
 800bdbc:	2134      	movs	r1, #52	; 0x34
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f7f8 faba 	bl	8004338 <d_make_comp>
 800bdc4:	4683      	mov	fp, r0
 800bdc6:	f7ff baa0 	b.w	800b30a <d_exprlist+0x296>
 800bdca:	7853      	ldrb	r3, [r2, #1]
 800bdcc:	2b6c      	cmp	r3, #108	; 0x6c
 800bdce:	f47f ac53 	bne.w	800b678 <d_exprlist+0x604>
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7fb fc82 	bl	80076dc <d_type>
 800bdd8:	68e2      	ldr	r2, [r4, #12]
 800bdda:	4682      	mov	sl, r0
 800bddc:	e5d7      	b.n	800b98e <d_exprlist+0x91a>
 800bdde:	7853      	ldrb	r3, [r2, #1]
 800bde0:	2b6c      	cmp	r3, #108	; 0x6c
 800bde2:	f47f aba0 	bne.w	800b526 <d_exprlist+0x4b2>
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7fb fc78 	bl	80076dc <d_type>
 800bdec:	4683      	mov	fp, r0
 800bdee:	e596      	b.n	800b91e <d_exprlist+0x8aa>
 800bdf0:	7853      	ldrb	r3, [r2, #1]
 800bdf2:	2b6c      	cmp	r3, #108	; 0x6c
 800bdf4:	f47f ab5b 	bne.w	800b4ae <d_exprlist+0x43a>
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f7fb fc6f 	bl	80076dc <d_type>
 800bdfe:	4681      	mov	r9, r0
 800be00:	e5a9      	b.n	800b956 <d_exprlist+0x8e2>
 800be02:	9b00      	ldr	r3, [sp, #0]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	2b03      	cmp	r3, #3
 800be08:	f63f ad5d 	bhi.w	800b8c6 <d_exprlist+0x852>
 800be0c:	a201      	add	r2, pc, #4	; (adr r2, 800be14 <d_exprlist+0xda0>)
 800be0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be12:	bf00      	nop
 800be14:	0800bdb9 	.word	0x0800bdb9
 800be18:	0800bf0f 	.word	0x0800bf0f
 800be1c:	0800bd37 	.word	0x0800bd37
 800be20:	0800bcad 	.word	0x0800bcad
 800be24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800be28:	2b03      	cmp	r3, #3
 800be2a:	f63f ad47 	bhi.w	800b8bc <d_exprlist+0x848>
 800be2e:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <d_exprlist+0xdc0>)
 800be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be34:	0800baf5 	.word	0x0800baf5
 800be38:	0800b4db 	.word	0x0800b4db
 800be3c:	0800ba71 	.word	0x0800ba71
 800be40:	0800b9e5 	.word	0x0800b9e5
 800be44:	f8da 3004 	ldr.w	r3, [sl, #4]
 800be48:	2b03      	cmp	r3, #3
 800be4a:	f63f ad2f 	bhi.w	800b8ac <d_exprlist+0x838>
 800be4e:	a201      	add	r2, pc, #4	; (adr r2, 800be54 <d_exprlist+0xde0>)
 800be50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be54:	0800bc45 	.word	0x0800bc45
 800be58:	0800b6a5 	.word	0x0800b6a5
 800be5c:	0800bbc1 	.word	0x0800bbc1
 800be60:	0800bb35 	.word	0x0800bb35
 800be64:	4620      	mov	r0, r4
 800be66:	f7fc ffef 	bl	8008e48 <d_template_args>
 800be6a:	4652      	mov	r2, sl
 800be6c:	4603      	mov	r3, r0
 800be6e:	2104      	movs	r1, #4
 800be70:	4620      	mov	r0, r4
 800be72:	f7f8 fa61 	bl	8004338 <d_make_comp>
 800be76:	68e2      	ldr	r2, [r4, #12]
 800be78:	4682      	mov	sl, r0
 800be7a:	7813      	ldrb	r3, [r2, #0]
 800be7c:	f7ff bafd 	b.w	800b47a <d_exprlist+0x406>
 800be80:	f899 3000 	ldrb.w	r3, [r9]
 800be84:	2b70      	cmp	r3, #112	; 0x70
 800be86:	d002      	beq.n	800be8e <d_exprlist+0xe1a>
 800be88:	2b6d      	cmp	r3, #109	; 0x6d
 800be8a:	f47f ac0b 	bne.w	800b6a4 <d_exprlist+0x630>
 800be8e:	f899 2001 	ldrb.w	r2, [r9, #1]
 800be92:	429a      	cmp	r2, r3
 800be94:	f47f ac06 	bne.w	800b6a4 <d_exprlist+0x630>
 800be98:	68e3      	ldr	r3, [r4, #12]
 800be9a:	781a      	ldrb	r2, [r3, #0]
 800be9c:	2a5f      	cmp	r2, #95	; 0x5f
 800be9e:	f000 824e 	beq.w	800c33e <d_exprlist+0x12ca>
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 fbb2 	bl	800c60c <d_expression_1>
 800bea8:	4602      	mov	r2, r0
 800beaa:	4613      	mov	r3, r2
 800beac:	4620      	mov	r0, r4
 800beae:	2137      	movs	r1, #55	; 0x37
 800beb0:	f7f8 fa42 	bl	8004338 <d_make_comp>
 800beb4:	4603      	mov	r3, r0
 800beb6:	4652      	mov	r2, sl
 800beb8:	4620      	mov	r0, r4
 800beba:	f7ff bbf9 	b.w	800b6b0 <d_exprlist+0x63c>
 800bebe:	4620      	mov	r0, r4
 800bec0:	f7f8 fc70 	bl	80047a4 <d_compact_number>
 800bec4:	3001      	adds	r0, #1
 800bec6:	f47f acde 	bne.w	800b886 <d_exprlist+0x812>
 800beca:	4683      	mov	fp, r0
 800becc:	f7ff ba1d 	b.w	800b30a <d_exprlist+0x296>
 800bed0:	3202      	adds	r2, #2
 800bed2:	60e2      	str	r2, [r4, #12]
 800bed4:	4620      	mov	r0, r4
 800bed6:	f7fb fc01 	bl	80076dc <d_type>
 800beda:	4681      	mov	r9, r0
 800bedc:	4620      	mov	r0, r4
 800bede:	f7fc fe73 	bl	8008bc8 <d_unqualified_name>
 800bee2:	68e3      	ldr	r3, [r4, #12]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	2b49      	cmp	r3, #73	; 0x49
 800bee8:	4682      	mov	sl, r0
 800beea:	f000 8147 	beq.w	800c17c <d_exprlist+0x1108>
 800beee:	4603      	mov	r3, r0
 800bef0:	464a      	mov	r2, r9
 800bef2:	4620      	mov	r0, r4
 800bef4:	2101      	movs	r1, #1
 800bef6:	f7f8 fa1f 	bl	8004338 <d_make_comp>
 800befa:	68e2      	ldr	r2, [r4, #12]
 800befc:	4682      	mov	sl, r0
 800befe:	7813      	ldrb	r3, [r2, #0]
 800bf00:	f7ff babb 	b.w	800b47a <d_exprlist+0x406>
 800bf04:	7813      	ldrb	r3, [r2, #0]
 800bf06:	f04f 0a00 	mov.w	sl, #0
 800bf0a:	f7ff bab6 	b.w	800b47a <d_exprlist+0x406>
 800bf0e:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800bf12:	68e3      	ldr	r3, [r4, #12]
 800bf14:	f43f ab1d 	beq.w	800b552 <d_exprlist+0x4de>
 800bf18:	2100      	movs	r1, #0
 800bf1a:	781a      	ldrb	r2, [r3, #0]
 800bf1c:	9102      	str	r1, [sp, #8]
 800bf1e:	f7ff bb1e 	b.w	800b55e <d_exprlist+0x4ea>
 800bf22:	f89b 3000 	ldrb.w	r3, [fp]
 800bf26:	2b70      	cmp	r3, #112	; 0x70
 800bf28:	d001      	beq.n	800bf2e <d_exprlist+0xeba>
 800bf2a:	2b6d      	cmp	r3, #109	; 0x6d
 800bf2c:	d1ef      	bne.n	800bf0e <d_exprlist+0xe9a>
 800bf2e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d1eb      	bne.n	800bf0e <d_exprlist+0xe9a>
 800bf36:	68e3      	ldr	r3, [r4, #12]
 800bf38:	781a      	ldrb	r2, [r3, #0]
 800bf3a:	2a5f      	cmp	r2, #95	; 0x5f
 800bf3c:	f000 8207 	beq.w	800c34e <d_exprlist+0x12da>
 800bf40:	2101      	movs	r1, #1
 800bf42:	9102      	str	r1, [sp, #8]
 800bf44:	f7ff bb0b 	b.w	800b55e <d_exprlist+0x4ea>
 800bf48:	3202      	adds	r2, #2
 800bf4a:	60e2      	str	r2, [r4, #12]
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f7fb fbc5 	bl	80076dc <d_type>
 800bf52:	4683      	mov	fp, r0
 800bf54:	4620      	mov	r0, r4
 800bf56:	f7fc fe37 	bl	8008bc8 <d_unqualified_name>
 800bf5a:	68e3      	ldr	r3, [r4, #12]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	2b49      	cmp	r3, #73	; 0x49
 800bf60:	f000 80f2 	beq.w	800c148 <d_exprlist+0x10d4>
 800bf64:	465a      	mov	r2, fp
 800bf66:	4603      	mov	r3, r0
 800bf68:	2101      	movs	r1, #1
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f7f8 f9e4 	bl	8004338 <d_make_comp>
 800bf70:	4683      	mov	fp, r0
 800bf72:	f7ff b9ca 	b.w	800b30a <d_exprlist+0x296>
 800bf76:	3202      	adds	r2, #2
 800bf78:	60e2      	str	r2, [r4, #12]
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	f7fb fbae 	bl	80076dc <d_type>
 800bf80:	4681      	mov	r9, r0
 800bf82:	4620      	mov	r0, r4
 800bf84:	f7fc fe20 	bl	8008bc8 <d_unqualified_name>
 800bf88:	68e3      	ldr	r3, [r4, #12]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	2b49      	cmp	r3, #73	; 0x49
 800bf8e:	4683      	mov	fp, r0
 800bf90:	f000 813c 	beq.w	800c20c <d_exprlist+0x1198>
 800bf94:	4603      	mov	r3, r0
 800bf96:	464a      	mov	r2, r9
 800bf98:	4620      	mov	r0, r4
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	f7f8 f9cc 	bl	8004338 <d_make_comp>
 800bfa0:	68e2      	ldr	r2, [r4, #12]
 800bfa2:	4681      	mov	r9, r0
 800bfa4:	7813      	ldrb	r3, [r2, #0]
 800bfa6:	f7ff baa4 	b.w	800b4f2 <d_exprlist+0x47e>
 800bfaa:	7813      	ldrb	r3, [r2, #0]
 800bfac:	f04f 0900 	mov.w	r9, #0
 800bfb0:	f7ff ba9f 	b.w	800b4f2 <d_exprlist+0x47e>
 800bfb4:	f89b 2000 	ldrb.w	r2, [fp]
 800bfb8:	2a70      	cmp	r2, #112	; 0x70
 800bfba:	d002      	beq.n	800bfc2 <d_exprlist+0xf4e>
 800bfbc:	2a6d      	cmp	r2, #109	; 0x6d
 800bfbe:	f47f aa8c 	bne.w	800b4da <d_exprlist+0x466>
 800bfc2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	f47f aa87 	bne.w	800b4da <d_exprlist+0x466>
 800bfcc:	68e3      	ldr	r3, [r4, #12]
 800bfce:	781a      	ldrb	r2, [r3, #0]
 800bfd0:	2a5f      	cmp	r2, #95	; 0x5f
 800bfd2:	f000 81b8 	beq.w	800c346 <d_exprlist+0x12d2>
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 fb18 	bl	800c60c <d_expression_1>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	4613      	mov	r3, r2
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	2137      	movs	r1, #55	; 0x37
 800bfe4:	f7f8 f9a8 	bl	8004338 <d_make_comp>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	464a      	mov	r2, r9
 800bfec:	4620      	mov	r0, r4
 800bfee:	f7ff ba7a 	b.w	800b4e6 <d_exprlist+0x472>
 800bff2:	4620      	mov	r0, r4
 800bff4:	f7f8 fbd6 	bl	80047a4 <d_compact_number>
 800bff8:	3001      	adds	r0, #1
 800bffa:	68e2      	ldr	r2, [r4, #12]
 800bffc:	f47f ab71 	bne.w	800b6e2 <d_exprlist+0x66e>
 800c000:	4682      	mov	sl, r0
 800c002:	7813      	ldrb	r3, [r2, #0]
 800c004:	f7ff ba39 	b.w	800b47a <d_exprlist+0x406>
 800c008:	0801dd28 	.word	0x0801dd28
 800c00c:	0801dd20 	.word	0x0801dd20
 800c010:	0801ddf4 	.word	0x0801ddf4
 800c014:	0801ddf8 	.word	0x0801ddf8
 800c018:	4620      	mov	r0, r4
 800c01a:	f7f8 fbc3 	bl	80047a4 <d_compact_number>
 800c01e:	3001      	adds	r0, #1
 800c020:	68e2      	ldr	r2, [r4, #12]
 800c022:	f47f ac0b 	bne.w	800b83c <d_exprlist+0x7c8>
 800c026:	4681      	mov	r9, r0
 800c028:	7813      	ldrb	r3, [r2, #0]
 800c02a:	f7ff ba62 	b.w	800b4f2 <d_exprlist+0x47e>
 800c02e:	3301      	adds	r3, #1
 800c030:	60e3      	str	r3, [r4, #12]
 800c032:	4620      	mov	r0, r4
 800c034:	2145      	movs	r1, #69	; 0x45
 800c036:	f7ff f81d 	bl	800b074 <d_exprlist>
 800c03a:	4683      	mov	fp, r0
 800c03c:	465b      	mov	r3, fp
 800c03e:	9a00      	ldr	r2, [sp, #0]
 800c040:	4620      	mov	r0, r4
 800c042:	2135      	movs	r1, #53	; 0x35
 800c044:	f7f8 f978 	bl	8004338 <d_make_comp>
 800c048:	4683      	mov	fp, r0
 800c04a:	f7ff b95e 	b.w	800b30a <d_exprlist+0x296>
 800c04e:	4620      	mov	r0, r4
 800c050:	f7fb fb44 	bl	80076dc <d_type>
 800c054:	e7c8      	b.n	800bfe8 <d_exprlist+0xf74>
 800c056:	785a      	ldrb	r2, [r3, #1]
 800c058:	2a6e      	cmp	r2, #110	; 0x6e
 800c05a:	f47f aa9a 	bne.w	800b592 <d_exprlist+0x51e>
 800c05e:	3302      	adds	r3, #2
 800c060:	60e3      	str	r3, [r4, #12]
 800c062:	4620      	mov	r0, r4
 800c064:	f7fc fdb0 	bl	8008bc8 <d_unqualified_name>
 800c068:	4683      	mov	fp, r0
 800c06a:	2800      	cmp	r0, #0
 800c06c:	f43f aab1 	beq.w	800b5d2 <d_exprlist+0x55e>
 800c070:	68e3      	ldr	r3, [r4, #12]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	2b49      	cmp	r3, #73	; 0x49
 800c076:	f47f aaac 	bne.w	800b5d2 <d_exprlist+0x55e>
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7fc fee4 	bl	8008e48 <d_template_args>
 800c080:	465a      	mov	r2, fp
 800c082:	4603      	mov	r3, r0
 800c084:	2104      	movs	r1, #4
 800c086:	4620      	mov	r0, r4
 800c088:	f7f8 f956 	bl	8004338 <d_make_comp>
 800c08c:	4683      	mov	fp, r0
 800c08e:	f7ff baa0 	b.w	800b5d2 <d_exprlist+0x55e>
 800c092:	4620      	mov	r0, r4
 800c094:	f7fb fb22 	bl	80076dc <d_type>
 800c098:	f7ff baa5 	b.w	800b5e6 <d_exprlist+0x572>
 800c09c:	4620      	mov	r0, r4
 800c09e:	f7fb fb1d 	bl	80076dc <d_type>
 800c0a2:	e707      	b.n	800beb4 <d_exprlist+0xe40>
 800c0a4:	3201      	adds	r2, #1
 800c0a6:	60e2      	str	r2, [r4, #12]
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e4cb      	b.n	800ba44 <d_exprlist+0x9d0>
 800c0ac:	785a      	ldrb	r2, [r3, #1]
 800c0ae:	2a70      	cmp	r2, #112	; 0x70
 800c0b0:	f47f aa6f 	bne.w	800b592 <d_exprlist+0x51e>
 800c0b4:	1c9a      	adds	r2, r3, #2
 800c0b6:	60e2      	str	r2, [r4, #12]
 800c0b8:	789a      	ldrb	r2, [r3, #2]
 800c0ba:	2a54      	cmp	r2, #84	; 0x54
 800c0bc:	f040 80ff 	bne.w	800c2be <d_exprlist+0x124a>
 800c0c0:	3303      	adds	r3, #3
 800c0c2:	60e3      	str	r3, [r4, #12]
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	6963      	ldr	r3, [r4, #20]
 800c0c8:	69a2      	ldr	r2, [r4, #24]
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	f280 81bc 	bge.w	800c448 <d_exprlist+0x13d4>
 800c0d0:	6922      	ldr	r2, [r4, #16]
 800c0d2:	1c59      	adds	r1, r3, #1
 800c0d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c0d8:	eb12 0b83 	adds.w	fp, r2, r3, lsl #2
 800c0dc:	6161      	str	r1, [r4, #20]
 800c0de:	f43f aa78 	beq.w	800b5d2 <d_exprlist+0x55e>
 800c0e2:	2106      	movs	r1, #6
 800c0e4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800c0e8:	f8cb 0004 	str.w	r0, [fp, #4]
 800c0ec:	f7ff ba71 	b.w	800b5d2 <d_exprlist+0x55e>
 800c0f0:	785a      	ldrb	r2, [r3, #1]
 800c0f2:	2a72      	cmp	r2, #114	; 0x72
 800c0f4:	f000 80cd 	beq.w	800c292 <d_exprlist+0x121e>
 800c0f8:	2a70      	cmp	r2, #112	; 0x70
 800c0fa:	f47f aa4a 	bne.w	800b592 <d_exprlist+0x51e>
 800c0fe:	3302      	adds	r3, #2
 800c100:	60e3      	str	r3, [r4, #12]
 800c102:	4620      	mov	r0, r4
 800c104:	f000 fa82 	bl	800c60c <d_expression_1>
 800c108:	2149      	movs	r1, #73	; 0x49
 800c10a:	4602      	mov	r2, r0
 800c10c:	2300      	movs	r3, #0
 800c10e:	4620      	mov	r0, r4
 800c110:	f7f8 f912 	bl	8004338 <d_make_comp>
 800c114:	4683      	mov	fp, r0
 800c116:	f7ff ba5c 	b.w	800b5d2 <d_exprlist+0x55e>
 800c11a:	f8dd b000 	ldr.w	fp, [sp]
 800c11e:	f7ff b8f4 	b.w	800b30a <d_exprlist+0x296>
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800c128:	2a01      	cmp	r2, #1
 800c12a:	d903      	bls.n	800c134 <d_exprlist+0x10c0>
 800c12c:	3b72      	subs	r3, #114	; 0x72
 800c12e:	2b01      	cmp	r3, #1
 800c130:	f63f ad4f 	bhi.w	800bbd2 <d_exprlist+0xb5e>
 800c134:	4620      	mov	r0, r4
 800c136:	f7fb fad1 	bl	80076dc <d_type>
 800c13a:	4683      	mov	fp, r0
 800c13c:	e54d      	b.n	800bbda <d_exprlist+0xb66>
 800c13e:	4620      	mov	r0, r4
 800c140:	f000 fa64 	bl	800c60c <d_expression_1>
 800c144:	4681      	mov	r9, r0
 800c146:	e56d      	b.n	800bc24 <d_exprlist+0xbb0>
 800c148:	9000      	str	r0, [sp, #0]
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7fc fe7c 	bl	8008e48 <d_template_args>
 800c150:	9900      	ldr	r1, [sp, #0]
 800c152:	4603      	mov	r3, r0
 800c154:	460a      	mov	r2, r1
 800c156:	4620      	mov	r0, r4
 800c158:	2104      	movs	r1, #4
 800c15a:	f7f8 f8ed 	bl	8004338 <d_make_comp>
 800c15e:	465a      	mov	r2, fp
 800c160:	4603      	mov	r3, r0
 800c162:	2101      	movs	r1, #1
 800c164:	4620      	mov	r0, r4
 800c166:	f7f8 f8e7 	bl	8004338 <d_make_comp>
 800c16a:	4683      	mov	fp, r0
 800c16c:	f7ff b8cd 	b.w	800b30a <d_exprlist+0x296>
 800c170:	4620      	mov	r0, r4
 800c172:	2145      	movs	r1, #69	; 0x45
 800c174:	f7fe ff7e 	bl	800b074 <d_exprlist>
 800c178:	4681      	mov	r9, r0
 800c17a:	e553      	b.n	800bc24 <d_exprlist+0xbb0>
 800c17c:	4620      	mov	r0, r4
 800c17e:	f7fc fe63 	bl	8008e48 <d_template_args>
 800c182:	4652      	mov	r2, sl
 800c184:	4603      	mov	r3, r0
 800c186:	2104      	movs	r1, #4
 800c188:	4620      	mov	r0, r4
 800c18a:	f7f8 f8d5 	bl	8004338 <d_make_comp>
 800c18e:	464a      	mov	r2, r9
 800c190:	4603      	mov	r3, r0
 800c192:	4620      	mov	r0, r4
 800c194:	e6ae      	b.n	800bef4 <d_exprlist+0xe80>
 800c196:	4620      	mov	r0, r4
 800c198:	2145      	movs	r1, #69	; 0x45
 800c19a:	f7fe ff6b 	bl	800b074 <d_exprlist>
 800c19e:	4683      	mov	fp, r0
 800c1a0:	e498      	b.n	800bad4 <d_exprlist+0xa60>
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 fa32 	bl	800c60c <d_expression_1>
 800c1a8:	9000      	str	r0, [sp, #0]
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f000 fa2e 	bl	800c60c <d_expression_1>
 800c1b0:	4683      	mov	fp, r0
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 fa2a 	bl	800c60c <d_expression_1>
 800c1b8:	e444      	b.n	800ba44 <d_exprlist+0x9d0>
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	2145      	movs	r1, #69	; 0x45
 800c1be:	f7fe ff59 	bl	800b074 <d_exprlist>
 800c1c2:	4683      	mov	fp, r0
 800c1c4:	e5e9      	b.n	800bd9a <d_exprlist+0xd26>
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800c1cc:	2a01      	cmp	r2, #1
 800c1ce:	d903      	bls.n	800c1d8 <d_exprlist+0x1164>
 800c1d0:	3b72      	subs	r3, #114	; 0x72
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	f63f adb8 	bhi.w	800bd48 <d_exprlist+0xcd4>
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f7fb fa7f 	bl	80076dc <d_type>
 800c1de:	9001      	str	r0, [sp, #4]
 800c1e0:	e5b6      	b.n	800bd50 <d_exprlist+0xcdc>
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	60e3      	str	r3, [r4, #12]
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	e590      	b.n	800bd0c <d_exprlist+0xc98>
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f000 fa0e 	bl	800c60c <d_expression_1>
 800c1f0:	9001      	str	r0, [sp, #4]
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 fa0a 	bl	800c60c <d_expression_1>
 800c1f8:	4683      	mov	fp, r0
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 fa06 	bl	800c60c <d_expression_1>
 800c200:	e584      	b.n	800bd0c <d_exprlist+0xc98>
 800c202:	4620      	mov	r0, r4
 800c204:	f000 fa02 	bl	800c60c <d_expression_1>
 800c208:	4683      	mov	fp, r0
 800c20a:	e5c6      	b.n	800bd9a <d_exprlist+0xd26>
 800c20c:	4620      	mov	r0, r4
 800c20e:	f7fc fe1b 	bl	8008e48 <d_template_args>
 800c212:	465a      	mov	r2, fp
 800c214:	4603      	mov	r3, r0
 800c216:	2104      	movs	r1, #4
 800c218:	4620      	mov	r0, r4
 800c21a:	f7f8 f88d 	bl	8004338 <d_make_comp>
 800c21e:	464a      	mov	r2, r9
 800c220:	4603      	mov	r3, r0
 800c222:	4620      	mov	r0, r4
 800c224:	e6b9      	b.n	800bf9a <d_exprlist+0xf26>
 800c226:	4620      	mov	r0, r4
 800c228:	f000 f9f0 	bl	800c60c <d_expression_1>
 800c22c:	4681      	mov	r9, r0
 800c22e:	4620      	mov	r0, r4
 800c230:	f000 f9ec 	bl	800c60c <d_expression_1>
 800c234:	4683      	mov	fp, r0
 800c236:	4620      	mov	r0, r4
 800c238:	f000 f9e8 	bl	800c60c <d_expression_1>
 800c23c:	e4aa      	b.n	800bb94 <d_exprlist+0xb20>
 800c23e:	3201      	adds	r2, #1
 800c240:	60e2      	str	r2, [r4, #12]
 800c242:	2000      	movs	r0, #0
 800c244:	e4a6      	b.n	800bb94 <d_exprlist+0xb20>
 800c246:	7812      	ldrb	r2, [r2, #0]
 800c248:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800c24c:	2901      	cmp	r1, #1
 800c24e:	d903      	bls.n	800c258 <d_exprlist+0x11e4>
 800c250:	3a72      	subs	r2, #114	; 0x72
 800c252:	2a01      	cmp	r2, #1
 800c254:	f63f ac15 	bhi.w	800ba82 <d_exprlist+0xa0e>
 800c258:	4620      	mov	r0, r4
 800c25a:	f7fb fa3f 	bl	80076dc <d_type>
 800c25e:	9000      	str	r0, [sp, #0]
 800c260:	e413      	b.n	800ba8a <d_exprlist+0xa16>
 800c262:	4620      	mov	r0, r4
 800c264:	f000 f9d2 	bl	800c60c <d_expression_1>
 800c268:	4683      	mov	fp, r0
 800c26a:	e433      	b.n	800bad4 <d_exprlist+0xa60>
 800c26c:	7853      	ldrb	r3, [r2, #1]
 800c26e:	2b69      	cmp	r3, #105	; 0x69
 800c270:	d02e      	beq.n	800c2d0 <d_exprlist+0x125c>
 800c272:	f04f 0a00 	mov.w	sl, #0
 800c276:	f7ff b91a 	b.w	800b4ae <d_exprlist+0x43a>
 800c27a:	4620      	mov	r0, r4
 800c27c:	f7f8 faaa 	bl	80047d4 <d_template_param>
 800c280:	4683      	mov	fp, r0
 800c282:	f7ff b9a6 	b.w	800b5d2 <d_exprlist+0x55e>
 800c286:	4620      	mov	r0, r4
 800c288:	f7fb f9c8 	bl	800761c <d_expr_primary>
 800c28c:	4683      	mov	fp, r0
 800c28e:	f7ff b9a0 	b.w	800b5d2 <d_exprlist+0x55e>
 800c292:	3302      	adds	r3, #2
 800c294:	60e3      	str	r3, [r4, #12]
 800c296:	4620      	mov	r0, r4
 800c298:	f7fb fa20 	bl	80076dc <d_type>
 800c29c:	4683      	mov	fp, r0
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f7fc fc92 	bl	8008bc8 <d_unqualified_name>
 800c2a4:	68e3      	ldr	r3, [r4, #12]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b49      	cmp	r3, #73	; 0x49
 800c2aa:	d01c      	beq.n	800c2e6 <d_exprlist+0x1272>
 800c2ac:	465a      	mov	r2, fp
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f7f8 f840 	bl	8004338 <d_make_comp>
 800c2b8:	4683      	mov	fp, r0
 800c2ba:	f7ff b98a 	b.w	800b5d2 <d_exprlist+0x55e>
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f7f8 fa70 	bl	80047a4 <d_compact_number>
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	f47f aefe 	bne.w	800c0c6 <d_exprlist+0x1052>
 800c2ca:	4683      	mov	fp, r0
 800c2cc:	f7ff b981 	b.w	800b5d2 <d_exprlist+0x55e>
 800c2d0:	3202      	adds	r2, #2
 800c2d2:	60e2      	str	r2, [r4, #12]
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	2145      	movs	r1, #69	; 0x45
 800c2d8:	f7fe fecc 	bl	800b074 <d_exprlist>
 800c2dc:	e45a      	b.n	800bb94 <d_exprlist+0xb20>
 800c2de:	f04f 0a00 	mov.w	sl, #0
 800c2e2:	f7ff b8ca 	b.w	800b47a <d_exprlist+0x406>
 800c2e6:	9001      	str	r0, [sp, #4]
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f7fc fdad 	bl	8008e48 <d_template_args>
 800c2ee:	9901      	ldr	r1, [sp, #4]
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	460a      	mov	r2, r1
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	2104      	movs	r1, #4
 800c2f8:	f7f8 f81e 	bl	8004338 <d_make_comp>
 800c2fc:	465a      	mov	r2, fp
 800c2fe:	4603      	mov	r3, r0
 800c300:	2101      	movs	r1, #1
 800c302:	4620      	mov	r0, r4
 800c304:	f7f8 f818 	bl	8004338 <d_make_comp>
 800c308:	4683      	mov	fp, r0
 800c30a:	f7ff b962 	b.w	800b5d2 <d_exprlist+0x55e>
 800c30e:	3301      	adds	r3, #1
 800c310:	60e3      	str	r3, [r4, #12]
 800c312:	4620      	mov	r0, r4
 800c314:	2145      	movs	r1, #69	; 0x45
 800c316:	f7fe fead 	bl	800b074 <d_exprlist>
 800c31a:	f7ff b953 	b.w	800b5c4 <d_exprlist+0x550>
 800c31e:	3301      	adds	r3, #1
 800c320:	60e3      	str	r3, [r4, #12]
 800c322:	4620      	mov	r0, r4
 800c324:	2145      	movs	r1, #69	; 0x45
 800c326:	f7fe fea5 	bl	800b074 <d_exprlist>
 800c32a:	f7ff b8d9 	b.w	800b4e0 <d_exprlist+0x46c>
 800c32e:	3301      	adds	r3, #1
 800c330:	60e3      	str	r3, [r4, #12]
 800c332:	4620      	mov	r0, r4
 800c334:	2145      	movs	r1, #69	; 0x45
 800c336:	f7fe fe9d 	bl	800b074 <d_exprlist>
 800c33a:	f7ff b9b6 	b.w	800b6aa <d_exprlist+0x636>
 800c33e:	3301      	adds	r3, #1
 800c340:	60e3      	str	r3, [r4, #12]
 800c342:	f7ff b9af 	b.w	800b6a4 <d_exprlist+0x630>
 800c346:	3301      	adds	r3, #1
 800c348:	60e3      	str	r3, [r4, #12]
 800c34a:	f7ff b8c6 	b.w	800b4da <d_exprlist+0x466>
 800c34e:	3301      	adds	r3, #1
 800c350:	60e3      	str	r3, [r4, #12]
 800c352:	e5e1      	b.n	800bf18 <d_exprlist+0xea4>
 800c354:	f04f 0900 	mov.w	r9, #0
 800c358:	f7ff b8cb 	b.w	800b4f2 <d_exprlist+0x47e>
 800c35c:	7853      	ldrb	r3, [r2, #1]
 800c35e:	2b69      	cmp	r3, #105	; 0x69
 800c360:	f000 8142 	beq.w	800c5e8 <d_exprlist+0x1574>
 800c364:	f04f 0900 	mov.w	r9, #0
 800c368:	f7ff b8dd 	b.w	800b526 <d_exprlist+0x4b2>
 800c36c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c370:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c372:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800c376:	f8dc b000 	ldr.w	fp, [ip]
 800c37a:	499f      	ldr	r1, [pc, #636]	; (800c5f8 <d_exprlist+0x1584>)
 800c37c:	f8cd c00c 	str.w	ip, [sp, #12]
 800c380:	3b02      	subs	r3, #2
 800c382:	441a      	add	r2, r3
 800c384:	6322      	str	r2, [r4, #48]	; 0x30
 800c386:	4658      	mov	r0, fp
 800c388:	f001 fbee 	bl	800db68 <strcmp>
 800c38c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c390:	2800      	cmp	r0, #0
 800c392:	f000 80e6 	beq.w	800c562 <d_exprlist+0x14ee>
 800c396:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d854      	bhi.n	800c448 <d_exprlist+0x13d4>
 800c39e:	e8df f003 	tbb	[pc, r3]
 800c3a2:	aed7      	.short	0xaed7
 800c3a4:	0860      	.short	0x0860
 800c3a6:	f8dd b004 	ldr.w	fp, [sp, #4]
 800c3aa:	f7ff b912 	b.w	800b5d2 <d_exprlist+0x55e>
 800c3ae:	f04f 0b00 	mov.w	fp, #0
 800c3b2:	4658      	mov	r0, fp
 800c3b4:	4991      	ldr	r1, [pc, #580]	; (800c5fc <d_exprlist+0x1588>)
 800c3b6:	f001 fbd7 	bl	800db68 <strcmp>
 800c3ba:	b3b0      	cbz	r0, 800c42a <d_exprlist+0x13b6>
 800c3bc:	f89b 3000 	ldrb.w	r3, [fp]
 800c3c0:	2b6e      	cmp	r3, #110	; 0x6e
 800c3c2:	d141      	bne.n	800c448 <d_exprlist+0x13d4>
 800c3c4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c3c8:	2b77      	cmp	r3, #119	; 0x77
 800c3ca:	d001      	beq.n	800c3d0 <d_exprlist+0x135c>
 800c3cc:	2b61      	cmp	r3, #97	; 0x61
 800c3ce:	d13b      	bne.n	800c448 <d_exprlist+0x13d4>
 800c3d0:	215f      	movs	r1, #95	; 0x5f
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f7fe fe4e 	bl	800b074 <d_exprlist>
 800c3d8:	9003      	str	r0, [sp, #12]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f7fb f97e 	bl	80076dc <d_type>
 800c3e0:	68e3      	ldr	r3, [r4, #12]
 800c3e2:	781a      	ldrb	r2, [r3, #0]
 800c3e4:	2a45      	cmp	r2, #69	; 0x45
 800c3e6:	4683      	mov	fp, r0
 800c3e8:	f000 80de 	beq.w	800c5a8 <d_exprlist+0x1534>
 800c3ec:	2a70      	cmp	r2, #112	; 0x70
 800c3ee:	d028      	beq.n	800c442 <d_exprlist+0x13ce>
 800c3f0:	2a69      	cmp	r2, #105	; 0x69
 800c3f2:	d129      	bne.n	800c448 <d_exprlist+0x13d4>
 800c3f4:	785b      	ldrb	r3, [r3, #1]
 800c3f6:	2b6c      	cmp	r3, #108	; 0x6c
 800c3f8:	d126      	bne.n	800c448 <d_exprlist+0x13d4>
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 f906 	bl	800c60c <d_expression_1>
 800c400:	465a      	mov	r2, fp
 800c402:	4603      	mov	r3, r0
 800c404:	213a      	movs	r1, #58	; 0x3a
 800c406:	4620      	mov	r0, r4
 800c408:	f7f7 ff96 	bl	8004338 <d_make_comp>
 800c40c:	9a03      	ldr	r2, [sp, #12]
 800c40e:	4603      	mov	r3, r0
 800c410:	2139      	movs	r1, #57	; 0x39
 800c412:	4620      	mov	r0, r4
 800c414:	f7f7 ff90 	bl	8004338 <d_make_comp>
 800c418:	9a01      	ldr	r2, [sp, #4]
 800c41a:	4603      	mov	r3, r0
 800c41c:	2138      	movs	r1, #56	; 0x38
 800c41e:	4620      	mov	r0, r4
 800c420:	f7f7 ff8a 	bl	8004338 <d_make_comp>
 800c424:	4683      	mov	fp, r0
 800c426:	f7ff b8d4 	b.w	800b5d2 <d_exprlist+0x55e>
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 f8ee 	bl	800c60c <d_expression_1>
 800c430:	9003      	str	r0, [sp, #12]
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f8ea 	bl	800c60c <d_expression_1>
 800c438:	4683      	mov	fp, r0
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 f8e6 	bl	800c60c <d_expression_1>
 800c440:	e7de      	b.n	800c400 <d_exprlist+0x138c>
 800c442:	785a      	ldrb	r2, [r3, #1]
 800c444:	2a69      	cmp	r2, #105	; 0x69
 800c446:	d003      	beq.n	800c450 <d_exprlist+0x13dc>
 800c448:	f04f 0b00 	mov.w	fp, #0
 800c44c:	f7ff b8c1 	b.w	800b5d2 <d_exprlist+0x55e>
 800c450:	3302      	adds	r3, #2
 800c452:	60e3      	str	r3, [r4, #12]
 800c454:	4620      	mov	r0, r4
 800c456:	2145      	movs	r1, #69	; 0x45
 800c458:	f7fe fe0c 	bl	800b074 <d_exprlist>
 800c45c:	e7d0      	b.n	800c400 <d_exprlist+0x138c>
 800c45e:	f04f 0b00 	mov.w	fp, #0
 800c462:	9b01      	ldr	r3, [sp, #4]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	785a      	ldrb	r2, [r3, #1]
 800c46a:	2a63      	cmp	r2, #99	; 0x63
 800c46c:	d03a      	beq.n	800c4e4 <d_exprlist+0x1470>
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 f8cc 	bl	800c60c <d_expression_1>
 800c474:	9003      	str	r0, [sp, #12]
 800c476:	4658      	mov	r0, fp
 800c478:	4961      	ldr	r1, [pc, #388]	; (800c600 <d_exprlist+0x158c>)
 800c47a:	f001 fb75 	bl	800db68 <strcmp>
 800c47e:	b358      	cbz	r0, 800c4d8 <d_exprlist+0x1464>
 800c480:	4658      	mov	r0, fp
 800c482:	4960      	ldr	r1, [pc, #384]	; (800c604 <d_exprlist+0x1590>)
 800c484:	f001 fb70 	bl	800db68 <strcmp>
 800c488:	b128      	cbz	r0, 800c496 <d_exprlist+0x1422>
 800c48a:	4658      	mov	r0, fp
 800c48c:	495e      	ldr	r1, [pc, #376]	; (800c608 <d_exprlist+0x1594>)
 800c48e:	f001 fb6b 	bl	800db68 <strcmp>
 800c492:	2800      	cmp	r0, #0
 800c494:	d153      	bne.n	800c53e <d_exprlist+0x14ca>
 800c496:	4620      	mov	r0, r4
 800c498:	f7fc fb96 	bl	8008bc8 <d_unqualified_name>
 800c49c:	68e3      	ldr	r3, [r4, #12]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	2b49      	cmp	r3, #73	; 0x49
 800c4a2:	4683      	mov	fp, r0
 800c4a4:	d109      	bne.n	800c4ba <d_exprlist+0x1446>
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f7fc fcce 	bl	8008e48 <d_template_args>
 800c4ac:	465a      	mov	r2, fp
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2104      	movs	r1, #4
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f7f7 ff40 	bl	8004338 <d_make_comp>
 800c4b8:	4683      	mov	fp, r0
 800c4ba:	465b      	mov	r3, fp
 800c4bc:	9a03      	ldr	r2, [sp, #12]
 800c4be:	2137      	movs	r1, #55	; 0x37
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f7f7 ff39 	bl	8004338 <d_make_comp>
 800c4c6:	9a01      	ldr	r2, [sp, #4]
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2136      	movs	r1, #54	; 0x36
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f7f7 ff33 	bl	8004338 <d_make_comp>
 800c4d2:	4683      	mov	fp, r0
 800c4d4:	f7ff b87d 	b.w	800b5d2 <d_exprlist+0x55e>
 800c4d8:	4620      	mov	r0, r4
 800c4da:	2145      	movs	r1, #69	; 0x45
 800c4dc:	f7fe fdca 	bl	800b074 <d_exprlist>
 800c4e0:	4683      	mov	fp, r0
 800c4e2:	e7ea      	b.n	800c4ba <d_exprlist+0x1446>
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800c4ea:	2a01      	cmp	r2, #1
 800c4ec:	d902      	bls.n	800c4f4 <d_exprlist+0x1480>
 800c4ee:	3b72      	subs	r3, #114	; 0x72
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d8bc      	bhi.n	800c46e <d_exprlist+0x13fa>
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f7fb f8f1 	bl	80076dc <d_type>
 800c4fa:	9003      	str	r0, [sp, #12]
 800c4fc:	e7bb      	b.n	800c476 <d_exprlist+0x1402>
 800c4fe:	f89b 3000 	ldrb.w	r3, [fp]
 800c502:	2b70      	cmp	r3, #112	; 0x70
 800c504:	d002      	beq.n	800c50c <d_exprlist+0x1498>
 800c506:	2b6d      	cmp	r3, #109	; 0x6d
 800c508:	f47f a859 	bne.w	800b5be <d_exprlist+0x54a>
 800c50c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800c510:	429a      	cmp	r2, r3
 800c512:	f47f a854 	bne.w	800b5be <d_exprlist+0x54a>
 800c516:	68e3      	ldr	r3, [r4, #12]
 800c518:	781a      	ldrb	r2, [r3, #0]
 800c51a:	2a5f      	cmp	r2, #95	; 0x5f
 800c51c:	d014      	beq.n	800c548 <d_exprlist+0x14d4>
 800c51e:	4620      	mov	r0, r4
 800c520:	f000 f874 	bl	800c60c <d_expression_1>
 800c524:	4602      	mov	r2, r0
 800c526:	4613      	mov	r3, r2
 800c528:	4620      	mov	r0, r4
 800c52a:	2137      	movs	r1, #55	; 0x37
 800c52c:	f7f7 ff04 	bl	8004338 <d_make_comp>
 800c530:	4603      	mov	r3, r0
 800c532:	9a01      	ldr	r2, [sp, #4]
 800c534:	4620      	mov	r0, r4
 800c536:	2135      	movs	r1, #53	; 0x35
 800c538:	f7f7 fefe 	bl	8004338 <d_make_comp>
 800c53c:	e6c5      	b.n	800c2ca <d_exprlist+0x1256>
 800c53e:	4620      	mov	r0, r4
 800c540:	f000 f864 	bl	800c60c <d_expression_1>
 800c544:	4683      	mov	fp, r0
 800c546:	e7b8      	b.n	800c4ba <d_exprlist+0x1446>
 800c548:	3301      	adds	r3, #1
 800c54a:	60e3      	str	r3, [r4, #12]
 800c54c:	f7ff b837 	b.w	800b5be <d_exprlist+0x54a>
 800c550:	9a01      	ldr	r2, [sp, #4]
 800c552:	4620      	mov	r0, r4
 800c554:	2134      	movs	r1, #52	; 0x34
 800c556:	2300      	movs	r3, #0
 800c558:	f7f7 feee 	bl	8004338 <d_make_comp>
 800c55c:	4683      	mov	fp, r0
 800c55e:	f7ff b838 	b.w	800b5d2 <d_exprlist+0x55e>
 800c562:	4620      	mov	r0, r4
 800c564:	f7fb f8ba 	bl	80076dc <d_type>
 800c568:	e7e2      	b.n	800c530 <d_exprlist+0x14bc>
 800c56a:	785b      	ldrb	r3, [r3, #1]
 800c56c:	2b6c      	cmp	r3, #108	; 0x6c
 800c56e:	f47f a810 	bne.w	800b592 <d_exprlist+0x51e>
 800c572:	4620      	mov	r0, r4
 800c574:	f7fb f8b2 	bl	80076dc <d_type>
 800c578:	68e3      	ldr	r3, [r4, #12]
 800c57a:	4683      	mov	fp, r0
 800c57c:	3302      	adds	r3, #2
 800c57e:	60e3      	str	r3, [r4, #12]
 800c580:	2145      	movs	r1, #69	; 0x45
 800c582:	4620      	mov	r0, r4
 800c584:	f7fe fd76 	bl	800b074 <d_exprlist>
 800c588:	465a      	mov	r2, fp
 800c58a:	4603      	mov	r3, r0
 800c58c:	2130      	movs	r1, #48	; 0x30
 800c58e:	4620      	mov	r0, r4
 800c590:	f7f7 fed2 	bl	8004338 <d_make_comp>
 800c594:	4683      	mov	fp, r0
 800c596:	f7ff b81c 	b.w	800b5d2 <d_exprlist+0x55e>
 800c59a:	785a      	ldrb	r2, [r3, #1]
 800c59c:	2a6c      	cmp	r2, #108	; 0x6c
 800c59e:	f47e aff8 	bne.w	800b592 <d_exprlist+0x51e>
 800c5a2:	f04f 0b00 	mov.w	fp, #0
 800c5a6:	e7e9      	b.n	800c57c <d_exprlist+0x1508>
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	60e3      	str	r3, [r4, #12]
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	e727      	b.n	800c400 <d_exprlist+0x138c>
 800c5b0:	9b01      	ldr	r3, [sp, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	f63f af47 	bhi.w	800c448 <d_exprlist+0x13d4>
 800c5ba:	a201      	add	r2, pc, #4	; (adr r2, 800c5c0 <d_exprlist+0x154c>)
 800c5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c0:	0800c551 	.word	0x0800c551
 800c5c4:	0800b5bf 	.word	0x0800b5bf
 800c5c8:	0800c45f 	.word	0x0800c45f
 800c5cc:	0800c3af 	.word	0x0800c3af
 800c5d0:	785a      	ldrb	r2, [r3, #1]
 800c5d2:	2a69      	cmp	r2, #105	; 0x69
 800c5d4:	f47f a977 	bne.w	800b8c6 <d_exprlist+0x852>
 800c5d8:	3302      	adds	r3, #2
 800c5da:	60e3      	str	r3, [r4, #12]
 800c5dc:	4620      	mov	r0, r4
 800c5de:	2145      	movs	r1, #69	; 0x45
 800c5e0:	f7fe fd48 	bl	800b074 <d_exprlist>
 800c5e4:	f7ff bb92 	b.w	800bd0c <d_exprlist+0xc98>
 800c5e8:	3202      	adds	r2, #2
 800c5ea:	60e2      	str	r2, [r4, #12]
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	2145      	movs	r1, #69	; 0x45
 800c5f0:	f7fe fd40 	bl	800b074 <d_exprlist>
 800c5f4:	f7ff ba26 	b.w	800ba44 <d_exprlist+0x9d0>
 800c5f8:	0801dfe8 	.word	0x0801dfe8
 800c5fc:	0801dd28 	.word	0x0801dd28
 800c600:	0801dd20 	.word	0x0801dd20
 800c604:	0801ddf4 	.word	0x0801ddf4
 800c608:	0801ddf8 	.word	0x0801ddf8

0800c60c <d_expression_1>:
 800c60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c610:	68c1      	ldr	r1, [r0, #12]
 800c612:	780b      	ldrb	r3, [r1, #0]
 800c614:	2b4c      	cmp	r3, #76	; 0x4c
 800c616:	4604      	mov	r4, r0
 800c618:	f000 8099 	beq.w	800c74e <d_expression_1+0x142>
 800c61c:	2b54      	cmp	r3, #84	; 0x54
 800c61e:	f000 809a 	beq.w	800c756 <d_expression_1+0x14a>
 800c622:	2b73      	cmp	r3, #115	; 0x73
 800c624:	d058      	beq.n	800c6d8 <d_expression_1+0xcc>
 800c626:	2b66      	cmp	r3, #102	; 0x66
 800c628:	d037      	beq.n	800c69a <d_expression_1+0x8e>
 800c62a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c62e:	2a09      	cmp	r2, #9
 800c630:	d80c      	bhi.n	800c64c <d_expression_1+0x40>
 800c632:	4620      	mov	r0, r4
 800c634:	f7fc fac8 	bl	8008bc8 <d_unqualified_name>
 800c638:	4605      	mov	r5, r0
 800c63a:	2800      	cmp	r0, #0
 800c63c:	d07e      	beq.n	800c73c <d_expression_1+0x130>
 800c63e:	68e3      	ldr	r3, [r4, #12]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	2b49      	cmp	r3, #73	; 0x49
 800c644:	f000 80a0 	beq.w	800c788 <d_expression_1+0x17c>
 800c648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c64c:	2b6f      	cmp	r3, #111	; 0x6f
 800c64e:	d078      	beq.n	800c742 <d_expression_1+0x136>
 800c650:	2b69      	cmp	r3, #105	; 0x69
 800c652:	d052      	beq.n	800c6fa <d_expression_1+0xee>
 800c654:	2b74      	cmp	r3, #116	; 0x74
 800c656:	d103      	bne.n	800c660 <d_expression_1+0x54>
 800c658:	784b      	ldrb	r3, [r1, #1]
 800c65a:	2b6c      	cmp	r3, #108	; 0x6c
 800c65c:	f000 812f 	beq.w	800c8be <d_expression_1+0x2b2>
 800c660:	4620      	mov	r0, r4
 800c662:	f7fc fa2f 	bl	8008ac4 <d_operator_name>
 800c666:	4605      	mov	r5, r0
 800c668:	2800      	cmp	r0, #0
 800c66a:	d067      	beq.n	800c73c <d_expression_1+0x130>
 800c66c:	7803      	ldrb	r3, [r0, #0]
 800c66e:	2b31      	cmp	r3, #49	; 0x31
 800c670:	d075      	beq.n	800c75e <d_expression_1+0x152>
 800c672:	2b32      	cmp	r3, #50	; 0x32
 800c674:	d053      	beq.n	800c71e <d_expression_1+0x112>
 800c676:	2b33      	cmp	r3, #51	; 0x33
 800c678:	d160      	bne.n	800c73c <d_expression_1+0x130>
 800c67a:	68e3      	ldr	r3, [r4, #12]
 800c67c:	781a      	ldrb	r2, [r3, #0]
 800c67e:	2a5f      	cmp	r2, #95	; 0x5f
 800c680:	f000 8122 	beq.w	800c8c8 <d_expression_1+0x2bc>
 800c684:	4620      	mov	r0, r4
 800c686:	f7ff ffc1 	bl	800c60c <d_expression_1>
 800c68a:	4603      	mov	r3, r0
 800c68c:	4620      	mov	r0, r4
 800c68e:	462a      	mov	r2, r5
 800c690:	2135      	movs	r1, #53	; 0x35
 800c692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c696:	f7f7 be4f 	b.w	8004338 <d_make_comp>
 800c69a:	784b      	ldrb	r3, [r1, #1]
 800c69c:	2b70      	cmp	r3, #112	; 0x70
 800c69e:	d1df      	bne.n	800c660 <d_expression_1+0x54>
 800c6a0:	1c8b      	adds	r3, r1, #2
 800c6a2:	60c3      	str	r3, [r0, #12]
 800c6a4:	788b      	ldrb	r3, [r1, #2]
 800c6a6:	2b54      	cmp	r3, #84	; 0x54
 800c6a8:	f000 808f 	beq.w	800c7ca <d_expression_1+0x1be>
 800c6ac:	f7f8 f87a 	bl	80047a4 <d_compact_number>
 800c6b0:	1c45      	adds	r5, r0, #1
 800c6b2:	d043      	beq.n	800c73c <d_expression_1+0x130>
 800c6b4:	6963      	ldr	r3, [r4, #20]
 800c6b6:	69a2      	ldr	r2, [r4, #24]
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	da3f      	bge.n	800c73c <d_expression_1+0x130>
 800c6bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800c6c0:	6921      	ldr	r1, [r4, #16]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	0092      	lsls	r2, r2, #2
 800c6c6:	6163      	str	r3, [r4, #20]
 800c6c8:	188b      	adds	r3, r1, r2
 800c6ca:	d037      	beq.n	800c73c <d_expression_1+0x130>
 800c6cc:	2006      	movs	r0, #6
 800c6ce:	5488      	strb	r0, [r1, r2]
 800c6d0:	605d      	str	r5, [r3, #4]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d8:	784b      	ldrb	r3, [r1, #1]
 800c6da:	2b72      	cmp	r3, #114	; 0x72
 800c6dc:	d05f      	beq.n	800c79e <d_expression_1+0x192>
 800c6de:	2b70      	cmp	r3, #112	; 0x70
 800c6e0:	d1be      	bne.n	800c660 <d_expression_1+0x54>
 800c6e2:	3102      	adds	r1, #2
 800c6e4:	60c1      	str	r1, [r0, #12]
 800c6e6:	f7ff ff91 	bl	800c60c <d_expression_1>
 800c6ea:	2149      	movs	r1, #73	; 0x49
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f6:	f7f7 be1f 	b.w	8004338 <d_make_comp>
 800c6fa:	784b      	ldrb	r3, [r1, #1]
 800c6fc:	2b6c      	cmp	r3, #108	; 0x6c
 800c6fe:	d1af      	bne.n	800c660 <d_expression_1+0x54>
 800c700:	2500      	movs	r5, #0
 800c702:	3102      	adds	r1, #2
 800c704:	60e1      	str	r1, [r4, #12]
 800c706:	4620      	mov	r0, r4
 800c708:	2145      	movs	r1, #69	; 0x45
 800c70a:	f7fe fcb3 	bl	800b074 <d_exprlist>
 800c70e:	462a      	mov	r2, r5
 800c710:	4603      	mov	r3, r0
 800c712:	2130      	movs	r1, #48	; 0x30
 800c714:	4620      	mov	r0, r4
 800c716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c71a:	f7f7 be0d 	b.w	8004338 <d_make_comp>
 800c71e:	686b      	ldr	r3, [r5, #4]
 800c720:	2b03      	cmp	r3, #3
 800c722:	d80b      	bhi.n	800c73c <d_expression_1+0x130>
 800c724:	a201      	add	r2, pc, #4	; (adr r2, 800c72c <d_expression_1+0x120>)
 800c726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72a:	bf00      	nop
 800c72c:	0800c7d3 	.word	0x0800c7d3
 800c730:	0800c685 	.word	0x0800c685
 800c734:	0800c85d 	.word	0x0800c85d
 800c738:	0800c7e3 	.word	0x0800c7e3
 800c73c:	2000      	movs	r0, #0
 800c73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c742:	784b      	ldrb	r3, [r1, #1]
 800c744:	2b6e      	cmp	r3, #110	; 0x6e
 800c746:	d18b      	bne.n	800c660 <d_expression_1+0x54>
 800c748:	3102      	adds	r1, #2
 800c74a:	60c1      	str	r1, [r0, #12]
 800c74c:	e771      	b.n	800c632 <d_expression_1+0x26>
 800c74e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c752:	f7fa bf63 	b.w	800761c <d_expr_primary>
 800c756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c75a:	f7f8 b83b 	b.w	80047d4 <d_template_param>
 800c75e:	6847      	ldr	r7, [r0, #4]
 800c760:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	683e      	ldr	r6, [r7, #0]
 800c766:	4995      	ldr	r1, [pc, #596]	; (800c9bc <d_expression_1+0x3b0>)
 800c768:	3b02      	subs	r3, #2
 800c76a:	4413      	add	r3, r2
 800c76c:	6323      	str	r3, [r4, #48]	; 0x30
 800c76e:	4630      	mov	r0, r6
 800c770:	f001 f9fa 	bl	800db68 <strcmp>
 800c774:	2800      	cmp	r0, #0
 800c776:	f000 80c8 	beq.w	800c90a <d_expression_1+0x2fe>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2b03      	cmp	r3, #3
 800c77e:	d8dd      	bhi.n	800c73c <d_expression_1+0x130>
 800c780:	e8df f003 	tbb	[pc, r3]
 800c784:	306daa27 	.word	0x306daa27
 800c788:	4620      	mov	r0, r4
 800c78a:	f7fc fb5d 	bl	8008e48 <d_template_args>
 800c78e:	462a      	mov	r2, r5
 800c790:	4603      	mov	r3, r0
 800c792:	2104      	movs	r1, #4
 800c794:	4620      	mov	r0, r4
 800c796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c79a:	f7f7 bdcd 	b.w	8004338 <d_make_comp>
 800c79e:	3102      	adds	r1, #2
 800c7a0:	60c1      	str	r1, [r0, #12]
 800c7a2:	f7fa ff9b 	bl	80076dc <d_type>
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f7fc fa0d 	bl	8008bc8 <d_unqualified_name>
 800c7ae:	68e3      	ldr	r3, [r4, #12]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2b49      	cmp	r3, #73	; 0x49
 800c7b4:	4606      	mov	r6, r0
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 80cc 	beq.w	800c954 <d_expression_1+0x348>
 800c7bc:	462a      	mov	r2, r5
 800c7be:	4633      	mov	r3, r6
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c6:	f7f7 bdb7 	b.w	8004338 <d_make_comp>
 800c7ca:	3103      	adds	r1, #3
 800c7cc:	60c1      	str	r1, [r0, #12]
 800c7ce:	2500      	movs	r5, #0
 800c7d0:	e770      	b.n	800c6b4 <d_expression_1+0xa8>
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	462a      	mov	r2, r5
 800c7d6:	2134      	movs	r1, #52	; 0x34
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7de:	f7f7 bdab 	b.w	8004338 <d_make_comp>
 800c7e2:	2600      	movs	r6, #0
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	4976      	ldr	r1, [pc, #472]	; (800c9c0 <d_expression_1+0x3b4>)
 800c7e8:	f001 f9be 	bl	800db68 <strcmp>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	f000 8097 	beq.w	800c920 <d_expression_1+0x314>
 800c7f2:	7833      	ldrb	r3, [r6, #0]
 800c7f4:	2b6e      	cmp	r3, #110	; 0x6e
 800c7f6:	d1a1      	bne.n	800c73c <d_expression_1+0x130>
 800c7f8:	7873      	ldrb	r3, [r6, #1]
 800c7fa:	2b77      	cmp	r3, #119	; 0x77
 800c7fc:	d001      	beq.n	800c802 <d_expression_1+0x1f6>
 800c7fe:	2b61      	cmp	r3, #97	; 0x61
 800c800:	d19c      	bne.n	800c73c <d_expression_1+0x130>
 800c802:	215f      	movs	r1, #95	; 0x5f
 800c804:	4620      	mov	r0, r4
 800c806:	f7fe fc35 	bl	800b074 <d_exprlist>
 800c80a:	4606      	mov	r6, r0
 800c80c:	4620      	mov	r0, r4
 800c80e:	f7fa ff65 	bl	80076dc <d_type>
 800c812:	68e3      	ldr	r3, [r4, #12]
 800c814:	7819      	ldrb	r1, [r3, #0]
 800c816:	2945      	cmp	r1, #69	; 0x45
 800c818:	4607      	mov	r7, r0
 800c81a:	f000 80b0 	beq.w	800c97e <d_expression_1+0x372>
 800c81e:	2970      	cmp	r1, #112	; 0x70
 800c820:	f000 80bc 	beq.w	800c99c <d_expression_1+0x390>
 800c824:	2969      	cmp	r1, #105	; 0x69
 800c826:	d189      	bne.n	800c73c <d_expression_1+0x130>
 800c828:	785b      	ldrb	r3, [r3, #1]
 800c82a:	2b6c      	cmp	r3, #108	; 0x6c
 800c82c:	d186      	bne.n	800c73c <d_expression_1+0x130>
 800c82e:	4620      	mov	r0, r4
 800c830:	f7ff feec 	bl	800c60c <d_expression_1>
 800c834:	4603      	mov	r3, r0
 800c836:	463a      	mov	r2, r7
 800c838:	4620      	mov	r0, r4
 800c83a:	213a      	movs	r1, #58	; 0x3a
 800c83c:	f7f7 fd7c 	bl	8004338 <d_make_comp>
 800c840:	4632      	mov	r2, r6
 800c842:	4603      	mov	r3, r0
 800c844:	2139      	movs	r1, #57	; 0x39
 800c846:	4620      	mov	r0, r4
 800c848:	f7f7 fd76 	bl	8004338 <d_make_comp>
 800c84c:	462a      	mov	r2, r5
 800c84e:	4603      	mov	r3, r0
 800c850:	2138      	movs	r1, #56	; 0x38
 800c852:	4620      	mov	r0, r4
 800c854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c858:	f7f7 bd6e 	b.w	8004338 <d_make_comp>
 800c85c:	2600      	movs	r6, #0
 800c85e:	686b      	ldr	r3, [r5, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	785a      	ldrb	r2, [r3, #1]
 800c864:	2a63      	cmp	r2, #99	; 0x63
 800c866:	d068      	beq.n	800c93a <d_expression_1+0x32e>
 800c868:	4620      	mov	r0, r4
 800c86a:	f7ff fecf 	bl	800c60c <d_expression_1>
 800c86e:	4607      	mov	r7, r0
 800c870:	4630      	mov	r0, r6
 800c872:	4954      	ldr	r1, [pc, #336]	; (800c9c4 <d_expression_1+0x3b8>)
 800c874:	f001 f978 	bl	800db68 <strcmp>
 800c878:	2800      	cmp	r0, #0
 800c87a:	d04b      	beq.n	800c914 <d_expression_1+0x308>
 800c87c:	4630      	mov	r0, r6
 800c87e:	4952      	ldr	r1, [pc, #328]	; (800c9c8 <d_expression_1+0x3bc>)
 800c880:	f001 f972 	bl	800db68 <strcmp>
 800c884:	b128      	cbz	r0, 800c892 <d_expression_1+0x286>
 800c886:	4630      	mov	r0, r6
 800c888:	4950      	ldr	r1, [pc, #320]	; (800c9cc <d_expression_1+0x3c0>)
 800c88a:	f001 f96d 	bl	800db68 <strcmp>
 800c88e:	2800      	cmp	r0, #0
 800c890:	d170      	bne.n	800c974 <d_expression_1+0x368>
 800c892:	4620      	mov	r0, r4
 800c894:	f7fc f998 	bl	8008bc8 <d_unqualified_name>
 800c898:	68e3      	ldr	r3, [r4, #12]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b49      	cmp	r3, #73	; 0x49
 800c89e:	4606      	mov	r6, r0
 800c8a0:	d071      	beq.n	800c986 <d_expression_1+0x37a>
 800c8a2:	463a      	mov	r2, r7
 800c8a4:	4633      	mov	r3, r6
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	2137      	movs	r1, #55	; 0x37
 800c8aa:	f7f7 fd45 	bl	8004338 <d_make_comp>
 800c8ae:	462a      	mov	r2, r5
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2136      	movs	r1, #54	; 0x36
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ba:	f7f7 bd3d 	b.w	8004338 <d_make_comp>
 800c8be:	f7fa ff0d 	bl	80076dc <d_type>
 800c8c2:	68e1      	ldr	r1, [r4, #12]
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	e71c      	b.n	800c702 <d_expression_1+0xf6>
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	60e3      	str	r3, [r4, #12]
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	2145      	movs	r1, #69	; 0x45
 800c8d0:	f7fe fbd0 	bl	800b074 <d_exprlist>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	e6d9      	b.n	800c68c <d_expression_1+0x80>
 800c8d8:	7833      	ldrb	r3, [r6, #0]
 800c8da:	2b70      	cmp	r3, #112	; 0x70
 800c8dc:	d002      	beq.n	800c8e4 <d_expression_1+0x2d8>
 800c8de:	2b6d      	cmp	r3, #109	; 0x6d
 800c8e0:	f47f aed0 	bne.w	800c684 <d_expression_1+0x78>
 800c8e4:	7872      	ldrb	r2, [r6, #1]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	f47f aecc 	bne.w	800c684 <d_expression_1+0x78>
 800c8ec:	68e3      	ldr	r3, [r4, #12]
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	2a5f      	cmp	r2, #95	; 0x5f
 800c8f2:	d05f      	beq.n	800c9b4 <d_expression_1+0x3a8>
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f7ff fe89 	bl	800c60c <d_expression_1>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	4620      	mov	r0, r4
 800c900:	2137      	movs	r1, #55	; 0x37
 800c902:	f7f7 fd19 	bl	8004338 <d_make_comp>
 800c906:	4603      	mov	r3, r0
 800c908:	e6c0      	b.n	800c68c <d_expression_1+0x80>
 800c90a:	4620      	mov	r0, r4
 800c90c:	f7fa fee6 	bl	80076dc <d_type>
 800c910:	4603      	mov	r3, r0
 800c912:	e6bb      	b.n	800c68c <d_expression_1+0x80>
 800c914:	4620      	mov	r0, r4
 800c916:	2145      	movs	r1, #69	; 0x45
 800c918:	f7fe fbac 	bl	800b074 <d_exprlist>
 800c91c:	4606      	mov	r6, r0
 800c91e:	e7c0      	b.n	800c8a2 <d_expression_1+0x296>
 800c920:	4620      	mov	r0, r4
 800c922:	f7ff fe73 	bl	800c60c <d_expression_1>
 800c926:	4606      	mov	r6, r0
 800c928:	4620      	mov	r0, r4
 800c92a:	f7ff fe6f 	bl	800c60c <d_expression_1>
 800c92e:	4607      	mov	r7, r0
 800c930:	4620      	mov	r0, r4
 800c932:	f7ff fe6b 	bl	800c60c <d_expression_1>
 800c936:	4603      	mov	r3, r0
 800c938:	e77d      	b.n	800c836 <d_expression_1+0x22a>
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800c940:	2a01      	cmp	r2, #1
 800c942:	d902      	bls.n	800c94a <d_expression_1+0x33e>
 800c944:	3b72      	subs	r3, #114	; 0x72
 800c946:	2b01      	cmp	r3, #1
 800c948:	d88e      	bhi.n	800c868 <d_expression_1+0x25c>
 800c94a:	4620      	mov	r0, r4
 800c94c:	f7fa fec6 	bl	80076dc <d_type>
 800c950:	4607      	mov	r7, r0
 800c952:	e78d      	b.n	800c870 <d_expression_1+0x264>
 800c954:	f7fc fa78 	bl	8008e48 <d_template_args>
 800c958:	4632      	mov	r2, r6
 800c95a:	4603      	mov	r3, r0
 800c95c:	2104      	movs	r1, #4
 800c95e:	4620      	mov	r0, r4
 800c960:	f7f7 fcea 	bl	8004338 <d_make_comp>
 800c964:	462a      	mov	r2, r5
 800c966:	4603      	mov	r3, r0
 800c968:	2101      	movs	r1, #1
 800c96a:	4620      	mov	r0, r4
 800c96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c970:	f7f7 bce2 	b.w	8004338 <d_make_comp>
 800c974:	4620      	mov	r0, r4
 800c976:	f7ff fe49 	bl	800c60c <d_expression_1>
 800c97a:	4606      	mov	r6, r0
 800c97c:	e791      	b.n	800c8a2 <d_expression_1+0x296>
 800c97e:	3301      	adds	r3, #1
 800c980:	60e3      	str	r3, [r4, #12]
 800c982:	2300      	movs	r3, #0
 800c984:	e757      	b.n	800c836 <d_expression_1+0x22a>
 800c986:	4620      	mov	r0, r4
 800c988:	f7fc fa5e 	bl	8008e48 <d_template_args>
 800c98c:	4632      	mov	r2, r6
 800c98e:	4603      	mov	r3, r0
 800c990:	2104      	movs	r1, #4
 800c992:	4620      	mov	r0, r4
 800c994:	f7f7 fcd0 	bl	8004338 <d_make_comp>
 800c998:	4606      	mov	r6, r0
 800c99a:	e782      	b.n	800c8a2 <d_expression_1+0x296>
 800c99c:	785a      	ldrb	r2, [r3, #1]
 800c99e:	2a69      	cmp	r2, #105	; 0x69
 800c9a0:	f47f aecc 	bne.w	800c73c <d_expression_1+0x130>
 800c9a4:	3302      	adds	r3, #2
 800c9a6:	60e3      	str	r3, [r4, #12]
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	2145      	movs	r1, #69	; 0x45
 800c9ac:	f7fe fb62 	bl	800b074 <d_exprlist>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	e740      	b.n	800c836 <d_expression_1+0x22a>
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60e3      	str	r3, [r4, #12]
 800c9b8:	e664      	b.n	800c684 <d_expression_1+0x78>
 800c9ba:	bf00      	nop
 800c9bc:	0801dfe8 	.word	0x0801dfe8
 800c9c0:	0801dd28 	.word	0x0801dd28
 800c9c4:	0801dd20 	.word	0x0801dd20
 800c9c8:	0801ddf4 	.word	0x0801ddf4
 800c9cc:	0801ddf8 	.word	0x0801ddf8

0800c9d0 <__cxa_demangle>:
 800c9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	b378      	cbz	r0, 800ca38 <__cxa_demangle+0x68>
 800c9d8:	b101      	cbz	r1, 800c9dc <__cxa_demangle+0xc>
 800c9da:	b36a      	cbz	r2, 800ca38 <__cxa_demangle+0x68>
 800c9dc:	2400      	movs	r4, #0
 800c9de:	4617      	mov	r7, r2
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	466a      	mov	r2, sp
 800c9e4:	4929      	ldr	r1, [pc, #164]	; (800ca8c <__cxa_demangle+0xbc>)
 800c9e6:	9400      	str	r4, [sp, #0]
 800c9e8:	461e      	mov	r6, r3
 800c9ea:	9401      	str	r4, [sp, #4]
 800c9ec:	9402      	str	r4, [sp, #8]
 800c9ee:	9403      	str	r4, [sp, #12]
 800c9f0:	f7fe f9e0 	bl	800adb4 <d_demangle_callback.constprop.16>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d03d      	beq.n	800ca74 <__cxa_demangle+0xa4>
 800c9f8:	9b03      	ldr	r3, [sp, #12]
 800c9fa:	b1d3      	cbz	r3, 800ca32 <__cxa_demangle+0x62>
 800c9fc:	f04f 0801 	mov.w	r8, #1
 800ca00:	9c00      	ldr	r4, [sp, #0]
 800ca02:	b33c      	cbz	r4, 800ca54 <__cxa_demangle+0x84>
 800ca04:	b39d      	cbz	r5, 800ca6e <__cxa_demangle+0x9e>
 800ca06:	4620      	mov	r0, r4
 800ca08:	f00a fffa 	bl	8017a00 <strlen>
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	4298      	cmp	r0, r3
 800ca10:	d21a      	bcs.n	800ca48 <__cxa_demangle+0x78>
 800ca12:	1c42      	adds	r2, r0, #1
 800ca14:	4621      	mov	r1, r4
 800ca16:	4628      	mov	r0, r5
 800ca18:	f001 f808 	bl	800da2c <memcpy>
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f00a f989 	bl	8016d34 <free>
 800ca22:	462c      	mov	r4, r5
 800ca24:	b30e      	cbz	r6, 800ca6a <__cxa_demangle+0x9a>
 800ca26:	2300      	movs	r3, #0
 800ca28:	4620      	mov	r0, r4
 800ca2a:	6033      	str	r3, [r6, #0]
 800ca2c:	b004      	add	sp, #16
 800ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca32:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ca36:	e7e3      	b.n	800ca00 <__cxa_demangle+0x30>
 800ca38:	b19b      	cbz	r3, 800ca62 <__cxa_demangle+0x92>
 800ca3a:	f06f 0202 	mvn.w	r2, #2
 800ca3e:	2000      	movs	r0, #0
 800ca40:	601a      	str	r2, [r3, #0]
 800ca42:	b004      	add	sp, #16
 800ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca48:	4628      	mov	r0, r5
 800ca4a:	f00a f973 	bl	8016d34 <free>
 800ca4e:	f8c7 8000 	str.w	r8, [r7]
 800ca52:	e7e7      	b.n	800ca24 <__cxa_demangle+0x54>
 800ca54:	b12e      	cbz	r6, 800ca62 <__cxa_demangle+0x92>
 800ca56:	f1b8 0f01 	cmp.w	r8, #1
 800ca5a:	d011      	beq.n	800ca80 <__cxa_demangle+0xb0>
 800ca5c:	f06f 0301 	mvn.w	r3, #1
 800ca60:	6033      	str	r3, [r6, #0]
 800ca62:	2000      	movs	r0, #0
 800ca64:	b004      	add	sp, #16
 800ca66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	e7de      	b.n	800ca2c <__cxa_demangle+0x5c>
 800ca6e:	2f00      	cmp	r7, #0
 800ca70:	d1ed      	bne.n	800ca4e <__cxa_demangle+0x7e>
 800ca72:	e7d7      	b.n	800ca24 <__cxa_demangle+0x54>
 800ca74:	9800      	ldr	r0, [sp, #0]
 800ca76:	f00a f95d 	bl	8016d34 <free>
 800ca7a:	2e00      	cmp	r6, #0
 800ca7c:	d1ee      	bne.n	800ca5c <__cxa_demangle+0x8c>
 800ca7e:	e7f0      	b.n	800ca62 <__cxa_demangle+0x92>
 800ca80:	f04f 33ff 	mov.w	r3, #4294967295
 800ca84:	4620      	mov	r0, r4
 800ca86:	6033      	str	r3, [r6, #0]
 800ca88:	e7d0      	b.n	800ca2c <__cxa_demangle+0x5c>
 800ca8a:	bf00      	nop
 800ca8c:	080049dd 	.word	0x080049dd

0800ca90 <__gcclibcxx_demangle_callback>:
 800ca90:	b160      	cbz	r0, 800caac <__gcclibcxx_demangle_callback+0x1c>
 800ca92:	b508      	push	{r3, lr}
 800ca94:	b139      	cbz	r1, 800caa6 <__gcclibcxx_demangle_callback+0x16>
 800ca96:	f7fe f98d 	bl	800adb4 <d_demangle_callback.constprop.16>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	bf0c      	ite	eq
 800ca9e:	f06f 0001 	mvneq.w	r0, #1
 800caa2:	2000      	movne	r0, #0
 800caa4:	bd08      	pop	{r3, pc}
 800caa6:	f06f 0002 	mvn.w	r0, #2
 800caaa:	bd08      	pop	{r3, pc}
 800caac:	f06f 0002 	mvn.w	r0, #2
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop

0800cab4 <selfrel_offset31>:
 800cab4:	6803      	ldr	r3, [r0, #0]
 800cab6:	005a      	lsls	r2, r3, #1
 800cab8:	bf4c      	ite	mi
 800caba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cabe:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800cac2:	4418      	add	r0, r3
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop

0800cac8 <search_EIT_table>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	b083      	sub	sp, #12
 800cace:	b399      	cbz	r1, 800cb38 <search_EIT_table+0x70>
 800cad0:	1e4b      	subs	r3, r1, #1
 800cad2:	4617      	mov	r7, r2
 800cad4:	4605      	mov	r5, r0
 800cad6:	9301      	str	r3, [sp, #4]
 800cad8:	4698      	mov	r8, r3
 800cada:	2600      	movs	r6, #0
 800cadc:	eb06 0408 	add.w	r4, r6, r8
 800cae0:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800cae4:	1064      	asrs	r4, r4, #1
 800cae6:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 800caea:	eb05 0b0a 	add.w	fp, r5, sl
 800caee:	4658      	mov	r0, fp
 800caf0:	f7ff ffe0 	bl	800cab4 <selfrel_offset31>
 800caf4:	9b01      	ldr	r3, [sp, #4]
 800caf6:	4681      	mov	r9, r0
 800caf8:	42a3      	cmp	r3, r4
 800cafa:	f10a 0008 	add.w	r0, sl, #8
 800cafe:	4428      	add	r0, r5
 800cb00:	d00e      	beq.n	800cb20 <search_EIT_table+0x58>
 800cb02:	f7ff ffd7 	bl	800cab4 <selfrel_offset31>
 800cb06:	45b9      	cmp	r9, r7
 800cb08:	f100 30ff 	add.w	r0, r0, #4294967295
 800cb0c:	d904      	bls.n	800cb18 <search_EIT_table+0x50>
 800cb0e:	42b4      	cmp	r4, r6
 800cb10:	d00c      	beq.n	800cb2c <search_EIT_table+0x64>
 800cb12:	f104 38ff 	add.w	r8, r4, #4294967295
 800cb16:	e7e1      	b.n	800cadc <search_EIT_table+0x14>
 800cb18:	42b8      	cmp	r0, r7
 800cb1a:	d203      	bcs.n	800cb24 <search_EIT_table+0x5c>
 800cb1c:	1c66      	adds	r6, r4, #1
 800cb1e:	e7dd      	b.n	800cadc <search_EIT_table+0x14>
 800cb20:	45b9      	cmp	r9, r7
 800cb22:	d8f4      	bhi.n	800cb0e <search_EIT_table+0x46>
 800cb24:	4658      	mov	r0, fp
 800cb26:	b003      	add	sp, #12
 800cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2c:	f04f 0b00 	mov.w	fp, #0
 800cb30:	4658      	mov	r0, fp
 800cb32:	b003      	add	sp, #12
 800cb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb38:	468b      	mov	fp, r1
 800cb3a:	4658      	mov	r0, fp
 800cb3c:	b003      	add	sp, #12
 800cb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb42:	bf00      	nop

0800cb44 <__gnu_unwind_get_pr_addr>:
 800cb44:	2801      	cmp	r0, #1
 800cb46:	d007      	beq.n	800cb58 <__gnu_unwind_get_pr_addr+0x14>
 800cb48:	2802      	cmp	r0, #2
 800cb4a:	d007      	beq.n	800cb5c <__gnu_unwind_get_pr_addr+0x18>
 800cb4c:	4b04      	ldr	r3, [pc, #16]	; (800cb60 <__gnu_unwind_get_pr_addr+0x1c>)
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	bf0c      	ite	eq
 800cb52:	4618      	moveq	r0, r3
 800cb54:	2000      	movne	r0, #0
 800cb56:	4770      	bx	lr
 800cb58:	4802      	ldr	r0, [pc, #8]	; (800cb64 <__gnu_unwind_get_pr_addr+0x20>)
 800cb5a:	4770      	bx	lr
 800cb5c:	4802      	ldr	r0, [pc, #8]	; (800cb68 <__gnu_unwind_get_pr_addr+0x24>)
 800cb5e:	4770      	bx	lr
 800cb60:	0800d251 	.word	0x0800d251
 800cb64:	0800d255 	.word	0x0800d255
 800cb68:	0800d259 	.word	0x0800d259

0800cb6c <get_eit_entry>:
 800cb6c:	b530      	push	{r4, r5, lr}
 800cb6e:	4b24      	ldr	r3, [pc, #144]	; (800cc00 <get_eit_entry+0x94>)
 800cb70:	b083      	sub	sp, #12
 800cb72:	4604      	mov	r4, r0
 800cb74:	1e8d      	subs	r5, r1, #2
 800cb76:	b37b      	cbz	r3, 800cbd8 <get_eit_entry+0x6c>
 800cb78:	4628      	mov	r0, r5
 800cb7a:	a901      	add	r1, sp, #4
 800cb7c:	f3af 8000 	nop.w
 800cb80:	b320      	cbz	r0, 800cbcc <get_eit_entry+0x60>
 800cb82:	9901      	ldr	r1, [sp, #4]
 800cb84:	462a      	mov	r2, r5
 800cb86:	f7ff ff9f 	bl	800cac8 <search_EIT_table>
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	b1f0      	cbz	r0, 800cbcc <get_eit_entry+0x60>
 800cb8e:	f7ff ff91 	bl	800cab4 <selfrel_offset31>
 800cb92:	686b      	ldr	r3, [r5, #4]
 800cb94:	64a0      	str	r0, [r4, #72]	; 0x48
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d012      	beq.n	800cbc0 <get_eit_entry+0x54>
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f105 0004 	add.w	r0, r5, #4
 800cba0:	db20      	blt.n	800cbe4 <get_eit_entry+0x78>
 800cba2:	f7ff ff87 	bl	800cab4 <selfrel_offset31>
 800cba6:	2300      	movs	r3, #0
 800cba8:	64e0      	str	r0, [r4, #76]	; 0x4c
 800cbaa:	6523      	str	r3, [r4, #80]	; 0x50
 800cbac:	6803      	ldr	r3, [r0, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	db1c      	blt.n	800cbec <get_eit_entry+0x80>
 800cbb2:	f7ff ff7f 	bl	800cab4 <selfrel_offset31>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	6120      	str	r0, [r4, #16]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	b003      	add	sp, #12
 800cbbe:	bd30      	pop	{r4, r5, pc}
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	6123      	str	r3, [r4, #16]
 800cbc4:	2305      	movs	r3, #5
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	b003      	add	sp, #12
 800cbca:	bd30      	pop	{r4, r5, pc}
 800cbcc:	2300      	movs	r3, #0
 800cbce:	6123      	str	r3, [r4, #16]
 800cbd0:	2309      	movs	r3, #9
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	b003      	add	sp, #12
 800cbd6:	bd30      	pop	{r4, r5, pc}
 800cbd8:	490a      	ldr	r1, [pc, #40]	; (800cc04 <get_eit_entry+0x98>)
 800cbda:	480b      	ldr	r0, [pc, #44]	; (800cc08 <get_eit_entry+0x9c>)
 800cbdc:	1a09      	subs	r1, r1, r0
 800cbde:	10c9      	asrs	r1, r1, #3
 800cbe0:	9101      	str	r1, [sp, #4]
 800cbe2:	e7cf      	b.n	800cb84 <get_eit_entry+0x18>
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	64e0      	str	r0, [r4, #76]	; 0x4c
 800cbe8:	6523      	str	r3, [r4, #80]	; 0x50
 800cbea:	e7df      	b.n	800cbac <get_eit_entry+0x40>
 800cbec:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800cbf0:	f7ff ffa8 	bl	800cb44 <__gnu_unwind_get_pr_addr>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	6120      	str	r0, [r4, #16]
 800cbf8:	bf0c      	ite	eq
 800cbfa:	2309      	moveq	r3, #9
 800cbfc:	2300      	movne	r3, #0
 800cbfe:	e7dc      	b.n	800cbba <get_eit_entry+0x4e>
 800cc00:	00000000 	.word	0x00000000
 800cc04:	0801edf8 	.word	0x0801edf8
 800cc08:	0801e758 	.word	0x0801e758

0800cc0c <restore_non_core_regs>:
 800cc0c:	6803      	ldr	r3, [r0, #0]
 800cc0e:	07da      	lsls	r2, r3, #31
 800cc10:	b510      	push	{r4, lr}
 800cc12:	4604      	mov	r4, r0
 800cc14:	d406      	bmi.n	800cc24 <restore_non_core_regs+0x18>
 800cc16:	079b      	lsls	r3, r3, #30
 800cc18:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800cc1c:	d509      	bpl.n	800cc32 <restore_non_core_regs+0x26>
 800cc1e:	f000 fc85 	bl	800d52c <__gnu_Unwind_Restore_VFP_D>
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	0759      	lsls	r1, r3, #29
 800cc26:	d509      	bpl.n	800cc3c <restore_non_core_regs+0x30>
 800cc28:	071a      	lsls	r2, r3, #28
 800cc2a:	d50e      	bpl.n	800cc4a <restore_non_core_regs+0x3e>
 800cc2c:	06db      	lsls	r3, r3, #27
 800cc2e:	d513      	bpl.n	800cc58 <restore_non_core_regs+0x4c>
 800cc30:	bd10      	pop	{r4, pc}
 800cc32:	f000 fc73 	bl	800d51c <__gnu_Unwind_Restore_VFP>
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	0759      	lsls	r1, r3, #29
 800cc3a:	d4f5      	bmi.n	800cc28 <restore_non_core_regs+0x1c>
 800cc3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cc40:	f000 fc7c 	bl	800d53c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	071a      	lsls	r2, r3, #28
 800cc48:	d4f0      	bmi.n	800cc2c <restore_non_core_regs+0x20>
 800cc4a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800cc4e:	f000 fc7d 	bl	800d54c <__gnu_Unwind_Restore_WMMXD>
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	06db      	lsls	r3, r3, #27
 800cc56:	d4eb      	bmi.n	800cc30 <restore_non_core_regs+0x24>
 800cc58:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800cc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc60:	f000 bcb8 	b.w	800d5d4 <__gnu_Unwind_Restore_WMMXC>

0800cc64 <_Unwind_decode_typeinfo_ptr.isra.0>:
 800cc64:	6803      	ldr	r3, [r0, #0]
 800cc66:	b10b      	cbz	r3, 800cc6c <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 800cc68:	4418      	add	r0, r3
 800cc6a:	4770      	bx	lr
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	4770      	bx	lr

0800cc70 <__gnu_unwind_24bit.isra.1>:
 800cc70:	2009      	movs	r0, #9
 800cc72:	4770      	bx	lr

0800cc74 <_Unwind_DebugHook>:
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop

0800cc78 <unwind_phase2>:
 800cc78:	b570      	push	{r4, r5, r6, lr}
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	460d      	mov	r5, r1
 800cc7e:	e008      	b.n	800cc92 <unwind_phase2+0x1a>
 800cc80:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800cc82:	6163      	str	r3, [r4, #20]
 800cc84:	2001      	movs	r0, #1
 800cc86:	6923      	ldr	r3, [r4, #16]
 800cc88:	4621      	mov	r1, r4
 800cc8a:	462a      	mov	r2, r5
 800cc8c:	4798      	blx	r3
 800cc8e:	2808      	cmp	r0, #8
 800cc90:	d108      	bne.n	800cca4 <unwind_phase2+0x2c>
 800cc92:	4620      	mov	r0, r4
 800cc94:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800cc96:	f7ff ff69 	bl	800cb6c <get_eit_entry>
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d0ef      	beq.n	800cc80 <unwind_phase2+0x8>
 800cca0:	f009 fe28 	bl	80168f4 <abort>
 800cca4:	2807      	cmp	r0, #7
 800cca6:	d1fb      	bne.n	800cca0 <unwind_phase2+0x28>
 800cca8:	4630      	mov	r0, r6
 800ccaa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800ccac:	f7ff ffe2 	bl	800cc74 <_Unwind_DebugHook>
 800ccb0:	1d28      	adds	r0, r5, #4
 800ccb2:	f000 fc27 	bl	800d504 <__restore_core_regs>
 800ccb6:	bf00      	nop

0800ccb8 <unwind_phase2_forced>:
 800ccb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccbc:	1d0c      	adds	r4, r1, #4
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	4617      	mov	r7, r2
 800ccc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccc4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800ccc8:	ad03      	add	r5, sp, #12
 800ccca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ccd8:	ac02      	add	r4, sp, #8
 800ccda:	f04f 0e00 	mov.w	lr, #0
 800ccde:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800cce2:	f8d6 9018 	ldr.w	r9, [r6, #24]
 800cce6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ccea:	4630      	mov	r0, r6
 800ccec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ccee:	f8c4 e000 	str.w	lr, [r4]
 800ccf2:	f7ff ff3b 	bl	800cb6c <get_eit_entry>
 800ccf6:	2f00      	cmp	r7, #0
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	bf0c      	ite	eq
 800ccfc:	2709      	moveq	r7, #9
 800ccfe:	270a      	movne	r7, #10
 800cd00:	b17d      	cbz	r5, 800cd22 <unwind_phase2_forced+0x6a>
 800cd02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd04:	f047 0110 	orr.w	r1, r7, #16
 800cd08:	e88d 0210 	stmia.w	sp, {r4, r9}
 800cd0c:	2001      	movs	r0, #1
 800cd0e:	6463      	str	r3, [r4, #68]	; 0x44
 800cd10:	4632      	mov	r2, r6
 800cd12:	4633      	mov	r3, r6
 800cd14:	47c0      	blx	r8
 800cd16:	bb78      	cbnz	r0, 800cd78 <unwind_phase2_forced+0xc0>
 800cd18:	4628      	mov	r0, r5
 800cd1a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd24:	6173      	str	r3, [r6, #20]
 800cd26:	4621      	mov	r1, r4
 800cd28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cd2c:	a87a      	add	r0, sp, #488	; 0x1e8
 800cd2e:	f000 fe7d 	bl	800da2c <memcpy>
 800cd32:	6933      	ldr	r3, [r6, #16]
 800cd34:	4631      	mov	r1, r6
 800cd36:	aa7a      	add	r2, sp, #488	; 0x1e8
 800cd38:	4638      	mov	r0, r7
 800cd3a:	4798      	blx	r3
 800cd3c:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800cd3e:	4682      	mov	sl, r0
 800cd40:	e88d 0210 	stmia.w	sp, {r4, r9}
 800cd44:	4639      	mov	r1, r7
 800cd46:	6463      	str	r3, [r4, #68]	; 0x44
 800cd48:	2001      	movs	r0, #1
 800cd4a:	4632      	mov	r2, r6
 800cd4c:	4633      	mov	r3, r6
 800cd4e:	47c0      	blx	r8
 800cd50:	b990      	cbnz	r0, 800cd78 <unwind_phase2_forced+0xc0>
 800cd52:	4620      	mov	r0, r4
 800cd54:	a97a      	add	r1, sp, #488	; 0x1e8
 800cd56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cd5a:	f000 fe67 	bl	800da2c <memcpy>
 800cd5e:	f1ba 0f08 	cmp.w	sl, #8
 800cd62:	d106      	bne.n	800cd72 <unwind_phase2_forced+0xba>
 800cd64:	4630      	mov	r0, r6
 800cd66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cd68:	f7ff ff00 	bl	800cb6c <get_eit_entry>
 800cd6c:	2709      	movs	r7, #9
 800cd6e:	4605      	mov	r5, r0
 800cd70:	e7c6      	b.n	800cd00 <unwind_phase2_forced+0x48>
 800cd72:	f1ba 0f07 	cmp.w	sl, #7
 800cd76:	d004      	beq.n	800cd82 <unwind_phase2_forced+0xca>
 800cd78:	2009      	movs	r0, #9
 800cd7a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800cd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd82:	4628      	mov	r0, r5
 800cd84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cd86:	f7ff ff75 	bl	800cc74 <_Unwind_DebugHook>
 800cd8a:	a803      	add	r0, sp, #12
 800cd8c:	f000 fbba 	bl	800d504 <__restore_core_regs>

0800cd90 <_Unwind_GetCFA>:
 800cd90:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800cd92:	4770      	bx	lr

0800cd94 <__gnu_Unwind_RaiseException>:
 800cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd96:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800cd98:	640b      	str	r3, [r1, #64]	; 0x40
 800cd9a:	1d0e      	adds	r6, r1, #4
 800cd9c:	460f      	mov	r7, r1
 800cd9e:	4604      	mov	r4, r0
 800cda0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cda2:	b0f9      	sub	sp, #484	; 0x1e4
 800cda4:	ad01      	add	r5, sp, #4
 800cda6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cda8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cdaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cdae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdb0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800cdb4:	f04f 36ff 	mov.w	r6, #4294967295
 800cdb8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cdbc:	9600      	str	r6, [sp, #0]
 800cdbe:	e006      	b.n	800cdce <__gnu_Unwind_RaiseException+0x3a>
 800cdc0:	6923      	ldr	r3, [r4, #16]
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	466a      	mov	r2, sp
 800cdc6:	4798      	blx	r3
 800cdc8:	2808      	cmp	r0, #8
 800cdca:	4605      	mov	r5, r0
 800cdcc:	d108      	bne.n	800cde0 <__gnu_Unwind_RaiseException+0x4c>
 800cdce:	4620      	mov	r0, r4
 800cdd0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cdd2:	f7ff fecb 	bl	800cb6c <get_eit_entry>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d0f2      	beq.n	800cdc0 <__gnu_Unwind_RaiseException+0x2c>
 800cdda:	2009      	movs	r0, #9
 800cddc:	b079      	add	sp, #484	; 0x1e4
 800cdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cde0:	4668      	mov	r0, sp
 800cde2:	f7ff ff13 	bl	800cc0c <restore_non_core_regs>
 800cde6:	2d06      	cmp	r5, #6
 800cde8:	d1f7      	bne.n	800cdda <__gnu_Unwind_RaiseException+0x46>
 800cdea:	4620      	mov	r0, r4
 800cdec:	4639      	mov	r1, r7
 800cdee:	f7ff ff43 	bl	800cc78 <unwind_phase2>
 800cdf2:	bf00      	nop

0800cdf4 <__gnu_Unwind_ForcedUnwind>:
 800cdf4:	b430      	push	{r4, r5}
 800cdf6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800cdf8:	60c1      	str	r1, [r0, #12]
 800cdfa:	6182      	str	r2, [r0, #24]
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	641d      	str	r5, [r3, #64]	; 0x40
 800ce00:	2200      	movs	r2, #0
 800ce02:	bc30      	pop	{r4, r5}
 800ce04:	e758      	b.n	800ccb8 <unwind_phase2_forced>
 800ce06:	bf00      	nop

0800ce08 <__gnu_Unwind_Resume>:
 800ce08:	b570      	push	{r4, r5, r6, lr}
 800ce0a:	68c6      	ldr	r6, [r0, #12]
 800ce0c:	6943      	ldr	r3, [r0, #20]
 800ce0e:	640b      	str	r3, [r1, #64]	; 0x40
 800ce10:	4604      	mov	r4, r0
 800ce12:	460d      	mov	r5, r1
 800ce14:	b126      	cbz	r6, 800ce20 <__gnu_Unwind_Resume+0x18>
 800ce16:	2201      	movs	r2, #1
 800ce18:	f7ff ff4e 	bl	800ccb8 <unwind_phase2_forced>
 800ce1c:	f009 fd6a 	bl	80168f4 <abort>
 800ce20:	6903      	ldr	r3, [r0, #16]
 800ce22:	4621      	mov	r1, r4
 800ce24:	2002      	movs	r0, #2
 800ce26:	462a      	mov	r2, r5
 800ce28:	4798      	blx	r3
 800ce2a:	2807      	cmp	r0, #7
 800ce2c:	d007      	beq.n	800ce3e <__gnu_Unwind_Resume+0x36>
 800ce2e:	2808      	cmp	r0, #8
 800ce30:	d103      	bne.n	800ce3a <__gnu_Unwind_Resume+0x32>
 800ce32:	4620      	mov	r0, r4
 800ce34:	4629      	mov	r1, r5
 800ce36:	f7ff ff1f 	bl	800cc78 <unwind_phase2>
 800ce3a:	f009 fd5b 	bl	80168f4 <abort>
 800ce3e:	4630      	mov	r0, r6
 800ce40:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800ce42:	f7ff ff17 	bl	800cc74 <_Unwind_DebugHook>
 800ce46:	1d28      	adds	r0, r5, #4
 800ce48:	f000 fb5c 	bl	800d504 <__restore_core_regs>

0800ce4c <__gnu_Unwind_Resume_or_Rethrow>:
 800ce4c:	68c2      	ldr	r2, [r0, #12]
 800ce4e:	b11a      	cbz	r2, 800ce58 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800ce50:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800ce52:	640a      	str	r2, [r1, #64]	; 0x40
 800ce54:	2200      	movs	r2, #0
 800ce56:	e72f      	b.n	800ccb8 <unwind_phase2_forced>
 800ce58:	e79c      	b.n	800cd94 <__gnu_Unwind_RaiseException>
 800ce5a:	bf00      	nop

0800ce5c <_Unwind_Complete>:
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop

0800ce60 <_Unwind_DeleteException>:
 800ce60:	6883      	ldr	r3, [r0, #8]
 800ce62:	b113      	cbz	r3, 800ce6a <_Unwind_DeleteException+0xa>
 800ce64:	4601      	mov	r1, r0
 800ce66:	2001      	movs	r0, #1
 800ce68:	4718      	bx	r3
 800ce6a:	4770      	bx	lr

0800ce6c <_Unwind_VRS_Get>:
 800ce6c:	b500      	push	{lr}
 800ce6e:	2904      	cmp	r1, #4
 800ce70:	d807      	bhi.n	800ce82 <_Unwind_VRS_Get+0x16>
 800ce72:	e8df f001 	tbb	[pc, r1]
 800ce76:	0903      	.short	0x0903
 800ce78:	0906      	.short	0x0906
 800ce7a:	09          	.byte	0x09
 800ce7b:	00          	.byte	0x00
 800ce7c:	b90b      	cbnz	r3, 800ce82 <_Unwind_VRS_Get+0x16>
 800ce7e:	2a0f      	cmp	r2, #15
 800ce80:	d905      	bls.n	800ce8e <_Unwind_VRS_Get+0x22>
 800ce82:	2002      	movs	r0, #2
 800ce84:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce88:	2001      	movs	r0, #1
 800ce8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce8e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ce92:	4618      	mov	r0, r3
 800ce94:	6853      	ldr	r3, [r2, #4]
 800ce96:	9a01      	ldr	r2, [sp, #4]
 800ce98:	6013      	str	r3, [r2, #0]
 800ce9a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce9e:	bf00      	nop

0800cea0 <_Unwind_GetGR>:
 800cea0:	b500      	push	{lr}
 800cea2:	b085      	sub	sp, #20
 800cea4:	460a      	mov	r2, r1
 800cea6:	ab03      	add	r3, sp, #12
 800cea8:	2100      	movs	r1, #0
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	460b      	mov	r3, r1
 800ceae:	f7ff ffdd 	bl	800ce6c <_Unwind_VRS_Get>
 800ceb2:	9803      	ldr	r0, [sp, #12]
 800ceb4:	b005      	add	sp, #20
 800ceb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ceba:	bf00      	nop

0800cebc <_Unwind_VRS_Set>:
 800cebc:	b500      	push	{lr}
 800cebe:	2904      	cmp	r1, #4
 800cec0:	d807      	bhi.n	800ced2 <_Unwind_VRS_Set+0x16>
 800cec2:	e8df f001 	tbb	[pc, r1]
 800cec6:	0903      	.short	0x0903
 800cec8:	0906      	.short	0x0906
 800ceca:	09          	.byte	0x09
 800cecb:	00          	.byte	0x00
 800cecc:	b90b      	cbnz	r3, 800ced2 <_Unwind_VRS_Set+0x16>
 800cece:	2a0f      	cmp	r2, #15
 800ced0:	d905      	bls.n	800cede <_Unwind_VRS_Set+0x22>
 800ced2:	2002      	movs	r0, #2
 800ced4:	f85d fb04 	ldr.w	pc, [sp], #4
 800ced8:	2001      	movs	r0, #1
 800ceda:	f85d fb04 	ldr.w	pc, [sp], #4
 800cede:	9901      	ldr	r1, [sp, #4]
 800cee0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cee4:	6809      	ldr	r1, [r1, #0]
 800cee6:	6051      	str	r1, [r2, #4]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f85d fb04 	ldr.w	pc, [sp], #4
 800ceee:	bf00      	nop

0800cef0 <_Unwind_SetGR>:
 800cef0:	b510      	push	{r4, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	ab04      	add	r3, sp, #16
 800cef6:	460c      	mov	r4, r1
 800cef8:	f843 2d04 	str.w	r2, [r3, #-4]!
 800cefc:	2100      	movs	r1, #0
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	4622      	mov	r2, r4
 800cf02:	460b      	mov	r3, r1
 800cf04:	f7ff ffda 	bl	800cebc <_Unwind_VRS_Set>
 800cf08:	b004      	add	sp, #16
 800cf0a:	bd10      	pop	{r4, pc}

0800cf0c <__gnu_Unwind_Backtrace>:
 800cf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf0e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800cf10:	6413      	str	r3, [r2, #64]	; 0x40
 800cf12:	1d15      	adds	r5, r2, #4
 800cf14:	4607      	mov	r7, r0
 800cf16:	460e      	mov	r6, r1
 800cf18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf1a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800cf1e:	ac17      	add	r4, sp, #92	; 0x5c
 800cf20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cf2e:	f04f 35ff 	mov.w	r5, #4294967295
 800cf32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cf36:	9516      	str	r5, [sp, #88]	; 0x58
 800cf38:	e010      	b.n	800cf5c <__gnu_Unwind_Backtrace+0x50>
 800cf3a:	a816      	add	r0, sp, #88	; 0x58
 800cf3c:	f7ff ffd8 	bl	800cef0 <_Unwind_SetGR>
 800cf40:	4631      	mov	r1, r6
 800cf42:	a816      	add	r0, sp, #88	; 0x58
 800cf44:	47b8      	blx	r7
 800cf46:	4669      	mov	r1, sp
 800cf48:	aa16      	add	r2, sp, #88	; 0x58
 800cf4a:	b978      	cbnz	r0, 800cf6c <__gnu_Unwind_Backtrace+0x60>
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	2008      	movs	r0, #8
 800cf50:	4798      	blx	r3
 800cf52:	2805      	cmp	r0, #5
 800cf54:	4604      	mov	r4, r0
 800cf56:	d00a      	beq.n	800cf6e <__gnu_Unwind_Backtrace+0x62>
 800cf58:	2809      	cmp	r0, #9
 800cf5a:	d007      	beq.n	800cf6c <__gnu_Unwind_Backtrace+0x60>
 800cf5c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800cf5e:	4668      	mov	r0, sp
 800cf60:	f7ff fe04 	bl	800cb6c <get_eit_entry>
 800cf64:	466a      	mov	r2, sp
 800cf66:	210c      	movs	r1, #12
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0e6      	beq.n	800cf3a <__gnu_Unwind_Backtrace+0x2e>
 800cf6c:	2409      	movs	r4, #9
 800cf6e:	a816      	add	r0, sp, #88	; 0x58
 800cf70:	f7ff fe4c 	bl	800cc0c <restore_non_core_regs>
 800cf74:	4620      	mov	r0, r4
 800cf76:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800cf7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf7c <__gnu_unwind_pr_common>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	460d      	mov	r5, r1
 800cf82:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800cf84:	b08b      	sub	sp, #44	; 0x2c
 800cf86:	1d0c      	adds	r4, r1, #4
 800cf88:	6809      	ldr	r1, [r1, #0]
 800cf8a:	9107      	str	r1, [sp, #28]
 800cf8c:	4690      	mov	r8, r2
 800cf8e:	9408      	str	r4, [sp, #32]
 800cf90:	f000 0903 	and.w	r9, r0, #3
 800cf94:	461e      	mov	r6, r3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d164      	bne.n	800d064 <__gnu_unwind_pr_common+0xe8>
 800cf9a:	0209      	lsls	r1, r1, #8
 800cf9c:	2303      	movs	r3, #3
 800cf9e:	9107      	str	r1, [sp, #28]
 800cfa0:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800cfa4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cfa8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cfaa:	f1b9 0f02 	cmp.w	r9, #2
 800cfae:	bf08      	it	eq
 800cfb0:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800cfb2:	f013 0301 	ands.w	r3, r3, #1
 800cfb6:	d143      	bne.n	800d040 <__gnu_unwind_pr_common+0xc4>
 800cfb8:	f000 0008 	and.w	r0, r0, #8
 800cfbc:	b2c2      	uxtb	r2, r0
 800cfbe:	9203      	str	r2, [sp, #12]
 800cfc0:	9301      	str	r3, [sp, #4]
 800cfc2:	6827      	ldr	r7, [r4, #0]
 800cfc4:	2f00      	cmp	r7, #0
 800cfc6:	d03d      	beq.n	800d044 <__gnu_unwind_pr_common+0xc8>
 800cfc8:	2e02      	cmp	r6, #2
 800cfca:	d047      	beq.n	800d05c <__gnu_unwind_pr_common+0xe0>
 800cfcc:	8827      	ldrh	r7, [r4, #0]
 800cfce:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 800cfd2:	3404      	adds	r4, #4
 800cfd4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800cfd6:	f02a 0b01 	bic.w	fp, sl, #1
 800cfda:	4640      	mov	r0, r8
 800cfdc:	210f      	movs	r1, #15
 800cfde:	449b      	add	fp, r3
 800cfe0:	f7ff ff5e 	bl	800cea0 <_Unwind_GetGR>
 800cfe4:	4583      	cmp	fp, r0
 800cfe6:	d837      	bhi.n	800d058 <__gnu_unwind_pr_common+0xdc>
 800cfe8:	f027 0301 	bic.w	r3, r7, #1
 800cfec:	449b      	add	fp, r3
 800cfee:	4558      	cmp	r0, fp
 800cff0:	bf2c      	ite	cs
 800cff2:	2000      	movcs	r0, #0
 800cff4:	2001      	movcc	r0, #1
 800cff6:	f00a 0a01 	and.w	sl, sl, #1
 800cffa:	f007 0701 	and.w	r7, r7, #1
 800cffe:	ea47 0a4a 	orr.w	sl, r7, sl, lsl #1
 800d002:	f1ba 0f01 	cmp.w	sl, #1
 800d006:	d043      	beq.n	800d090 <__gnu_unwind_pr_common+0x114>
 800d008:	d33a      	bcc.n	800d080 <__gnu_unwind_pr_common+0x104>
 800d00a:	f1ba 0f02 	cmp.w	sl, #2
 800d00e:	d11f      	bne.n	800d050 <__gnu_unwind_pr_common+0xd4>
 800d010:	6823      	ldr	r3, [r4, #0]
 800d012:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d016:	9202      	str	r2, [sp, #8]
 800d018:	f1b9 0f00 	cmp.w	r9, #0
 800d01c:	d17b      	bne.n	800d116 <__gnu_unwind_pr_common+0x19a>
 800d01e:	b138      	cbz	r0, 800d030 <__gnu_unwind_pr_common+0xb4>
 800d020:	9a03      	ldr	r2, [sp, #12]
 800d022:	2a00      	cmp	r2, #0
 800d024:	f000 8083 	beq.w	800d12e <__gnu_unwind_pr_common+0x1b2>
 800d028:	9a02      	ldr	r2, [sp, #8]
 800d02a:	2a00      	cmp	r2, #0
 800d02c:	f000 80a6 	beq.w	800d17c <__gnu_unwind_pr_common+0x200>
 800d030:	2b00      	cmp	r3, #0
 800d032:	db7a      	blt.n	800d12a <__gnu_unwind_pr_common+0x1ae>
 800d034:	9b02      	ldr	r3, [sp, #8]
 800d036:	f103 0a01 	add.w	sl, r3, #1
 800d03a:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d03e:	e7c0      	b.n	800cfc2 <__gnu_unwind_pr_common+0x46>
 800d040:	2300      	movs	r3, #0
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	2e02      	cmp	r6, #2
 800d046:	dd40      	ble.n	800d0ca <__gnu_unwind_pr_common+0x14e>
 800d048:	f7ff fe12 	bl	800cc70 <__gnu_unwind_24bit.isra.1>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d042      	beq.n	800d0d6 <__gnu_unwind_pr_common+0x15a>
 800d050:	2009      	movs	r0, #9
 800d052:	b00b      	add	sp, #44	; 0x2c
 800d054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d058:	2000      	movs	r0, #0
 800d05a:	e7cc      	b.n	800cff6 <__gnu_unwind_pr_common+0x7a>
 800d05c:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800d060:	3408      	adds	r4, #8
 800d062:	e7b7      	b.n	800cfd4 <__gnu_unwind_pr_common+0x58>
 800d064:	2b02      	cmp	r3, #2
 800d066:	dc9f      	bgt.n	800cfa8 <__gnu_unwind_pr_common+0x2c>
 800d068:	0c0b      	lsrs	r3, r1, #16
 800d06a:	b2df      	uxtb	r7, r3
 800d06c:	0409      	lsls	r1, r1, #16
 800d06e:	2202      	movs	r2, #2
 800d070:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800d074:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800d078:	9107      	str	r1, [sp, #28]
 800d07a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800d07e:	e793      	b.n	800cfa8 <__gnu_unwind_pr_common+0x2c>
 800d080:	f1b9 0f00 	cmp.w	r9, #0
 800d084:	d002      	beq.n	800d08c <__gnu_unwind_pr_common+0x110>
 800d086:	2800      	cmp	r0, #0
 800d088:	f040 80ad 	bne.w	800d1e6 <__gnu_unwind_pr_common+0x26a>
 800d08c:	3404      	adds	r4, #4
 800d08e:	e798      	b.n	800cfc2 <__gnu_unwind_pr_common+0x46>
 800d090:	f1b9 0f00 	cmp.w	r9, #0
 800d094:	d126      	bne.n	800d0e4 <__gnu_unwind_pr_common+0x168>
 800d096:	b1b0      	cbz	r0, 800d0c6 <__gnu_unwind_pr_common+0x14a>
 800d098:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d09c:	0fd7      	lsrs	r7, r2, #31
 800d09e:	1c9a      	adds	r2, r3, #2
 800d0a0:	d0d6      	beq.n	800d050 <__gnu_unwind_pr_common+0xd4>
 800d0a2:	f105 0258 	add.w	r2, r5, #88	; 0x58
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	9206      	str	r2, [sp, #24]
 800d0aa:	f000 8092 	beq.w	800d1d2 <__gnu_unwind_pr_common+0x256>
 800d0ae:	1d20      	adds	r0, r4, #4
 800d0b0:	f7ff fdd8 	bl	800cc64 <_Unwind_decode_typeinfo_ptr.isra.0>
 800d0b4:	463a      	mov	r2, r7
 800d0b6:	4601      	mov	r1, r0
 800d0b8:	ab06      	add	r3, sp, #24
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f008 ff80 	bl	8015fc0 <__cxa_type_match>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	f040 80b5 	bne.w	800d230 <__gnu_unwind_pr_common+0x2b4>
 800d0c6:	3408      	adds	r4, #8
 800d0c8:	e77b      	b.n	800cfc2 <__gnu_unwind_pr_common+0x46>
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	a907      	add	r1, sp, #28
 800d0ce:	f000 fb1b 	bl	800d708 <__gnu_unwind_execute>
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d1bc      	bne.n	800d050 <__gnu_unwind_pr_common+0xd4>
 800d0d6:	9b01      	ldr	r3, [sp, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d159      	bne.n	800d190 <__gnu_unwind_pr_common+0x214>
 800d0dc:	2008      	movs	r0, #8
 800d0de:	b00b      	add	sp, #44	; 0x2c
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e4:	4640      	mov	r0, r8
 800d0e6:	210d      	movs	r1, #13
 800d0e8:	6a2f      	ldr	r7, [r5, #32]
 800d0ea:	f7ff fed9 	bl	800cea0 <_Unwind_GetGR>
 800d0ee:	4287      	cmp	r7, r0
 800d0f0:	d1e9      	bne.n	800d0c6 <__gnu_unwind_pr_common+0x14a>
 800d0f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	d1e6      	bne.n	800d0c6 <__gnu_unwind_pr_common+0x14a>
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f7ff fcdb 	bl	800cab4 <selfrel_offset31>
 800d0fe:	210f      	movs	r1, #15
 800d100:	4602      	mov	r2, r0
 800d102:	4640      	mov	r0, r8
 800d104:	f7ff fef4 	bl	800cef0 <_Unwind_SetGR>
 800d108:	4640      	mov	r0, r8
 800d10a:	462a      	mov	r2, r5
 800d10c:	2100      	movs	r1, #0
 800d10e:	f7ff feef 	bl	800cef0 <_Unwind_SetGR>
 800d112:	2007      	movs	r0, #7
 800d114:	e79d      	b.n	800d052 <__gnu_unwind_pr_common+0xd6>
 800d116:	4640      	mov	r0, r8
 800d118:	210d      	movs	r1, #13
 800d11a:	6a2f      	ldr	r7, [r5, #32]
 800d11c:	f7ff fec0 	bl	800cea0 <_Unwind_GetGR>
 800d120:	4287      	cmp	r7, r0
 800d122:	d045      	beq.n	800d1b0 <__gnu_unwind_pr_common+0x234>
 800d124:	6823      	ldr	r3, [r4, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	da84      	bge.n	800d034 <__gnu_unwind_pr_common+0xb8>
 800d12a:	3404      	adds	r4, #4
 800d12c:	e782      	b.n	800d034 <__gnu_unwind_pr_common+0xb8>
 800d12e:	9b02      	ldr	r3, [sp, #8]
 800d130:	b323      	cbz	r3, 800d17c <__gnu_unwind_pr_common+0x200>
 800d132:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800d136:	9605      	str	r6, [sp, #20]
 800d138:	f104 0a04 	add.w	sl, r4, #4
 800d13c:	9f03      	ldr	r7, [sp, #12]
 800d13e:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d142:	f8cd 9010 	str.w	r9, [sp, #16]
 800d146:	461e      	mov	r6, r3
 800d148:	e002      	b.n	800d150 <__gnu_unwind_pr_common+0x1d4>
 800d14a:	45d9      	cmp	r9, fp
 800d14c:	464f      	mov	r7, r9
 800d14e:	d015      	beq.n	800d17c <__gnu_unwind_pr_common+0x200>
 800d150:	4650      	mov	r0, sl
 800d152:	9606      	str	r6, [sp, #24]
 800d154:	f7ff fd86 	bl	800cc64 <_Unwind_decode_typeinfo_ptr.isra.0>
 800d158:	2200      	movs	r2, #0
 800d15a:	4601      	mov	r1, r0
 800d15c:	ab06      	add	r3, sp, #24
 800d15e:	4628      	mov	r0, r5
 800d160:	f008 ff2e 	bl	8015fc0 <__cxa_type_match>
 800d164:	f107 0901 	add.w	r9, r7, #1
 800d168:	f10a 0a04 	add.w	sl, sl, #4
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d0ec      	beq.n	800d14a <__gnu_unwind_pr_common+0x1ce>
 800d170:	9b02      	ldr	r3, [sp, #8]
 800d172:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800d176:	9e05      	ldr	r6, [sp, #20]
 800d178:	429f      	cmp	r7, r3
 800d17a:	d1d3      	bne.n	800d124 <__gnu_unwind_pr_common+0x1a8>
 800d17c:	4640      	mov	r0, r8
 800d17e:	210d      	movs	r1, #13
 800d180:	f7ff fe8e 	bl	800cea0 <_Unwind_GetGR>
 800d184:	9b06      	ldr	r3, [sp, #24]
 800d186:	6228      	str	r0, [r5, #32]
 800d188:	62ac      	str	r4, [r5, #40]	; 0x28
 800d18a:	626b      	str	r3, [r5, #36]	; 0x24
 800d18c:	2006      	movs	r0, #6
 800d18e:	e760      	b.n	800d052 <__gnu_unwind_pr_common+0xd6>
 800d190:	210f      	movs	r1, #15
 800d192:	4640      	mov	r0, r8
 800d194:	f7ff fe84 	bl	800cea0 <_Unwind_GetGR>
 800d198:	210e      	movs	r1, #14
 800d19a:	4602      	mov	r2, r0
 800d19c:	4640      	mov	r0, r8
 800d19e:	f7ff fea7 	bl	800cef0 <_Unwind_SetGR>
 800d1a2:	4640      	mov	r0, r8
 800d1a4:	210f      	movs	r1, #15
 800d1a6:	4a29      	ldr	r2, [pc, #164]	; (800d24c <__gnu_unwind_pr_common+0x2d0>)
 800d1a8:	f7ff fea2 	bl	800cef0 <_Unwind_SetGR>
 800d1ac:	2007      	movs	r0, #7
 800d1ae:	e750      	b.n	800d052 <__gnu_unwind_pr_common+0xd6>
 800d1b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d1b2:	429c      	cmp	r4, r3
 800d1b4:	d1b6      	bne.n	800d124 <__gnu_unwind_pr_common+0x1a8>
 800d1b6:	2204      	movs	r2, #4
 800d1b8:	2700      	movs	r7, #0
 800d1ba:	18a3      	adds	r3, r4, r2
 800d1bc:	9902      	ldr	r1, [sp, #8]
 800d1be:	62a9      	str	r1, [r5, #40]	; 0x28
 800d1c0:	62ef      	str	r7, [r5, #44]	; 0x2c
 800d1c2:	632a      	str	r2, [r5, #48]	; 0x30
 800d1c4:	636b      	str	r3, [r5, #52]	; 0x34
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	42bb      	cmp	r3, r7
 800d1ca:	db1f      	blt.n	800d20c <__gnu_unwind_pr_common+0x290>
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	e730      	b.n	800d034 <__gnu_unwind_pr_common+0xb8>
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	210d      	movs	r1, #13
 800d1d6:	f7ff fe63 	bl	800cea0 <_Unwind_GetGR>
 800d1da:	6228      	str	r0, [r5, #32]
 800d1dc:	9b06      	ldr	r3, [sp, #24]
 800d1de:	626b      	str	r3, [r5, #36]	; 0x24
 800d1e0:	62ac      	str	r4, [r5, #40]	; 0x28
 800d1e2:	2006      	movs	r0, #6
 800d1e4:	e735      	b.n	800d052 <__gnu_unwind_pr_common+0xd6>
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f7ff fc64 	bl	800cab4 <selfrel_offset31>
 800d1ec:	3404      	adds	r4, #4
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	63ac      	str	r4, [r5, #56]	; 0x38
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f008 ff3c 	bl	8016070 <__cxa_begin_cleanup>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	f43f af29 	beq.w	800d050 <__gnu_unwind_pr_common+0xd4>
 800d1fe:	4640      	mov	r0, r8
 800d200:	4632      	mov	r2, r6
 800d202:	210f      	movs	r1, #15
 800d204:	f7ff fe74 	bl	800cef0 <_Unwind_SetGR>
 800d208:	2007      	movs	r0, #7
 800d20a:	e722      	b.n	800d052 <__gnu_unwind_pr_common+0xd6>
 800d20c:	4608      	mov	r0, r1
 800d20e:	3001      	adds	r0, #1
 800d210:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800d214:	f7ff fc4e 	bl	800cab4 <selfrel_offset31>
 800d218:	210f      	movs	r1, #15
 800d21a:	4602      	mov	r2, r0
 800d21c:	4640      	mov	r0, r8
 800d21e:	f7ff fe67 	bl	800cef0 <_Unwind_SetGR>
 800d222:	4640      	mov	r0, r8
 800d224:	4639      	mov	r1, r7
 800d226:	462a      	mov	r2, r5
 800d228:	f7ff fe62 	bl	800cef0 <_Unwind_SetGR>
 800d22c:	2007      	movs	r0, #7
 800d22e:	e710      	b.n	800d052 <__gnu_unwind_pr_common+0xd6>
 800d230:	4607      	mov	r7, r0
 800d232:	210d      	movs	r1, #13
 800d234:	4640      	mov	r0, r8
 800d236:	f7ff fe33 	bl	800cea0 <_Unwind_GetGR>
 800d23a:	2f02      	cmp	r7, #2
 800d23c:	6228      	str	r0, [r5, #32]
 800d23e:	d1cd      	bne.n	800d1dc <__gnu_unwind_pr_common+0x260>
 800d240:	462b      	mov	r3, r5
 800d242:	9a06      	ldr	r2, [sp, #24]
 800d244:	f843 2f2c 	str.w	r2, [r3, #44]!
 800d248:	626b      	str	r3, [r5, #36]	; 0x24
 800d24a:	e7c9      	b.n	800d1e0 <__gnu_unwind_pr_common+0x264>
 800d24c:	080161a1 	.word	0x080161a1

0800d250 <__aeabi_unwind_cpp_pr0>:
 800d250:	2300      	movs	r3, #0
 800d252:	e693      	b.n	800cf7c <__gnu_unwind_pr_common>

0800d254 <__aeabi_unwind_cpp_pr1>:
 800d254:	2301      	movs	r3, #1
 800d256:	e691      	b.n	800cf7c <__gnu_unwind_pr_common>

0800d258 <__aeabi_unwind_cpp_pr2>:
 800d258:	2302      	movs	r3, #2
 800d25a:	e68f      	b.n	800cf7c <__gnu_unwind_pr_common>

0800d25c <_Unwind_VRS_Pop>:
 800d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d25e:	4605      	mov	r5, r0
 800d260:	b0c5      	sub	sp, #276	; 0x114
 800d262:	2904      	cmp	r1, #4
 800d264:	d80c      	bhi.n	800d280 <_Unwind_VRS_Pop+0x24>
 800d266:	e8df f001 	tbb	[pc, r1]
 800d26a:	0356      	.short	0x0356
 800d26c:	300b      	.short	0x300b
 800d26e:	0e          	.byte	0x0e
 800d26f:	00          	.byte	0x00
 800d270:	2b01      	cmp	r3, #1
 800d272:	ea4f 4412 	mov.w	r4, r2, lsr #16
 800d276:	b296      	uxth	r6, r2
 800d278:	d065      	beq.n	800d346 <_Unwind_VRS_Pop+0xea>
 800d27a:	2b05      	cmp	r3, #5
 800d27c:	f000 8084 	beq.w	800d388 <_Unwind_VRS_Pop+0x12c>
 800d280:	2002      	movs	r0, #2
 800d282:	b045      	add	sp, #276	; 0x114
 800d284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1fa      	bne.n	800d280 <_Unwind_VRS_Pop+0x24>
 800d28a:	2a10      	cmp	r2, #16
 800d28c:	d8f8      	bhi.n	800d280 <_Unwind_VRS_Pop+0x24>
 800d28e:	682b      	ldr	r3, [r5, #0]
 800d290:	06dc      	lsls	r4, r3, #27
 800d292:	f100 80eb 	bmi.w	800d46c <_Unwind_VRS_Pop+0x210>
 800d296:	ae22      	add	r6, sp, #136	; 0x88
 800d298:	4630      	mov	r0, r6
 800d29a:	9201      	str	r2, [sp, #4]
 800d29c:	f000 f9a4 	bl	800d5e8 <__gnu_Unwind_Save_WMMXC>
 800d2a0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800d2a2:	9a01      	ldr	r2, [sp, #4]
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	2401      	movs	r4, #1
 800d2a8:	fa04 f103 	lsl.w	r1, r4, r3
 800d2ac:	4211      	tst	r1, r2
 800d2ae:	d003      	beq.n	800d2b8 <_Unwind_VRS_Pop+0x5c>
 800d2b0:	6801      	ldr	r1, [r0, #0]
 800d2b2:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800d2b6:	3004      	adds	r0, #4
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	2b04      	cmp	r3, #4
 800d2bc:	d1f4      	bne.n	800d2a8 <_Unwind_VRS_Pop+0x4c>
 800d2be:	63a8      	str	r0, [r5, #56]	; 0x38
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	f000 f987 	bl	800d5d4 <__gnu_Unwind_Restore_WMMXC>
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	e7db      	b.n	800d282 <_Unwind_VRS_Pop+0x26>
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	d1d8      	bne.n	800d280 <_Unwind_VRS_Pop+0x24>
 800d2ce:	0c14      	lsrs	r4, r2, #16
 800d2d0:	b297      	uxth	r7, r2
 800d2d2:	193b      	adds	r3, r7, r4
 800d2d4:	2b10      	cmp	r3, #16
 800d2d6:	d8d3      	bhi.n	800d280 <_Unwind_VRS_Pop+0x24>
 800d2d8:	682b      	ldr	r3, [r5, #0]
 800d2da:	071e      	lsls	r6, r3, #28
 800d2dc:	f100 80e6 	bmi.w	800d4ac <_Unwind_VRS_Pop+0x250>
 800d2e0:	ae22      	add	r6, sp, #136	; 0x88
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	007f      	lsls	r7, r7, #1
 800d2e6:	f000 f953 	bl	800d590 <__gnu_Unwind_Save_WMMXD>
 800d2ea:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 800d2ee:	1e7b      	subs	r3, r7, #1
 800d2f0:	6bac      	ldr	r4, [r5, #56]	; 0x38
 800d2f2:	b157      	cbz	r7, 800d30a <_Unwind_VRS_Pop+0xae>
 800d2f4:	3a04      	subs	r2, #4
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	f851 0b04 	ldr.w	r0, [r1], #4
 800d2fc:	f842 0f04 	str.w	r0, [r2, #4]!
 800d300:	3b01      	subs	r3, #1
 800d302:	1c58      	adds	r0, r3, #1
 800d304:	d1f8      	bne.n	800d2f8 <_Unwind_VRS_Pop+0x9c>
 800d306:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800d30a:	4630      	mov	r0, r6
 800d30c:	63ac      	str	r4, [r5, #56]	; 0x38
 800d30e:	f000 f91d 	bl	800d54c <__gnu_Unwind_Restore_WMMXD>
 800d312:	2000      	movs	r0, #0
 800d314:	e7b5      	b.n	800d282 <_Unwind_VRS_Pop+0x26>
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1b2      	bne.n	800d280 <_Unwind_VRS_Pop+0x24>
 800d31a:	6bac      	ldr	r4, [r5, #56]	; 0x38
 800d31c:	b297      	uxth	r7, r2
 800d31e:	1d28      	adds	r0, r5, #4
 800d320:	2601      	movs	r6, #1
 800d322:	fa06 f103 	lsl.w	r1, r6, r3
 800d326:	4239      	tst	r1, r7
 800d328:	f103 0301 	add.w	r3, r3, #1
 800d32c:	d002      	beq.n	800d334 <_Unwind_VRS_Pop+0xd8>
 800d32e:	6821      	ldr	r1, [r4, #0]
 800d330:	6001      	str	r1, [r0, #0]
 800d332:	3404      	adds	r4, #4
 800d334:	2b10      	cmp	r3, #16
 800d336:	f100 0004 	add.w	r0, r0, #4
 800d33a:	d1f2      	bne.n	800d322 <_Unwind_VRS_Pop+0xc6>
 800d33c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800d340:	d120      	bne.n	800d384 <_Unwind_VRS_Pop+0x128>
 800d342:	63ac      	str	r4, [r5, #56]	; 0x38
 800d344:	e79d      	b.n	800d282 <_Unwind_VRS_Pop+0x26>
 800d346:	1932      	adds	r2, r6, r4
 800d348:	2a10      	cmp	r2, #16
 800d34a:	d899      	bhi.n	800d280 <_Unwind_VRS_Pop+0x24>
 800d34c:	2c0f      	cmp	r4, #15
 800d34e:	d897      	bhi.n	800d280 <_Unwind_VRS_Pop+0x24>
 800d350:	6829      	ldr	r1, [r5, #0]
 800d352:	07c8      	lsls	r0, r1, #31
 800d354:	f04f 0700 	mov.w	r7, #0
 800d358:	d455      	bmi.n	800d406 <_Unwind_VRS_Pop+0x1aa>
 800d35a:	a822      	add	r0, sp, #136	; 0x88
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	f000 f8e1 	bl	800d524 <__gnu_Unwind_Save_VFP>
 800d362:	9b01      	ldr	r3, [sp, #4]
 800d364:	e019      	b.n	800d39a <_Unwind_VRS_Pop+0x13e>
 800d366:	4608      	mov	r0, r1
 800d368:	4637      	mov	r7, r6
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	f000 8098 	beq.w	800d4a0 <_Unwind_VRS_Pop+0x244>
 800d370:	2c0f      	cmp	r4, #15
 800d372:	63a8      	str	r0, [r5, #56]	; 0x38
 800d374:	d802      	bhi.n	800d37c <_Unwind_VRS_Pop+0x120>
 800d376:	a822      	add	r0, sp, #136	; 0x88
 800d378:	f000 f8d8 	bl	800d52c <__gnu_Unwind_Restore_VFP_D>
 800d37c:	b117      	cbz	r7, 800d384 <_Unwind_VRS_Pop+0x128>
 800d37e:	a802      	add	r0, sp, #8
 800d380:	f000 f8dc 	bl	800d53c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800d384:	2000      	movs	r0, #0
 800d386:	e77c      	b.n	800d282 <_Unwind_VRS_Pop+0x26>
 800d388:	1937      	adds	r7, r6, r4
 800d38a:	2f20      	cmp	r7, #32
 800d38c:	f63f af78 	bhi.w	800d280 <_Unwind_VRS_Pop+0x24>
 800d390:	2c0f      	cmp	r4, #15
 800d392:	d930      	bls.n	800d3f6 <_Unwind_VRS_Pop+0x19a>
 800d394:	4637      	mov	r7, r6
 800d396:	2e00      	cmp	r6, #0
 800d398:	d145      	bne.n	800d426 <_Unwind_VRS_Pop+0x1ca>
 800d39a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d39c:	4632      	mov	r2, r6
 800d39e:	2e00      	cmp	r6, #0
 800d3a0:	d0e1      	beq.n	800d366 <_Unwind_VRS_Pop+0x10a>
 800d3a2:	2700      	movs	r7, #0
 800d3a4:	a844      	add	r0, sp, #272	; 0x110
 800d3a6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800d3aa:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800d3ae:	f10c 32ff 	add.w	r2, ip, #4294967295
 800d3b2:	388c      	subs	r0, #140	; 0x8c
 800d3b4:	468e      	mov	lr, r1
 800d3b6:	f85e 6b04 	ldr.w	r6, [lr], #4
 800d3ba:	f840 6f04 	str.w	r6, [r0, #4]!
 800d3be:	3a01      	subs	r2, #1
 800d3c0:	1c56      	adds	r6, r2, #1
 800d3c2:	d1f8      	bne.n	800d3b6 <_Unwind_VRS_Pop+0x15a>
 800d3c4:	eb01 008c 	add.w	r0, r1, ip, lsl #2
 800d3c8:	2f00      	cmp	r7, #0
 800d3ca:	d0ce      	beq.n	800d36a <_Unwind_VRS_Pop+0x10e>
 800d3cc:	2c10      	cmp	r4, #16
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	a944      	add	r1, sp, #272	; 0x110
 800d3d2:	bf38      	it	cc
 800d3d4:	2210      	movcc	r2, #16
 800d3d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d3da:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800d3de:	4601      	mov	r1, r0
 800d3e0:	0078      	lsls	r0, r7, #1
 800d3e2:	3a04      	subs	r2, #4
 800d3e4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800d3e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3ec:	f842 6f04 	str.w	r6, [r2, #4]!
 800d3f0:	4281      	cmp	r1, r0
 800d3f2:	d1f9      	bne.n	800d3e8 <_Unwind_VRS_Pop+0x18c>
 800d3f4:	e7b9      	b.n	800d36a <_Unwind_VRS_Pop+0x10e>
 800d3f6:	2f10      	cmp	r7, #16
 800d3f8:	d942      	bls.n	800d480 <_Unwind_VRS_Pop+0x224>
 800d3fa:	682a      	ldr	r2, [r5, #0]
 800d3fc:	07d0      	lsls	r0, r2, #31
 800d3fe:	f1a7 0710 	sub.w	r7, r7, #16
 800d402:	4611      	mov	r1, r2
 800d404:	d510      	bpl.n	800d428 <_Unwind_VRS_Pop+0x1cc>
 800d406:	f021 0201 	bic.w	r2, r1, #1
 800d40a:	2b05      	cmp	r3, #5
 800d40c:	602a      	str	r2, [r5, #0]
 800d40e:	9301      	str	r3, [sp, #4]
 800d410:	4628      	mov	r0, r5
 800d412:	d05b      	beq.n	800d4cc <_Unwind_VRS_Pop+0x270>
 800d414:	f021 0103 	bic.w	r1, r1, #3
 800d418:	f840 1b48 	str.w	r1, [r0], #72
 800d41c:	f000 f882 	bl	800d524 <__gnu_Unwind_Save_VFP>
 800d420:	9b01      	ldr	r3, [sp, #4]
 800d422:	2f00      	cmp	r7, #0
 800d424:	d04a      	beq.n	800d4bc <_Unwind_VRS_Pop+0x260>
 800d426:	682a      	ldr	r2, [r5, #0]
 800d428:	0751      	lsls	r1, r2, #29
 800d42a:	d45b      	bmi.n	800d4e4 <_Unwind_VRS_Pop+0x288>
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d063      	beq.n	800d4f8 <_Unwind_VRS_Pop+0x29c>
 800d430:	2c0f      	cmp	r4, #15
 800d432:	d804      	bhi.n	800d43e <_Unwind_VRS_Pop+0x1e2>
 800d434:	a822      	add	r0, sp, #136	; 0x88
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	f000 f87c 	bl	800d534 <__gnu_Unwind_Save_VFP_D>
 800d43c:	9b01      	ldr	r3, [sp, #4]
 800d43e:	2f00      	cmp	r7, #0
 800d440:	d0ab      	beq.n	800d39a <_Unwind_VRS_Pop+0x13e>
 800d442:	a802      	add	r0, sp, #8
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	f000 f87d 	bl	800d544 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800d44a:	9b01      	ldr	r3, [sp, #4]
 800d44c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d44e:	f1c4 0210 	rsb	r2, r4, #16
 800d452:	2a00      	cmp	r2, #0
 800d454:	dca6      	bgt.n	800d3a4 <_Unwind_VRS_Pop+0x148>
 800d456:	2c10      	cmp	r4, #16
 800d458:	4622      	mov	r2, r4
 800d45a:	a844      	add	r0, sp, #272	; 0x110
 800d45c:	bf38      	it	cc
 800d45e:	2210      	movcc	r2, #16
 800d460:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800d464:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800d468:	0078      	lsls	r0, r7, #1
 800d46a:	e7ba      	b.n	800d3e2 <_Unwind_VRS_Pop+0x186>
 800d46c:	f023 0310 	bic.w	r3, r3, #16
 800d470:	602b      	str	r3, [r5, #0]
 800d472:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 800d476:	9201      	str	r2, [sp, #4]
 800d478:	f000 f8b6 	bl	800d5e8 <__gnu_Unwind_Save_WMMXC>
 800d47c:	9a01      	ldr	r2, [sp, #4]
 800d47e:	e70a      	b.n	800d296 <_Unwind_VRS_Pop+0x3a>
 800d480:	6829      	ldr	r1, [r5, #0]
 800d482:	07c8      	lsls	r0, r1, #31
 800d484:	d51d      	bpl.n	800d4c2 <_Unwind_VRS_Pop+0x266>
 800d486:	f021 0201 	bic.w	r2, r1, #1
 800d48a:	4628      	mov	r0, r5
 800d48c:	f042 0202 	orr.w	r2, r2, #2
 800d490:	f840 2b48 	str.w	r2, [r0], #72
 800d494:	9301      	str	r3, [sp, #4]
 800d496:	2700      	movs	r7, #0
 800d498:	f000 f84c 	bl	800d534 <__gnu_Unwind_Save_VFP_D>
 800d49c:	9b01      	ldr	r3, [sp, #4]
 800d49e:	e7c9      	b.n	800d434 <_Unwind_VRS_Pop+0x1d8>
 800d4a0:	3004      	adds	r0, #4
 800d4a2:	63a8      	str	r0, [r5, #56]	; 0x38
 800d4a4:	a822      	add	r0, sp, #136	; 0x88
 800d4a6:	f000 f839 	bl	800d51c <__gnu_Unwind_Restore_VFP>
 800d4aa:	e76b      	b.n	800d384 <_Unwind_VRS_Pop+0x128>
 800d4ac:	f023 0308 	bic.w	r3, r3, #8
 800d4b0:	602b      	str	r3, [r5, #0]
 800d4b2:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 800d4b6:	f000 f86b 	bl	800d590 <__gnu_Unwind_Save_WMMXD>
 800d4ba:	e711      	b.n	800d2e0 <_Unwind_VRS_Pop+0x84>
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	f43f af4c 	beq.w	800d35a <_Unwind_VRS_Pop+0xfe>
 800d4c2:	2c0f      	cmp	r4, #15
 800d4c4:	bf98      	it	ls
 800d4c6:	2700      	movls	r7, #0
 800d4c8:	d9b4      	bls.n	800d434 <_Unwind_VRS_Pop+0x1d8>
 800d4ca:	e766      	b.n	800d39a <_Unwind_VRS_Pop+0x13e>
 800d4cc:	f042 0202 	orr.w	r2, r2, #2
 800d4d0:	f840 2b48 	str.w	r2, [r0], #72
 800d4d4:	f000 f82e 	bl	800d534 <__gnu_Unwind_Save_VFP_D>
 800d4d8:	9b01      	ldr	r3, [sp, #4]
 800d4da:	2f00      	cmp	r7, #0
 800d4dc:	d0aa      	beq.n	800d434 <_Unwind_VRS_Pop+0x1d8>
 800d4de:	682a      	ldr	r2, [r5, #0]
 800d4e0:	0751      	lsls	r1, r2, #29
 800d4e2:	d5a5      	bpl.n	800d430 <_Unwind_VRS_Pop+0x1d4>
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f022 0204 	bic.w	r2, r2, #4
 800d4ea:	f840 2bd0 	str.w	r2, [r0], #208
 800d4ee:	9301      	str	r3, [sp, #4]
 800d4f0:	f000 f828 	bl	800d544 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	e799      	b.n	800d42c <_Unwind_VRS_Pop+0x1d0>
 800d4f8:	a822      	add	r0, sp, #136	; 0x88
 800d4fa:	9301      	str	r3, [sp, #4]
 800d4fc:	f000 f812 	bl	800d524 <__gnu_Unwind_Save_VFP>
 800d500:	9b01      	ldr	r3, [sp, #4]
 800d502:	e7a3      	b.n	800d44c <_Unwind_VRS_Pop+0x1f0>

0800d504 <__restore_core_regs>:
 800d504:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800d508:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800d50c:	469c      	mov	ip, r3
 800d50e:	46a6      	mov	lr, r4
 800d510:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800d514:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800d518:	46e5      	mov	sp, ip
 800d51a:	bd00      	pop	{pc}

0800d51c <__gnu_Unwind_Restore_VFP>:
 800d51c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop

0800d524 <__gnu_Unwind_Save_VFP>:
 800d524:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop

0800d52c <__gnu_Unwind_Restore_VFP_D>:
 800d52c:	ec90 0b20 	vldmia	r0, {d0-d15}
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop

0800d534 <__gnu_Unwind_Save_VFP_D>:
 800d534:	ec80 0b20 	vstmia	r0, {d0-d15}
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop

0800d53c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800d53c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop

0800d544 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800d544:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop

0800d54c <__gnu_Unwind_Restore_WMMXD>:
 800d54c:	ecf0 0102 	ldfe	f0, [r0], #8
 800d550:	ecf0 1102 	ldfe	f1, [r0], #8
 800d554:	ecf0 2102 	ldfe	f2, [r0], #8
 800d558:	ecf0 3102 	ldfe	f3, [r0], #8
 800d55c:	ecf0 4102 	ldfe	f4, [r0], #8
 800d560:	ecf0 5102 	ldfe	f5, [r0], #8
 800d564:	ecf0 6102 	ldfe	f6, [r0], #8
 800d568:	ecf0 7102 	ldfe	f7, [r0], #8
 800d56c:	ecf0 8102 	ldfp	f0, [r0], #8
 800d570:	ecf0 9102 	ldfp	f1, [r0], #8
 800d574:	ecf0 a102 	ldfp	f2, [r0], #8
 800d578:	ecf0 b102 	ldfp	f3, [r0], #8
 800d57c:	ecf0 c102 	ldfp	f4, [r0], #8
 800d580:	ecf0 d102 	ldfp	f5, [r0], #8
 800d584:	ecf0 e102 	ldfp	f6, [r0], #8
 800d588:	ecf0 f102 	ldfp	f7, [r0], #8
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop

0800d590 <__gnu_Unwind_Save_WMMXD>:
 800d590:	ece0 0102 	stfe	f0, [r0], #8
 800d594:	ece0 1102 	stfe	f1, [r0], #8
 800d598:	ece0 2102 	stfe	f2, [r0], #8
 800d59c:	ece0 3102 	stfe	f3, [r0], #8
 800d5a0:	ece0 4102 	stfe	f4, [r0], #8
 800d5a4:	ece0 5102 	stfe	f5, [r0], #8
 800d5a8:	ece0 6102 	stfe	f6, [r0], #8
 800d5ac:	ece0 7102 	stfe	f7, [r0], #8
 800d5b0:	ece0 8102 	stfp	f0, [r0], #8
 800d5b4:	ece0 9102 	stfp	f1, [r0], #8
 800d5b8:	ece0 a102 	stfp	f2, [r0], #8
 800d5bc:	ece0 b102 	stfp	f3, [r0], #8
 800d5c0:	ece0 c102 	stfp	f4, [r0], #8
 800d5c4:	ece0 d102 	stfp	f5, [r0], #8
 800d5c8:	ece0 e102 	stfp	f6, [r0], #8
 800d5cc:	ece0 f102 	stfp	f7, [r0], #8
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop

0800d5d4 <__gnu_Unwind_Restore_WMMXC>:
 800d5d4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800d5d8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800d5dc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800d5e0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop

0800d5e8 <__gnu_Unwind_Save_WMMXC>:
 800d5e8:	fca0 8101 	stc2	1, cr8, [r0], #4
 800d5ec:	fca0 9101 	stc2	1, cr9, [r0], #4
 800d5f0:	fca0 a101 	stc2	1, cr10, [r0], #4
 800d5f4:	fca0 b101 	stc2	1, cr11, [r0], #4
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop

0800d5fc <_Unwind_RaiseException>:
 800d5fc:	46ec      	mov	ip, sp
 800d5fe:	b500      	push	{lr}
 800d600:	e92d 5000 	stmdb	sp!, {ip, lr}
 800d604:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d608:	f04f 0300 	mov.w	r3, #0
 800d60c:	e92d 000c 	stmdb	sp!, {r2, r3}
 800d610:	a901      	add	r1, sp, #4
 800d612:	f7ff fbbf 	bl	800cd94 <__gnu_Unwind_RaiseException>
 800d616:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800d61a:	b012      	add	sp, #72	; 0x48
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop

0800d620 <_Unwind_Resume>:
 800d620:	46ec      	mov	ip, sp
 800d622:	b500      	push	{lr}
 800d624:	e92d 5000 	stmdb	sp!, {ip, lr}
 800d628:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d62c:	f04f 0300 	mov.w	r3, #0
 800d630:	e92d 000c 	stmdb	sp!, {r2, r3}
 800d634:	a901      	add	r1, sp, #4
 800d636:	f7ff fbe7 	bl	800ce08 <__gnu_Unwind_Resume>
 800d63a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800d63e:	b012      	add	sp, #72	; 0x48
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop

0800d644 <_Unwind_Resume_or_Rethrow>:
 800d644:	46ec      	mov	ip, sp
 800d646:	b500      	push	{lr}
 800d648:	e92d 5000 	stmdb	sp!, {ip, lr}
 800d64c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d650:	f04f 0300 	mov.w	r3, #0
 800d654:	e92d 000c 	stmdb	sp!, {r2, r3}
 800d658:	a901      	add	r1, sp, #4
 800d65a:	f7ff fbf7 	bl	800ce4c <__gnu_Unwind_Resume_or_Rethrow>
 800d65e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800d662:	b012      	add	sp, #72	; 0x48
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop

0800d668 <_Unwind_ForcedUnwind>:
 800d668:	46ec      	mov	ip, sp
 800d66a:	b500      	push	{lr}
 800d66c:	e92d 5000 	stmdb	sp!, {ip, lr}
 800d670:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d674:	f04f 0300 	mov.w	r3, #0
 800d678:	e92d 000c 	stmdb	sp!, {r2, r3}
 800d67c:	ab01      	add	r3, sp, #4
 800d67e:	f7ff fbb9 	bl	800cdf4 <__gnu_Unwind_ForcedUnwind>
 800d682:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800d686:	b012      	add	sp, #72	; 0x48
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop

0800d68c <_Unwind_Backtrace>:
 800d68c:	46ec      	mov	ip, sp
 800d68e:	b500      	push	{lr}
 800d690:	e92d 5000 	stmdb	sp!, {ip, lr}
 800d694:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800d698:	f04f 0300 	mov.w	r3, #0
 800d69c:	e92d 000c 	stmdb	sp!, {r2, r3}
 800d6a0:	aa01      	add	r2, sp, #4
 800d6a2:	f7ff fc33 	bl	800cf0c <__gnu_Unwind_Backtrace>
 800d6a6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800d6aa:	b012      	add	sp, #72	; 0x48
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop

0800d6b0 <next_unwind_byte>:
 800d6b0:	7a03      	ldrb	r3, [r0, #8]
 800d6b2:	b91b      	cbnz	r3, 800d6bc <next_unwind_byte+0xc>
 800d6b4:	7a43      	ldrb	r3, [r0, #9]
 800d6b6:	b943      	cbnz	r3, 800d6ca <next_unwind_byte+0x1a>
 800d6b8:	20b0      	movs	r0, #176	; 0xb0
 800d6ba:	4770      	bx	lr
 800d6bc:	1e5a      	subs	r2, r3, #1
 800d6be:	6803      	ldr	r3, [r0, #0]
 800d6c0:	7202      	strb	r2, [r0, #8]
 800d6c2:	021a      	lsls	r2, r3, #8
 800d6c4:	6002      	str	r2, [r0, #0]
 800d6c6:	0e18      	lsrs	r0, r3, #24
 800d6c8:	4770      	bx	lr
 800d6ca:	6842      	ldr	r2, [r0, #4]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	b410      	push	{r4}
 800d6d0:	7243      	strb	r3, [r0, #9]
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	2103      	movs	r1, #3
 800d6d6:	1d14      	adds	r4, r2, #4
 800d6d8:	7201      	strb	r1, [r0, #8]
 800d6da:	021a      	lsls	r2, r3, #8
 800d6dc:	6044      	str	r4, [r0, #4]
 800d6de:	6002      	str	r2, [r0, #0]
 800d6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6e4:	0e18      	lsrs	r0, r3, #24
 800d6e6:	4770      	bx	lr

0800d6e8 <_Unwind_GetGR.constprop.0>:
 800d6e8:	b500      	push	{lr}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	ab03      	add	r3, sp, #12
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	220c      	movs	r2, #12
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	f7ff fbb9 	bl	800ce6c <_Unwind_VRS_Get>
 800d6fa:	9803      	ldr	r0, [sp, #12]
 800d6fc:	b005      	add	sp, #20
 800d6fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800d702:	bf00      	nop

0800d704 <unwind_UCB_from_context>:
 800d704:	e7f0      	b.n	800d6e8 <_Unwind_GetGR.constprop.0>
 800d706:	bf00      	nop

0800d708 <__gnu_unwind_execute>:
 800d708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d70c:	4606      	mov	r6, r0
 800d70e:	b085      	sub	sp, #20
 800d710:	460d      	mov	r5, r1
 800d712:	f04f 0800 	mov.w	r8, #0
 800d716:	4628      	mov	r0, r5
 800d718:	f7ff ffca 	bl	800d6b0 <next_unwind_byte>
 800d71c:	28b0      	cmp	r0, #176	; 0xb0
 800d71e:	4604      	mov	r4, r0
 800d720:	f000 80b5 	beq.w	800d88e <__gnu_unwind_execute+0x186>
 800d724:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
 800d728:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800d72c:	d020      	beq.n	800d770 <__gnu_unwind_execute+0x68>
 800d72e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800d732:	2b80      	cmp	r3, #128	; 0x80
 800d734:	d07a      	beq.n	800d82c <__gnu_unwind_execute+0x124>
 800d736:	2b90      	cmp	r3, #144	; 0x90
 800d738:	d036      	beq.n	800d7a8 <__gnu_unwind_execute+0xa0>
 800d73a:	2ba0      	cmp	r3, #160	; 0xa0
 800d73c:	d049      	beq.n	800d7d2 <__gnu_unwind_execute+0xca>
 800d73e:	2bb0      	cmp	r3, #176	; 0xb0
 800d740:	d05c      	beq.n	800d7fc <__gnu_unwind_execute+0xf4>
 800d742:	2bc0      	cmp	r3, #192	; 0xc0
 800d744:	f000 8089 	beq.w	800d85a <__gnu_unwind_execute+0x152>
 800d748:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800d74c:	2bd0      	cmp	r3, #208	; 0xd0
 800d74e:	d10b      	bne.n	800d768 <__gnu_unwind_execute+0x60>
 800d750:	f000 0207 	and.w	r2, r0, #7
 800d754:	3201      	adds	r2, #1
 800d756:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d75a:	4630      	mov	r0, r6
 800d75c:	2101      	movs	r1, #1
 800d75e:	2305      	movs	r3, #5
 800d760:	f7ff fd7c 	bl	800d25c <_Unwind_VRS_Pop>
 800d764:	2800      	cmp	r0, #0
 800d766:	d0d6      	beq.n	800d716 <__gnu_unwind_execute+0xe>
 800d768:	2009      	movs	r0, #9
 800d76a:	b005      	add	sp, #20
 800d76c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d770:	f10d 090c 	add.w	r9, sp, #12
 800d774:	460b      	mov	r3, r1
 800d776:	0087      	lsls	r7, r0, #2
 800d778:	f8cd 9000 	str.w	r9, [sp]
 800d77c:	4630      	mov	r0, r6
 800d77e:	220d      	movs	r2, #13
 800d780:	f7ff fb74 	bl	800ce6c <_Unwind_VRS_Get>
 800d784:	b2ff      	uxtb	r7, r7
 800d786:	9b03      	ldr	r3, [sp, #12]
 800d788:	f8cd 9000 	str.w	r9, [sp]
 800d78c:	3704      	adds	r7, #4
 800d78e:	0660      	lsls	r0, r4, #25
 800d790:	f04f 0100 	mov.w	r1, #0
 800d794:	bf4c      	ite	mi
 800d796:	1bdf      	submi	r7, r3, r7
 800d798:	18ff      	addpl	r7, r7, r3
 800d79a:	4630      	mov	r0, r6
 800d79c:	460b      	mov	r3, r1
 800d79e:	220d      	movs	r2, #13
 800d7a0:	9703      	str	r7, [sp, #12]
 800d7a2:	f7ff fb8b 	bl	800cebc <_Unwind_VRS_Set>
 800d7a6:	e7b6      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d7a8:	f000 030d 	and.w	r3, r0, #13
 800d7ac:	2b0d      	cmp	r3, #13
 800d7ae:	d0db      	beq.n	800d768 <__gnu_unwind_execute+0x60>
 800d7b0:	af03      	add	r7, sp, #12
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	f000 020f 	and.w	r2, r0, #15
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	9700      	str	r7, [sp, #0]
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f7ff fb55 	bl	800ce6c <_Unwind_VRS_Get>
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	9700      	str	r7, [sp, #0]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	220d      	movs	r2, #13
 800d7cc:	f7ff fb76 	bl	800cebc <_Unwind_VRS_Set>
 800d7d0:	e7a1      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d7d2:	43c3      	mvns	r3, r0
 800d7d4:	f003 0307 	and.w	r3, r3, #7
 800d7d8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800d7dc:	411a      	asrs	r2, r3
 800d7de:	0701      	lsls	r1, r0, #28
 800d7e0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800d7e4:	f04f 0100 	mov.w	r1, #0
 800d7e8:	bf48      	it	mi
 800d7ea:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f7ff fd33 	bl	800d25c <_Unwind_VRS_Pop>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d1b6      	bne.n	800d768 <__gnu_unwind_execute+0x60>
 800d7fa:	e78c      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d7fc:	28b1      	cmp	r0, #177	; 0xb1
 800d7fe:	d04c      	beq.n	800d89a <__gnu_unwind_execute+0x192>
 800d800:	28b2      	cmp	r0, #178	; 0xb2
 800d802:	d05d      	beq.n	800d8c0 <__gnu_unwind_execute+0x1b8>
 800d804:	28b3      	cmp	r0, #179	; 0xb3
 800d806:	f000 808a 	beq.w	800d91e <__gnu_unwind_execute+0x216>
 800d80a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800d80e:	2bb4      	cmp	r3, #180	; 0xb4
 800d810:	d0aa      	beq.n	800d768 <__gnu_unwind_execute+0x60>
 800d812:	f000 0207 	and.w	r2, r0, #7
 800d816:	3201      	adds	r2, #1
 800d818:	2101      	movs	r1, #1
 800d81a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d81e:	460b      	mov	r3, r1
 800d820:	4630      	mov	r0, r6
 800d822:	f7ff fd1b 	bl	800d25c <_Unwind_VRS_Pop>
 800d826:	2800      	cmp	r0, #0
 800d828:	d19e      	bne.n	800d768 <__gnu_unwind_execute+0x60>
 800d82a:	e774      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d82c:	4628      	mov	r0, r5
 800d82e:	f7ff ff3f 	bl	800d6b0 <next_unwind_byte>
 800d832:	0224      	lsls	r4, r4, #8
 800d834:	4320      	orrs	r0, r4
 800d836:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d83a:	d095      	beq.n	800d768 <__gnu_unwind_execute+0x60>
 800d83c:	0104      	lsls	r4, r0, #4
 800d83e:	2100      	movs	r1, #0
 800d840:	b2a2      	uxth	r2, r4
 800d842:	460b      	mov	r3, r1
 800d844:	4630      	mov	r0, r6
 800d846:	f7ff fd09 	bl	800d25c <_Unwind_VRS_Pop>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d18c      	bne.n	800d768 <__gnu_unwind_execute+0x60>
 800d84e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800d852:	bf18      	it	ne
 800d854:	f04f 0801 	movne.w	r8, #1
 800d858:	e75d      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d85a:	28c6      	cmp	r0, #198	; 0xc6
 800d85c:	d072      	beq.n	800d944 <__gnu_unwind_execute+0x23c>
 800d85e:	28c7      	cmp	r0, #199	; 0xc7
 800d860:	d07a      	beq.n	800d958 <__gnu_unwind_execute+0x250>
 800d862:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800d866:	2bc0      	cmp	r3, #192	; 0xc0
 800d868:	f000 8089 	beq.w	800d97e <__gnu_unwind_execute+0x276>
 800d86c:	28c8      	cmp	r0, #200	; 0xc8
 800d86e:	f000 80a5 	beq.w	800d9bc <__gnu_unwind_execute+0x2b4>
 800d872:	28c9      	cmp	r0, #201	; 0xc9
 800d874:	f47f af78 	bne.w	800d768 <__gnu_unwind_execute+0x60>
 800d878:	4628      	mov	r0, r5
 800d87a:	f7ff ff19 	bl	800d6b0 <next_unwind_byte>
 800d87e:	f000 020f 	and.w	r2, r0, #15
 800d882:	3201      	adds	r2, #1
 800d884:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800d888:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 800d88c:	e765      	b.n	800d75a <__gnu_unwind_execute+0x52>
 800d88e:	f1b8 0f00 	cmp.w	r8, #0
 800d892:	f000 8082 	beq.w	800d99a <__gnu_unwind_execute+0x292>
 800d896:	2000      	movs	r0, #0
 800d898:	e767      	b.n	800d76a <__gnu_unwind_execute+0x62>
 800d89a:	4628      	mov	r0, r5
 800d89c:	f7ff ff08 	bl	800d6b0 <next_unwind_byte>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	f43f af60 	beq.w	800d768 <__gnu_unwind_execute+0x60>
 800d8a8:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 800d8ac:	f47f af5c 	bne.w	800d768 <__gnu_unwind_execute+0x60>
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	f7ff fcd2 	bl	800d25c <_Unwind_VRS_Pop>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	f47f af55 	bne.w	800d768 <__gnu_unwind_execute+0x60>
 800d8be:	e72a      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	f10d 090c 	add.w	r9, sp, #12
 800d8c6:	220d      	movs	r2, #13
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	f8cd 9000 	str.w	r9, [sp]
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	f7ff facc 	bl	800ce6c <_Unwind_VRS_Get>
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f7ff feeb 	bl	800d6b0 <next_unwind_byte>
 800d8da:	0602      	lsls	r2, r0, #24
 800d8dc:	f04f 0402 	mov.w	r4, #2
 800d8e0:	d50c      	bpl.n	800d8fc <__gnu_unwind_execute+0x1f4>
 800d8e2:	9b03      	ldr	r3, [sp, #12]
 800d8e4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d8e8:	40a0      	lsls	r0, r4
 800d8ea:	4403      	add	r3, r0
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	9303      	str	r3, [sp, #12]
 800d8f0:	f7ff fede 	bl	800d6b0 <next_unwind_byte>
 800d8f4:	0603      	lsls	r3, r0, #24
 800d8f6:	f104 0407 	add.w	r4, r4, #7
 800d8fa:	d4f2      	bmi.n	800d8e2 <__gnu_unwind_execute+0x1da>
 800d8fc:	9b03      	ldr	r3, [sp, #12]
 800d8fe:	f8cd 9000 	str.w	r9, [sp]
 800d902:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d906:	40a0      	lsls	r0, r4
 800d908:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d90c:	2100      	movs	r1, #0
 800d90e:	181c      	adds	r4, r3, r0
 800d910:	220d      	movs	r2, #13
 800d912:	460b      	mov	r3, r1
 800d914:	4630      	mov	r0, r6
 800d916:	9403      	str	r4, [sp, #12]
 800d918:	f7ff fad0 	bl	800cebc <_Unwind_VRS_Set>
 800d91c:	e6fb      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d91e:	4628      	mov	r0, r5
 800d920:	f7ff fec6 	bl	800d6b0 <next_unwind_byte>
 800d924:	f000 020f 	and.w	r2, r0, #15
 800d928:	3201      	adds	r2, #1
 800d92a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800d92e:	2101      	movs	r1, #1
 800d930:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 800d934:	460b      	mov	r3, r1
 800d936:	4630      	mov	r0, r6
 800d938:	f7ff fc90 	bl	800d25c <_Unwind_VRS_Pop>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	f47f af13 	bne.w	800d768 <__gnu_unwind_execute+0x60>
 800d942:	e6e8      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d944:	4628      	mov	r0, r5
 800d946:	f7ff feb3 	bl	800d6b0 <next_unwind_byte>
 800d94a:	f000 020f 	and.w	r2, r0, #15
 800d94e:	3201      	adds	r2, #1
 800d950:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800d954:	2103      	movs	r1, #3
 800d956:	e7eb      	b.n	800d930 <__gnu_unwind_execute+0x228>
 800d958:	4628      	mov	r0, r5
 800d95a:	f7ff fea9 	bl	800d6b0 <next_unwind_byte>
 800d95e:	4602      	mov	r2, r0
 800d960:	2800      	cmp	r0, #0
 800d962:	f43f af01 	beq.w	800d768 <__gnu_unwind_execute+0x60>
 800d966:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800d96a:	f47f aefd 	bne.w	800d768 <__gnu_unwind_execute+0x60>
 800d96e:	4630      	mov	r0, r6
 800d970:	2104      	movs	r1, #4
 800d972:	f7ff fc73 	bl	800d25c <_Unwind_VRS_Pop>
 800d976:	2800      	cmp	r0, #0
 800d978:	f47f aef6 	bne.w	800d768 <__gnu_unwind_execute+0x60>
 800d97c:	e6cb      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d97e:	f000 020f 	and.w	r2, r0, #15
 800d982:	3201      	adds	r2, #1
 800d984:	2103      	movs	r1, #3
 800d986:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800d98a:	460b      	mov	r3, r1
 800d98c:	4630      	mov	r0, r6
 800d98e:	f7ff fc65 	bl	800d25c <_Unwind_VRS_Pop>
 800d992:	2800      	cmp	r0, #0
 800d994:	f47f aee8 	bne.w	800d768 <__gnu_unwind_execute+0x60>
 800d998:	e6bd      	b.n	800d716 <__gnu_unwind_execute+0xe>
 800d99a:	ac03      	add	r4, sp, #12
 800d99c:	4641      	mov	r1, r8
 800d99e:	220e      	movs	r2, #14
 800d9a0:	4643      	mov	r3, r8
 800d9a2:	9400      	str	r4, [sp, #0]
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	f7ff fa61 	bl	800ce6c <_Unwind_VRS_Get>
 800d9aa:	9400      	str	r4, [sp, #0]
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	4641      	mov	r1, r8
 800d9b0:	220f      	movs	r2, #15
 800d9b2:	4643      	mov	r3, r8
 800d9b4:	f7ff fa82 	bl	800cebc <_Unwind_VRS_Set>
 800d9b8:	4640      	mov	r0, r8
 800d9ba:	e6d6      	b.n	800d76a <__gnu_unwind_execute+0x62>
 800d9bc:	4628      	mov	r0, r5
 800d9be:	f7ff fe77 	bl	800d6b0 <next_unwind_byte>
 800d9c2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800d9c6:	f000 030f 	and.w	r3, r0, #15
 800d9ca:	3210      	adds	r2, #16
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800d9d2:	e6c2      	b.n	800d75a <__gnu_unwind_execute+0x52>

0800d9d4 <__gnu_unwind_frame>:
 800d9d4:	b510      	push	{r4, lr}
 800d9d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d9d8:	b084      	sub	sp, #16
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	2003      	movs	r0, #3
 800d9de:	f88d 000c 	strb.w	r0, [sp, #12]
 800d9e2:	79dc      	ldrb	r4, [r3, #7]
 800d9e4:	f88d 400d 	strb.w	r4, [sp, #13]
 800d9e8:	0212      	lsls	r2, r2, #8
 800d9ea:	3308      	adds	r3, #8
 800d9ec:	4608      	mov	r0, r1
 800d9ee:	a901      	add	r1, sp, #4
 800d9f0:	9201      	str	r2, [sp, #4]
 800d9f2:	9302      	str	r3, [sp, #8]
 800d9f4:	f7ff fe88 	bl	800d708 <__gnu_unwind_execute>
 800d9f8:	b004      	add	sp, #16
 800d9fa:	bd10      	pop	{r4, pc}

0800d9fc <_Unwind_GetRegionStart>:
 800d9fc:	b508      	push	{r3, lr}
 800d9fe:	f7ff fe81 	bl	800d704 <unwind_UCB_from_context>
 800da02:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800da04:	bd08      	pop	{r3, pc}
 800da06:	bf00      	nop

0800da08 <_Unwind_GetLanguageSpecificData>:
 800da08:	b508      	push	{r3, lr}
 800da0a:	f7ff fe7b 	bl	800d704 <unwind_UCB_from_context>
 800da0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800da10:	79d8      	ldrb	r0, [r3, #7]
 800da12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800da16:	3008      	adds	r0, #8
 800da18:	bd08      	pop	{r3, pc}
 800da1a:	bf00      	nop

0800da1c <_Unwind_GetDataRelBase>:
 800da1c:	b508      	push	{r3, lr}
 800da1e:	f008 ff69 	bl	80168f4 <abort>
 800da22:	bf00      	nop

0800da24 <_Unwind_GetTextRelBase>:
 800da24:	b508      	push	{r3, lr}
 800da26:	f008 ff65 	bl	80168f4 <abort>
 800da2a:	bf00      	nop

0800da2c <memcpy>:
 800da2c:	4684      	mov	ip, r0
 800da2e:	ea41 0300 	orr.w	r3, r1, r0
 800da32:	f013 0303 	ands.w	r3, r3, #3
 800da36:	d16d      	bne.n	800db14 <memcpy+0xe8>
 800da38:	3a40      	subs	r2, #64	; 0x40
 800da3a:	d341      	bcc.n	800dac0 <memcpy+0x94>
 800da3c:	f851 3b04 	ldr.w	r3, [r1], #4
 800da40:	f840 3b04 	str.w	r3, [r0], #4
 800da44:	f851 3b04 	ldr.w	r3, [r1], #4
 800da48:	f840 3b04 	str.w	r3, [r0], #4
 800da4c:	f851 3b04 	ldr.w	r3, [r1], #4
 800da50:	f840 3b04 	str.w	r3, [r0], #4
 800da54:	f851 3b04 	ldr.w	r3, [r1], #4
 800da58:	f840 3b04 	str.w	r3, [r0], #4
 800da5c:	f851 3b04 	ldr.w	r3, [r1], #4
 800da60:	f840 3b04 	str.w	r3, [r0], #4
 800da64:	f851 3b04 	ldr.w	r3, [r1], #4
 800da68:	f840 3b04 	str.w	r3, [r0], #4
 800da6c:	f851 3b04 	ldr.w	r3, [r1], #4
 800da70:	f840 3b04 	str.w	r3, [r0], #4
 800da74:	f851 3b04 	ldr.w	r3, [r1], #4
 800da78:	f840 3b04 	str.w	r3, [r0], #4
 800da7c:	f851 3b04 	ldr.w	r3, [r1], #4
 800da80:	f840 3b04 	str.w	r3, [r0], #4
 800da84:	f851 3b04 	ldr.w	r3, [r1], #4
 800da88:	f840 3b04 	str.w	r3, [r0], #4
 800da8c:	f851 3b04 	ldr.w	r3, [r1], #4
 800da90:	f840 3b04 	str.w	r3, [r0], #4
 800da94:	f851 3b04 	ldr.w	r3, [r1], #4
 800da98:	f840 3b04 	str.w	r3, [r0], #4
 800da9c:	f851 3b04 	ldr.w	r3, [r1], #4
 800daa0:	f840 3b04 	str.w	r3, [r0], #4
 800daa4:	f851 3b04 	ldr.w	r3, [r1], #4
 800daa8:	f840 3b04 	str.w	r3, [r0], #4
 800daac:	f851 3b04 	ldr.w	r3, [r1], #4
 800dab0:	f840 3b04 	str.w	r3, [r0], #4
 800dab4:	f851 3b04 	ldr.w	r3, [r1], #4
 800dab8:	f840 3b04 	str.w	r3, [r0], #4
 800dabc:	3a40      	subs	r2, #64	; 0x40
 800dabe:	d2bd      	bcs.n	800da3c <memcpy+0x10>
 800dac0:	3230      	adds	r2, #48	; 0x30
 800dac2:	d311      	bcc.n	800dae8 <memcpy+0xbc>
 800dac4:	f851 3b04 	ldr.w	r3, [r1], #4
 800dac8:	f840 3b04 	str.w	r3, [r0], #4
 800dacc:	f851 3b04 	ldr.w	r3, [r1], #4
 800dad0:	f840 3b04 	str.w	r3, [r0], #4
 800dad4:	f851 3b04 	ldr.w	r3, [r1], #4
 800dad8:	f840 3b04 	str.w	r3, [r0], #4
 800dadc:	f851 3b04 	ldr.w	r3, [r1], #4
 800dae0:	f840 3b04 	str.w	r3, [r0], #4
 800dae4:	3a10      	subs	r2, #16
 800dae6:	d2ed      	bcs.n	800dac4 <memcpy+0x98>
 800dae8:	320c      	adds	r2, #12
 800daea:	d305      	bcc.n	800daf8 <memcpy+0xcc>
 800daec:	f851 3b04 	ldr.w	r3, [r1], #4
 800daf0:	f840 3b04 	str.w	r3, [r0], #4
 800daf4:	3a04      	subs	r2, #4
 800daf6:	d2f9      	bcs.n	800daec <memcpy+0xc0>
 800daf8:	3204      	adds	r2, #4
 800dafa:	d008      	beq.n	800db0e <memcpy+0xe2>
 800dafc:	07d2      	lsls	r2, r2, #31
 800dafe:	bf1c      	itt	ne
 800db00:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800db04:	f800 3b01 	strbne.w	r3, [r0], #1
 800db08:	d301      	bcc.n	800db0e <memcpy+0xe2>
 800db0a:	880b      	ldrh	r3, [r1, #0]
 800db0c:	8003      	strh	r3, [r0, #0]
 800db0e:	4660      	mov	r0, ip
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	2a08      	cmp	r2, #8
 800db16:	d313      	bcc.n	800db40 <memcpy+0x114>
 800db18:	078b      	lsls	r3, r1, #30
 800db1a:	d08d      	beq.n	800da38 <memcpy+0xc>
 800db1c:	f010 0303 	ands.w	r3, r0, #3
 800db20:	d08a      	beq.n	800da38 <memcpy+0xc>
 800db22:	f1c3 0304 	rsb	r3, r3, #4
 800db26:	1ad2      	subs	r2, r2, r3
 800db28:	07db      	lsls	r3, r3, #31
 800db2a:	bf1c      	itt	ne
 800db2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800db30:	f800 3b01 	strbne.w	r3, [r0], #1
 800db34:	d380      	bcc.n	800da38 <memcpy+0xc>
 800db36:	f831 3b02 	ldrh.w	r3, [r1], #2
 800db3a:	f820 3b02 	strh.w	r3, [r0], #2
 800db3e:	e77b      	b.n	800da38 <memcpy+0xc>
 800db40:	3a04      	subs	r2, #4
 800db42:	d3d9      	bcc.n	800daf8 <memcpy+0xcc>
 800db44:	3a01      	subs	r2, #1
 800db46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db4a:	f800 3b01 	strb.w	r3, [r0], #1
 800db4e:	d2f9      	bcs.n	800db44 <memcpy+0x118>
 800db50:	780b      	ldrb	r3, [r1, #0]
 800db52:	7003      	strb	r3, [r0, #0]
 800db54:	784b      	ldrb	r3, [r1, #1]
 800db56:	7043      	strb	r3, [r0, #1]
 800db58:	788b      	ldrb	r3, [r1, #2]
 800db5a:	7083      	strb	r3, [r0, #2]
 800db5c:	4660      	mov	r0, ip
 800db5e:	4770      	bx	lr
 800db60:	eba2 0003 	sub.w	r0, r2, r3
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop

0800db68 <strcmp>:
 800db68:	7802      	ldrb	r2, [r0, #0]
 800db6a:	780b      	ldrb	r3, [r1, #0]
 800db6c:	2a01      	cmp	r2, #1
 800db6e:	bf28      	it	cs
 800db70:	429a      	cmpcs	r2, r3
 800db72:	d1f5      	bne.n	800db60 <memcpy+0x134>
 800db74:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 800db78:	ea40 0401 	orr.w	r4, r0, r1
 800db7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800db80:	f06f 0c00 	mvn.w	ip, #0
 800db84:	ea4f 7244 	mov.w	r2, r4, lsl #29
 800db88:	b312      	cbz	r2, 800dbd0 <strcmp+0x68>
 800db8a:	ea80 0401 	eor.w	r4, r0, r1
 800db8e:	f014 0f07 	tst.w	r4, #7
 800db92:	d16a      	bne.n	800dc6a <strcmp+0x102>
 800db94:	f000 0407 	and.w	r4, r0, #7
 800db98:	f020 0007 	bic.w	r0, r0, #7
 800db9c:	f004 0503 	and.w	r5, r4, #3
 800dba0:	f021 0107 	bic.w	r1, r1, #7
 800dba4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800dba8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800dbac:	f014 0f04 	tst.w	r4, #4
 800dbb0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800dbb4:	fa0c f405 	lsl.w	r4, ip, r5
 800dbb8:	ea62 0204 	orn	r2, r2, r4
 800dbbc:	ea66 0604 	orn	r6, r6, r4
 800dbc0:	d00a      	beq.n	800dbd8 <strcmp+0x70>
 800dbc2:	ea63 0304 	orn	r3, r3, r4
 800dbc6:	4662      	mov	r2, ip
 800dbc8:	ea67 0704 	orn	r7, r7, r4
 800dbcc:	4666      	mov	r6, ip
 800dbce:	e003      	b.n	800dbd8 <strcmp+0x70>
 800dbd0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800dbd4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800dbd8:	fa82 f54c 	uadd8	r5, r2, ip
 800dbdc:	ea82 0406 	eor.w	r4, r2, r6
 800dbe0:	faa4 f48c 	sel	r4, r4, ip
 800dbe4:	bb6c      	cbnz	r4, 800dc42 <strcmp+0xda>
 800dbe6:	fa83 f54c 	uadd8	r5, r3, ip
 800dbea:	ea83 0507 	eor.w	r5, r3, r7
 800dbee:	faa5 f58c 	sel	r5, r5, ip
 800dbf2:	b995      	cbnz	r5, 800dc1a <strcmp+0xb2>
 800dbf4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 800dbf8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800dbfc:	fa82 f54c 	uadd8	r5, r2, ip
 800dc00:	ea82 0406 	eor.w	r4, r2, r6
 800dc04:	faa4 f48c 	sel	r4, r4, ip
 800dc08:	fa83 f54c 	uadd8	r5, r3, ip
 800dc0c:	ea83 0507 	eor.w	r5, r3, r7
 800dc10:	faa5 f58c 	sel	r5, r5, ip
 800dc14:	4325      	orrs	r5, r4
 800dc16:	d0db      	beq.n	800dbd0 <strcmp+0x68>
 800dc18:	b99c      	cbnz	r4, 800dc42 <strcmp+0xda>
 800dc1a:	ba2d      	rev	r5, r5
 800dc1c:	fab5 f485 	clz	r4, r5
 800dc20:	f024 0407 	bic.w	r4, r4, #7
 800dc24:	fa27 f104 	lsr.w	r1, r7, r4
 800dc28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc2c:	fa23 f304 	lsr.w	r3, r3, r4
 800dc30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800dc34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800dc38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800dc3c:	eba0 0001 	sub.w	r0, r0, r1
 800dc40:	4770      	bx	lr
 800dc42:	ba24      	rev	r4, r4
 800dc44:	fab4 f484 	clz	r4, r4
 800dc48:	f024 0407 	bic.w	r4, r4, #7
 800dc4c:	fa26 f104 	lsr.w	r1, r6, r4
 800dc50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc54:	fa22 f204 	lsr.w	r2, r2, r4
 800dc58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800dc5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800dc60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800dc64:	eba0 0001 	sub.w	r0, r0, r1
 800dc68:	4770      	bx	lr
 800dc6a:	f014 0f03 	tst.w	r4, #3
 800dc6e:	d13c      	bne.n	800dcea <strcmp+0x182>
 800dc70:	f010 0403 	ands.w	r4, r0, #3
 800dc74:	d128      	bne.n	800dcc8 <strcmp+0x160>
 800dc76:	f850 2b08 	ldr.w	r2, [r0], #8
 800dc7a:	f851 3b08 	ldr.w	r3, [r1], #8
 800dc7e:	fa82 f54c 	uadd8	r5, r2, ip
 800dc82:	ea82 0503 	eor.w	r5, r2, r3
 800dc86:	faa5 f58c 	sel	r5, r5, ip
 800dc8a:	b95d      	cbnz	r5, 800dca4 <strcmp+0x13c>
 800dc8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800dc90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc94:	fa82 f54c 	uadd8	r5, r2, ip
 800dc98:	ea82 0503 	eor.w	r5, r2, r3
 800dc9c:	faa5 f58c 	sel	r5, r5, ip
 800dca0:	2d00      	cmp	r5, #0
 800dca2:	d0e8      	beq.n	800dc76 <strcmp+0x10e>
 800dca4:	ba2d      	rev	r5, r5
 800dca6:	fab5 f485 	clz	r4, r5
 800dcaa:	f024 0407 	bic.w	r4, r4, #7
 800dcae:	fa23 f104 	lsr.w	r1, r3, r4
 800dcb2:	fa22 f204 	lsr.w	r2, r2, r4
 800dcb6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800dcba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800dcbe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800dcc2:	eba0 0001 	sub.w	r0, r0, r1
 800dcc6:	4770      	bx	lr
 800dcc8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800dccc:	f020 0003 	bic.w	r0, r0, #3
 800dcd0:	f850 2b08 	ldr.w	r2, [r0], #8
 800dcd4:	f021 0103 	bic.w	r1, r1, #3
 800dcd8:	f851 3b08 	ldr.w	r3, [r1], #8
 800dcdc:	fa0c f404 	lsl.w	r4, ip, r4
 800dce0:	ea62 0204 	orn	r2, r2, r4
 800dce4:	ea63 0304 	orn	r3, r3, r4
 800dce8:	e7c9      	b.n	800dc7e <strcmp+0x116>
 800dcea:	f010 0403 	ands.w	r4, r0, #3
 800dcee:	d01a      	beq.n	800dd26 <strcmp+0x1be>
 800dcf0:	eba1 0104 	sub.w	r1, r1, r4
 800dcf4:	f020 0003 	bic.w	r0, r0, #3
 800dcf8:	07e4      	lsls	r4, r4, #31
 800dcfa:	f850 2b04 	ldr.w	r2, [r0], #4
 800dcfe:	d006      	beq.n	800dd0e <strcmp+0x1a6>
 800dd00:	d20f      	bcs.n	800dd22 <strcmp+0x1ba>
 800dd02:	788b      	ldrb	r3, [r1, #2]
 800dd04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 800dd08:	1ae4      	subs	r4, r4, r3
 800dd0a:	d106      	bne.n	800dd1a <strcmp+0x1b2>
 800dd0c:	b12b      	cbz	r3, 800dd1a <strcmp+0x1b2>
 800dd0e:	78cb      	ldrb	r3, [r1, #3]
 800dd10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 800dd14:	1ae4      	subs	r4, r4, r3
 800dd16:	d100      	bne.n	800dd1a <strcmp+0x1b2>
 800dd18:	b91b      	cbnz	r3, 800dd22 <strcmp+0x1ba>
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f85d 4b10 	ldr.w	r4, [sp], #16
 800dd20:	4770      	bx	lr
 800dd22:	f101 0104 	add.w	r1, r1, #4
 800dd26:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd2a:	07cc      	lsls	r4, r1, #31
 800dd2c:	f021 0103 	bic.w	r1, r1, #3
 800dd30:	f851 3b04 	ldr.w	r3, [r1], #4
 800dd34:	d848      	bhi.n	800ddc8 <strcmp+0x260>
 800dd36:	d224      	bcs.n	800dd82 <strcmp+0x21a>
 800dd38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800dd3c:	fa82 f54c 	uadd8	r5, r2, ip
 800dd40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 800dd44:	faa5 f58c 	sel	r5, r5, ip
 800dd48:	d10a      	bne.n	800dd60 <strcmp+0x1f8>
 800dd4a:	b965      	cbnz	r5, 800dd66 <strcmp+0x1fe>
 800dd4c:	f851 3b04 	ldr.w	r3, [r1], #4
 800dd50:	ea84 0402 	eor.w	r4, r4, r2
 800dd54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 800dd58:	d10e      	bne.n	800dd78 <strcmp+0x210>
 800dd5a:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd5e:	e7eb      	b.n	800dd38 <strcmp+0x1d0>
 800dd60:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800dd64:	e055      	b.n	800de12 <strcmp+0x2aa>
 800dd66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800dd6a:	d14d      	bne.n	800de08 <strcmp+0x2a0>
 800dd6c:	7808      	ldrb	r0, [r1, #0]
 800dd6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800dd72:	f1c0 0000 	rsb	r0, r0, #0
 800dd76:	4770      	bx	lr
 800dd78:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800dd7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800dd80:	e047      	b.n	800de12 <strcmp+0x2aa>
 800dd82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 800dd86:	fa82 f54c 	uadd8	r5, r2, ip
 800dd8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800dd8e:	faa5 f58c 	sel	r5, r5, ip
 800dd92:	d10a      	bne.n	800ddaa <strcmp+0x242>
 800dd94:	b965      	cbnz	r5, 800ddb0 <strcmp+0x248>
 800dd96:	f851 3b04 	ldr.w	r3, [r1], #4
 800dd9a:	ea84 0402 	eor.w	r4, r4, r2
 800dd9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 800dda2:	d10c      	bne.n	800ddbe <strcmp+0x256>
 800dda4:	f850 2b04 	ldr.w	r2, [r0], #4
 800dda8:	e7eb      	b.n	800dd82 <strcmp+0x21a>
 800ddaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ddae:	e030      	b.n	800de12 <strcmp+0x2aa>
 800ddb0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 800ddb4:	d128      	bne.n	800de08 <strcmp+0x2a0>
 800ddb6:	880b      	ldrh	r3, [r1, #0]
 800ddb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ddbc:	e029      	b.n	800de12 <strcmp+0x2aa>
 800ddbe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ddc2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 800ddc6:	e024      	b.n	800de12 <strcmp+0x2aa>
 800ddc8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800ddcc:	fa82 f54c 	uadd8	r5, r2, ip
 800ddd0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 800ddd4:	faa5 f58c 	sel	r5, r5, ip
 800ddd8:	d10a      	bne.n	800ddf0 <strcmp+0x288>
 800ddda:	b965      	cbnz	r5, 800ddf6 <strcmp+0x28e>
 800dddc:	f851 3b04 	ldr.w	r3, [r1], #4
 800dde0:	ea84 0402 	eor.w	r4, r4, r2
 800dde4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 800dde8:	d109      	bne.n	800ddfe <strcmp+0x296>
 800ddea:	f850 2b04 	ldr.w	r2, [r0], #4
 800ddee:	e7eb      	b.n	800ddc8 <strcmp+0x260>
 800ddf0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800ddf4:	e00d      	b.n	800de12 <strcmp+0x2aa>
 800ddf6:	f015 0fff 	tst.w	r5, #255	; 0xff
 800ddfa:	d105      	bne.n	800de08 <strcmp+0x2a0>
 800ddfc:	680b      	ldr	r3, [r1, #0]
 800ddfe:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800de02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800de06:	e004      	b.n	800de12 <strcmp+0x2aa>
 800de08:	f04f 0000 	mov.w	r0, #0
 800de0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800de10:	4770      	bx	lr
 800de12:	ba12      	rev	r2, r2
 800de14:	ba1b      	rev	r3, r3
 800de16:	fa82 f44c 	uadd8	r4, r2, ip
 800de1a:	ea82 0403 	eor.w	r4, r2, r3
 800de1e:	faa4 f58c 	sel	r5, r4, ip
 800de22:	fab5 f485 	clz	r4, r5
 800de26:	fa02 f204 	lsl.w	r2, r2, r4
 800de2a:	fa03 f304 	lsl.w	r3, r3, r4
 800de2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 800de32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800de36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800de3a:	4770      	bx	lr

0800de3c <__aeabi_drsub>:
 800de3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800de40:	e002      	b.n	800de48 <__adddf3>
 800de42:	bf00      	nop

0800de44 <__aeabi_dsub>:
 800de44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800de48 <__adddf3>:
 800de48:	b530      	push	{r4, r5, lr}
 800de4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800de4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800de52:	ea94 0f05 	teq	r4, r5
 800de56:	bf08      	it	eq
 800de58:	ea90 0f02 	teqeq	r0, r2
 800de5c:	bf1f      	itttt	ne
 800de5e:	ea54 0c00 	orrsne.w	ip, r4, r0
 800de62:	ea55 0c02 	orrsne.w	ip, r5, r2
 800de66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800de6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800de6e:	f000 80e2 	beq.w	800e036 <__adddf3+0x1ee>
 800de72:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800de76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800de7a:	bfb8      	it	lt
 800de7c:	426d      	neglt	r5, r5
 800de7e:	dd0c      	ble.n	800de9a <__adddf3+0x52>
 800de80:	442c      	add	r4, r5
 800de82:	ea80 0202 	eor.w	r2, r0, r2
 800de86:	ea81 0303 	eor.w	r3, r1, r3
 800de8a:	ea82 0000 	eor.w	r0, r2, r0
 800de8e:	ea83 0101 	eor.w	r1, r3, r1
 800de92:	ea80 0202 	eor.w	r2, r0, r2
 800de96:	ea81 0303 	eor.w	r3, r1, r3
 800de9a:	2d36      	cmp	r5, #54	; 0x36
 800de9c:	bf88      	it	hi
 800de9e:	bd30      	pophi	{r4, r5, pc}
 800dea0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800dea4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800dea8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800deac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800deb0:	d002      	beq.n	800deb8 <__adddf3+0x70>
 800deb2:	4240      	negs	r0, r0
 800deb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800deb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800debc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800dec0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800dec4:	d002      	beq.n	800decc <__adddf3+0x84>
 800dec6:	4252      	negs	r2, r2
 800dec8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800decc:	ea94 0f05 	teq	r4, r5
 800ded0:	f000 80a7 	beq.w	800e022 <__adddf3+0x1da>
 800ded4:	f1a4 0401 	sub.w	r4, r4, #1
 800ded8:	f1d5 0e20 	rsbs	lr, r5, #32
 800dedc:	db0d      	blt.n	800defa <__adddf3+0xb2>
 800dede:	fa02 fc0e 	lsl.w	ip, r2, lr
 800dee2:	fa22 f205 	lsr.w	r2, r2, r5
 800dee6:	1880      	adds	r0, r0, r2
 800dee8:	f141 0100 	adc.w	r1, r1, #0
 800deec:	fa03 f20e 	lsl.w	r2, r3, lr
 800def0:	1880      	adds	r0, r0, r2
 800def2:	fa43 f305 	asr.w	r3, r3, r5
 800def6:	4159      	adcs	r1, r3
 800def8:	e00e      	b.n	800df18 <__adddf3+0xd0>
 800defa:	f1a5 0520 	sub.w	r5, r5, #32
 800defe:	f10e 0e20 	add.w	lr, lr, #32
 800df02:	2a01      	cmp	r2, #1
 800df04:	fa03 fc0e 	lsl.w	ip, r3, lr
 800df08:	bf28      	it	cs
 800df0a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800df0e:	fa43 f305 	asr.w	r3, r3, r5
 800df12:	18c0      	adds	r0, r0, r3
 800df14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800df18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800df1c:	d507      	bpl.n	800df2e <__adddf3+0xe6>
 800df1e:	f04f 0e00 	mov.w	lr, #0
 800df22:	f1dc 0c00 	rsbs	ip, ip, #0
 800df26:	eb7e 0000 	sbcs.w	r0, lr, r0
 800df2a:	eb6e 0101 	sbc.w	r1, lr, r1
 800df2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800df32:	d31b      	bcc.n	800df6c <__adddf3+0x124>
 800df34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800df38:	d30c      	bcc.n	800df54 <__adddf3+0x10c>
 800df3a:	0849      	lsrs	r1, r1, #1
 800df3c:	ea5f 0030 	movs.w	r0, r0, rrx
 800df40:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800df44:	f104 0401 	add.w	r4, r4, #1
 800df48:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800df4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800df50:	f080 809a 	bcs.w	800e088 <__adddf3+0x240>
 800df54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800df58:	bf08      	it	eq
 800df5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800df5e:	f150 0000 	adcs.w	r0, r0, #0
 800df62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800df66:	ea41 0105 	orr.w	r1, r1, r5
 800df6a:	bd30      	pop	{r4, r5, pc}
 800df6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800df70:	4140      	adcs	r0, r0
 800df72:	eb41 0101 	adc.w	r1, r1, r1
 800df76:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800df7a:	f1a4 0401 	sub.w	r4, r4, #1
 800df7e:	d1e9      	bne.n	800df54 <__adddf3+0x10c>
 800df80:	f091 0f00 	teq	r1, #0
 800df84:	bf04      	itt	eq
 800df86:	4601      	moveq	r1, r0
 800df88:	2000      	moveq	r0, #0
 800df8a:	fab1 f381 	clz	r3, r1
 800df8e:	bf08      	it	eq
 800df90:	3320      	addeq	r3, #32
 800df92:	f1a3 030b 	sub.w	r3, r3, #11
 800df96:	f1b3 0220 	subs.w	r2, r3, #32
 800df9a:	da0c      	bge.n	800dfb6 <__adddf3+0x16e>
 800df9c:	320c      	adds	r2, #12
 800df9e:	dd08      	ble.n	800dfb2 <__adddf3+0x16a>
 800dfa0:	f102 0c14 	add.w	ip, r2, #20
 800dfa4:	f1c2 020c 	rsb	r2, r2, #12
 800dfa8:	fa01 f00c 	lsl.w	r0, r1, ip
 800dfac:	fa21 f102 	lsr.w	r1, r1, r2
 800dfb0:	e00c      	b.n	800dfcc <__adddf3+0x184>
 800dfb2:	f102 0214 	add.w	r2, r2, #20
 800dfb6:	bfd8      	it	le
 800dfb8:	f1c2 0c20 	rsble	ip, r2, #32
 800dfbc:	fa01 f102 	lsl.w	r1, r1, r2
 800dfc0:	fa20 fc0c 	lsr.w	ip, r0, ip
 800dfc4:	bfdc      	itt	le
 800dfc6:	ea41 010c 	orrle.w	r1, r1, ip
 800dfca:	4090      	lslle	r0, r2
 800dfcc:	1ae4      	subs	r4, r4, r3
 800dfce:	bfa2      	ittt	ge
 800dfd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800dfd4:	4329      	orrge	r1, r5
 800dfd6:	bd30      	popge	{r4, r5, pc}
 800dfd8:	ea6f 0404 	mvn.w	r4, r4
 800dfdc:	3c1f      	subs	r4, #31
 800dfde:	da1c      	bge.n	800e01a <__adddf3+0x1d2>
 800dfe0:	340c      	adds	r4, #12
 800dfe2:	dc0e      	bgt.n	800e002 <__adddf3+0x1ba>
 800dfe4:	f104 0414 	add.w	r4, r4, #20
 800dfe8:	f1c4 0220 	rsb	r2, r4, #32
 800dfec:	fa20 f004 	lsr.w	r0, r0, r4
 800dff0:	fa01 f302 	lsl.w	r3, r1, r2
 800dff4:	ea40 0003 	orr.w	r0, r0, r3
 800dff8:	fa21 f304 	lsr.w	r3, r1, r4
 800dffc:	ea45 0103 	orr.w	r1, r5, r3
 800e000:	bd30      	pop	{r4, r5, pc}
 800e002:	f1c4 040c 	rsb	r4, r4, #12
 800e006:	f1c4 0220 	rsb	r2, r4, #32
 800e00a:	fa20 f002 	lsr.w	r0, r0, r2
 800e00e:	fa01 f304 	lsl.w	r3, r1, r4
 800e012:	ea40 0003 	orr.w	r0, r0, r3
 800e016:	4629      	mov	r1, r5
 800e018:	bd30      	pop	{r4, r5, pc}
 800e01a:	fa21 f004 	lsr.w	r0, r1, r4
 800e01e:	4629      	mov	r1, r5
 800e020:	bd30      	pop	{r4, r5, pc}
 800e022:	f094 0f00 	teq	r4, #0
 800e026:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800e02a:	bf06      	itte	eq
 800e02c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800e030:	3401      	addeq	r4, #1
 800e032:	3d01      	subne	r5, #1
 800e034:	e74e      	b.n	800ded4 <__adddf3+0x8c>
 800e036:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e03a:	bf18      	it	ne
 800e03c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e040:	d029      	beq.n	800e096 <__adddf3+0x24e>
 800e042:	ea94 0f05 	teq	r4, r5
 800e046:	bf08      	it	eq
 800e048:	ea90 0f02 	teqeq	r0, r2
 800e04c:	d005      	beq.n	800e05a <__adddf3+0x212>
 800e04e:	ea54 0c00 	orrs.w	ip, r4, r0
 800e052:	bf04      	itt	eq
 800e054:	4619      	moveq	r1, r3
 800e056:	4610      	moveq	r0, r2
 800e058:	bd30      	pop	{r4, r5, pc}
 800e05a:	ea91 0f03 	teq	r1, r3
 800e05e:	bf1e      	ittt	ne
 800e060:	2100      	movne	r1, #0
 800e062:	2000      	movne	r0, #0
 800e064:	bd30      	popne	{r4, r5, pc}
 800e066:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800e06a:	d105      	bne.n	800e078 <__adddf3+0x230>
 800e06c:	0040      	lsls	r0, r0, #1
 800e06e:	4149      	adcs	r1, r1
 800e070:	bf28      	it	cs
 800e072:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800e076:	bd30      	pop	{r4, r5, pc}
 800e078:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800e07c:	bf3c      	itt	cc
 800e07e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800e082:	bd30      	popcc	{r4, r5, pc}
 800e084:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e088:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800e08c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e090:	f04f 0000 	mov.w	r0, #0
 800e094:	bd30      	pop	{r4, r5, pc}
 800e096:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e09a:	bf1a      	itte	ne
 800e09c:	4619      	movne	r1, r3
 800e09e:	4610      	movne	r0, r2
 800e0a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800e0a4:	bf1c      	itt	ne
 800e0a6:	460b      	movne	r3, r1
 800e0a8:	4602      	movne	r2, r0
 800e0aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e0ae:	bf06      	itte	eq
 800e0b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800e0b4:	ea91 0f03 	teqeq	r1, r3
 800e0b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800e0bc:	bd30      	pop	{r4, r5, pc}
 800e0be:	bf00      	nop

0800e0c0 <__aeabi_ui2d>:
 800e0c0:	f090 0f00 	teq	r0, #0
 800e0c4:	bf04      	itt	eq
 800e0c6:	2100      	moveq	r1, #0
 800e0c8:	4770      	bxeq	lr
 800e0ca:	b530      	push	{r4, r5, lr}
 800e0cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e0d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e0d4:	f04f 0500 	mov.w	r5, #0
 800e0d8:	f04f 0100 	mov.w	r1, #0
 800e0dc:	e750      	b.n	800df80 <__adddf3+0x138>
 800e0de:	bf00      	nop

0800e0e0 <__aeabi_i2d>:
 800e0e0:	f090 0f00 	teq	r0, #0
 800e0e4:	bf04      	itt	eq
 800e0e6:	2100      	moveq	r1, #0
 800e0e8:	4770      	bxeq	lr
 800e0ea:	b530      	push	{r4, r5, lr}
 800e0ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e0f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e0f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800e0f8:	bf48      	it	mi
 800e0fa:	4240      	negmi	r0, r0
 800e0fc:	f04f 0100 	mov.w	r1, #0
 800e100:	e73e      	b.n	800df80 <__adddf3+0x138>
 800e102:	bf00      	nop

0800e104 <__aeabi_f2d>:
 800e104:	0042      	lsls	r2, r0, #1
 800e106:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800e10a:	ea4f 0131 	mov.w	r1, r1, rrx
 800e10e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800e112:	bf1f      	itttt	ne
 800e114:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800e118:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e11c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800e120:	4770      	bxne	lr
 800e122:	f092 0f00 	teq	r2, #0
 800e126:	bf14      	ite	ne
 800e128:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e12c:	4770      	bxeq	lr
 800e12e:	b530      	push	{r4, r5, lr}
 800e130:	f44f 7460 	mov.w	r4, #896	; 0x380
 800e134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e13c:	e720      	b.n	800df80 <__adddf3+0x138>
 800e13e:	bf00      	nop

0800e140 <__aeabi_ul2d>:
 800e140:	ea50 0201 	orrs.w	r2, r0, r1
 800e144:	bf08      	it	eq
 800e146:	4770      	bxeq	lr
 800e148:	b530      	push	{r4, r5, lr}
 800e14a:	f04f 0500 	mov.w	r5, #0
 800e14e:	e00a      	b.n	800e166 <__aeabi_l2d+0x16>

0800e150 <__aeabi_l2d>:
 800e150:	ea50 0201 	orrs.w	r2, r0, r1
 800e154:	bf08      	it	eq
 800e156:	4770      	bxeq	lr
 800e158:	b530      	push	{r4, r5, lr}
 800e15a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800e15e:	d502      	bpl.n	800e166 <__aeabi_l2d+0x16>
 800e160:	4240      	negs	r0, r0
 800e162:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e166:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e16a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e16e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800e172:	f43f aedc 	beq.w	800df2e <__adddf3+0xe6>
 800e176:	f04f 0203 	mov.w	r2, #3
 800e17a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e17e:	bf18      	it	ne
 800e180:	3203      	addne	r2, #3
 800e182:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e186:	bf18      	it	ne
 800e188:	3203      	addne	r2, #3
 800e18a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800e18e:	f1c2 0320 	rsb	r3, r2, #32
 800e192:	fa00 fc03 	lsl.w	ip, r0, r3
 800e196:	fa20 f002 	lsr.w	r0, r0, r2
 800e19a:	fa01 fe03 	lsl.w	lr, r1, r3
 800e19e:	ea40 000e 	orr.w	r0, r0, lr
 800e1a2:	fa21 f102 	lsr.w	r1, r1, r2
 800e1a6:	4414      	add	r4, r2
 800e1a8:	e6c1      	b.n	800df2e <__adddf3+0xe6>
 800e1aa:	bf00      	nop

0800e1ac <__aeabi_dmul>:
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e1b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e1b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e1ba:	bf1d      	ittte	ne
 800e1bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e1c0:	ea94 0f0c 	teqne	r4, ip
 800e1c4:	ea95 0f0c 	teqne	r5, ip
 800e1c8:	f000 f8de 	bleq	800e388 <__aeabi_dmul+0x1dc>
 800e1cc:	442c      	add	r4, r5
 800e1ce:	ea81 0603 	eor.w	r6, r1, r3
 800e1d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800e1d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800e1da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800e1de:	bf18      	it	ne
 800e1e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800e1e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e1e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1ec:	d038      	beq.n	800e260 <__aeabi_dmul+0xb4>
 800e1ee:	fba0 ce02 	umull	ip, lr, r0, r2
 800e1f2:	f04f 0500 	mov.w	r5, #0
 800e1f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 800e1fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800e1fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 800e202:	f04f 0600 	mov.w	r6, #0
 800e206:	fbe1 5603 	umlal	r5, r6, r1, r3
 800e20a:	f09c 0f00 	teq	ip, #0
 800e20e:	bf18      	it	ne
 800e210:	f04e 0e01 	orrne.w	lr, lr, #1
 800e214:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800e218:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800e21c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800e220:	d204      	bcs.n	800e22c <__aeabi_dmul+0x80>
 800e222:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800e226:	416d      	adcs	r5, r5
 800e228:	eb46 0606 	adc.w	r6, r6, r6
 800e22c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800e230:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800e234:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800e238:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800e23c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800e240:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e244:	bf88      	it	hi
 800e246:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e24a:	d81e      	bhi.n	800e28a <__aeabi_dmul+0xde>
 800e24c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800e250:	bf08      	it	eq
 800e252:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800e256:	f150 0000 	adcs.w	r0, r0, #0
 800e25a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e25e:	bd70      	pop	{r4, r5, r6, pc}
 800e260:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800e264:	ea46 0101 	orr.w	r1, r6, r1
 800e268:	ea40 0002 	orr.w	r0, r0, r2
 800e26c:	ea81 0103 	eor.w	r1, r1, r3
 800e270:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800e274:	bfc2      	ittt	gt
 800e276:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e27a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e27e:	bd70      	popgt	{r4, r5, r6, pc}
 800e280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e284:	f04f 0e00 	mov.w	lr, #0
 800e288:	3c01      	subs	r4, #1
 800e28a:	f300 80ab 	bgt.w	800e3e4 <__aeabi_dmul+0x238>
 800e28e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800e292:	bfde      	ittt	le
 800e294:	2000      	movle	r0, #0
 800e296:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800e29a:	bd70      	pople	{r4, r5, r6, pc}
 800e29c:	f1c4 0400 	rsb	r4, r4, #0
 800e2a0:	3c20      	subs	r4, #32
 800e2a2:	da35      	bge.n	800e310 <__aeabi_dmul+0x164>
 800e2a4:	340c      	adds	r4, #12
 800e2a6:	dc1b      	bgt.n	800e2e0 <__aeabi_dmul+0x134>
 800e2a8:	f104 0414 	add.w	r4, r4, #20
 800e2ac:	f1c4 0520 	rsb	r5, r4, #32
 800e2b0:	fa00 f305 	lsl.w	r3, r0, r5
 800e2b4:	fa20 f004 	lsr.w	r0, r0, r4
 800e2b8:	fa01 f205 	lsl.w	r2, r1, r5
 800e2bc:	ea40 0002 	orr.w	r0, r0, r2
 800e2c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800e2c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e2c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800e2cc:	fa21 f604 	lsr.w	r6, r1, r4
 800e2d0:	eb42 0106 	adc.w	r1, r2, r6
 800e2d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e2d8:	bf08      	it	eq
 800e2da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e2de:	bd70      	pop	{r4, r5, r6, pc}
 800e2e0:	f1c4 040c 	rsb	r4, r4, #12
 800e2e4:	f1c4 0520 	rsb	r5, r4, #32
 800e2e8:	fa00 f304 	lsl.w	r3, r0, r4
 800e2ec:	fa20 f005 	lsr.w	r0, r0, r5
 800e2f0:	fa01 f204 	lsl.w	r2, r1, r4
 800e2f4:	ea40 0002 	orr.w	r0, r0, r2
 800e2f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e2fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800e300:	f141 0100 	adc.w	r1, r1, #0
 800e304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e308:	bf08      	it	eq
 800e30a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e30e:	bd70      	pop	{r4, r5, r6, pc}
 800e310:	f1c4 0520 	rsb	r5, r4, #32
 800e314:	fa00 f205 	lsl.w	r2, r0, r5
 800e318:	ea4e 0e02 	orr.w	lr, lr, r2
 800e31c:	fa20 f304 	lsr.w	r3, r0, r4
 800e320:	fa01 f205 	lsl.w	r2, r1, r5
 800e324:	ea43 0302 	orr.w	r3, r3, r2
 800e328:	fa21 f004 	lsr.w	r0, r1, r4
 800e32c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e330:	fa21 f204 	lsr.w	r2, r1, r4
 800e334:	ea20 0002 	bic.w	r0, r0, r2
 800e338:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800e33c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800e340:	bf08      	it	eq
 800e342:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800e346:	bd70      	pop	{r4, r5, r6, pc}
 800e348:	f094 0f00 	teq	r4, #0
 800e34c:	d10f      	bne.n	800e36e <__aeabi_dmul+0x1c2>
 800e34e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800e352:	0040      	lsls	r0, r0, #1
 800e354:	eb41 0101 	adc.w	r1, r1, r1
 800e358:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e35c:	bf08      	it	eq
 800e35e:	3c01      	subeq	r4, #1
 800e360:	d0f7      	beq.n	800e352 <__aeabi_dmul+0x1a6>
 800e362:	ea41 0106 	orr.w	r1, r1, r6
 800e366:	f095 0f00 	teq	r5, #0
 800e36a:	bf18      	it	ne
 800e36c:	4770      	bxne	lr
 800e36e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800e372:	0052      	lsls	r2, r2, #1
 800e374:	eb43 0303 	adc.w	r3, r3, r3
 800e378:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800e37c:	bf08      	it	eq
 800e37e:	3d01      	subeq	r5, #1
 800e380:	d0f7      	beq.n	800e372 <__aeabi_dmul+0x1c6>
 800e382:	ea43 0306 	orr.w	r3, r3, r6
 800e386:	4770      	bx	lr
 800e388:	ea94 0f0c 	teq	r4, ip
 800e38c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e390:	bf18      	it	ne
 800e392:	ea95 0f0c 	teqne	r5, ip
 800e396:	d00c      	beq.n	800e3b2 <__aeabi_dmul+0x206>
 800e398:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e39c:	bf18      	it	ne
 800e39e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e3a2:	d1d1      	bne.n	800e348 <__aeabi_dmul+0x19c>
 800e3a4:	ea81 0103 	eor.w	r1, r1, r3
 800e3a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e3ac:	f04f 0000 	mov.w	r0, #0
 800e3b0:	bd70      	pop	{r4, r5, r6, pc}
 800e3b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e3b6:	bf06      	itte	eq
 800e3b8:	4610      	moveq	r0, r2
 800e3ba:	4619      	moveq	r1, r3
 800e3bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e3c0:	d019      	beq.n	800e3f6 <__aeabi_dmul+0x24a>
 800e3c2:	ea94 0f0c 	teq	r4, ip
 800e3c6:	d102      	bne.n	800e3ce <__aeabi_dmul+0x222>
 800e3c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800e3cc:	d113      	bne.n	800e3f6 <__aeabi_dmul+0x24a>
 800e3ce:	ea95 0f0c 	teq	r5, ip
 800e3d2:	d105      	bne.n	800e3e0 <__aeabi_dmul+0x234>
 800e3d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800e3d8:	bf1c      	itt	ne
 800e3da:	4610      	movne	r0, r2
 800e3dc:	4619      	movne	r1, r3
 800e3de:	d10a      	bne.n	800e3f6 <__aeabi_dmul+0x24a>
 800e3e0:	ea81 0103 	eor.w	r1, r1, r3
 800e3e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e3e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800e3ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e3f0:	f04f 0000 	mov.w	r0, #0
 800e3f4:	bd70      	pop	{r4, r5, r6, pc}
 800e3f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800e3fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800e3fe:	bd70      	pop	{r4, r5, r6, pc}

0800e400 <__aeabi_ddiv>:
 800e400:	b570      	push	{r4, r5, r6, lr}
 800e402:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e406:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e40a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e40e:	bf1d      	ittte	ne
 800e410:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e414:	ea94 0f0c 	teqne	r4, ip
 800e418:	ea95 0f0c 	teqne	r5, ip
 800e41c:	f000 f8a7 	bleq	800e56e <__aeabi_ddiv+0x16e>
 800e420:	eba4 0405 	sub.w	r4, r4, r5
 800e424:	ea81 0e03 	eor.w	lr, r1, r3
 800e428:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e42c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e430:	f000 8088 	beq.w	800e544 <__aeabi_ddiv+0x144>
 800e434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e438:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800e43c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800e440:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800e444:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e448:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800e44c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800e450:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800e454:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800e458:	429d      	cmp	r5, r3
 800e45a:	bf08      	it	eq
 800e45c:	4296      	cmpeq	r6, r2
 800e45e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800e462:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800e466:	d202      	bcs.n	800e46e <__aeabi_ddiv+0x6e>
 800e468:	085b      	lsrs	r3, r3, #1
 800e46a:	ea4f 0232 	mov.w	r2, r2, rrx
 800e46e:	1ab6      	subs	r6, r6, r2
 800e470:	eb65 0503 	sbc.w	r5, r5, r3
 800e474:	085b      	lsrs	r3, r3, #1
 800e476:	ea4f 0232 	mov.w	r2, r2, rrx
 800e47a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e47e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800e482:	ebb6 0e02 	subs.w	lr, r6, r2
 800e486:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e48a:	bf22      	ittt	cs
 800e48c:	1ab6      	subcs	r6, r6, r2
 800e48e:	4675      	movcs	r5, lr
 800e490:	ea40 000c 	orrcs.w	r0, r0, ip
 800e494:	085b      	lsrs	r3, r3, #1
 800e496:	ea4f 0232 	mov.w	r2, r2, rrx
 800e49a:	ebb6 0e02 	subs.w	lr, r6, r2
 800e49e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e4a2:	bf22      	ittt	cs
 800e4a4:	1ab6      	subcs	r6, r6, r2
 800e4a6:	4675      	movcs	r5, lr
 800e4a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800e4ac:	085b      	lsrs	r3, r3, #1
 800e4ae:	ea4f 0232 	mov.w	r2, r2, rrx
 800e4b2:	ebb6 0e02 	subs.w	lr, r6, r2
 800e4b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e4ba:	bf22      	ittt	cs
 800e4bc:	1ab6      	subcs	r6, r6, r2
 800e4be:	4675      	movcs	r5, lr
 800e4c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800e4c4:	085b      	lsrs	r3, r3, #1
 800e4c6:	ea4f 0232 	mov.w	r2, r2, rrx
 800e4ca:	ebb6 0e02 	subs.w	lr, r6, r2
 800e4ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e4d2:	bf22      	ittt	cs
 800e4d4:	1ab6      	subcs	r6, r6, r2
 800e4d6:	4675      	movcs	r5, lr
 800e4d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800e4dc:	ea55 0e06 	orrs.w	lr, r5, r6
 800e4e0:	d018      	beq.n	800e514 <__aeabi_ddiv+0x114>
 800e4e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800e4e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800e4ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800e4ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e4f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800e4f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800e4fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800e4fe:	d1c0      	bne.n	800e482 <__aeabi_ddiv+0x82>
 800e500:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e504:	d10b      	bne.n	800e51e <__aeabi_ddiv+0x11e>
 800e506:	ea41 0100 	orr.w	r1, r1, r0
 800e50a:	f04f 0000 	mov.w	r0, #0
 800e50e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800e512:	e7b6      	b.n	800e482 <__aeabi_ddiv+0x82>
 800e514:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e518:	bf04      	itt	eq
 800e51a:	4301      	orreq	r1, r0
 800e51c:	2000      	moveq	r0, #0
 800e51e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e522:	bf88      	it	hi
 800e524:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e528:	f63f aeaf 	bhi.w	800e28a <__aeabi_dmul+0xde>
 800e52c:	ebb5 0c03 	subs.w	ip, r5, r3
 800e530:	bf04      	itt	eq
 800e532:	ebb6 0c02 	subseq.w	ip, r6, r2
 800e536:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e53a:	f150 0000 	adcs.w	r0, r0, #0
 800e53e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e542:	bd70      	pop	{r4, r5, r6, pc}
 800e544:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800e548:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800e54c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800e550:	bfc2      	ittt	gt
 800e552:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e55a:	bd70      	popgt	{r4, r5, r6, pc}
 800e55c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e560:	f04f 0e00 	mov.w	lr, #0
 800e564:	3c01      	subs	r4, #1
 800e566:	e690      	b.n	800e28a <__aeabi_dmul+0xde>
 800e568:	ea45 0e06 	orr.w	lr, r5, r6
 800e56c:	e68d      	b.n	800e28a <__aeabi_dmul+0xde>
 800e56e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e572:	ea94 0f0c 	teq	r4, ip
 800e576:	bf08      	it	eq
 800e578:	ea95 0f0c 	teqeq	r5, ip
 800e57c:	f43f af3b 	beq.w	800e3f6 <__aeabi_dmul+0x24a>
 800e580:	ea94 0f0c 	teq	r4, ip
 800e584:	d10a      	bne.n	800e59c <__aeabi_ddiv+0x19c>
 800e586:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e58a:	f47f af34 	bne.w	800e3f6 <__aeabi_dmul+0x24a>
 800e58e:	ea95 0f0c 	teq	r5, ip
 800e592:	f47f af25 	bne.w	800e3e0 <__aeabi_dmul+0x234>
 800e596:	4610      	mov	r0, r2
 800e598:	4619      	mov	r1, r3
 800e59a:	e72c      	b.n	800e3f6 <__aeabi_dmul+0x24a>
 800e59c:	ea95 0f0c 	teq	r5, ip
 800e5a0:	d106      	bne.n	800e5b0 <__aeabi_ddiv+0x1b0>
 800e5a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e5a6:	f43f aefd 	beq.w	800e3a4 <__aeabi_dmul+0x1f8>
 800e5aa:	4610      	mov	r0, r2
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	e722      	b.n	800e3f6 <__aeabi_dmul+0x24a>
 800e5b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e5b4:	bf18      	it	ne
 800e5b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e5ba:	f47f aec5 	bne.w	800e348 <__aeabi_dmul+0x19c>
 800e5be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800e5c2:	f47f af0d 	bne.w	800e3e0 <__aeabi_dmul+0x234>
 800e5c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800e5ca:	f47f aeeb 	bne.w	800e3a4 <__aeabi_dmul+0x1f8>
 800e5ce:	e712      	b.n	800e3f6 <__aeabi_dmul+0x24a>

0800e5d0 <__gedf2>:
 800e5d0:	f04f 3cff 	mov.w	ip, #4294967295
 800e5d4:	e006      	b.n	800e5e4 <__cmpdf2+0x4>
 800e5d6:	bf00      	nop

0800e5d8 <__ledf2>:
 800e5d8:	f04f 0c01 	mov.w	ip, #1
 800e5dc:	e002      	b.n	800e5e4 <__cmpdf2+0x4>
 800e5de:	bf00      	nop

0800e5e0 <__cmpdf2>:
 800e5e0:	f04f 0c01 	mov.w	ip, #1
 800e5e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 800e5e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e5ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e5f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e5f4:	bf18      	it	ne
 800e5f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800e5fa:	d01b      	beq.n	800e634 <__cmpdf2+0x54>
 800e5fc:	b001      	add	sp, #4
 800e5fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800e602:	bf0c      	ite	eq
 800e604:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800e608:	ea91 0f03 	teqne	r1, r3
 800e60c:	bf02      	ittt	eq
 800e60e:	ea90 0f02 	teqeq	r0, r2
 800e612:	2000      	moveq	r0, #0
 800e614:	4770      	bxeq	lr
 800e616:	f110 0f00 	cmn.w	r0, #0
 800e61a:	ea91 0f03 	teq	r1, r3
 800e61e:	bf58      	it	pl
 800e620:	4299      	cmppl	r1, r3
 800e622:	bf08      	it	eq
 800e624:	4290      	cmpeq	r0, r2
 800e626:	bf2c      	ite	cs
 800e628:	17d8      	asrcs	r0, r3, #31
 800e62a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800e62e:	f040 0001 	orr.w	r0, r0, #1
 800e632:	4770      	bx	lr
 800e634:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e63c:	d102      	bne.n	800e644 <__cmpdf2+0x64>
 800e63e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800e642:	d107      	bne.n	800e654 <__cmpdf2+0x74>
 800e644:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e648:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e64c:	d1d6      	bne.n	800e5fc <__cmpdf2+0x1c>
 800e64e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800e652:	d0d3      	beq.n	800e5fc <__cmpdf2+0x1c>
 800e654:	f85d 0b04 	ldr.w	r0, [sp], #4
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop

0800e65c <__aeabi_cdrcmple>:
 800e65c:	4684      	mov	ip, r0
 800e65e:	4610      	mov	r0, r2
 800e660:	4662      	mov	r2, ip
 800e662:	468c      	mov	ip, r1
 800e664:	4619      	mov	r1, r3
 800e666:	4663      	mov	r3, ip
 800e668:	e000      	b.n	800e66c <__aeabi_cdcmpeq>
 800e66a:	bf00      	nop

0800e66c <__aeabi_cdcmpeq>:
 800e66c:	b501      	push	{r0, lr}
 800e66e:	f7ff ffb7 	bl	800e5e0 <__cmpdf2>
 800e672:	2800      	cmp	r0, #0
 800e674:	bf48      	it	mi
 800e676:	f110 0f00 	cmnmi.w	r0, #0
 800e67a:	bd01      	pop	{r0, pc}

0800e67c <__aeabi_dcmpeq>:
 800e67c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e680:	f7ff fff4 	bl	800e66c <__aeabi_cdcmpeq>
 800e684:	bf0c      	ite	eq
 800e686:	2001      	moveq	r0, #1
 800e688:	2000      	movne	r0, #0
 800e68a:	f85d fb08 	ldr.w	pc, [sp], #8
 800e68e:	bf00      	nop

0800e690 <__aeabi_dcmplt>:
 800e690:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e694:	f7ff ffea 	bl	800e66c <__aeabi_cdcmpeq>
 800e698:	bf34      	ite	cc
 800e69a:	2001      	movcc	r0, #1
 800e69c:	2000      	movcs	r0, #0
 800e69e:	f85d fb08 	ldr.w	pc, [sp], #8
 800e6a2:	bf00      	nop

0800e6a4 <__aeabi_dcmple>:
 800e6a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e6a8:	f7ff ffe0 	bl	800e66c <__aeabi_cdcmpeq>
 800e6ac:	bf94      	ite	ls
 800e6ae:	2001      	movls	r0, #1
 800e6b0:	2000      	movhi	r0, #0
 800e6b2:	f85d fb08 	ldr.w	pc, [sp], #8
 800e6b6:	bf00      	nop

0800e6b8 <__aeabi_dcmpge>:
 800e6b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e6bc:	f7ff ffce 	bl	800e65c <__aeabi_cdrcmple>
 800e6c0:	bf94      	ite	ls
 800e6c2:	2001      	movls	r0, #1
 800e6c4:	2000      	movhi	r0, #0
 800e6c6:	f85d fb08 	ldr.w	pc, [sp], #8
 800e6ca:	bf00      	nop

0800e6cc <__aeabi_dcmpgt>:
 800e6cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e6d0:	f7ff ffc4 	bl	800e65c <__aeabi_cdrcmple>
 800e6d4:	bf34      	ite	cc
 800e6d6:	2001      	movcc	r0, #1
 800e6d8:	2000      	movcs	r0, #0
 800e6da:	f85d fb08 	ldr.w	pc, [sp], #8
 800e6de:	bf00      	nop

0800e6e0 <__aeabi_d2iz>:
 800e6e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800e6e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800e6e8:	d215      	bcs.n	800e716 <__aeabi_d2iz+0x36>
 800e6ea:	d511      	bpl.n	800e710 <__aeabi_d2iz+0x30>
 800e6ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800e6f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800e6f4:	d912      	bls.n	800e71c <__aeabi_d2iz+0x3c>
 800e6f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800e6fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e6fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e702:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800e706:	fa23 f002 	lsr.w	r0, r3, r2
 800e70a:	bf18      	it	ne
 800e70c:	4240      	negne	r0, r0
 800e70e:	4770      	bx	lr
 800e710:	f04f 0000 	mov.w	r0, #0
 800e714:	4770      	bx	lr
 800e716:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800e71a:	d105      	bne.n	800e728 <__aeabi_d2iz+0x48>
 800e71c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800e720:	bf08      	it	eq
 800e722:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800e726:	4770      	bx	lr
 800e728:	f04f 0000 	mov.w	r0, #0
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop

0800e730 <__aeabi_uldivmod>:
 800e730:	b953      	cbnz	r3, 800e748 <__aeabi_uldivmod+0x18>
 800e732:	b94a      	cbnz	r2, 800e748 <__aeabi_uldivmod+0x18>
 800e734:	2900      	cmp	r1, #0
 800e736:	bf08      	it	eq
 800e738:	2800      	cmpeq	r0, #0
 800e73a:	bf1c      	itt	ne
 800e73c:	f04f 31ff 	movne.w	r1, #4294967295
 800e740:	f04f 30ff 	movne.w	r0, #4294967295
 800e744:	f000 b83c 	b.w	800e7c0 <__aeabi_idiv0>
 800e748:	b082      	sub	sp, #8
 800e74a:	46ec      	mov	ip, sp
 800e74c:	e92d 5000 	stmdb	sp!, {ip, lr}
 800e750:	f000 f81e 	bl	800e790 <__gnu_uldivmod_helper>
 800e754:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e758:	b002      	add	sp, #8
 800e75a:	bc0c      	pop	{r2, r3}
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop

0800e760 <__gnu_ldivmod_helper>:
 800e760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e764:	9c06      	ldr	r4, [sp, #24]
 800e766:	4615      	mov	r5, r2
 800e768:	4606      	mov	r6, r0
 800e76a:	460f      	mov	r7, r1
 800e76c:	4698      	mov	r8, r3
 800e76e:	f000 f829 	bl	800e7c4 <__divdi3>
 800e772:	fb05 f301 	mul.w	r3, r5, r1
 800e776:	fb00 3808 	mla	r8, r0, r8, r3
 800e77a:	fba5 2300 	umull	r2, r3, r5, r0
 800e77e:	1ab2      	subs	r2, r6, r2
 800e780:	4443      	add	r3, r8
 800e782:	eb67 0303 	sbc.w	r3, r7, r3
 800e786:	e9c4 2300 	strd	r2, r3, [r4]
 800e78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e78e:	bf00      	nop

0800e790 <__gnu_uldivmod_helper>:
 800e790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e794:	9c06      	ldr	r4, [sp, #24]
 800e796:	4690      	mov	r8, r2
 800e798:	4606      	mov	r6, r0
 800e79a:	460f      	mov	r7, r1
 800e79c:	461d      	mov	r5, r3
 800e79e:	f000 f95f 	bl	800ea60 <__udivdi3>
 800e7a2:	fb00 f505 	mul.w	r5, r0, r5
 800e7a6:	fba0 2308 	umull	r2, r3, r0, r8
 800e7aa:	fb08 5501 	mla	r5, r8, r1, r5
 800e7ae:	1ab2      	subs	r2, r6, r2
 800e7b0:	442b      	add	r3, r5
 800e7b2:	eb67 0303 	sbc.w	r3, r7, r3
 800e7b6:	e9c4 2300 	strd	r2, r3, [r4]
 800e7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7be:	bf00      	nop

0800e7c0 <__aeabi_idiv0>:
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop

0800e7c4 <__divdi3>:
 800e7c4:	2900      	cmp	r1, #0
 800e7c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7ca:	f2c0 80a6 	blt.w	800e91a <__divdi3+0x156>
 800e7ce:	2600      	movs	r6, #0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	f2c0 809c 	blt.w	800e90e <__divdi3+0x14a>
 800e7d6:	4688      	mov	r8, r1
 800e7d8:	4694      	mov	ip, r2
 800e7da:	469e      	mov	lr, r3
 800e7dc:	4615      	mov	r5, r2
 800e7de:	4604      	mov	r4, r0
 800e7e0:	460f      	mov	r7, r1
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d13d      	bne.n	800e862 <__divdi3+0x9e>
 800e7e6:	428a      	cmp	r2, r1
 800e7e8:	d959      	bls.n	800e89e <__divdi3+0xda>
 800e7ea:	fab2 f382 	clz	r3, r2
 800e7ee:	b13b      	cbz	r3, 800e800 <__divdi3+0x3c>
 800e7f0:	f1c3 0220 	rsb	r2, r3, #32
 800e7f4:	409f      	lsls	r7, r3
 800e7f6:	fa20 f202 	lsr.w	r2, r0, r2
 800e7fa:	409d      	lsls	r5, r3
 800e7fc:	4317      	orrs	r7, r2
 800e7fe:	409c      	lsls	r4, r3
 800e800:	0c29      	lsrs	r1, r5, #16
 800e802:	0c22      	lsrs	r2, r4, #16
 800e804:	fbb7 fef1 	udiv	lr, r7, r1
 800e808:	b2a8      	uxth	r0, r5
 800e80a:	fb01 771e 	mls	r7, r1, lr, r7
 800e80e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800e812:	fb00 f30e 	mul.w	r3, r0, lr
 800e816:	42bb      	cmp	r3, r7
 800e818:	d90a      	bls.n	800e830 <__divdi3+0x6c>
 800e81a:	197f      	adds	r7, r7, r5
 800e81c:	f10e 32ff 	add.w	r2, lr, #4294967295
 800e820:	f080 8105 	bcs.w	800ea2e <__divdi3+0x26a>
 800e824:	42bb      	cmp	r3, r7
 800e826:	f240 8102 	bls.w	800ea2e <__divdi3+0x26a>
 800e82a:	f1ae 0e02 	sub.w	lr, lr, #2
 800e82e:	442f      	add	r7, r5
 800e830:	1aff      	subs	r7, r7, r3
 800e832:	b2a4      	uxth	r4, r4
 800e834:	fbb7 f3f1 	udiv	r3, r7, r1
 800e838:	fb01 7713 	mls	r7, r1, r3, r7
 800e83c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800e840:	fb00 f003 	mul.w	r0, r0, r3
 800e844:	42b8      	cmp	r0, r7
 800e846:	d908      	bls.n	800e85a <__divdi3+0x96>
 800e848:	197f      	adds	r7, r7, r5
 800e84a:	f103 32ff 	add.w	r2, r3, #4294967295
 800e84e:	f080 80f0 	bcs.w	800ea32 <__divdi3+0x26e>
 800e852:	42b8      	cmp	r0, r7
 800e854:	f240 80ed 	bls.w	800ea32 <__divdi3+0x26e>
 800e858:	3b02      	subs	r3, #2
 800e85a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800e85e:	2200      	movs	r2, #0
 800e860:	e003      	b.n	800e86a <__divdi3+0xa6>
 800e862:	428b      	cmp	r3, r1
 800e864:	d90f      	bls.n	800e886 <__divdi3+0xc2>
 800e866:	2200      	movs	r2, #0
 800e868:	4613      	mov	r3, r2
 800e86a:	1c34      	adds	r4, r6, #0
 800e86c:	bf18      	it	ne
 800e86e:	2401      	movne	r4, #1
 800e870:	4260      	negs	r0, r4
 800e872:	f04f 0500 	mov.w	r5, #0
 800e876:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800e87a:	4058      	eors	r0, r3
 800e87c:	4051      	eors	r1, r2
 800e87e:	1900      	adds	r0, r0, r4
 800e880:	4169      	adcs	r1, r5
 800e882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e886:	fab3 f283 	clz	r2, r3
 800e88a:	2a00      	cmp	r2, #0
 800e88c:	f040 8086 	bne.w	800e99c <__divdi3+0x1d8>
 800e890:	428b      	cmp	r3, r1
 800e892:	d302      	bcc.n	800e89a <__divdi3+0xd6>
 800e894:	4584      	cmp	ip, r0
 800e896:	f200 80db 	bhi.w	800ea50 <__divdi3+0x28c>
 800e89a:	2301      	movs	r3, #1
 800e89c:	e7e5      	b.n	800e86a <__divdi3+0xa6>
 800e89e:	b912      	cbnz	r2, 800e8a6 <__divdi3+0xe2>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	fbb3 f5f2 	udiv	r5, r3, r2
 800e8a6:	fab5 f085 	clz	r0, r5
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d13b      	bne.n	800e926 <__divdi3+0x162>
 800e8ae:	1b78      	subs	r0, r7, r5
 800e8b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e8b4:	fa1f fc85 	uxth.w	ip, r5
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	fbb0 f8fe 	udiv	r8, r0, lr
 800e8be:	0c21      	lsrs	r1, r4, #16
 800e8c0:	fb0e 0718 	mls	r7, lr, r8, r0
 800e8c4:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800e8c8:	fb0c f308 	mul.w	r3, ip, r8
 800e8cc:	42bb      	cmp	r3, r7
 800e8ce:	d907      	bls.n	800e8e0 <__divdi3+0x11c>
 800e8d0:	197f      	adds	r7, r7, r5
 800e8d2:	f108 31ff 	add.w	r1, r8, #4294967295
 800e8d6:	d202      	bcs.n	800e8de <__divdi3+0x11a>
 800e8d8:	42bb      	cmp	r3, r7
 800e8da:	f200 80bd 	bhi.w	800ea58 <__divdi3+0x294>
 800e8de:	4688      	mov	r8, r1
 800e8e0:	1aff      	subs	r7, r7, r3
 800e8e2:	b2a4      	uxth	r4, r4
 800e8e4:	fbb7 f3fe 	udiv	r3, r7, lr
 800e8e8:	fb0e 7713 	mls	r7, lr, r3, r7
 800e8ec:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800e8f0:	fb0c fc03 	mul.w	ip, ip, r3
 800e8f4:	45bc      	cmp	ip, r7
 800e8f6:	d907      	bls.n	800e908 <__divdi3+0x144>
 800e8f8:	197f      	adds	r7, r7, r5
 800e8fa:	f103 31ff 	add.w	r1, r3, #4294967295
 800e8fe:	d202      	bcs.n	800e906 <__divdi3+0x142>
 800e900:	45bc      	cmp	ip, r7
 800e902:	f200 80a7 	bhi.w	800ea54 <__divdi3+0x290>
 800e906:	460b      	mov	r3, r1
 800e908:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800e90c:	e7ad      	b.n	800e86a <__divdi3+0xa6>
 800e90e:	4252      	negs	r2, r2
 800e910:	ea6f 0606 	mvn.w	r6, r6
 800e914:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e918:	e75d      	b.n	800e7d6 <__divdi3+0x12>
 800e91a:	4240      	negs	r0, r0
 800e91c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e920:	f04f 36ff 	mov.w	r6, #4294967295
 800e924:	e754      	b.n	800e7d0 <__divdi3+0xc>
 800e926:	f1c0 0220 	rsb	r2, r0, #32
 800e92a:	fa24 f102 	lsr.w	r1, r4, r2
 800e92e:	fa07 f300 	lsl.w	r3, r7, r0
 800e932:	4085      	lsls	r5, r0
 800e934:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e938:	40d7      	lsrs	r7, r2
 800e93a:	4319      	orrs	r1, r3
 800e93c:	fbb7 f2fe 	udiv	r2, r7, lr
 800e940:	0c0b      	lsrs	r3, r1, #16
 800e942:	fb0e 7712 	mls	r7, lr, r2, r7
 800e946:	fa1f fc85 	uxth.w	ip, r5
 800e94a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e94e:	fb0c f702 	mul.w	r7, ip, r2
 800e952:	429f      	cmp	r7, r3
 800e954:	fa04 f400 	lsl.w	r4, r4, r0
 800e958:	d907      	bls.n	800e96a <__divdi3+0x1a6>
 800e95a:	195b      	adds	r3, r3, r5
 800e95c:	f102 30ff 	add.w	r0, r2, #4294967295
 800e960:	d274      	bcs.n	800ea4c <__divdi3+0x288>
 800e962:	429f      	cmp	r7, r3
 800e964:	d972      	bls.n	800ea4c <__divdi3+0x288>
 800e966:	3a02      	subs	r2, #2
 800e968:	442b      	add	r3, r5
 800e96a:	1bdf      	subs	r7, r3, r7
 800e96c:	b289      	uxth	r1, r1
 800e96e:	fbb7 f8fe 	udiv	r8, r7, lr
 800e972:	fb0e 7318 	mls	r3, lr, r8, r7
 800e976:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e97a:	fb0c f708 	mul.w	r7, ip, r8
 800e97e:	429f      	cmp	r7, r3
 800e980:	d908      	bls.n	800e994 <__divdi3+0x1d0>
 800e982:	195b      	adds	r3, r3, r5
 800e984:	f108 31ff 	add.w	r1, r8, #4294967295
 800e988:	d25c      	bcs.n	800ea44 <__divdi3+0x280>
 800e98a:	429f      	cmp	r7, r3
 800e98c:	d95a      	bls.n	800ea44 <__divdi3+0x280>
 800e98e:	f1a8 0802 	sub.w	r8, r8, #2
 800e992:	442b      	add	r3, r5
 800e994:	1bd8      	subs	r0, r3, r7
 800e996:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800e99a:	e78e      	b.n	800e8ba <__divdi3+0xf6>
 800e99c:	f1c2 0320 	rsb	r3, r2, #32
 800e9a0:	fa2c f103 	lsr.w	r1, ip, r3
 800e9a4:	fa0e fe02 	lsl.w	lr, lr, r2
 800e9a8:	fa20 f703 	lsr.w	r7, r0, r3
 800e9ac:	ea41 0e0e 	orr.w	lr, r1, lr
 800e9b0:	fa08 f002 	lsl.w	r0, r8, r2
 800e9b4:	fa28 f103 	lsr.w	r1, r8, r3
 800e9b8:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800e9bc:	4338      	orrs	r0, r7
 800e9be:	fbb1 f8f5 	udiv	r8, r1, r5
 800e9c2:	0c03      	lsrs	r3, r0, #16
 800e9c4:	fb05 1118 	mls	r1, r5, r8, r1
 800e9c8:	fa1f f78e 	uxth.w	r7, lr
 800e9cc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800e9d0:	fb07 f308 	mul.w	r3, r7, r8
 800e9d4:	428b      	cmp	r3, r1
 800e9d6:	fa0c fc02 	lsl.w	ip, ip, r2
 800e9da:	d909      	bls.n	800e9f0 <__divdi3+0x22c>
 800e9dc:	eb11 010e 	adds.w	r1, r1, lr
 800e9e0:	f108 39ff 	add.w	r9, r8, #4294967295
 800e9e4:	d230      	bcs.n	800ea48 <__divdi3+0x284>
 800e9e6:	428b      	cmp	r3, r1
 800e9e8:	d92e      	bls.n	800ea48 <__divdi3+0x284>
 800e9ea:	f1a8 0802 	sub.w	r8, r8, #2
 800e9ee:	4471      	add	r1, lr
 800e9f0:	1ac9      	subs	r1, r1, r3
 800e9f2:	b280      	uxth	r0, r0
 800e9f4:	fbb1 f3f5 	udiv	r3, r1, r5
 800e9f8:	fb05 1113 	mls	r1, r5, r3, r1
 800e9fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800ea00:	fb07 f703 	mul.w	r7, r7, r3
 800ea04:	428f      	cmp	r7, r1
 800ea06:	d908      	bls.n	800ea1a <__divdi3+0x256>
 800ea08:	eb11 010e 	adds.w	r1, r1, lr
 800ea0c:	f103 30ff 	add.w	r0, r3, #4294967295
 800ea10:	d216      	bcs.n	800ea40 <__divdi3+0x27c>
 800ea12:	428f      	cmp	r7, r1
 800ea14:	d914      	bls.n	800ea40 <__divdi3+0x27c>
 800ea16:	3b02      	subs	r3, #2
 800ea18:	4471      	add	r1, lr
 800ea1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800ea1e:	1bc9      	subs	r1, r1, r7
 800ea20:	fba3 890c 	umull	r8, r9, r3, ip
 800ea24:	4549      	cmp	r1, r9
 800ea26:	d309      	bcc.n	800ea3c <__divdi3+0x278>
 800ea28:	d005      	beq.n	800ea36 <__divdi3+0x272>
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	e71d      	b.n	800e86a <__divdi3+0xa6>
 800ea2e:	4696      	mov	lr, r2
 800ea30:	e6fe      	b.n	800e830 <__divdi3+0x6c>
 800ea32:	4613      	mov	r3, r2
 800ea34:	e711      	b.n	800e85a <__divdi3+0x96>
 800ea36:	4094      	lsls	r4, r2
 800ea38:	4544      	cmp	r4, r8
 800ea3a:	d2f6      	bcs.n	800ea2a <__divdi3+0x266>
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	e7f4      	b.n	800ea2a <__divdi3+0x266>
 800ea40:	4603      	mov	r3, r0
 800ea42:	e7ea      	b.n	800ea1a <__divdi3+0x256>
 800ea44:	4688      	mov	r8, r1
 800ea46:	e7a5      	b.n	800e994 <__divdi3+0x1d0>
 800ea48:	46c8      	mov	r8, r9
 800ea4a:	e7d1      	b.n	800e9f0 <__divdi3+0x22c>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	e78c      	b.n	800e96a <__divdi3+0x1a6>
 800ea50:	4613      	mov	r3, r2
 800ea52:	e70a      	b.n	800e86a <__divdi3+0xa6>
 800ea54:	3b02      	subs	r3, #2
 800ea56:	e757      	b.n	800e908 <__divdi3+0x144>
 800ea58:	f1a8 0802 	sub.w	r8, r8, #2
 800ea5c:	442f      	add	r7, r5
 800ea5e:	e73f      	b.n	800e8e0 <__divdi3+0x11c>

0800ea60 <__udivdi3>:
 800ea60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d144      	bne.n	800eaf2 <__udivdi3+0x92>
 800ea68:	428a      	cmp	r2, r1
 800ea6a:	4615      	mov	r5, r2
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	d94f      	bls.n	800eb10 <__udivdi3+0xb0>
 800ea70:	fab2 f782 	clz	r7, r2
 800ea74:	460e      	mov	r6, r1
 800ea76:	b14f      	cbz	r7, 800ea8c <__udivdi3+0x2c>
 800ea78:	f1c7 0320 	rsb	r3, r7, #32
 800ea7c:	40b9      	lsls	r1, r7
 800ea7e:	fa20 f603 	lsr.w	r6, r0, r3
 800ea82:	fa02 f507 	lsl.w	r5, r2, r7
 800ea86:	430e      	orrs	r6, r1
 800ea88:	fa00 f407 	lsl.w	r4, r0, r7
 800ea8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800ea90:	0c23      	lsrs	r3, r4, #16
 800ea92:	fbb6 f0fe 	udiv	r0, r6, lr
 800ea96:	b2af      	uxth	r7, r5
 800ea98:	fb0e 6110 	mls	r1, lr, r0, r6
 800ea9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800eaa0:	fb07 f100 	mul.w	r1, r7, r0
 800eaa4:	4299      	cmp	r1, r3
 800eaa6:	d909      	bls.n	800eabc <__udivdi3+0x5c>
 800eaa8:	195b      	adds	r3, r3, r5
 800eaaa:	f100 32ff 	add.w	r2, r0, #4294967295
 800eaae:	f080 80ec 	bcs.w	800ec8a <__udivdi3+0x22a>
 800eab2:	4299      	cmp	r1, r3
 800eab4:	f240 80e9 	bls.w	800ec8a <__udivdi3+0x22a>
 800eab8:	3802      	subs	r0, #2
 800eaba:	442b      	add	r3, r5
 800eabc:	1a5a      	subs	r2, r3, r1
 800eabe:	b2a4      	uxth	r4, r4
 800eac0:	fbb2 f3fe 	udiv	r3, r2, lr
 800eac4:	fb0e 2213 	mls	r2, lr, r3, r2
 800eac8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800eacc:	fb07 f703 	mul.w	r7, r7, r3
 800ead0:	4297      	cmp	r7, r2
 800ead2:	d908      	bls.n	800eae6 <__udivdi3+0x86>
 800ead4:	1952      	adds	r2, r2, r5
 800ead6:	f103 31ff 	add.w	r1, r3, #4294967295
 800eada:	f080 80d8 	bcs.w	800ec8e <__udivdi3+0x22e>
 800eade:	4297      	cmp	r7, r2
 800eae0:	f240 80d5 	bls.w	800ec8e <__udivdi3+0x22e>
 800eae4:	3b02      	subs	r3, #2
 800eae6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800eaea:	2600      	movs	r6, #0
 800eaec:	4631      	mov	r1, r6
 800eaee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf2:	428b      	cmp	r3, r1
 800eaf4:	d847      	bhi.n	800eb86 <__udivdi3+0x126>
 800eaf6:	fab3 f683 	clz	r6, r3
 800eafa:	2e00      	cmp	r6, #0
 800eafc:	d148      	bne.n	800eb90 <__udivdi3+0x130>
 800eafe:	428b      	cmp	r3, r1
 800eb00:	d302      	bcc.n	800eb08 <__udivdi3+0xa8>
 800eb02:	4282      	cmp	r2, r0
 800eb04:	f200 80cd 	bhi.w	800eca2 <__udivdi3+0x242>
 800eb08:	2001      	movs	r0, #1
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb10:	b912      	cbnz	r2, 800eb18 <__udivdi3+0xb8>
 800eb12:	2501      	movs	r5, #1
 800eb14:	fbb5 f5f2 	udiv	r5, r5, r2
 800eb18:	fab5 f885 	clz	r8, r5
 800eb1c:	f1b8 0f00 	cmp.w	r8, #0
 800eb20:	d177      	bne.n	800ec12 <__udivdi3+0x1b2>
 800eb22:	1b4a      	subs	r2, r1, r5
 800eb24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800eb28:	b2af      	uxth	r7, r5
 800eb2a:	2601      	movs	r6, #1
 800eb2c:	fbb2 f0fe 	udiv	r0, r2, lr
 800eb30:	0c23      	lsrs	r3, r4, #16
 800eb32:	fb0e 2110 	mls	r1, lr, r0, r2
 800eb36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800eb3a:	fb07 f300 	mul.w	r3, r7, r0
 800eb3e:	428b      	cmp	r3, r1
 800eb40:	d907      	bls.n	800eb52 <__udivdi3+0xf2>
 800eb42:	1949      	adds	r1, r1, r5
 800eb44:	f100 32ff 	add.w	r2, r0, #4294967295
 800eb48:	d202      	bcs.n	800eb50 <__udivdi3+0xf0>
 800eb4a:	428b      	cmp	r3, r1
 800eb4c:	f200 80ba 	bhi.w	800ecc4 <__udivdi3+0x264>
 800eb50:	4610      	mov	r0, r2
 800eb52:	1ac9      	subs	r1, r1, r3
 800eb54:	b2a4      	uxth	r4, r4
 800eb56:	fbb1 f3fe 	udiv	r3, r1, lr
 800eb5a:	fb0e 1113 	mls	r1, lr, r3, r1
 800eb5e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800eb62:	fb07 f703 	mul.w	r7, r7, r3
 800eb66:	42a7      	cmp	r7, r4
 800eb68:	d908      	bls.n	800eb7c <__udivdi3+0x11c>
 800eb6a:	1964      	adds	r4, r4, r5
 800eb6c:	f103 32ff 	add.w	r2, r3, #4294967295
 800eb70:	f080 808f 	bcs.w	800ec92 <__udivdi3+0x232>
 800eb74:	42a7      	cmp	r7, r4
 800eb76:	f240 808c 	bls.w	800ec92 <__udivdi3+0x232>
 800eb7a:	3b02      	subs	r3, #2
 800eb7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800eb80:	4631      	mov	r1, r6
 800eb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb86:	2600      	movs	r6, #0
 800eb88:	4630      	mov	r0, r6
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb90:	f1c6 0420 	rsb	r4, r6, #32
 800eb94:	fa22 f504 	lsr.w	r5, r2, r4
 800eb98:	40b3      	lsls	r3, r6
 800eb9a:	432b      	orrs	r3, r5
 800eb9c:	fa20 fc04 	lsr.w	ip, r0, r4
 800eba0:	fa01 f706 	lsl.w	r7, r1, r6
 800eba4:	fa21 f504 	lsr.w	r5, r1, r4
 800eba8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ebac:	ea4c 0707 	orr.w	r7, ip, r7
 800ebb0:	fbb5 f8fe 	udiv	r8, r5, lr
 800ebb4:	0c39      	lsrs	r1, r7, #16
 800ebb6:	fb0e 5518 	mls	r5, lr, r8, r5
 800ebba:	fa1f fc83 	uxth.w	ip, r3
 800ebbe:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800ebc2:	fb0c f108 	mul.w	r1, ip, r8
 800ebc6:	42a9      	cmp	r1, r5
 800ebc8:	fa02 f206 	lsl.w	r2, r2, r6
 800ebcc:	d904      	bls.n	800ebd8 <__udivdi3+0x178>
 800ebce:	18ed      	adds	r5, r5, r3
 800ebd0:	f108 34ff 	add.w	r4, r8, #4294967295
 800ebd4:	d367      	bcc.n	800eca6 <__udivdi3+0x246>
 800ebd6:	46a0      	mov	r8, r4
 800ebd8:	1a6d      	subs	r5, r5, r1
 800ebda:	b2bf      	uxth	r7, r7
 800ebdc:	fbb5 f4fe 	udiv	r4, r5, lr
 800ebe0:	fb0e 5514 	mls	r5, lr, r4, r5
 800ebe4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800ebe8:	fb0c fc04 	mul.w	ip, ip, r4
 800ebec:	458c      	cmp	ip, r1
 800ebee:	d904      	bls.n	800ebfa <__udivdi3+0x19a>
 800ebf0:	18c9      	adds	r1, r1, r3
 800ebf2:	f104 35ff 	add.w	r5, r4, #4294967295
 800ebf6:	d35c      	bcc.n	800ecb2 <__udivdi3+0x252>
 800ebf8:	462c      	mov	r4, r5
 800ebfa:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800ebfe:	ebcc 0101 	rsb	r1, ip, r1
 800ec02:	fba4 2302 	umull	r2, r3, r4, r2
 800ec06:	4299      	cmp	r1, r3
 800ec08:	d348      	bcc.n	800ec9c <__udivdi3+0x23c>
 800ec0a:	d044      	beq.n	800ec96 <__udivdi3+0x236>
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	2600      	movs	r6, #0
 800ec10:	e76c      	b.n	800eaec <__udivdi3+0x8c>
 800ec12:	f1c8 0420 	rsb	r4, r8, #32
 800ec16:	fa01 f308 	lsl.w	r3, r1, r8
 800ec1a:	fa05 f508 	lsl.w	r5, r5, r8
 800ec1e:	fa20 f704 	lsr.w	r7, r0, r4
 800ec22:	40e1      	lsrs	r1, r4
 800ec24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800ec28:	431f      	orrs	r7, r3
 800ec2a:	fbb1 f6fe 	udiv	r6, r1, lr
 800ec2e:	0c3a      	lsrs	r2, r7, #16
 800ec30:	fb0e 1116 	mls	r1, lr, r6, r1
 800ec34:	fa1f fc85 	uxth.w	ip, r5
 800ec38:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800ec3c:	fb0c f206 	mul.w	r2, ip, r6
 800ec40:	429a      	cmp	r2, r3
 800ec42:	fa00 f408 	lsl.w	r4, r0, r8
 800ec46:	d907      	bls.n	800ec58 <__udivdi3+0x1f8>
 800ec48:	195b      	adds	r3, r3, r5
 800ec4a:	f106 31ff 	add.w	r1, r6, #4294967295
 800ec4e:	d237      	bcs.n	800ecc0 <__udivdi3+0x260>
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d935      	bls.n	800ecc0 <__udivdi3+0x260>
 800ec54:	3e02      	subs	r6, #2
 800ec56:	442b      	add	r3, r5
 800ec58:	1a9b      	subs	r3, r3, r2
 800ec5a:	b2bf      	uxth	r7, r7
 800ec5c:	fbb3 f0fe 	udiv	r0, r3, lr
 800ec60:	fb0e 3310 	mls	r3, lr, r0, r3
 800ec64:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800ec68:	fb0c f100 	mul.w	r1, ip, r0
 800ec6c:	4299      	cmp	r1, r3
 800ec6e:	d907      	bls.n	800ec80 <__udivdi3+0x220>
 800ec70:	195b      	adds	r3, r3, r5
 800ec72:	f100 32ff 	add.w	r2, r0, #4294967295
 800ec76:	d221      	bcs.n	800ecbc <__udivdi3+0x25c>
 800ec78:	4299      	cmp	r1, r3
 800ec7a:	d91f      	bls.n	800ecbc <__udivdi3+0x25c>
 800ec7c:	3802      	subs	r0, #2
 800ec7e:	442b      	add	r3, r5
 800ec80:	1a5a      	subs	r2, r3, r1
 800ec82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800ec86:	4667      	mov	r7, ip
 800ec88:	e750      	b.n	800eb2c <__udivdi3+0xcc>
 800ec8a:	4610      	mov	r0, r2
 800ec8c:	e716      	b.n	800eabc <__udivdi3+0x5c>
 800ec8e:	460b      	mov	r3, r1
 800ec90:	e729      	b.n	800eae6 <__udivdi3+0x86>
 800ec92:	4613      	mov	r3, r2
 800ec94:	e772      	b.n	800eb7c <__udivdi3+0x11c>
 800ec96:	40b0      	lsls	r0, r6
 800ec98:	4290      	cmp	r0, r2
 800ec9a:	d2b7      	bcs.n	800ec0c <__udivdi3+0x1ac>
 800ec9c:	1e60      	subs	r0, r4, #1
 800ec9e:	2600      	movs	r6, #0
 800eca0:	e724      	b.n	800eaec <__udivdi3+0x8c>
 800eca2:	4630      	mov	r0, r6
 800eca4:	e722      	b.n	800eaec <__udivdi3+0x8c>
 800eca6:	42a9      	cmp	r1, r5
 800eca8:	d995      	bls.n	800ebd6 <__udivdi3+0x176>
 800ecaa:	f1a8 0802 	sub.w	r8, r8, #2
 800ecae:	441d      	add	r5, r3
 800ecb0:	e792      	b.n	800ebd8 <__udivdi3+0x178>
 800ecb2:	458c      	cmp	ip, r1
 800ecb4:	d9a0      	bls.n	800ebf8 <__udivdi3+0x198>
 800ecb6:	3c02      	subs	r4, #2
 800ecb8:	4419      	add	r1, r3
 800ecba:	e79e      	b.n	800ebfa <__udivdi3+0x19a>
 800ecbc:	4610      	mov	r0, r2
 800ecbe:	e7df      	b.n	800ec80 <__udivdi3+0x220>
 800ecc0:	460e      	mov	r6, r1
 800ecc2:	e7c9      	b.n	800ec58 <__udivdi3+0x1f8>
 800ecc4:	3802      	subs	r0, #2
 800ecc6:	4429      	add	r1, r5
 800ecc8:	e743      	b.n	800eb52 <__udivdi3+0xf2>
 800ecca:	bf00      	nop
 800eccc:	0000      	movs	r0, r0
	...

0800ecd0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
static inline void *chCoreAlloc(size_t size) {
 800ecd0:	b500      	push	{lr}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	9001      	str	r0, [sp, #4]

  return chCoreAllocAlignedWithOffset(size, PORT_NATURAL_ALIGN, 0U);
 800ecd6:	9801      	ldr	r0, [sp, #4]
 800ecd8:	2104      	movs	r1, #4
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f000 f9c8 	bl	800f070 <chCoreAllocAlignedWithOffset>
 800ece0:	4603      	mov	r3, r0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	b003      	add	sp, #12
 800ece6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecea:	bf00      	nop
 800ecec:	0000      	movs	r0, r0
	...

0800ecf0 <_read_r>:

/***************************************************************************/

__attribute__((used))
int _read_r(struct _reent *r, int file, char * ptr, int len)
{
 800ecf0:	b084      	sub	sp, #16
 800ecf2:	9003      	str	r0, [sp, #12]
 800ecf4:	9102      	str	r1, [sp, #8]
 800ecf6:	9201      	str	r2, [sp, #4]
 800ecf8:	9300      	str	r3, [sp, #0]
  return len;
#else
  (void)file;
  (void)ptr;
  (void)len;
  __errno_r(r) = EINVAL;
 800ecfa:	9b03      	ldr	r3, [sp, #12]
 800ecfc:	2216      	movs	r2, #22
 800ecfe:	601a      	str	r2, [r3, #0]
  return -1;
 800ed00:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	b004      	add	sp, #16
 800ed08:	4770      	bx	lr
 800ed0a:	bf00      	nop
 800ed0c:	0000      	movs	r0, r0
	...

0800ed10 <_lseek_r>:

/***************************************************************************/

__attribute__((used))
int _lseek_r(struct _reent *r, int file, int ptr, int dir)
{
 800ed10:	b084      	sub	sp, #16
 800ed12:	9003      	str	r0, [sp, #12]
 800ed14:	9102      	str	r1, [sp, #8]
 800ed16:	9201      	str	r2, [sp, #4]
 800ed18:	9300      	str	r3, [sp, #0]
  (void)r;
  (void)file;
  (void)ptr;
  (void)dir;

  return 0;
 800ed1a:	2300      	movs	r3, #0
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	b004      	add	sp, #16
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
	...

0800ed30 <_write_r>:

/***************************************************************************/

__attribute__((used))
int _write_r(struct _reent *r, int file, char * ptr, int len)
{
 800ed30:	b084      	sub	sp, #16
 800ed32:	9003      	str	r0, [sp, #12]
 800ed34:	9102      	str	r1, [sp, #8]
 800ed36:	9201      	str	r2, [sp, #4]
 800ed38:	9300      	str	r3, [sp, #0]
    __errno_r(r) = EINVAL;
    return -1;
  }
  sdWrite(&STDOUT_SD, (uint8_t *)ptr, (size_t)len);
#endif
  return len;
 800ed3a:	9b00      	ldr	r3, [sp, #0]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	b004      	add	sp, #16
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
	...

0800ed50 <_close_r>:

/***************************************************************************/

__attribute__((used))
int _close_r(struct _reent *r, int file)
{
 800ed50:	b082      	sub	sp, #8
 800ed52:	9001      	str	r0, [sp, #4]
 800ed54:	9100      	str	r1, [sp, #0]
  (void)r;
  (void)file;

  return 0;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	b002      	add	sp, #8
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop

0800ed60 <_sbrk_r>:

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr)
{
 800ed60:	b500      	push	{lr}
 800ed62:	b085      	sub	sp, #20
 800ed64:	9001      	str	r0, [sp, #4]
 800ed66:	9100      	str	r1, [sp, #0]
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);

  p = chCoreAlloc((size_t)incr);
 800ed68:	9b00      	ldr	r3, [sp, #0]
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7ff ffb0 	bl	800ecd0 <chCoreAlloc>
 800ed70:	9003      	str	r0, [sp, #12]
  if (p == NULL) {
 800ed72:	9b03      	ldr	r3, [sp, #12]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d105      	bne.n	800ed84 <_sbrk_r+0x24>
    __errno_r(r) = ENOMEM;
 800ed78:	9b01      	ldr	r3, [sp, #4]
 800ed7a:	220c      	movs	r2, #12
 800ed7c:	601a      	str	r2, [r3, #0]
    return (caddr_t)-1;
 800ed7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed82:	e000      	b.n	800ed86 <_sbrk_r+0x26>
  }
  return (caddr_t)p;
 800ed84:	9b03      	ldr	r3, [sp, #12]
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	b005      	add	sp, #20
 800ed8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed8e:	bf00      	nop

0800ed90 <_fstat_r>:

/***************************************************************************/

__attribute__((used))
int _fstat_r(struct _reent *r, int file, struct stat * st)
{
 800ed90:	b500      	push	{lr}
 800ed92:	b085      	sub	sp, #20
 800ed94:	9003      	str	r0, [sp, #12]
 800ed96:	9102      	str	r1, [sp, #8]
 800ed98:	9201      	str	r2, [sp, #4]
  (void)r;
  (void)file;

  memset(st, 0, sizeof(*st));
 800ed9a:	9801      	ldr	r0, [sp, #4]
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	223c      	movs	r2, #60	; 0x3c
 800eda0:	f008 fb42 	bl	8017428 <memset>
  st->st_mode = S_IFCHR;
 800eda4:	9b01      	ldr	r3, [sp, #4]
 800eda6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800edaa:	605a      	str	r2, [r3, #4]
  return 0;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	b005      	add	sp, #20
 800edb2:	f85d fb04 	ldr.w	pc, [sp], #4
 800edb6:	bf00      	nop
	...

0800edc0 <_isatty_r>:

/***************************************************************************/

__attribute__((used))
int _isatty_r(struct _reent *r, int fd)
{
 800edc0:	b082      	sub	sp, #8
 800edc2:	9001      	str	r0, [sp, #4]
 800edc4:	9100      	str	r1, [sp, #0]
  (void)r;
  (void)fd;

  return 1;
 800edc6:	2301      	movs	r3, #1
}
 800edc8:	4618      	mov	r0, r3
 800edca:	b002      	add	sp, #8
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop

0800edd0 <_exit>:
#include "hal.h"

#include "stubs.h"

// FIXME: Stubs - HATE THEM
void _exit(int status){
 800edd0:	b500      	push	{lr}
 800edd2:	b083      	sub	sp, #12
 800edd4:	9001      	str	r0, [sp, #4]
   (void) status;
   chSysHalt("stub exit");
 800edd6:	4802      	ldr	r0, [pc, #8]	; (800ede0 <_exit+0x10>)
 800edd8:	f001 fa1a 	bl	8010210 <chSysHalt>
 800eddc:	e7fe      	b.n	800eddc <_exit+0xc>
 800edde:	bf00      	nop
 800ede0:	0801cf04 	.word	0x0801cf04
	...

0800edf0 <_getpid>:

   while(TRUE){}
}

pid_t _getpid(void){
   return 1;
 800edf0:	2301      	movs	r3, #1
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	4770      	bx	lr
 800edf6:	bf00      	nop
	...

0800ee00 <_kill>:

void _kill(pid_t id){
 800ee00:	b082      	sub	sp, #8
 800ee02:	9001      	str	r0, [sp, #4]
   (void) id;
}
 800ee04:	b002      	add	sp, #8
 800ee06:	4770      	bx	lr
	...

0800ee10 <_Z5delaym>:
#else
	(void)fmt;
#endif
}

void delay(uint32_t _time){
 800ee10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	b083      	sub	sp, #12
 800ee16:	9001      	str	r0, [sp, #4]
	chThdSleepMilliseconds(_time);
 800ee18:	9901      	ldr	r1, [sp, #4]
 800ee1a:	468a      	mov	sl, r1
 800ee1c:	f04f 0b00 	mov.w	fp, #0
 800ee20:	4650      	mov	r0, sl
 800ee22:	4659      	mov	r1, fp
 800ee24:	ea4f 0981 	mov.w	r9, r1, lsl #2
 800ee28:	ea49 7990 	orr.w	r9, r9, r0, lsr #30
 800ee2c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800ee30:	4640      	mov	r0, r8
 800ee32:	4649      	mov	r1, r9
 800ee34:	014b      	lsls	r3, r1, #5
 800ee36:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ee3a:	0142      	lsls	r2, r0, #5
 800ee3c:	1a12      	subs	r2, r2, r0
 800ee3e:	eb63 0301 	sbc.w	r3, r3, r1
 800ee42:	eb12 020a 	adds.w	r2, r2, sl
 800ee46:	eb43 030b 	adc.w	r3, r3, fp
 800ee4a:	009d      	lsls	r5, r3, #2
 800ee4c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800ee50:	0094      	lsls	r4, r2, #2
 800ee52:	1912      	adds	r2, r2, r4
 800ee54:	eb43 0305 	adc.w	r3, r3, r5
 800ee58:	011f      	lsls	r7, r3, #4
 800ee5a:	ea47 7712 	orr.w	r7, r7, r2, lsr #28
 800ee5e:	0116      	lsls	r6, r2, #4
 800ee60:	4632      	mov	r2, r6
 800ee62:	463b      	mov	r3, r7
 800ee64:	4610      	mov	r0, r2
 800ee66:	4619      	mov	r1, r3
 800ee68:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ee6c:	f04f 0300 	mov.w	r3, #0
 800ee70:	1812      	adds	r2, r2, r0
 800ee72:	eb43 0301 	adc.w	r3, r3, r1
 800ee76:	4610      	mov	r0, r2
 800ee78:	4619      	mov	r1, r3
 800ee7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ee7e:	f04f 0300 	mov.w	r3, #0
 800ee82:	f7ff fc55 	bl	800e730 <__aeabi_uldivmod>
 800ee86:	4602      	mov	r2, r0
 800ee88:	460b      	mov	r3, r1
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f001 ff17 	bl	8010cc0 <chThdSleep>
}
 800ee92:	b003      	add	sp, #12
 800ee94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800eea0 <main>:
//	while (true) {
//	palTogglePad(GPIOC, 1);
//	}
//}

int main(void) {
 800eea0:	b508      	push	{r3, lr}

	halInit();
 800eea2:	f006 f99d 	bl	80151e0 <halInit>
	chSysInit();
 800eea6:	f001 f983 	bl	80101b0 <chSysInit>
//	start_trig();

	while (true) {
//		palTogglePad(GPIOC, 3);

		delay(500);
 800eeaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eeae:	f7ff ffaf 	bl	800ee10 <_Z5delaym>
 800eeb2:	e7fa      	b.n	800eeaa <main+0xa>
	...

0800eec0 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 800eec0:	b500      	push	{lr}
 800eec2:	b083      	sub	sp, #12
 800eec4:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
 800eec6:	9b01      	ldr	r3, [sp, #4]
 800eec8:	4618      	mov	r0, r3
 800eeca:	f002 f831 	bl	8010f30 <queue_init.lto_priv.678>
  mp->owner = NULL;
 800eece:	9b01      	ldr	r3, [sp, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 800eed4:	b003      	add	sp, #12
 800eed6:	f85d fb04 	ldr.w	pc, [sp], #4
 800eeda:	bf00      	nop
 800eedc:	0000      	movs	r0, r0
	...

0800eee0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800eee0:	b500      	push	{lr}
 800eee2:	b085      	sub	sp, #20
 800eee4:	9001      	str	r0, [sp, #4]
 800eee6:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 800eee8:	9b01      	ldr	r3, [sp, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	9303      	str	r3, [sp, #12]
 800eeee:	e01a      	b.n	800ef26 <chEvtBroadcastFlagsI+0x46>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
 800eef0:	9b03      	ldr	r3, [sp, #12]
 800eef2:	68da      	ldr	r2, [r3, #12]
 800eef4:	9b00      	ldr	r3, [sp, #0]
 800eef6:	431a      	orrs	r2, r3
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800eefc:	9b00      	ldr	r3, [sp, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d006      	beq.n	800ef10 <chEvtBroadcastFlagsI+0x30>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 800ef02:	9b03      	ldr	r3, [sp, #12]
 800ef04:	68da      	ldr	r2, [r3, #12]
 800ef06:	9b03      	ldr	r3, [sp, #12]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	4013      	ands	r3, r2
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d007      	beq.n	800ef20 <chEvtBroadcastFlagsI+0x40>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 800ef10:	9b03      	ldr	r3, [sp, #12]
 800ef12:	685a      	ldr	r2, [r3, #4]
 800ef14:	9b03      	ldr	r3, [sp, #12]
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	4610      	mov	r0, r2
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	f000 f810 	bl	800ef40 <chEvtSignalI>
    }
    elp = elp->next;
 800ef20:	9b03      	ldr	r3, [sp, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	9303      	str	r3, [sp, #12]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800ef26:	9a03      	ldr	r2, [sp, #12]
 800ef28:	9b01      	ldr	r3, [sp, #4]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d1e0      	bne.n	800eef0 <chEvtBroadcastFlagsI+0x10>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
 800ef2e:	b005      	add	sp, #20
 800ef30:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ef40 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 800ef40:	b500      	push	{lr}
 800ef42:	b083      	sub	sp, #12
 800ef44:	9001      	str	r0, [sp, #4]
 800ef46:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 800ef48:	9b01      	ldr	r3, [sp, #4]
 800ef4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef4c:	9b00      	ldr	r3, [sp, #0]
 800ef4e:	431a      	orrs	r2, r3
 800ef50:	9b01      	ldr	r3, [sp, #4]
 800ef52:	635a      	str	r2, [r3, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 800ef54:	9b01      	ldr	r3, [sp, #4]
 800ef56:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef5a:	2b0a      	cmp	r3, #10
 800ef5c:	d106      	bne.n	800ef6c <chEvtSignalI+0x2c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800ef5e:	9b01      	ldr	r3, [sp, #4]
 800ef60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef62:	9b01      	ldr	r3, [sp, #4]
 800ef64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef66:	4013      	ands	r3, r2
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d10d      	bne.n	800ef88 <chEvtSignalI+0x48>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 800ef6c:	9b01      	ldr	r3, [sp, #4]
 800ef6e:	f893 3020 	ldrb.w	r3, [r3, #32]
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800ef72:	2b0b      	cmp	r3, #11
 800ef74:	d10e      	bne.n	800ef94 <chEvtSignalI+0x54>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800ef76:	9b01      	ldr	r3, [sp, #4]
 800ef78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef7a:	9b01      	ldr	r3, [sp, #4]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	401a      	ands	r2, r3
 800ef80:	9b01      	ldr	r3, [sp, #4]
 800ef82:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d105      	bne.n	800ef94 <chEvtSignalI+0x54>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800ef88:	9b01      	ldr	r3, [sp, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800ef8e:	9801      	ldr	r0, [sp, #4]
 800ef90:	f001 fba6 	bl	80106e0 <chSchReadyI>
  }
}
 800ef94:	b003      	add	sp, #12
 800ef96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef9a:	bf00      	nop
 800ef9c:	0000      	movs	r0, r0
	...

0800efa0 <port_lock.lto_priv.648>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 800efa0:	b082      	sub	sp, #8
 800efa2:	2320      	movs	r3, #32
 800efa4:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800efa6:	9b01      	ldr	r3, [sp, #4]
 800efa8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800efac:	b002      	add	sp, #8
 800efae:	4770      	bx	lr

0800efb0 <port_unlock.lto_priv.658>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 800efb0:	b082      	sub	sp, #8
 800efb2:	2300      	movs	r3, #0
 800efb4:	9301      	str	r3, [sp, #4]
 800efb6:	9b01      	ldr	r3, [sp, #4]
 800efb8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800efbc:	b002      	add	sp, #8
 800efbe:	4770      	bx	lr

0800efc0 <chSysLock.lto_priv.675>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 800efc0:	b508      	push	{r3, lr}

  port_lock();
 800efc2:	f7ff ffed 	bl	800efa0 <port_lock.lto_priv.648>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 800efc6:	bd08      	pop	{r3, pc}
	...

0800efd0 <chSysUnlock.lto_priv.667>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 800efd0:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
 800efd2:	f7ff ffed 	bl	800efb0 <port_unlock.lto_priv.658>
}
 800efd6:	bd08      	pop	{r3, pc}
	...

0800efe0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 800efe0:	4b03      	ldr	r3, [pc, #12]	; (800eff0 <_core_init+0x10>)
 800efe2:	4a04      	ldr	r2, [pc, #16]	; (800eff4 <_core_init+0x14>)
 800efe4:	601a      	str	r2, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
 800efe6:	4b02      	ldr	r3, [pc, #8]	; (800eff0 <_core_init+0x10>)
 800efe8:	4a03      	ldr	r2, [pc, #12]	; (800eff8 <_core_init+0x18>)
 800efea:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	20002788 	.word	0x20002788
 800eff4:	20003040 	.word	0x20003040
 800eff8:	20030000 	.word	0x20030000
 800effc:	00000000 	.word	0x00000000

0800f000 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 800f000:	b086      	sub	sp, #24
 800f002:	9003      	str	r0, [sp, #12]
 800f004:	9102      	str	r1, [sp, #8]
 800f006:	9201      	str	r2, [sp, #4]
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 800f008:	9a02      	ldr	r2, [sp, #8]
 800f00a:	9b03      	ldr	r3, [sp, #12]
 800f00c:	4413      	add	r3, r2
 800f00e:	1e5a      	subs	r2, r3, #1
 800f010:	9b02      	ldr	r3, [sp, #8]
 800f012:	425b      	negs	r3, r3
 800f014:	4013      	ands	r3, r2
 800f016:	9303      	str	r3, [sp, #12]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800f018:	4b11      	ldr	r3, [pc, #68]	; (800f060 <chCoreAllocAlignedWithOffsetI+0x60>)
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	9b01      	ldr	r3, [sp, #4]
 800f01e:	4413      	add	r3, r2
 800f020:	461a      	mov	r2, r3
 800f022:	9b02      	ldr	r3, [sp, #8]
 800f024:	4413      	add	r3, r2
 800f026:	1e5a      	subs	r2, r3, #1
 800f028:	9b02      	ldr	r3, [sp, #8]
 800f02a:	425b      	negs	r3, r3
 800f02c:	4013      	ands	r3, r2
 800f02e:	9305      	str	r3, [sp, #20]
  next = p + size;
 800f030:	9a05      	ldr	r2, [sp, #20]
 800f032:	9b03      	ldr	r3, [sp, #12]
 800f034:	4413      	add	r3, r2
 800f036:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800f038:	4b09      	ldr	r3, [pc, #36]	; (800f060 <chCoreAllocAlignedWithOffsetI+0x60>)
 800f03a:	685a      	ldr	r2, [r3, #4]
 800f03c:	9b04      	ldr	r3, [sp, #16]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d304      	bcc.n	800f04c <chCoreAllocAlignedWithOffsetI+0x4c>
 800f042:	4b07      	ldr	r3, [pc, #28]	; (800f060 <chCoreAllocAlignedWithOffsetI+0x60>)
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	9b04      	ldr	r3, [sp, #16]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d901      	bls.n	800f050 <chCoreAllocAlignedWithOffsetI+0x50>
    return NULL;
 800f04c:	2300      	movs	r3, #0
 800f04e:	e003      	b.n	800f058 <chCoreAllocAlignedWithOffsetI+0x58>
  }

  ch_memcore.nextmem = next;
 800f050:	4a03      	ldr	r2, [pc, #12]	; (800f060 <chCoreAllocAlignedWithOffsetI+0x60>)
 800f052:	9b04      	ldr	r3, [sp, #16]
 800f054:	6013      	str	r3, [r2, #0]

  return p;
 800f056:	9b05      	ldr	r3, [sp, #20]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	b006      	add	sp, #24
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	20002788 	.word	0x20002788
	...

0800f070 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 800f070:	b500      	push	{lr}
 800f072:	b087      	sub	sp, #28
 800f074:	9003      	str	r0, [sp, #12]
 800f076:	9102      	str	r1, [sp, #8]
 800f078:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 800f07a:	f7ff ffa1 	bl	800efc0 <chSysLock.lto_priv.675>
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 800f07e:	9803      	ldr	r0, [sp, #12]
 800f080:	9902      	ldr	r1, [sp, #8]
 800f082:	9a01      	ldr	r2, [sp, #4]
 800f084:	f7ff ffbc 	bl	800f000 <chCoreAllocAlignedWithOffsetI>
 800f088:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 800f08a:	f7ff ffa1 	bl	800efd0 <chSysUnlock.lto_priv.667>

  return p;
 800f08e:	9b05      	ldr	r3, [sp, #20]
}
 800f090:	4618      	mov	r0, r3
 800f092:	b007      	add	sp, #28
 800f094:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f0a0 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 800f0a0:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 800f0a2:	4b06      	ldr	r3, [pc, #24]	; (800f0bc <_heap_init+0x1c>)
 800f0a4:	4a06      	ldr	r2, [pc, #24]	; (800f0c0 <_heap_init+0x20>)
 800f0a6:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 800f0a8:	4b04      	ldr	r3, [pc, #16]	; (800f0bc <_heap_init+0x1c>)
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 800f0ae:	4b03      	ldr	r3, [pc, #12]	; (800f0bc <_heap_init+0x1c>)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 800f0b4:	4803      	ldr	r0, [pc, #12]	; (800f0c4 <_heap_init+0x24>)
 800f0b6:	f7ff ff03 	bl	800eec0 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 800f0ba:	bd08      	pop	{r3, pc}
 800f0bc:	20002790 	.word	0x20002790
 800f0c0:	0800f071 	.word	0x0800f071
 800f0c4:	2000279c 	.word	0x2000279c
	...

0800f0d0 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 800f0d0:	b084      	sub	sp, #16
 800f0d2:	9003      	str	r0, [sp, #12]
 800f0d4:	9102      	str	r1, [sp, #8]
 800f0d6:	9201      	str	r2, [sp, #4]
 800f0d8:	9300      	str	r3, [sp, #0]

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 800f0da:	9b03      	ldr	r3, [sp, #12]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 800f0e0:	9b03      	ldr	r3, [sp, #12]
 800f0e2:	9a02      	ldr	r2, [sp, #8]
 800f0e4:	605a      	str	r2, [r3, #4]
  mp->align = align;
 800f0e6:	9b03      	ldr	r3, [sp, #12]
 800f0e8:	9a01      	ldr	r2, [sp, #4]
 800f0ea:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 800f0ec:	9b03      	ldr	r3, [sp, #12]
 800f0ee:	9a00      	ldr	r2, [sp, #0]
 800f0f0:	60da      	str	r2, [r3, #12]
}
 800f0f2:	b004      	add	sp, #16
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
	...

0800f100 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 800f100:	b500      	push	{lr}
 800f102:	b083      	sub	sp, #12
 800f104:	9001      	str	r0, [sp, #4]
 800f106:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 800f108:	9801      	ldr	r0, [sp, #4]
 800f10a:	9900      	ldr	r1, [sp, #0]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f7ff ff77 	bl	800f000 <chCoreAllocAlignedWithOffsetI>
 800f112:	4603      	mov	r3, r0
}
 800f114:	4618      	mov	r0, r3
 800f116:	b003      	add	sp, #12
 800f118:	f85d fb04 	ldr.w	pc, [sp], #4
 800f11c:	0000      	movs	r0, r0
	...

0800f120 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 800f120:	b500      	push	{lr}
 800f122:	b085      	sub	sp, #20
 800f124:	9003      	str	r0, [sp, #12]
 800f126:	9102      	str	r1, [sp, #8]
 800f128:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 800f12a:	9803      	ldr	r0, [sp, #12]
 800f12c:	9902      	ldr	r1, [sp, #8]
 800f12e:	2204      	movs	r2, #4
 800f130:	9b01      	ldr	r3, [sp, #4]
 800f132:	f7ff ffcd 	bl	800f0d0 <chPoolObjectInitAligned>
}
 800f136:	b005      	add	sp, #20
 800f138:	f85d fb04 	ldr.w	pc, [sp], #4
 800f13c:	0000      	movs	r0, r0
	...

0800f140 <dyn_list_init>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {
 800f140:	b082      	sub	sp, #8
 800f142:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 800f144:	9b01      	ldr	r3, [sp, #4]
 800f146:	9a01      	ldr	r2, [sp, #4]
 800f148:	601a      	str	r2, [r3, #0]
}
 800f14a:	b002      	add	sp, #8
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop

0800f150 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 800f150:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 800f152:	480e      	ldr	r0, [pc, #56]	; (800f18c <_factory_init+0x3c>)
 800f154:	f7ff feb4 	bl	800eec0 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 800f158:	480d      	ldr	r0, [pc, #52]	; (800f190 <_factory_init+0x40>)
 800f15a:	f7ff fff1 	bl	800f140 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 800f15e:	480d      	ldr	r0, [pc, #52]	; (800f194 <_factory_init+0x44>)
 800f160:	2114      	movs	r1, #20
 800f162:	4a0d      	ldr	r2, [pc, #52]	; (800f198 <_factory_init+0x48>)
 800f164:	f7ff ffdc 	bl	800f120 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 800f168:	480c      	ldr	r0, [pc, #48]	; (800f19c <_factory_init+0x4c>)
 800f16a:	f7ff ffe9 	bl	800f140 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 800f16e:	480c      	ldr	r0, [pc, #48]	; (800f1a0 <_factory_init+0x50>)
 800f170:	f7ff ffe6 	bl	800f140 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 800f174:	480b      	ldr	r0, [pc, #44]	; (800f1a4 <_factory_init+0x54>)
 800f176:	211c      	movs	r1, #28
 800f178:	4a07      	ldr	r2, [pc, #28]	; (800f198 <_factory_init+0x48>)
 800f17a:	f7ff ffd1 	bl	800f120 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 800f17e:	480a      	ldr	r0, [pc, #40]	; (800f1a8 <_factory_init+0x58>)
 800f180:	f7ff ffde 	bl	800f140 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 800f184:	4809      	ldr	r0, [pc, #36]	; (800f1ac <_factory_init+0x5c>)
 800f186:	f7ff ffdb 	bl	800f140 <dyn_list_init>
#endif
}
 800f18a:	bd08      	pop	{r3, pc}
 800f18c:	200027ac 	.word	0x200027ac
 800f190:	200027bc 	.word	0x200027bc
 800f194:	200027c0 	.word	0x200027c0
 800f198:	0800f101 	.word	0x0800f101
 800f19c:	200027d0 	.word	0x200027d0
 800f1a0:	200027d4 	.word	0x200027d4
 800f1a4:	200027d8 	.word	0x200027d8
 800f1a8:	200027e8 	.word	0x200027e8
 800f1ac:	200027ec 	.word	0x200027ec

0800f1b0 <port_lock.lto_priv.650>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 800f1b0:	b082      	sub	sp, #8
 800f1b2:	2320      	movs	r3, #32
 800f1b4:	9301      	str	r3, [sp, #4]
 800f1b6:	9b01      	ldr	r3, [sp, #4]
 800f1b8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800f1bc:	b002      	add	sp, #8
 800f1be:	4770      	bx	lr

0800f1c0 <port_unlock.lto_priv.660>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 800f1c0:	b082      	sub	sp, #8
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	9301      	str	r3, [sp, #4]
 800f1c6:	9b01      	ldr	r3, [sp, #4]
 800f1c8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800f1cc:	b002      	add	sp, #8
 800f1ce:	4770      	bx	lr

0800f1d0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 800f1d0:	b508      	push	{r3, lr}

  port_lock();
 800f1d2:	f7ff ffed 	bl	800f1b0 <port_lock.lto_priv.650>
}
 800f1d6:	bd08      	pop	{r3, pc}
	...

0800f1e0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 800f1e0:	b508      	push	{r3, lr}

  port_unlock();
 800f1e2:	f7ff ffed 	bl	800f1c0 <port_unlock.lto_priv.660>
}
 800f1e6:	bd08      	pop	{r3, pc}
	...

0800f1f0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	b082      	sub	sp, #8
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800f1f4:	4a0b      	ldr	r2, [pc, #44]	; (800f224 <SVC_Handler+0x34>)
 800f1f6:	4b0b      	ldr	r3, [pc, #44]	; (800f224 <SVC_Handler+0x34>)
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	f023 0301 	bic.w	r3, r3, #1
 800f1fe:	6053      	str	r3, [r2, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800f200:	f3ef 8309 	mrs	r3, PSP
 800f204:	461c      	mov	r4, r3
  return(result);
 800f206:	4623      	mov	r3, r4
#endif

  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();
 800f208:	9301      	str	r3, [sp, #4]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800f20a:	9b01      	ldr	r3, [sp, #4]
 800f20c:	3368      	adds	r3, #104	; 0x68
 800f20e:	9301      	str	r3, [sp, #4]

  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);
 800f210:	9b01      	ldr	r3, [sp, #4]
 800f212:	9300      	str	r3, [sp, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800f214:	9b00      	ldr	r3, [sp, #0]
 800f216:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
 800f21a:	f7ff ffe1 	bl	800f1e0 <port_unlock_from_isr>
}
 800f21e:	b002      	add	sp, #8
 800f220:	bd10      	pop	{r4, pc}
 800f222:	bf00      	nop
 800f224:	e000ef30 	.word	0xe000ef30
	...

0800f230 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800f230:	b510      	push	{r4, lr}
 800f232:	b084      	sub	sp, #16

  port_lock_from_isr();
 800f234:	f7ff ffcc 	bl	800f1d0 <port_lock_from_isr>
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800f238:	4b17      	ldr	r3, [pc, #92]	; (800f298 <_port_irq_epilogue+0x68>)
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f240:	2b00      	cmp	r3, #0
 800f242:	d025      	beq.n	800f290 <_port_irq_epilogue+0x60>
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800f244:	eef1 3a10 	vmrs	r3, fpscr
 800f248:	9302      	str	r3, [sp, #8]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800f24a:	f3ef 8309 	mrs	r3, PSP
 800f24e:	461c      	mov	r4, r3
  return(result);
 800f250:	4623      	mov	r3, r4
      /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
      (void) __get_FPSCR();
#endif

    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
 800f252:	9303      	str	r3, [sp, #12]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	3b68      	subs	r3, #104	; 0x68
 800f258:	9303      	str	r3, [sp, #12]

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800f25a:	9b03      	ldr	r3, [sp, #12]
 800f25c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f260:	61da      	str	r2, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800f262:	4b0e      	ldr	r3, [pc, #56]	; (800f29c <_port_irq_epilogue+0x6c>)
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	461a      	mov	r2, r3
 800f268:	9b03      	ldr	r3, [sp, #12]
 800f26a:	661a      	str	r2, [r3, #96]	; 0x60
#endif

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
 800f26c:	9b03      	ldr	r3, [sp, #12]
 800f26e:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800f270:	9b01      	ldr	r3, [sp, #4]
 800f272:	f383 8809 	msr	PSP, r3

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800f276:	f001 fb4b 	bl	8010910 <chSchIsPreemptionRequired>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <_port_irq_epilogue+0x58>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800f280:	9b03      	ldr	r3, [sp, #12]
 800f282:	4a07      	ldr	r2, [pc, #28]	; (800f2a0 <_port_irq_epilogue+0x70>)
 800f284:	619a      	str	r2, [r3, #24]
 800f286:	e005      	b.n	800f294 <_port_irq_epilogue+0x64>
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800f288:	9b03      	ldr	r3, [sp, #12]
 800f28a:	4a06      	ldr	r2, [pc, #24]	; (800f2a4 <_port_irq_epilogue+0x74>)
 800f28c:	619a      	str	r2, [r3, #24]
 800f28e:	e001      	b.n	800f294 <_port_irq_epilogue+0x64>

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
 800f290:	f7ff ffa6 	bl	800f1e0 <port_unlock_from_isr>
}
 800f294:	b004      	add	sp, #16
 800f296:	bd10      	pop	{r4, pc}
 800f298:	e000ed00 	.word	0xe000ed00
 800f29c:	e000ef30 	.word	0xe000ef30
 800f2a0:	08004331 	.word	0x08004331
 800f2a4:	08004334 	.word	0x08004334
	...

0800f2b0 <sdc_lld_start_clk>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_start_clk(SDCDriver *sdcp) {
 800f2b0:	b500      	push	{lr}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	9001      	str	r0, [sp, #4]

  /* Initial clock setting: 400kHz, 1bit mode.*/
  sdcp->sdio->CLKCR  = STM32_SDIO_DIV_LS;
 800f2b6:	9b01      	ldr	r3, [sp, #4]
 800f2b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2ba:	2278      	movs	r2, #120	; 0x78
 800f2bc:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER |= SDIO_POWER_PWRCTRL_0 | SDIO_POWER_PWRCTRL_1;
 800f2be:	9b01      	ldr	r3, [sp, #4]
 800f2c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2c2:	9a01      	ldr	r2, [sp, #4]
 800f2c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f2c6:	6812      	ldr	r2, [r2, #0]
 800f2c8:	f042 0203 	orr.w	r2, r2, #3
 800f2cc:	601a      	str	r2, [r3, #0]
  sdcp->sdio->CLKCR |= SDIO_CLKCR_CLKEN;
 800f2ce:	9b01      	ldr	r3, [sp, #4]
 800f2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2d2:	9a01      	ldr	r2, [sp, #4]
 800f2d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f2d6:	6852      	ldr	r2, [r2, #4]
 800f2d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f2dc:	605a      	str	r2, [r3, #4]

  /* Clock activation delay.*/
  osalThreadSleep(OSAL_MS2I(STM32_SDC_CLOCK_ACTIVATION_DELAY));
 800f2de:	2064      	movs	r0, #100	; 0x64
 800f2e0:	f003 faa6 	bl	8012830 <osalThreadSleep.lto_priv.774>
}
 800f2e4:	b003      	add	sp, #12
 800f2e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2ea:	bf00      	nop
 800f2ec:	0000      	movs	r0, r0
	...

0800f2f0 <sdc_lld_set_data_clk>:
 * @param[in] sdcp      pointer to the @p SDCDriver object
 * @param[in] clk       the clock mode
 *
 * @notapi
 */
void sdc_lld_set_data_clk(SDCDriver *sdcp, sdcbusclk_t clk) {
 800f2f0:	b082      	sub	sp, #8
 800f2f2:	9001      	str	r0, [sp, #4]
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	f88d 3003 	strb.w	r3, [sp, #3]
  else
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
#else
  (void)clk;

  sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
 800f2fa:	9b01      	ldr	r3, [sp, #4]
 800f2fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2fe:	9a01      	ldr	r2, [sp, #4]
 800f300:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f302:	6852      	ldr	r2, [r2, #4]
 800f304:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800f308:	605a      	str	r2, [r3, #4]
#endif
}
 800f30a:	b002      	add	sp, #8
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop

0800f310 <sdc_lld_stop_clk>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_stop_clk(SDCDriver *sdcp) {
 800f310:	b082      	sub	sp, #8
 800f312:	9001      	str	r0, [sp, #4]

  sdcp->sdio->CLKCR = 0;
 800f314:	9b01      	ldr	r3, [sp, #4]
 800f316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f318:	2200      	movs	r2, #0
 800f31a:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER = 0;
 800f31c:	9b01      	ldr	r3, [sp, #4]
 800f31e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f320:	2200      	movs	r2, #0
 800f322:	601a      	str	r2, [r3, #0]
}
 800f324:	b002      	add	sp, #8
 800f326:	4770      	bx	lr
	...

0800f330 <sdc_lld_set_bus_mode>:
 * @param[in] sdcp      pointer to the @p SDCDriver object
 * @param[in] mode      bus mode
 *
 * @notapi
 */
void sdc_lld_set_bus_mode(SDCDriver *sdcp, sdcbusmode_t mode) {
 800f330:	b084      	sub	sp, #16
 800f332:	9001      	str	r0, [sp, #4]
 800f334:	460b      	mov	r3, r1
 800f336:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 800f33a:	9b01      	ldr	r3, [sp, #4]
 800f33c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800f344:	9303      	str	r3, [sp, #12]

  switch (mode) {
 800f346:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d008      	beq.n	800f360 <sdc_lld_set_bus_mode+0x30>
 800f34e:	2b02      	cmp	r3, #2
 800f350:	d00d      	beq.n	800f36e <sdc_lld_set_bus_mode+0x3e>
 800f352:	2b00      	cmp	r3, #0
 800f354:	d111      	bne.n	800f37a <sdc_lld_set_bus_mode+0x4a>
  case SDC_MODE_1BIT:
    sdcp->sdio->CLKCR = clk;
 800f356:	9b01      	ldr	r3, [sp, #4]
 800f358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f35a:	9a03      	ldr	r2, [sp, #12]
 800f35c:	605a      	str	r2, [r3, #4]
 800f35e:	e00c      	b.n	800f37a <sdc_lld_set_bus_mode+0x4a>
    break;
  case SDC_MODE_4BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 800f360:	9b01      	ldr	r3, [sp, #4]
 800f362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f364:	9a03      	ldr	r2, [sp, #12]
 800f366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f36a:	605a      	str	r2, [r3, #4]
 800f36c:	e005      	b.n	800f37a <sdc_lld_set_bus_mode+0x4a>
    break;
  case SDC_MODE_8BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_1;
 800f36e:	9b01      	ldr	r3, [sp, #4]
 800f370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f372:	9a03      	ldr	r2, [sp, #12]
 800f374:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f378:	605a      	str	r2, [r3, #4]
    break;
  }
}
 800f37a:	b004      	add	sp, #16
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop

0800f380 <sdc_lld_send_cmd_none>:
 * @param[in] cmd       card command
 * @param[in] arg       command argument
 *
 * @notapi
 */
void sdc_lld_send_cmd_none(SDCDriver *sdcp, uint8_t cmd, uint32_t arg) {
 800f380:	b084      	sub	sp, #16
 800f382:	9003      	str	r0, [sp, #12]
 800f384:	460b      	mov	r3, r1
 800f386:	9201      	str	r2, [sp, #4]
 800f388:	f88d 300b 	strb.w	r3, [sp, #11]

  sdcp->sdio->ARG = arg;
 800f38c:	9b03      	ldr	r3, [sp, #12]
 800f38e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f390:	9a01      	ldr	r2, [sp, #4]
 800f392:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 800f394:	9b03      	ldr	r3, [sp, #12]
 800f396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f398:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800f39c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f3a0:	60da      	str	r2, [r3, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0)
 800f3a2:	9b03      	ldr	r3, [sp, #12]
 800f3a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d0f8      	beq.n	800f3a2 <sdc_lld_send_cmd_none+0x22>
    ;
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 800f3b0:	9b03      	ldr	r3, [sp, #12]
 800f3b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3b4:	2280      	movs	r2, #128	; 0x80
 800f3b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f3b8:	b004      	add	sp, #16
 800f3ba:	4770      	bx	lr
 800f3bc:	0000      	movs	r0, r0
	...

0800f3c0 <sdc_lld_send_cmd_short>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                            uint32_t *resp) {
 800f3c0:	b500      	push	{lr}
 800f3c2:	b087      	sub	sp, #28
 800f3c4:	9003      	str	r0, [sp, #12]
 800f3c6:	9201      	str	r2, [sp, #4]
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	f88d 300b 	strb.w	r3, [sp, #11]
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 800f3d0:	9b03      	ldr	r3, [sp, #12]
 800f3d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3d4:	9a01      	ldr	r2, [sp, #4]
 800f3d6:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800f3d8:	9b03      	ldr	r3, [sp, #12]
 800f3da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3dc:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800f3e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f3e4:	b2d2      	uxtb	r2, r2
 800f3e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f3ea:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800f3ec:	9b03      	ldr	r3, [sp, #12]
 800f3ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3f2:	9305      	str	r3, [sp, #20]
 800f3f4:	9b05      	ldr	r3, [sp, #20]
 800f3f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d0f6      	beq.n	800f3ec <sdc_lld_send_cmd_short+0x2c>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800f3fe:	9b03      	ldr	r3, [sp, #12]
 800f400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f402:	9a05      	ldr	r2, [sp, #20]
 800f404:	f002 0245 	and.w	r2, r2, #69	; 0x45
 800f408:	639a      	str	r2, [r3, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 800f40a:	9b05      	ldr	r3, [sp, #20]
 800f40c:	f003 0304 	and.w	r3, r3, #4
 800f410:	2b00      	cmp	r3, #0
 800f412:	d005      	beq.n	800f420 <sdc_lld_send_cmd_short+0x60>
    sdc_lld_collect_errors(sdcp, sta);
 800f414:	9803      	ldr	r0, [sp, #12]
 800f416:	9905      	ldr	r1, [sp, #20]
 800f418:	f003 fb52 	bl	8012ac0 <sdc_lld_collect_errors.lto_priv.773>
    return HAL_FAILED;
 800f41c:	2301      	movs	r3, #1
 800f41e:	e005      	b.n	800f42c <sdc_lld_send_cmd_short+0x6c>
  }
  *resp = sdcp->sdio->RESP1;
 800f420:	9b03      	ldr	r3, [sp, #12]
 800f422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f424:	695a      	ldr	r2, [r3, #20]
 800f426:	9b00      	ldr	r3, [sp, #0]
 800f428:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	b007      	add	sp, #28
 800f430:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f440 <sdc_lld_send_cmd_short_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                                uint32_t *resp) {
 800f440:	b500      	push	{lr}
 800f442:	b087      	sub	sp, #28
 800f444:	9003      	str	r0, [sp, #12]
 800f446:	9201      	str	r2, [sp, #4]
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	460b      	mov	r3, r1
 800f44c:	f88d 300b 	strb.w	r3, [sp, #11]
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 800f450:	9b03      	ldr	r3, [sp, #12]
 800f452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f454:	9a01      	ldr	r2, [sp, #4]
 800f456:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 800f458:	9b03      	ldr	r3, [sp, #12]
 800f45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f45c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800f460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f464:	b2d2      	uxtb	r2, r2
 800f466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f46a:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800f46c:	9b03      	ldr	r3, [sp, #12]
 800f46e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f472:	9305      	str	r3, [sp, #20]
 800f474:	9b05      	ldr	r3, [sp, #20]
 800f476:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d0f6      	beq.n	800f46c <sdc_lld_send_cmd_short_crc+0x2c>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 800f47e:	9b03      	ldr	r3, [sp, #12]
 800f480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f482:	9a05      	ldr	r2, [sp, #20]
 800f484:	f002 0245 	and.w	r2, r2, #69	; 0x45
 800f488:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 800f48a:	9b05      	ldr	r3, [sp, #20]
 800f48c:	f003 0305 	and.w	r3, r3, #5
 800f490:	2b00      	cmp	r3, #0
 800f492:	d005      	beq.n	800f4a0 <sdc_lld_send_cmd_short_crc+0x60>
    sdc_lld_collect_errors(sdcp, sta);
 800f494:	9803      	ldr	r0, [sp, #12]
 800f496:	9905      	ldr	r1, [sp, #20]
 800f498:	f003 fb12 	bl	8012ac0 <sdc_lld_collect_errors.lto_priv.773>
    return HAL_FAILED;
 800f49c:	2301      	movs	r3, #1
 800f49e:	e005      	b.n	800f4ac <sdc_lld_send_cmd_short_crc+0x6c>
  }
  *resp = sdcp->sdio->RESP1;
 800f4a0:	9b03      	ldr	r3, [sp, #12]
 800f4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4a4:	695a      	ldr	r2, [r3, #20]
 800f4a6:	9b00      	ldr	r3, [sp, #0]
 800f4a8:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 800f4aa:	2300      	movs	r3, #0
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	b007      	add	sp, #28
 800f4b0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f4c0 <sdc_lld_send_cmd_long_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_long_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                               uint32_t *resp) {
 800f4c0:	b500      	push	{lr}
 800f4c2:	b087      	sub	sp, #28
 800f4c4:	9003      	str	r0, [sp, #12]
 800f4c6:	9201      	str	r2, [sp, #4]
 800f4c8:	9300      	str	r3, [sp, #0]
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	f88d 300b 	strb.w	r3, [sp, #11]
  uint32_t sta;

  (void)sdcp;

  sdcp->sdio->ARG = arg;
 800f4d0:	9b03      	ldr	r3, [sp, #12]
 800f4d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4d4:	9a01      	ldr	r2, [sp, #4]
 800f4d6:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 800f4d8:	9b03      	ldr	r3, [sp, #12]
 800f4da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4dc:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800f4e0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 800f4e4:	b2d2      	uxtb	r2, r2
 800f4e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f4ea:	60da      	str	r2, [r3, #12]
                                    SDIO_CMD_CPSMEN;
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800f4ec:	9b03      	ldr	r3, [sp, #12]
 800f4ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4f2:	9305      	str	r3, [sp, #20]
 800f4f4:	9b05      	ldr	r3, [sp, #20]
 800f4f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d0f6      	beq.n	800f4ec <sdc_lld_send_cmd_long_crc+0x2c>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800f4fe:	9b03      	ldr	r3, [sp, #12]
 800f500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f502:	9a05      	ldr	r2, [sp, #20]
 800f504:	f002 0245 	and.w	r2, r2, #69	; 0x45
 800f508:	639a      	str	r2, [r3, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (STM32_SDIO_STA_ERROR_MASK)) != 0) {
 800f50a:	9b05      	ldr	r3, [sp, #20]
 800f50c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f510:	2b00      	cmp	r3, #0
 800f512:	d005      	beq.n	800f520 <sdc_lld_send_cmd_long_crc+0x60>
    sdc_lld_collect_errors(sdcp, sta);
 800f514:	9803      	ldr	r0, [sp, #12]
 800f516:	9905      	ldr	r1, [sp, #20]
 800f518:	f003 fad2 	bl	8012ac0 <sdc_lld_collect_errors.lto_priv.773>
    return HAL_FAILED;
 800f51c:	2301      	movs	r3, #1
 800f51e:	e01a      	b.n	800f556 <sdc_lld_send_cmd_long_crc+0x96>
  }
  /* Save bytes in reverse order because MSB in response comes first.*/
  *resp++ = sdcp->sdio->RESP4;
 800f520:	9b00      	ldr	r3, [sp, #0]
 800f522:	1d1a      	adds	r2, r3, #4
 800f524:	9200      	str	r2, [sp, #0]
 800f526:	9a03      	ldr	r2, [sp, #12]
 800f528:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f52a:	6a12      	ldr	r2, [r2, #32]
 800f52c:	601a      	str	r2, [r3, #0]
  *resp++ = sdcp->sdio->RESP3;
 800f52e:	9b00      	ldr	r3, [sp, #0]
 800f530:	1d1a      	adds	r2, r3, #4
 800f532:	9200      	str	r2, [sp, #0]
 800f534:	9a03      	ldr	r2, [sp, #12]
 800f536:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f538:	69d2      	ldr	r2, [r2, #28]
 800f53a:	601a      	str	r2, [r3, #0]
  *resp++ = sdcp->sdio->RESP2;
 800f53c:	9b00      	ldr	r3, [sp, #0]
 800f53e:	1d1a      	adds	r2, r3, #4
 800f540:	9200      	str	r2, [sp, #0]
 800f542:	9a03      	ldr	r2, [sp, #12]
 800f544:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f546:	6992      	ldr	r2, [r2, #24]
 800f548:	601a      	str	r2, [r3, #0]
  *resp   = sdcp->sdio->RESP1;
 800f54a:	9b03      	ldr	r3, [sp, #12]
 800f54c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f54e:	695a      	ldr	r2, [r3, #20]
 800f550:	9b00      	ldr	r3, [sp, #0]
 800f552:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	b007      	add	sp, #28
 800f55a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f55e:	bf00      	nop

0800f560 <sdc_lld_read_special>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_special(SDCDriver *sdcp, uint8_t *buf, size_t bytes,
                          uint8_t cmd, uint32_t arg) {
 800f560:	b500      	push	{lr}
 800f562:	b087      	sub	sp, #28
 800f564:	9003      	str	r0, [sp, #12]
 800f566:	9102      	str	r1, [sp, #8]
 800f568:	9201      	str	r2, [sp, #4]
 800f56a:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t resp[1];

  if(sdc_lld_prepare_read_bytes(sdcp, buf, bytes))
 800f56e:	9803      	ldr	r0, [sp, #12]
 800f570:	9902      	ldr	r1, [sp, #8]
 800f572:	9a01      	ldr	r2, [sp, #4]
 800f574:	f003 f98c 	bl	8012890 <sdc_lld_prepare_read_bytes.lto_priv.772>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d11a      	bne.n	800f5b4 <sdc_lld_read_special+0x54>
    goto error;

  if (sdc_lld_send_cmd_short_crc(sdcp, cmd, arg, resp)
 800f57e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f582:	ab05      	add	r3, sp, #20
 800f584:	9803      	ldr	r0, [sp, #12]
 800f586:	4611      	mov	r1, r2
 800f588:	9a08      	ldr	r2, [sp, #32]
 800f58a:	f7ff ff59 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d10f      	bne.n	800f5b4 <sdc_lld_read_special+0x54>
                                 || MMCSD_R1_ERROR(resp[0]))
 800f594:	9a05      	ldr	r2, [sp, #20]
 800f596:	4b0d      	ldr	r3, [pc, #52]	; (800f5cc <sdc_lld_read_special+0x6c>)
 800f598:	4013      	ands	r3, r2
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d10a      	bne.n	800f5b4 <sdc_lld_read_special+0x54>
    goto error;

  if (sdc_lld_wait_transaction_end(sdcp, 1, resp))
 800f59e:	ab05      	add	r3, sp, #20
 800f5a0:	9803      	ldr	r0, [sp, #12]
 800f5a2:	2101      	movs	r1, #1
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	f003 fa3b 	bl	8012a20 <sdc_lld_wait_transaction_end.lto_priv.769>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d101      	bne.n	800f5b4 <sdc_lld_read_special+0x54>
    goto error;

  return HAL_SUCCESS;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	e006      	b.n	800f5c2 <sdc_lld_read_special+0x62>

error:
  sdc_lld_error_cleanup(sdcp, 1, resp);
 800f5b4:	ab05      	add	r3, sp, #20
 800f5b6:	9803      	ldr	r0, [sp, #12]
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	f003 fad0 	bl	8012b60 <sdc_lld_error_cleanup.lto_priv.768>
  return HAL_FAILED;
 800f5c0:	2301      	movs	r3, #1
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	b007      	add	sp, #28
 800f5c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5ca:	bf00      	nop
 800f5cc:	fdffe008 	.word	0xfdffe008

0800f5d0 <sdc_lld_read_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
                          uint8_t *buf, uint32_t blocks) {
 800f5d0:	b500      	push	{lr}
 800f5d2:	b087      	sub	sp, #28
 800f5d4:	9003      	str	r0, [sp, #12]
 800f5d6:	9102      	str	r1, [sp, #8]
 800f5d8:	9201      	str	r2, [sp, #4]
 800f5da:	9300      	str	r3, [sp, #0]
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);

  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 800f5dc:	9b03      	ldr	r3, [sp, #12]
 800f5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5e0:	4a2b      	ldr	r2, [pc, #172]	; (800f690 <sdc_lld_read_aligned+0xc0>)
 800f5e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for reading.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 800f5e4:	9803      	ldr	r0, [sp, #12]
 800f5e6:	f005 fb83 	bl	8014cf0 <_sdc_wait_for_transfer_state>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d001      	beq.n	800f5f4 <sdc_lld_read_aligned+0x24>
    return HAL_FAILED;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e048      	b.n	800f686 <sdc_lld_read_aligned+0xb6>

  /* Prepares the DMA channel for writing.*/
  dmaStreamSetMemory0(sdcp->dma, buf);
 800f5f4:	9b03      	ldr	r3, [sp, #12]
 800f5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	9a01      	ldr	r2, [sp, #4]
 800f5fc:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 800f5fe:	9b03      	ldr	r3, [sp, #12]
 800f600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	9a00      	ldr	r2, [sp, #0]
 800f606:	0252      	lsls	r2, r2, #9
 800f608:	0892      	lsrs	r2, r2, #2
 800f60a:	605a      	str	r2, [r3, #4]
                              (blocks * MMCSD_BLOCK_SIZE) / sizeof (uint32_t));
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 800f60c:	9b03      	ldr	r3, [sp, #12]
 800f60e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	9a03      	ldr	r2, [sp, #12]
 800f614:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f616:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 800f618:	9b03      	ldr	r3, [sp, #12]
 800f61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	9a03      	ldr	r2, [sp, #12]
 800f620:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f622:	6812      	ldr	r2, [r2, #0]
 800f624:	6812      	ldr	r2, [r2, #0]
 800f626:	f042 0201 	orr.w	r2, r2, #1
 800f62a:	601a      	str	r2, [r3, #0]

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 800f62c:	9b03      	ldr	r3, [sp, #12]
 800f62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f630:	4a18      	ldr	r2, [pc, #96]	; (800f694 <sdc_lld_read_aligned+0xc4>)
 800f632:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f638:	f240 322a 	movw	r2, #810	; 0x32a
 800f63c:	63da      	str	r2, [r3, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_RXOVERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 800f63e:	9b03      	ldr	r3, [sp, #12]
 800f640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f642:	9a00      	ldr	r2, [sp, #0]
 800f644:	0252      	lsls	r2, r2, #9
 800f646:	629a      	str	r2, [r3, #40]	; 0x28

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 800f648:	9b03      	ldr	r3, [sp, #12]
 800f64a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f64c:	229b      	movs	r2, #155	; 0x9b
 800f64e:	62da      	str	r2, [r3, #44]	; 0x2c
                      SDIO_DCTRL_DBLOCKSIZE_3 |
                      SDIO_DCTRL_DBLOCKSIZE_0 |
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  if (sdc_lld_prepare_read(sdcp, startblk, blocks, resp) == true)
 800f650:	ab05      	add	r3, sp, #20
 800f652:	9803      	ldr	r0, [sp, #12]
 800f654:	9902      	ldr	r1, [sp, #8]
 800f656:	9a00      	ldr	r2, [sp, #0]
 800f658:	f003 f962 	bl	8012920 <sdc_lld_prepare_read.lto_priv.771>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10a      	bne.n	800f678 <sdc_lld_read_aligned+0xa8>
    goto error;

  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 800f662:	ab05      	add	r3, sp, #20
 800f664:	9803      	ldr	r0, [sp, #12]
 800f666:	9900      	ldr	r1, [sp, #0]
 800f668:	461a      	mov	r2, r3
 800f66a:	f003 f9d9 	bl	8012a20 <sdc_lld_wait_transaction_end.lto_priv.769>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d101      	bne.n	800f678 <sdc_lld_read_aligned+0xa8>
    goto error;

  return HAL_SUCCESS;
 800f674:	2300      	movs	r3, #0
 800f676:	e006      	b.n	800f686 <sdc_lld_read_aligned+0xb6>

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 800f678:	ab05      	add	r3, sp, #20
 800f67a:	9803      	ldr	r0, [sp, #12]
 800f67c:	9900      	ldr	r1, [sp, #0]
 800f67e:	461a      	mov	r2, r3
 800f680:	f003 fa6e 	bl	8012b60 <sdc_lld_error_cleanup.lto_priv.768>
  return HAL_FAILED;
 800f684:	2301      	movs	r3, #1
}
 800f686:	4618      	mov	r0, r3
 800f688:	b007      	add	sp, #28
 800f68a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f68e:	bf00      	nop
 800f690:	016e3600 	.word	0x016e3600
 800f694:	00c007ff 	.word	0x00c007ff
	...

0800f6a0 <sdc_lld_write_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
                           const uint8_t *buf, uint32_t blocks) {
 800f6a0:	b500      	push	{lr}
 800f6a2:	b087      	sub	sp, #28
 800f6a4:	9003      	str	r0, [sp, #12]
 800f6a6:	9102      	str	r1, [sp, #8]
 800f6a8:	9201      	str	r2, [sp, #4]
 800f6aa:	9300      	str	r3, [sp, #0]
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);

  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 800f6ac:	9b03      	ldr	r3, [sp, #12]
 800f6ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6b0:	4a2c      	ldr	r2, [pc, #176]	; (800f764 <sdc_lld_write_aligned+0xc4>)
 800f6b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for writing.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 800f6b4:	9803      	ldr	r0, [sp, #12]
 800f6b6:	f005 fb1b 	bl	8014cf0 <_sdc_wait_for_transfer_state>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d001      	beq.n	800f6c4 <sdc_lld_write_aligned+0x24>
    return HAL_FAILED;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e04a      	b.n	800f75a <sdc_lld_write_aligned+0xba>

  /* Prepares the DMA channel for writing.*/
  dmaStreamSetMemory0(sdcp->dma, buf);
 800f6c4:	9b03      	ldr	r3, [sp, #12]
 800f6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	9a01      	ldr	r2, [sp, #4]
 800f6cc:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 800f6ce:	9b03      	ldr	r3, [sp, #12]
 800f6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	9a00      	ldr	r2, [sp, #0]
 800f6d6:	0252      	lsls	r2, r2, #9
 800f6d8:	0892      	lsrs	r2, r2, #2
 800f6da:	605a      	str	r2, [r3, #4]
                             (blocks * MMCSD_BLOCK_SIZE) / sizeof (uint32_t));
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 800f6dc:	9b03      	ldr	r3, [sp, #12]
 800f6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	9a03      	ldr	r2, [sp, #12]
 800f6e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f6e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f6ea:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 800f6ec:	9b03      	ldr	r3, [sp, #12]
 800f6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	9a03      	ldr	r2, [sp, #12]
 800f6f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f6f6:	6812      	ldr	r2, [r2, #0]
 800f6f8:	6812      	ldr	r2, [r2, #0]
 800f6fa:	f042 0201 	orr.w	r2, r2, #1
 800f6fe:	601a      	str	r2, [r3, #0]

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 800f700:	9b03      	ldr	r3, [sp, #12]
 800f702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f704:	4a18      	ldr	r2, [pc, #96]	; (800f768 <sdc_lld_write_aligned+0xc8>)
 800f706:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 800f708:	9b03      	ldr	r3, [sp, #12]
 800f70a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f70c:	f240 321a 	movw	r2, #794	; 0x31a
 800f710:	63da      	str	r2, [r3, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_TXUNDERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 800f712:	9b03      	ldr	r3, [sp, #12]
 800f714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f716:	9a00      	ldr	r2, [sp, #0]
 800f718:	0252      	lsls	r2, r2, #9
 800f71a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Talk to card what we want from it.*/
  if (sdc_lld_prepare_write(sdcp, startblk, blocks, resp) == true)
 800f71c:	ab05      	add	r3, sp, #20
 800f71e:	9803      	ldr	r0, [sp, #12]
 800f720:	9902      	ldr	r1, [sp, #8]
 800f722:	9a00      	ldr	r2, [sp, #0]
 800f724:	f003 f93c 	bl	80129a0 <sdc_lld_prepare_write.lto_priv.770>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10e      	bne.n	800f74c <sdc_lld_write_aligned+0xac>
    goto error;

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 800f72e:	9b03      	ldr	r3, [sp, #12]
 800f730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f732:	2299      	movs	r2, #153	; 0x99
 800f734:	62da      	str	r2, [r3, #44]	; 0x2c
                      SDIO_DCTRL_DBLOCKSIZE_0 |
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 800f736:	ab05      	add	r3, sp, #20
 800f738:	9803      	ldr	r0, [sp, #12]
 800f73a:	9900      	ldr	r1, [sp, #0]
 800f73c:	461a      	mov	r2, r3
 800f73e:	f003 f96f 	bl	8012a20 <sdc_lld_wait_transaction_end.lto_priv.769>
 800f742:	4603      	mov	r3, r0
 800f744:	2b00      	cmp	r3, #0
 800f746:	d101      	bne.n	800f74c <sdc_lld_write_aligned+0xac>
    goto error;

  return HAL_SUCCESS;
 800f748:	2300      	movs	r3, #0
 800f74a:	e006      	b.n	800f75a <sdc_lld_write_aligned+0xba>

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 800f74c:	ab05      	add	r3, sp, #20
 800f74e:	9803      	ldr	r0, [sp, #12]
 800f750:	9900      	ldr	r1, [sp, #0]
 800f752:	461a      	mov	r2, r3
 800f754:	f003 fa04 	bl	8012b60 <sdc_lld_error_cleanup.lto_priv.768>
  return HAL_FAILED;
 800f758:	2301      	movs	r3, #1
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	b007      	add	sp, #28
 800f75e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f762:	bf00      	nop
 800f764:	016e3600 	.word	0x016e3600
 800f768:	00c007ff 	.word	0x00c007ff
 800f76c:	00000000 	.word	0x00000000

0800f770 <sdc_lld_read>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read(SDCDriver *sdcp, uint32_t startblk,
                  uint8_t *buf, uint32_t blocks) {
 800f770:	b500      	push	{lr}
 800f772:	b087      	sub	sp, #28
 800f774:	9003      	str	r0, [sp, #12]
 800f776:	9102      	str	r1, [sp, #8]
 800f778:	9201      	str	r2, [sp, #4]
 800f77a:	9300      	str	r3, [sp, #0]

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 800f77c:	9b01      	ldr	r3, [sp, #4]
 800f77e:	f003 0303 	and.w	r3, r3, #3
 800f782:	2b00      	cmp	r3, #0
 800f784:	d027      	beq.n	800f7d6 <sdc_lld_read+0x66>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 800f786:	2300      	movs	r3, #0
 800f788:	9305      	str	r3, [sp, #20]
 800f78a:	e01e      	b.n	800f7ca <sdc_lld_read+0x5a>
      if (sdc_lld_read_aligned(sdcp, startblk, u.buf, 1))
 800f78c:	9803      	ldr	r0, [sp, #12]
 800f78e:	9902      	ldr	r1, [sp, #8]
 800f790:	4a16      	ldr	r2, [pc, #88]	; (800f7ec <sdc_lld_read+0x7c>)
 800f792:	2301      	movs	r3, #1
 800f794:	f7ff ff1c 	bl	800f5d0 <sdc_lld_read_aligned>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d001      	beq.n	800f7a2 <sdc_lld_read+0x32>
        return HAL_FAILED;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	e020      	b.n	800f7e4 <sdc_lld_read+0x74>
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
 800f7a2:	9b01      	ldr	r3, [sp, #4]
 800f7a4:	4a11      	ldr	r2, [pc, #68]	; (800f7ec <sdc_lld_read+0x7c>)
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7ac:	4608      	mov	r0, r1
 800f7ae:	4611      	mov	r1, r2
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	f7fe f93b 	bl	800da2c <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 800f7b6:	9b01      	ldr	r3, [sp, #4]
 800f7b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f7bc:	9301      	str	r3, [sp, #4]
      startblk++;
 800f7be:	9b02      	ldr	r3, [sp, #8]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	9302      	str	r3, [sp, #8]
                  uint8_t *buf, uint32_t blocks) {

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 800f7c4:	9b05      	ldr	r3, [sp, #20]
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	9305      	str	r3, [sp, #20]
 800f7ca:	9a05      	ldr	r2, [sp, #20]
 800f7cc:	9b00      	ldr	r3, [sp, #0]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d3dc      	bcc.n	800f78c <sdc_lld_read+0x1c>
        return HAL_FAILED;
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
      buf += MMCSD_BLOCK_SIZE;
      startblk++;
    }
    return HAL_SUCCESS;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e006      	b.n	800f7e4 <sdc_lld_read+0x74>
  }
#else /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  osalDbgAssert((((unsigned)buf & 3) == 0), "unaligned buffer");
#endif /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_read_aligned(sdcp, startblk, buf, blocks);
 800f7d6:	9803      	ldr	r0, [sp, #12]
 800f7d8:	9902      	ldr	r1, [sp, #8]
 800f7da:	9a01      	ldr	r2, [sp, #4]
 800f7dc:	9b00      	ldr	r3, [sp, #0]
 800f7de:	f7ff fef7 	bl	800f5d0 <sdc_lld_read_aligned>
 800f7e2:	4603      	mov	r3, r0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	b007      	add	sp, #28
 800f7e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7ec:	200012f8 	.word	0x200012f8

0800f7f0 <sdc_lld_write>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write(SDCDriver *sdcp, uint32_t startblk,
                   const uint8_t *buf, uint32_t blocks) {
 800f7f0:	b500      	push	{lr}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	9003      	str	r0, [sp, #12]
 800f7f6:	9102      	str	r1, [sp, #8]
 800f7f8:	9201      	str	r2, [sp, #4]
 800f7fa:	9300      	str	r3, [sp, #0]

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 800f7fc:	9b01      	ldr	r3, [sp, #4]
 800f7fe:	f003 0303 	and.w	r3, r3, #3
 800f802:	2b00      	cmp	r3, #0
 800f804:	d028      	beq.n	800f858 <sdc_lld_write+0x68>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 800f806:	2300      	movs	r3, #0
 800f808:	9305      	str	r3, [sp, #20]
 800f80a:	e01f      	b.n	800f84c <sdc_lld_write+0x5c>
      memcpy(u.buf, buf, MMCSD_BLOCK_SIZE);
 800f80c:	4a18      	ldr	r2, [pc, #96]	; (800f870 <sdc_lld_write+0x80>)
 800f80e:	9b01      	ldr	r3, [sp, #4]
 800f810:	4611      	mov	r1, r2
 800f812:	461a      	mov	r2, r3
 800f814:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f818:	4608      	mov	r0, r1
 800f81a:	4611      	mov	r1, r2
 800f81c:	461a      	mov	r2, r3
 800f81e:	f7fe f905 	bl	800da2c <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 800f822:	9b01      	ldr	r3, [sp, #4]
 800f824:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f828:	9301      	str	r3, [sp, #4]
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
 800f82a:	9803      	ldr	r0, [sp, #12]
 800f82c:	9902      	ldr	r1, [sp, #8]
 800f82e:	4a10      	ldr	r2, [pc, #64]	; (800f870 <sdc_lld_write+0x80>)
 800f830:	2301      	movs	r3, #1
 800f832:	f7ff ff35 	bl	800f6a0 <sdc_lld_write_aligned>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d001      	beq.n	800f840 <sdc_lld_write+0x50>
        return HAL_FAILED;
 800f83c:	2301      	movs	r3, #1
 800f83e:	e012      	b.n	800f866 <sdc_lld_write+0x76>
      startblk++;
 800f840:	9b02      	ldr	r3, [sp, #8]
 800f842:	3301      	adds	r3, #1
 800f844:	9302      	str	r3, [sp, #8]
                   const uint8_t *buf, uint32_t blocks) {

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 800f846:	9b05      	ldr	r3, [sp, #20]
 800f848:	3301      	adds	r3, #1
 800f84a:	9305      	str	r3, [sp, #20]
 800f84c:	9a05      	ldr	r2, [sp, #20]
 800f84e:	9b00      	ldr	r3, [sp, #0]
 800f850:	429a      	cmp	r2, r3
 800f852:	d3db      	bcc.n	800f80c <sdc_lld_write+0x1c>
      buf += MMCSD_BLOCK_SIZE;
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
        return HAL_FAILED;
      startblk++;
    }
    return HAL_SUCCESS;
 800f854:	2300      	movs	r3, #0
 800f856:	e006      	b.n	800f866 <sdc_lld_write+0x76>
  }
#else /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  osalDbgAssert((((unsigned)buf & 3) == 0), "unaligned buffer");
#endif /* !STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_write_aligned(sdcp, startblk, buf, blocks);
 800f858:	9803      	ldr	r0, [sp, #12]
 800f85a:	9902      	ldr	r1, [sp, #8]
 800f85c:	9a01      	ldr	r2, [sp, #4]
 800f85e:	9b00      	ldr	r3, [sp, #0]
 800f860:	f7ff ff1e 	bl	800f6a0 <sdc_lld_write_aligned>
 800f864:	4603      	mov	r3, r0
}
 800f866:	4618      	mov	r0, r3
 800f868:	b007      	add	sp, #28
 800f86a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f86e:	bf00      	nop
 800f870:	200012f8 	.word	0x200012f8
	...

0800f880 <sdc_lld_sync>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdc_lld_sync(SDCDriver *sdcp) {
 800f880:	b082      	sub	sp, #8
 800f882:	9001      	str	r0, [sp, #4]

  /* TODO: Implement.*/
  (void)sdcp;
  return HAL_SUCCESS;
 800f884:	2300      	movs	r3, #0
}
 800f886:	4618      	mov	r0, r3
 800f888:	b002      	add	sp, #8
 800f88a:	4770      	bx	lr
 800f88c:	0000      	movs	r0, r0
	...

0800f890 <port_lock.lto_priv.698>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 800f890:	b082      	sub	sp, #8
 800f892:	2320      	movs	r3, #32
 800f894:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800f896:	9b01      	ldr	r3, [sp, #4]
 800f898:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800f89c:	b002      	add	sp, #8
 800f89e:	4770      	bx	lr

0800f8a0 <port_unlock.lto_priv.690>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 800f8a0:	b082      	sub	sp, #8
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	9301      	str	r3, [sp, #4]
 800f8a6:	9b01      	ldr	r3, [sp, #4]
 800f8a8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800f8ac:	b002      	add	sp, #8
 800f8ae:	4770      	bx	lr

0800f8b0 <port_lock_from_isr.lto_priv.750>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 800f8b0:	b508      	push	{r3, lr}

  port_lock();
 800f8b2:	f7ff ffed 	bl	800f890 <port_lock.lto_priv.698>
}
 800f8b6:	bd08      	pop	{r3, pc}
	...

0800f8c0 <port_unlock_from_isr.lto_priv.746>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 800f8c0:	b508      	push	{r3, lr}

  port_unlock();
 800f8c2:	f7ff ffed 	bl	800f8a0 <port_unlock.lto_priv.690>
}
 800f8c6:	bd08      	pop	{r3, pc}
	...

0800f8d0 <chSysLockFromISR.lto_priv.742>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 800f8d0:	b508      	push	{r3, lr}

  port_lock_from_isr();
 800f8d2:	f7ff ffed 	bl	800f8b0 <port_lock_from_isr.lto_priv.750>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 800f8d6:	bd08      	pop	{r3, pc}
	...

0800f8e0 <chSysUnlockFromISR.lto_priv.738>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 800f8e0:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 800f8e2:	f7ff ffed 	bl	800f8c0 <port_unlock_from_isr.lto_priv.746>
}
 800f8e6:	bd08      	pop	{r3, pc}
	...

0800f8f0 <osalSysLockFromISR.lto_priv.765>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 800f8f0:	b508      	push	{r3, lr}

  chSysLockFromISR();
 800f8f2:	f7ff ffed 	bl	800f8d0 <chSysLockFromISR.lto_priv.742>
}
 800f8f6:	bd08      	pop	{r3, pc}
	...

0800f900 <osalSysUnlockFromISR.lto_priv.763>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 800f900:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 800f902:	f7ff ffed 	bl	800f8e0 <chSysUnlockFromISR.lto_priv.738>
}
 800f906:	bd08      	pop	{r3, pc}
	...

0800f910 <osalOsTimerHandlerI>:
 * @brief   Systick callback for the underlying OS.
 * @note    This callback is only defined if the OSAL requires such a
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {
 800f910:	b508      	push	{r3, lr}

  chSysTimerHandlerI();
 800f912:	f000 fc8d 	bl	8010230 <chSysTimerHandlerI>
}
 800f916:	bd08      	pop	{r3, pc}
	...

0800f920 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800f920:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800f922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	f003 0302 	and.w	r3, r3, #2
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d009      	beq.n	800f944 <VectorB0+0x24>
    STM32_ST_TIM->SR = 0U;
 800f930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f934:	2200      	movs	r2, #0
 800f936:	611a      	str	r2, [r3, #16]

    osalSysLockFromISR();
 800f938:	f7ff ffda 	bl	800f8f0 <osalSysLockFromISR.lto_priv.765>
    osalOsTimerHandlerI();
 800f93c:	f7ff ffe8 	bl	800f910 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 800f940:	f7ff ffde 	bl	800f900 <osalSysUnlockFromISR.lto_priv.763>
  }

  OSAL_IRQ_EPILOGUE();
 800f944:	f7ff fc74 	bl	800f230 <_port_irq_epilogue>
}
 800f948:	bd08      	pop	{r3, pc}
 800f94a:	bf00      	nop
 800f94c:	0000      	movs	r0, r0
	...

0800f950 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 800f950:	b508      	push	{r3, lr}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800f952:	4a1c      	ldr	r2, [pc, #112]	; (800f9c4 <st_lld_init+0x74>)
 800f954:	4b1b      	ldr	r3, [pc, #108]	; (800f9c4 <st_lld_init+0x74>)
 800f956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f958:	f043 0301 	orr.w	r3, r3, #1
 800f95c:	6413      	str	r3, [r2, #64]	; 0x40
 800f95e:	4a19      	ldr	r2, [pc, #100]	; (800f9c4 <st_lld_init+0x74>)
 800f960:	4b18      	ldr	r3, [pc, #96]	; (800f9c4 <st_lld_init+0x74>)
 800f962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f964:	f043 0301 	orr.w	r3, r3, #1
 800f968:	6613      	str	r3, [r2, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800f96a:	4a17      	ldr	r2, [pc, #92]	; (800f9c8 <st_lld_init+0x78>)
 800f96c:	4b16      	ldr	r3, [pc, #88]	; (800f9c8 <st_lld_init+0x78>)
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f043 0301 	orr.w	r3, r3, #1
 800f974:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800f976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f97a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800f97e:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800f980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f984:	f04f 32ff 	mov.w	r2, #4294967295
 800f988:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800f98a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f98e:	2200      	movs	r2, #0
 800f990:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800f992:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f996:	2200      	movs	r2, #0
 800f998:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800f99a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f99e:	2200      	movs	r2, #0
 800f9a0:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800f9a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800f9aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800f9b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800f9ba:	201c      	movs	r0, #28
 800f9bc:	2108      	movs	r1, #8
 800f9be:	f003 ffe7 	bl	8013990 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800f9c2:	bd08      	pop	{r3, pc}
 800f9c4:	40023800 	.word	0x40023800
 800f9c8:	e0042000 	.word	0xe0042000
 800f9cc:	00000000 	.word	0x00000000

0800f9d0 <port_lock.lto_priv.699>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 800f9d0:	b082      	sub	sp, #8
 800f9d2:	2320      	movs	r3, #32
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	9b01      	ldr	r3, [sp, #4]
 800f9d8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800f9dc:	b002      	add	sp, #8
 800f9de:	4770      	bx	lr

0800f9e0 <port_unlock.lto_priv.691>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 800f9e0:	b082      	sub	sp, #8
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	9301      	str	r3, [sp, #4]
 800f9e6:	9b01      	ldr	r3, [sp, #4]
 800f9e8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800f9ec:	b002      	add	sp, #8
 800f9ee:	4770      	bx	lr

0800f9f0 <port_lock_from_isr.lto_priv.751>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 800f9f0:	b508      	push	{r3, lr}

  port_lock();
 800f9f2:	f7ff ffed 	bl	800f9d0 <port_lock.lto_priv.699>
}
 800f9f6:	bd08      	pop	{r3, pc}
	...

0800fa00 <port_unlock_from_isr.lto_priv.747>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 800fa00:	b508      	push	{r3, lr}

  port_unlock();
 800fa02:	f7ff ffed 	bl	800f9e0 <port_unlock.lto_priv.691>
}
 800fa06:	bd08      	pop	{r3, pc}
	...

0800fa10 <chSysLockFromISR.lto_priv.743>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 800fa10:	b508      	push	{r3, lr}

  port_lock_from_isr();
 800fa12:	f7ff ffed 	bl	800f9f0 <port_lock_from_isr.lto_priv.751>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 800fa16:	bd08      	pop	{r3, pc}
	...

0800fa20 <chSysUnlockFromISR.lto_priv.739>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 800fa20:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 800fa22:	f7ff ffed 	bl	800fa00 <port_unlock_from_isr.lto_priv.747>
}
 800fa26:	bd08      	pop	{r3, pc}
	...

0800fa30 <osalSysLockFromISR.lto_priv.766>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 800fa30:	b508      	push	{r3, lr}

  chSysLockFromISR();
 800fa32:	f7ff ffed 	bl	800fa10 <chSysLockFromISR.lto_priv.743>
}
 800fa36:	bd08      	pop	{r3, pc}
	...

0800fa40 <osalSysUnlockFromISR.lto_priv.764>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 800fa40:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 800fa42:	f7ff ffed 	bl	800fa20 <chSysUnlockFromISR.lto_priv.739>
}
 800fa46:	bd08      	pop	{r3, pc}
	...

0800fa50 <osalEventBroadcastFlagsI>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 800fa50:	b500      	push	{lr}
 800fa52:	b083      	sub	sp, #12
 800fa54:	9001      	str	r0, [sp, #4]
 800fa56:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 800fa58:	9801      	ldr	r0, [sp, #4]
 800fa5a:	9900      	ldr	r1, [sp, #0]
 800fa5c:	f7ff fa40 	bl	800eee0 <chEvtBroadcastFlagsI>
}
 800fa60:	b003      	add	sp, #12
 800fa62:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa66:	bf00      	nop
	...

0800fa70 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 800fa70:	b500      	push	{lr}
 800fa72:	b085      	sub	sp, #20
 800fa74:	9001      	str	r0, [sp, #4]
 800fa76:	460b      	mov	r3, r1
 800fa78:	f8ad 3002 	strh.w	r3, [sp, #2]
  eventflags_t sts = 0;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
 800fa80:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fa84:	f003 0308 	and.w	r3, r3, #8
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d003      	beq.n	800fa94 <set_error+0x24>
    sts |= SD_OVERRUN_ERROR;
 800fa8c:	9b03      	ldr	r3, [sp, #12]
 800fa8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa92:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
 800fa94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d003      	beq.n	800faa8 <set_error+0x38>
    sts |= SD_PARITY_ERROR;
 800faa0:	9b03      	ldr	r3, [sp, #12]
 800faa2:	f043 0320 	orr.w	r3, r3, #32
 800faa6:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
 800faa8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800faac:	f003 0302 	and.w	r3, r3, #2
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d003      	beq.n	800fabc <set_error+0x4c>
    sts |= SD_FRAMING_ERROR;
 800fab4:	9b03      	ldr	r3, [sp, #12]
 800fab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faba:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
 800fabc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fac0:	f003 0304 	and.w	r3, r3, #4
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d003      	beq.n	800fad0 <set_error+0x60>
    sts |= SD_NOISE_ERROR;
 800fac8:	9b03      	ldr	r3, [sp, #12]
 800faca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800face:	9303      	str	r3, [sp, #12]
  chnAddFlagsI(sdp, sts);
 800fad0:	9b01      	ldr	r3, [sp, #4]
 800fad2:	3304      	adds	r3, #4
 800fad4:	4618      	mov	r0, r3
 800fad6:	9903      	ldr	r1, [sp, #12]
 800fad8:	f7ff ffba 	bl	800fa50 <osalEventBroadcastFlagsI>
}
 800fadc:	b005      	add	sp, #20
 800fade:	f85d fb04 	ldr.w	pc, [sp], #4
 800fae2:	bf00      	nop
	...

0800faf0 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 800faf0:	b500      	push	{lr}
 800faf2:	b087      	sub	sp, #28
 800faf4:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 800faf6:	9b01      	ldr	r3, [sp, #4]
 800faf8:	f8d3 3854 	ldr.w	r3, [r3, #2132]	; 0x854
 800fafc:	9304      	str	r3, [sp, #16]
  uint16_t cr1 = u->CR1;
 800fafe:	9b04      	ldr	r3, [sp, #16]
 800fb00:	68db      	ldr	r3, [r3, #12]
 800fb02:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint16_t sr = u->SR;
 800fb06:	9b04      	ldr	r3, [sp, #16]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800fb0e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fb12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00e      	beq.n	800fb38 <serve_interrupt+0x48>
    osalSysLockFromISR();
 800fb1a:	f7ff ff89 	bl	800fa30 <osalSysLockFromISR.lto_priv.766>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 800fb1e:	9b01      	ldr	r3, [sp, #4]
 800fb20:	3304      	adds	r3, #4
 800fb22:	4618      	mov	r0, r3
 800fb24:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fb28:	f7ff ff92 	bl	800fa50 <osalEventBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800fb2c:	9b04      	ldr	r3, [sp, #16]
 800fb2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fb32:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 800fb34:	f7ff ff84 	bl	800fa40 <osalSysUnlockFromISR.lto_priv.764>
  }

  /* Data available.*/
  osalSysLockFromISR();
 800fb38:	f7ff ff7a 	bl	800fa30 <osalSysLockFromISR.lto_priv.766>
 800fb3c:	e024      	b.n	800fb88 <serve_interrupt+0x98>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800fb3e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fb42:	f003 030f 	and.w	r3, r3, #15
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d005      	beq.n	800fb56 <serve_interrupt+0x66>
      set_error(sdp, sr);
 800fb4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fb4e:	9801      	ldr	r0, [sp, #4]
 800fb50:	4619      	mov	r1, r3
 800fb52:	f7ff ff8d 	bl	800fa70 <set_error>
    b = (uint8_t)u->DR & sdp->rxmask;
 800fb56:	9b04      	ldr	r3, [sp, #16]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	b2da      	uxtb	r2, r3
 800fb5c:	9b01      	ldr	r3, [sp, #4]
 800fb5e:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 800fb62:	4013      	ands	r3, r2
 800fb64:	f88d 300d 	strb.w	r3, [sp, #13]
    if (sr & USART_SR_RXNE)
 800fb68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fb6c:	f003 0320 	and.w	r3, r3, #32
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d005      	beq.n	800fb80 <serve_interrupt+0x90>
      sdIncomingDataI(sdp, b);
 800fb74:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800fb78:	9801      	ldr	r0, [sp, #4]
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	f003 f970 	bl	8012e60 <sdIncomingDataI>
    sr = u->SR;
 800fb80:	9b04      	ldr	r3, [sp, #16]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f8ad 3016 	strh.w	r3, [sp, #22]
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800fb88:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fb8c:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d1d4      	bne.n	800fb3e <serve_interrupt+0x4e>
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
  }
  osalSysUnlockFromISR();
 800fb94:	f7ff ff54 	bl	800fa40 <osalSysUnlockFromISR.lto_priv.764>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800fb98:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800fb9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d024      	beq.n	800fbee <serve_interrupt+0xfe>
 800fba4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d01e      	beq.n	800fbee <serve_interrupt+0xfe>
    msg_t b;
    osalSysLockFromISR();
 800fbb0:	f7ff ff3e 	bl	800fa30 <osalSysLockFromISR.lto_priv.766>
    b = oqGetI(&sdp->oqueue);
 800fbb4:	9b01      	ldr	r3, [sp, #4]
 800fbb6:	3330      	adds	r3, #48	; 0x30
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f005 fe11 	bl	80157e0 <oqGetI>
 800fbbe:	9002      	str	r0, [sp, #8]
    if (b < MSG_OK) {
 800fbc0:	9b02      	ldr	r3, [sp, #8]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	da0e      	bge.n	800fbe4 <serve_interrupt+0xf4>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 800fbc6:	9b01      	ldr	r3, [sp, #4]
 800fbc8:	3304      	adds	r3, #4
 800fbca:	4618      	mov	r0, r3
 800fbcc:	2108      	movs	r1, #8
 800fbce:	f7ff ff3f 	bl	800fa50 <osalEventBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 800fbd2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800fbd6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fbda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fbde:	9b04      	ldr	r3, [sp, #16]
 800fbe0:	60da      	str	r2, [r3, #12]
 800fbe2:	e002      	b.n	800fbea <serve_interrupt+0xfa>
    }
    else
      u->DR = b;
 800fbe4:	9a02      	ldr	r2, [sp, #8]
 800fbe6:	9b04      	ldr	r3, [sp, #16]
 800fbe8:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 800fbea:	f7ff ff29 	bl	800fa40 <osalSysUnlockFromISR.lto_priv.764>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800fbee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800fbf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d027      	beq.n	800fc4a <serve_interrupt+0x15a>
 800fbfa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fbfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d021      	beq.n	800fc4a <serve_interrupt+0x15a>
    osalSysLockFromISR();
 800fc06:	f7ff ff13 	bl	800fa30 <osalSysLockFromISR.lto_priv.766>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800fc0a:	9b01      	ldr	r3, [sp, #4]
 800fc0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc0e:	9b01      	ldr	r3, [sp, #4]
 800fc10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d105      	bne.n	800fc22 <serve_interrupt+0x132>
 800fc16:	9b01      	ldr	r3, [sp, #4]
 800fc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d001      	beq.n	800fc22 <serve_interrupt+0x132>
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e000      	b.n	800fc24 <serve_interrupt+0x134>
 800fc22:	2300      	movs	r3, #0
 800fc24:	f003 0301 	and.w	r3, r3, #1
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00b      	beq.n	800fc46 <serve_interrupt+0x156>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 800fc2e:	9b01      	ldr	r3, [sp, #4]
 800fc30:	3304      	adds	r3, #4
 800fc32:	4618      	mov	r0, r3
 800fc34:	2110      	movs	r1, #16
 800fc36:	f7ff ff0b 	bl	800fa50 <osalEventBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800fc3a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800fc3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800fc42:	9b04      	ldr	r3, [sp, #16]
 800fc44:	60da      	str	r2, [r3, #12]
    }
    osalSysUnlockFromISR();
 800fc46:	f7ff fefb 	bl	800fa40 <osalSysUnlockFromISR.lto_priv.764>
  }
}
 800fc4a:	b007      	add	sp, #28
 800fc4c:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc50 <notify2>:
  USART1->CR1 |= USART_CR1_TXEIE;
}
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 800fc50:	b082      	sub	sp, #8
 800fc52:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 800fc54:	4a03      	ldr	r2, [pc, #12]	; (800fc64 <notify2+0x14>)
 800fc56:	4b03      	ldr	r3, [pc, #12]	; (800fc64 <notify2+0x14>)
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc5e:	60d3      	str	r3, [r2, #12]
}
 800fc60:	b002      	add	sp, #8
 800fc62:	4770      	bx	lr
 800fc64:	40004400 	.word	0x40004400
	...

0800fc70 <notify3>:
#endif

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {
 800fc70:	b082      	sub	sp, #8
 800fc72:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 800fc74:	4a03      	ldr	r2, [pc, #12]	; (800fc84 <notify3+0x14>)
 800fc76:	4b03      	ldr	r3, [pc, #12]	; (800fc84 <notify3+0x14>)
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc7e:	60d3      	str	r3, [r2, #12]
}
 800fc80:	b002      	add	sp, #8
 800fc82:	4770      	bx	lr
 800fc84:	40004800 	.word	0x40004800
	...

0800fc90 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 800fc90:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 800fc92:	4803      	ldr	r0, [pc, #12]	; (800fca0 <VectorD8+0x10>)
 800fc94:	f7ff ff2c 	bl	800faf0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 800fc98:	f7ff faca 	bl	800f230 <_port_irq_epilogue>
}
 800fc9c:	bd08      	pop	{r3, pc}
 800fc9e:	bf00      	nop
 800fca0:	200014f8 	.word	0x200014f8
	...

0800fcb0 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 800fcb0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);
 800fcb2:	4803      	ldr	r0, [pc, #12]	; (800fcc0 <VectorDC+0x10>)
 800fcb4:	f7ff ff1c 	bl	800faf0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 800fcb8:	f7ff faba 	bl	800f230 <_port_irq_epilogue>
}
 800fcbc:	bd08      	pop	{r3, pc}
 800fcbe:	bf00      	nop
 800fcc0:	20001d54 	.word	0x20001d54
	...

0800fcd0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 800fcd0:	b508      	push	{r3, lr}
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 800fcd2:	4809      	ldr	r0, [pc, #36]	; (800fcf8 <sd_lld_init+0x28>)
 800fcd4:	2100      	movs	r1, #0
 800fcd6:	4a09      	ldr	r2, [pc, #36]	; (800fcfc <sd_lld_init+0x2c>)
 800fcd8:	f003 f88a 	bl	8012df0 <sdObjectInit>
  SD2.usart = USART2;
 800fcdc:	4b06      	ldr	r3, [pc, #24]	; (800fcf8 <sd_lld_init+0x28>)
 800fcde:	4a08      	ldr	r2, [pc, #32]	; (800fd00 <sd_lld_init+0x30>)
 800fce0:	f8c3 2854 	str.w	r2, [r3, #2132]	; 0x854
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 800fce4:	4807      	ldr	r0, [pc, #28]	; (800fd04 <sd_lld_init+0x34>)
 800fce6:	2100      	movs	r1, #0
 800fce8:	4a07      	ldr	r2, [pc, #28]	; (800fd08 <sd_lld_init+0x38>)
 800fcea:	f003 f881 	bl	8012df0 <sdObjectInit>
  SD3.usart = USART3;
 800fcee:	4b05      	ldr	r3, [pc, #20]	; (800fd04 <sd_lld_init+0x34>)
 800fcf0:	4a06      	ldr	r2, [pc, #24]	; (800fd0c <sd_lld_init+0x3c>)
 800fcf2:	f8c3 2854 	str.w	r2, [r3, #2132]	; 0x854

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 800fcf6:	bd08      	pop	{r3, pc}
 800fcf8:	200014f8 	.word	0x200014f8
 800fcfc:	0800fc51 	.word	0x0800fc51
 800fd00:	40004400 	.word	0x40004400
 800fd04:	20001d54 	.word	0x20001d54
 800fd08:	0800fc71 	.word	0x0800fc71
 800fd0c:	40004800 	.word	0x40004800

0800fd10 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 800fd10:	b082      	sub	sp, #8
 800fd12:	9001      	str	r0, [sp, #4]
 800fd14:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 800fd16:	9b00      	ldr	r3, [sp, #0]
 800fd18:	685a      	ldr	r2, [r3, #4]
 800fd1a:	9b01      	ldr	r3, [sp, #4]
 800fd1c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800fd1e:	9b00      	ldr	r3, [sp, #0]
 800fd20:	689a      	ldr	r2, [r3, #8]
 800fd22:	9b01      	ldr	r3, [sp, #4]
 800fd24:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800fd26:	9b00      	ldr	r3, [sp, #0]
 800fd28:	68da      	ldr	r2, [r3, #12]
 800fd2a:	9b01      	ldr	r3, [sp, #4]
 800fd2c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800fd2e:	9b00      	ldr	r3, [sp, #0]
 800fd30:	691a      	ldr	r2, [r3, #16]
 800fd32:	9b01      	ldr	r3, [sp, #4]
 800fd34:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800fd36:	9b00      	ldr	r3, [sp, #0]
 800fd38:	695a      	ldr	r2, [r3, #20]
 800fd3a:	9b01      	ldr	r3, [sp, #4]
 800fd3c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800fd3e:	9b00      	ldr	r3, [sp, #0]
 800fd40:	699a      	ldr	r2, [r3, #24]
 800fd42:	9b01      	ldr	r3, [sp, #4]
 800fd44:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800fd46:	9b00      	ldr	r3, [sp, #0]
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	9b01      	ldr	r3, [sp, #4]
 800fd4c:	601a      	str	r2, [r3, #0]
}
 800fd4e:	b002      	add	sp, #8
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
	...

0800fd60 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 800fd60:	b508      	push	{r3, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800fd62:	4a20      	ldr	r2, [pc, #128]	; (800fde4 <stm32_gpio_init+0x84>)
 800fd64:	4b1f      	ldr	r3, [pc, #124]	; (800fde4 <stm32_gpio_init+0x84>)
 800fd66:	691b      	ldr	r3, [r3, #16]
 800fd68:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800fd6c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 800fd70:	6113      	str	r3, [r2, #16]
 800fd72:	4b1c      	ldr	r3, [pc, #112]	; (800fde4 <stm32_gpio_init+0x84>)
 800fd74:	2200      	movs	r2, #0
 800fd76:	611a      	str	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 800fd78:	4a1a      	ldr	r2, [pc, #104]	; (800fde4 <stm32_gpio_init+0x84>)
 800fd7a:	4b1a      	ldr	r3, [pc, #104]	; (800fde4 <stm32_gpio_init+0x84>)
 800fd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd7e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800fd82:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 800fd86:	6313      	str	r3, [r2, #48]	; 0x30
 800fd88:	4a16      	ldr	r2, [pc, #88]	; (800fde4 <stm32_gpio_init+0x84>)
 800fd8a:	4b16      	ldr	r3, [pc, #88]	; (800fde4 <stm32_gpio_init+0x84>)
 800fd8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd8e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800fd92:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 800fd96:	6513      	str	r3, [r2, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 800fd98:	4813      	ldr	r0, [pc, #76]	; (800fde8 <stm32_gpio_init+0x88>)
 800fd9a:	4914      	ldr	r1, [pc, #80]	; (800fdec <stm32_gpio_init+0x8c>)
 800fd9c:	f7ff ffb8 	bl	800fd10 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 800fda0:	4813      	ldr	r0, [pc, #76]	; (800fdf0 <stm32_gpio_init+0x90>)
 800fda2:	4914      	ldr	r1, [pc, #80]	; (800fdf4 <stm32_gpio_init+0x94>)
 800fda4:	f7ff ffb4 	bl	800fd10 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 800fda8:	4813      	ldr	r0, [pc, #76]	; (800fdf8 <stm32_gpio_init+0x98>)
 800fdaa:	4914      	ldr	r1, [pc, #80]	; (800fdfc <stm32_gpio_init+0x9c>)
 800fdac:	f7ff ffb0 	bl	800fd10 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 800fdb0:	4813      	ldr	r0, [pc, #76]	; (800fe00 <stm32_gpio_init+0xa0>)
 800fdb2:	4914      	ldr	r1, [pc, #80]	; (800fe04 <stm32_gpio_init+0xa4>)
 800fdb4:	f7ff ffac 	bl	800fd10 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 800fdb8:	4813      	ldr	r0, [pc, #76]	; (800fe08 <stm32_gpio_init+0xa8>)
 800fdba:	4914      	ldr	r1, [pc, #80]	; (800fe0c <stm32_gpio_init+0xac>)
 800fdbc:	f7ff ffa8 	bl	800fd10 <gpio_init>
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
 800fdc0:	4813      	ldr	r0, [pc, #76]	; (800fe10 <stm32_gpio_init+0xb0>)
 800fdc2:	4914      	ldr	r1, [pc, #80]	; (800fe14 <stm32_gpio_init+0xb4>)
 800fdc4:	f7ff ffa4 	bl	800fd10 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
 800fdc8:	4813      	ldr	r0, [pc, #76]	; (800fe18 <stm32_gpio_init+0xb8>)
 800fdca:	4914      	ldr	r1, [pc, #80]	; (800fe1c <stm32_gpio_init+0xbc>)
 800fdcc:	f7ff ffa0 	bl	800fd10 <gpio_init>
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 800fdd0:	4813      	ldr	r0, [pc, #76]	; (800fe20 <stm32_gpio_init+0xc0>)
 800fdd2:	4914      	ldr	r1, [pc, #80]	; (800fe24 <stm32_gpio_init+0xc4>)
 800fdd4:	f7ff ff9c 	bl	800fd10 <gpio_init>
#endif
#if STM32_HAS_GPIOI
  gpio_init(GPIOI, &gpio_default_config.PIData);
 800fdd8:	4813      	ldr	r0, [pc, #76]	; (800fe28 <stm32_gpio_init+0xc8>)
 800fdda:	4914      	ldr	r1, [pc, #80]	; (800fe2c <stm32_gpio_init+0xcc>)
 800fddc:	f7ff ff98 	bl	800fd10 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 800fde0:	bd08      	pop	{r3, pc}
 800fde2:	bf00      	nop
 800fde4:	40023800 	.word	0x40023800
 800fde8:	40020000 	.word	0x40020000
 800fdec:	0801d81c 	.word	0x0801d81c
 800fdf0:	40020400 	.word	0x40020400
 800fdf4:	0801d838 	.word	0x0801d838
 800fdf8:	40020800 	.word	0x40020800
 800fdfc:	0801d854 	.word	0x0801d854
 800fe00:	40020c00 	.word	0x40020c00
 800fe04:	0801d870 	.word	0x0801d870
 800fe08:	40021000 	.word	0x40021000
 800fe0c:	0801d88c 	.word	0x0801d88c
 800fe10:	40021400 	.word	0x40021400
 800fe14:	0801d8a8 	.word	0x0801d8a8
 800fe18:	40021800 	.word	0x40021800
 800fe1c:	0801d8c4 	.word	0x0801d8c4
 800fe20:	40021c00 	.word	0x40021c00
 800fe24:	0801d8e0 	.word	0x0801d8e0
 800fe28:	40022000 	.word	0x40022000
 800fe2c:	0801d8fc 	.word	0x0801d8fc

0800fe30 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800fe30:	b508      	push	{r3, lr}

  stm32_gpio_init();
 800fe32:	f7ff ff95 	bl	800fd60 <stm32_gpio_init>
  stm32_clock_init();
 800fe36:	f004 f91b 	bl	8014070 <stm32_clock_init>
}
 800fe3a:	bd08      	pop	{r3, pc}
 800fe3c:	0000      	movs	r0, r0
	...

0800fe40 <sdc_lld_is_card_inserted>:

#if HAL_USE_SDC || defined(__DOXYGEN__)
/**
 * @brief   SDC card detection.
 */
bool sdc_lld_is_card_inserted(SDCDriver *sdcp) {
 800fe40:	b082      	sub	sp, #8
 800fe42:	9001      	str	r0, [sp, #4]

  (void)sdcp;
  /* TODO: Fill the implementation.*/
  return true;
 800fe44:	2301      	movs	r3, #1
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	b002      	add	sp, #8
 800fe4a:	4770      	bx	lr
 800fe4c:	0000      	movs	r0, r0
	...

0800fe50 <sdc_lld_is_write_protected>:

/**
 * @brief   SDC card write protection detection.
 */
bool sdc_lld_is_write_protected(SDCDriver *sdcp) {
 800fe50:	b082      	sub	sp, #8
 800fe52:	9001      	str	r0, [sp, #4]

  (void)sdcp;
  /* TODO: Fill the implementation.*/
  return false;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	b002      	add	sp, #8
 800fe5a:	4770      	bx	lr
 800fe5c:	0000      	movs	r0, r0
	...

0800fe60 <boardInit>:
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {

}
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
	...

0800fe70 <chTimeAddX.lto_priv.758>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 800fe70:	b082      	sub	sp, #8
 800fe72:	9001      	str	r0, [sp, #4]
 800fe74:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
#endif

  return systime + (systime_t)interval;
 800fe76:	9a01      	ldr	r2, [sp, #4]
 800fe78:	9b00      	ldr	r3, [sp, #0]
 800fe7a:	4413      	add	r3, r2
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	b002      	add	sp, #8
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop
	...

0800fe90 <chTimeDiffX.lto_priv.735>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 800fe90:	b082      	sub	sp, #8
 800fe92:	9001      	str	r0, [sp, #4]
 800fe94:	9100      	str	r1, [sp, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800fe96:	9a00      	ldr	r2, [sp, #0]
 800fe98:	9b01      	ldr	r3, [sp, #4]
 800fe9a:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	b002      	add	sp, #8
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop
	...

0800feb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800feb0:	b084      	sub	sp, #16
 800feb2:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800feb4:	9b01      	ldr	r3, [sp, #4]
 800feb6:	f003 0307 	and.w	r3, r3, #7
 800feba:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800febc:	4b0a      	ldr	r3, [pc, #40]	; (800fee8 <__NVIC_SetPriorityGrouping+0x38>)
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800fec2:	9a02      	ldr	r2, [sp, #8]
 800fec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800fec8:	4013      	ands	r3, r2
 800feca:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800fecc:	9b03      	ldr	r3, [sp, #12]
 800fece:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800fed0:	9b02      	ldr	r3, [sp, #8]
 800fed2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800fed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800fed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fedc:	9302      	str	r3, [sp, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800fede:	4a02      	ldr	r2, [pc, #8]	; (800fee8 <__NVIC_SetPriorityGrouping+0x38>)
 800fee0:	9b02      	ldr	r3, [sp, #8]
 800fee2:	60d3      	str	r3, [r2, #12]
}
 800fee4:	b004      	add	sp, #16
 800fee6:	4770      	bx	lr
 800fee8:	e000ed00 	.word	0xe000ed00
 800feec:	00000000 	.word	0x00000000

0800fef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800fef0:	b082      	sub	sp, #8
 800fef2:	4603      	mov	r3, r0
 800fef4:	9100      	str	r1, [sp, #0]
 800fef6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 800fefa:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	db0a      	blt.n	800ff18 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ff02:	490c      	ldr	r1, [pc, #48]	; (800ff34 <__NVIC_SetPriority+0x44>)
 800ff04:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800ff08:	9a00      	ldr	r2, [sp, #0]
 800ff0a:	b2d2      	uxtb	r2, r2
 800ff0c:	0112      	lsls	r2, r2, #4
 800ff0e:	b2d2      	uxtb	r2, r2
 800ff10:	440b      	add	r3, r1
 800ff12:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800ff16:	e00b      	b.n	800ff30 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ff18:	4907      	ldr	r1, [pc, #28]	; (800ff38 <__NVIC_SetPriority+0x48>)
 800ff1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff1e:	f003 030f 	and.w	r3, r3, #15
 800ff22:	3b04      	subs	r3, #4
 800ff24:	9a00      	ldr	r2, [sp, #0]
 800ff26:	b2d2      	uxtb	r2, r2
 800ff28:	0112      	lsls	r2, r2, #4
 800ff2a:	b2d2      	uxtb	r2, r2
 800ff2c:	440b      	add	r3, r1
 800ff2e:	761a      	strb	r2, [r3, #24]
  }
}
 800ff30:	b002      	add	sp, #8
 800ff32:	4770      	bx	lr
 800ff34:	e000e100 	.word	0xe000e100
 800ff38:	e000ed00 	.word	0xe000ed00
 800ff3c:	00000000 	.word	0x00000000

0800ff40 <port_init>:
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {
 800ff40:	b508      	push	{r3, lr}

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 800ff42:	2003      	movs	r0, #3
 800ff44:	f7ff ffb4 	bl	800feb0 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800ff48:	4a0b      	ldr	r2, [pc, #44]	; (800ff78 <port_init+0x38>)
 800ff4a:	4b0b      	ldr	r3, [pc, #44]	; (800ff78 <port_init+0x38>)
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ff52:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800ff54:	4a09      	ldr	r2, [pc, #36]	; (800ff7c <port_init+0x3c>)
 800ff56:	4b09      	ldr	r3, [pc, #36]	; (800ff7c <port_init+0x3c>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f043 0301 	orr.w	r3, r3, #1
 800ff5e:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 800ff60:	f06f 0004 	mvn.w	r0, #4
 800ff64:	2101      	movs	r1, #1
 800ff66:	f7ff ffc3 	bl	800fef0 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 800ff6a:	f06f 0001 	mvn.w	r0, #1
 800ff6e:	2102      	movs	r1, #2
 800ff70:	f7ff ffbe 	bl	800fef0 <__NVIC_SetPriority>

    /* MPU is enabled.*/
    mpuEnable(MPU_CTRL_PRIVDEFENA);
  }
#endif
}
 800ff74:	bd08      	pop	{r3, pc}
 800ff76:	bf00      	nop
 800ff78:	e000edf0 	.word	0xe000edf0
 800ff7c:	e0001000 	.word	0xe0001000

0800ff80 <port_lock.lto_priv.700>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 800ff80:	b082      	sub	sp, #8
 800ff82:	2320      	movs	r3, #32
 800ff84:	9301      	str	r3, [sp, #4]
 800ff86:	9b01      	ldr	r3, [sp, #4]
 800ff88:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800ff8c:	b002      	add	sp, #8
 800ff8e:	4770      	bx	lr

0800ff90 <port_unlock.lto_priv.692>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 800ff90:	b082      	sub	sp, #8
 800ff92:	2300      	movs	r3, #0
 800ff94:	9301      	str	r3, [sp, #4]
 800ff96:	9b01      	ldr	r3, [sp, #4]
 800ff98:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800ff9c:	b002      	add	sp, #8
 800ff9e:	4770      	bx	lr

0800ffa0 <port_lock_from_isr.lto_priv.752>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 800ffa0:	b508      	push	{r3, lr}

  port_lock();
 800ffa2:	f7ff ffed 	bl	800ff80 <port_lock.lto_priv.700>
}
 800ffa6:	bd08      	pop	{r3, pc}
	...

0800ffb0 <port_unlock_from_isr.lto_priv.748>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 800ffb0:	b508      	push	{r3, lr}

  port_unlock();
 800ffb2:	f7ff ffed 	bl	800ff90 <port_unlock.lto_priv.692>
}
 800ffb6:	bd08      	pop	{r3, pc}
	...

0800ffc0 <port_disable>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ffc0:	b672      	cpsid	i
 *          the priority mask to level 0.
 */
static inline void port_disable(void) {

  __disable_irq();
}
 800ffc2:	4770      	bx	lr
	...

0800ffd0 <port_enable>:

/**
 * @brief   Enables all the interrupt sources.
 * @note    In this port it lowers the base priority to user level.
 */
static inline void port_enable(void) {
 800ffd0:	b082      	sub	sp, #8
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800ffd6:	9b01      	ldr	r3, [sp, #4]
 800ffd8:	f383 8811 	msr	BASEPRI, r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800ffdc:	b662      	cpsie	i

#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#endif
  __enable_irq();
}
 800ffde:	b002      	add	sp, #8
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
	...

0800fff0 <port_wait_for_interrupt>:
static inline void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop
	...

08010000 <port_rt_get_counter_value.lto_priv.724>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8010000:	4b01      	ldr	r3, [pc, #4]	; (8010008 <port_rt_get_counter_value.lto_priv.724+0x8>)
 8010002:	685b      	ldr	r3, [r3, #4]
}
 8010004:	4618      	mov	r0, r3
 8010006:	4770      	bx	lr
 8010008:	e0001000 	.word	0xe0001000
 801000c:	00000000 	.word	0x00000000

08010010 <st_lld_get_counter.lto_priv.732>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8010010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8010016:	4618      	mov	r0, r3
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	0000      	movs	r0, r0
	...

08010020 <port_timer_stop_alarm.lto_priv.756>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 8010020:	b508      	push	{r3, lr}

  stStopAlarm();
 8010022:	f005 f92d 	bl	8015280 <stStopAlarm>
}
 8010026:	bd08      	pop	{r3, pc}
	...

08010030 <port_timer_set_alarm.lto_priv.754>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 8010030:	b500      	push	{lr}
 8010032:	b083      	sub	sp, #12
 8010034:	9001      	str	r0, [sp, #4]

  stSetAlarm(time);
 8010036:	9801      	ldr	r0, [sp, #4]
 8010038:	f005 f92a 	bl	8015290 <stSetAlarm>
}
 801003c:	b003      	add	sp, #12
 801003e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010042:	bf00      	nop
	...

08010050 <port_timer_get_time.lto_priv.729>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8010050:	b508      	push	{r3, lr}

  return stGetCounter();
 8010052:	f7ff ffdd 	bl	8010010 <st_lld_get_counter.lto_priv.732>
 8010056:	4603      	mov	r3, r0
}
 8010058:	4618      	mov	r0, r3
 801005a:	bd08      	pop	{r3, pc}
 801005c:	0000      	movs	r0, r0
	...

08010060 <chSysEnable>:
 * @note    This API is no replacement for @p chSysUnlock(), the
 *          @p chSysUnlock() could do more than just enable the interrupts.
 *
 * @special
 */
static inline void chSysEnable(void) {
 8010060:	b508      	push	{r3, lr}

  _dbg_check_enable();
  port_enable();
 8010062:	f7ff ffb5 	bl	800ffd0 <port_enable>
}
 8010066:	bd08      	pop	{r3, pc}
	...

08010070 <chSysLockFromISR.lto_priv.744>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8010070:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8010072:	f7ff ff95 	bl	800ffa0 <port_lock_from_isr.lto_priv.752>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8010076:	bd08      	pop	{r3, pc}
	...

08010080 <chSysUnlockFromISR.lto_priv.740>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8010080:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8010082:	f7ff ff95 	bl	800ffb0 <port_unlock_from_isr.lto_priv.748>
}
 8010086:	bd08      	pop	{r3, pc}
	...

08010090 <chVTGetSystemTimeX.lto_priv.726>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8010090:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8010092:	f7ff ffdd 	bl	8010050 <port_timer_get_time.lto_priv.729>
 8010096:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8010098:	4618      	mov	r0, r3
 801009a:	bd08      	pop	{r3, pc}
 801009c:	0000      	movs	r0, r0
	...

080100a0 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 80100a0:	b500      	push	{lr}
 80100a2:	b087      	sub	sp, #28
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80100a4:	4b3a      	ldr	r3, [pc, #232]	; (8010190 <chVTDoTickI+0xf0>)
 80100a6:	69db      	ldr	r3, [r3, #28]
 80100a8:	9305      	str	r3, [sp, #20]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
 80100aa:	f7ff fff1 	bl	8010090 <chVTGetSystemTimeX.lto_priv.726>
 80100ae:	9002      	str	r0, [sp, #8]
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80100b0:	4b37      	ldr	r3, [pc, #220]	; (8010190 <chVTDoTickI+0xf0>)
 80100b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100b4:	4618      	mov	r0, r3
 80100b6:	9902      	ldr	r1, [sp, #8]
 80100b8:	f7ff feea 	bl	800fe90 <chTimeDiffX.lto_priv.735>
 80100bc:	9003      	str	r0, [sp, #12]

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80100be:	9b05      	ldr	r3, [sp, #20]
 80100c0:	689a      	ldr	r2, [r3, #8]
 80100c2:	9b03      	ldr	r3, [sp, #12]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d832      	bhi.n	801012e <chVTDoTickI+0x8e>
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 80100c8:	4b31      	ldr	r3, [pc, #196]	; (8010190 <chVTDoTickI+0xf0>)
 80100ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80100cc:	9b05      	ldr	r3, [sp, #20]
 80100ce:	689b      	ldr	r3, [r3, #8]
 80100d0:	4413      	add	r3, r2
 80100d2:	4a2f      	ldr	r2, [pc, #188]	; (8010190 <chVTDoTickI+0xf0>)
 80100d4:	6293      	str	r3, [r2, #40]	; 0x28
      nowdelta -= vtp->delta;
 80100d6:	9b05      	ldr	r3, [sp, #20]
 80100d8:	689b      	ldr	r3, [r3, #8]
 80100da:	9a03      	ldr	r2, [sp, #12]
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	9303      	str	r3, [sp, #12]

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80100e0:	9b05      	ldr	r3, [sp, #20]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a2b      	ldr	r2, [pc, #172]	; (8010194 <chVTDoTickI+0xf4>)
 80100e6:	605a      	str	r2, [r3, #4]
      ch.vtlist.next = vtp->next;
 80100e8:	9b05      	ldr	r3, [sp, #20]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	4a28      	ldr	r2, [pc, #160]	; (8010190 <chVTDoTickI+0xf0>)
 80100ee:	61d3      	str	r3, [r2, #28]
      fn = vtp->func;
 80100f0:	9b05      	ldr	r3, [sp, #20]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	9301      	str	r3, [sp, #4]
      vtp->func = NULL;
 80100f6:	9b05      	ldr	r3, [sp, #20]
 80100f8:	2200      	movs	r2, #0
 80100fa:	60da      	str	r2, [r3, #12]

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80100fc:	4b24      	ldr	r3, [pc, #144]	; (8010190 <chVTDoTickI+0xf0>)
 80100fe:	69db      	ldr	r3, [r3, #28]
 8010100:	4a24      	ldr	r2, [pc, #144]	; (8010194 <chVTDoTickI+0xf4>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d101      	bne.n	801010a <chVTDoTickI+0x6a>
        port_timer_stop_alarm();
 8010106:	f7ff ff8b 	bl	8010020 <port_timer_stop_alarm.lto_priv.756>
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
 801010a:	f7ff ffb9 	bl	8010080 <chSysUnlockFromISR.lto_priv.740>
      fn(vtp->par);
 801010e:	9b05      	ldr	r3, [sp, #20]
 8010110:	691a      	ldr	r2, [r3, #16]
 8010112:	9b01      	ldr	r3, [sp, #4]
 8010114:	4610      	mov	r0, r2
 8010116:	4798      	blx	r3
      chSysLockFromISR();
 8010118:	f7ff ffaa 	bl	8010070 <chSysLockFromISR.lto_priv.744>

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 801011c:	4b1c      	ldr	r3, [pc, #112]	; (8010190 <chVTDoTickI+0xf0>)
 801011e:	69db      	ldr	r3, [r3, #28]
 8010120:	9305      	str	r3, [sp, #20]
    }
    while (vtp->delta <= nowdelta);
 8010122:	9b05      	ldr	r3, [sp, #20]
 8010124:	689a      	ldr	r2, [r3, #8]
 8010126:	9b03      	ldr	r3, [sp, #12]
 8010128:	429a      	cmp	r2, r3
 801012a:	d9cd      	bls.n	80100c8 <chVTDoTickI+0x28>
 801012c:	e7bd      	b.n	80100aa <chVTDoTickI+0xa>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 801012e:	4b18      	ldr	r3, [pc, #96]	; (8010190 <chVTDoTickI+0xf0>)
 8010130:	69db      	ldr	r3, [r3, #28]
 8010132:	4a18      	ldr	r2, [pc, #96]	; (8010194 <chVTDoTickI+0xf4>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d028      	beq.n	801018a <chVTDoTickI+0xea>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 8010138:	4b15      	ldr	r3, [pc, #84]	; (8010190 <chVTDoTickI+0xf0>)
 801013a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801013c:	9b03      	ldr	r3, [sp, #12]
 801013e:	4413      	add	r3, r2
 8010140:	4a13      	ldr	r2, [pc, #76]	; (8010190 <chVTDoTickI+0xf0>)
 8010142:	6293      	str	r3, [r2, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8010144:	4b12      	ldr	r3, [pc, #72]	; (8010190 <chVTDoTickI+0xf0>)
 8010146:	69db      	ldr	r3, [r3, #28]
 8010148:	4a11      	ldr	r2, [pc, #68]	; (8010190 <chVTDoTickI+0xf0>)
 801014a:	69d2      	ldr	r2, [r2, #28]
 801014c:	6891      	ldr	r1, [r2, #8]
 801014e:	9a03      	ldr	r2, [sp, #12]
 8010150:	1a8a      	subs	r2, r1, r2
 8010152:	609a      	str	r2, [r3, #8]

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
 8010154:	4b0e      	ldr	r3, [pc, #56]	; (8010190 <chVTDoTickI+0xf0>)
 8010156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010158:	9b05      	ldr	r3, [sp, #20]
 801015a:	689b      	ldr	r3, [r3, #8]
 801015c:	4610      	mov	r0, r2
 801015e:	4619      	mov	r1, r3
 8010160:	f7ff fe86 	bl	800fe70 <chTimeAddX.lto_priv.758>
 8010164:	4603      	mov	r3, r0
 8010166:	9802      	ldr	r0, [sp, #8]
 8010168:	4619      	mov	r1, r3
 801016a:	f7ff fe91 	bl	800fe90 <chTimeDiffX.lto_priv.735>
 801016e:	9004      	str	r0, [sp, #16]
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8010170:	9b04      	ldr	r3, [sp, #16]
 8010172:	2b01      	cmp	r3, #1
 8010174:	d801      	bhi.n	801017a <chVTDoTickI+0xda>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8010176:	2302      	movs	r3, #2
 8010178:	9304      	str	r3, [sp, #16]
  /* The delta could be too large for the physical timer to handle.*/
  else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));
 801017a:	9802      	ldr	r0, [sp, #8]
 801017c:	9904      	ldr	r1, [sp, #16]
 801017e:	f7ff fe77 	bl	800fe70 <chTimeAddX.lto_priv.758>
 8010182:	4603      	mov	r3, r0
 8010184:	4618      	mov	r0, r3
 8010186:	f7ff ff53 	bl	8010030 <port_timer_set_alarm.lto_priv.754>

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
              chTimeDiffX(ch.vtlist.lasttime, chTimeAddX(now, delta)),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 801018a:	b007      	add	sp, #28
 801018c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010190:	20002710 	.word	0x20002710
 8010194:	2000272c 	.word	0x2000272c
	...

080101a0 <_idle_thread.lto_priv.185>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80101a0:	b500      	push	{lr}
 80101a2:	b083      	sub	sp, #12
 80101a4:	9001      	str	r0, [sp, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 80101a6:	f7ff ff23 	bl	800fff0 <port_wait_for_interrupt>
 80101aa:	e7fc      	b.n	80101a6 <_idle_thread.lto_priv.185+0x6>
 80101ac:	0000      	movs	r0, r0
	...

080101b0 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 80101b0:	b508      	push	{r3, lr}

  _scheduler_init();
 80101b2:	f000 fa85 	bl	80106c0 <_scheduler_init>
  _vt_init();
 80101b6:	f000 f8d3 	bl	8010360 <_vt_init>
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
  ch.dbg.lock_cnt = (cnt_t)0;
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 80101ba:	f000 fe59 	bl	8010e70 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 80101be:	f7fe ff0f 	bl	800efe0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 80101c2:	f7fe ff6d 	bl	800f0a0 <_heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  _factory_init();
 80101c6:	f7fe ffc3 	bl	800f150 <_factory_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80101ca:	480c      	ldr	r0, [pc, #48]	; (80101fc <chSysInit+0x4c>)
 80101cc:	490c      	ldr	r1, [pc, #48]	; (8010200 <chSysInit+0x50>)
 80101ce:	2280      	movs	r2, #128	; 0x80
 80101d0:	f000 fc9e 	bl	8010b10 <_thread_init>
 80101d4:	4602      	mov	r2, r0
 80101d6:	4b0b      	ldr	r3, [pc, #44]	; (8010204 <chSysInit+0x54>)
 80101d8:	619a      	str	r2, [r3, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 80101da:	4b0a      	ldr	r3, [pc, #40]	; (8010204 <chSysInit+0x54>)
 80101dc:	699b      	ldr	r3, [r3, #24]
 80101de:	2200      	movs	r2, #0
 80101e0:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80101e2:	4b08      	ldr	r3, [pc, #32]	; (8010204 <chSysInit+0x54>)
 80101e4:	699b      	ldr	r3, [r3, #24]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Port layer initialization last because it depend on some of the
     initializations performed before.*/
  port_init();
 80101ec:	f7ff fea8 	bl	800ff40 <port_init>

  /* Initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* It is alive now.*/
  chSysEnable();
 80101f0:	f7ff ff36 	bl	8010060 <chSysEnable>
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 80101f4:	4804      	ldr	r0, [pc, #16]	; (8010208 <chSysInit+0x58>)
 80101f6:	f000 fcfb 	bl	8010bf0 <chThdCreate>
  }
#endif
}
 80101fa:	bd08      	pop	{r3, pc}
 80101fc:	20002740 	.word	0x20002740
 8010200:	0801d930 	.word	0x0801d930
 8010204:	20002710 	.word	0x20002710
 8010208:	0801d918 	.word	0x0801d918
 801020c:	00000000 	.word	0x00000000

08010210 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8010210:	b500      	push	{lr}
 8010212:	b083      	sub	sp, #12
 8010214:	9001      	str	r0, [sp, #4]

  port_disable();
 8010216:	f7ff fed3 	bl	800ffc0 <port_disable>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 801021a:	4a02      	ldr	r2, [pc, #8]	; (8010224 <chSysHalt+0x14>)
 801021c:	9b01      	ldr	r3, [sp, #4]
 801021e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010220:	e7fe      	b.n	8010220 <chSysHalt+0x10>
 8010222:	bf00      	nop
 8010224:	20002710 	.word	0x20002710
	...

08010230 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8010230:	b508      	push	{r3, lr}
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
 8010232:	f7ff ff35 	bl	80100a0 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 8010236:	bd08      	pop	{r3, pc}
	...

08010240 <chSysIsCounterWithinX>:
 * @retval true         current time within the specified time window.
 * @retval false        current time not within the specified time window.
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {
 8010240:	b084      	sub	sp, #16
 8010242:	9003      	str	r0, [sp, #12]
 8010244:	9102      	str	r1, [sp, #8]
 8010246:	9201      	str	r2, [sp, #4]

  return (bool)((cnt - start) < (end - start));
 8010248:	9a03      	ldr	r2, [sp, #12]
 801024a:	9b02      	ldr	r3, [sp, #8]
 801024c:	1ad2      	subs	r2, r2, r3
 801024e:	9901      	ldr	r1, [sp, #4]
 8010250:	9b02      	ldr	r3, [sp, #8]
 8010252:	1acb      	subs	r3, r1, r3
 8010254:	429a      	cmp	r2, r3
 8010256:	bf34      	ite	cc
 8010258:	2301      	movcc	r3, #1
 801025a:	2300      	movcs	r3, #0
 801025c:	b2db      	uxtb	r3, r3
}
 801025e:	4618      	mov	r0, r3
 8010260:	b004      	add	sp, #16
 8010262:	4770      	bx	lr
	...

08010270 <chSysPolledDelayX>:
 *
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
void chSysPolledDelayX(rtcnt_t cycles) {
 8010270:	b500      	push	{lr}
 8010272:	b085      	sub	sp, #20
 8010274:	9001      	str	r0, [sp, #4]
  rtcnt_t start = chSysGetRealtimeCounterX();
 8010276:	f7ff fec3 	bl	8010000 <port_rt_get_counter_value.lto_priv.724>
 801027a:	9003      	str	r0, [sp, #12]
  rtcnt_t end  = start + cycles;
 801027c:	9a03      	ldr	r2, [sp, #12]
 801027e:	9b01      	ldr	r3, [sp, #4]
 8010280:	4413      	add	r3, r2
 8010282:	9302      	str	r3, [sp, #8]

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8010284:	f7ff febc 	bl	8010000 <port_rt_get_counter_value.lto_priv.724>
 8010288:	4603      	mov	r3, r0
 801028a:	4618      	mov	r0, r3
 801028c:	9903      	ldr	r1, [sp, #12]
 801028e:	9a02      	ldr	r2, [sp, #8]
 8010290:	f7ff ffd6 	bl	8010240 <chSysIsCounterWithinX>
 8010294:	4603      	mov	r3, r0
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1f4      	bne.n	8010284 <chSysPolledDelayX+0x14>
  }
}
 801029a:	b005      	add	sp, #20
 801029c:	f85d fb04 	ldr.w	pc, [sp], #4

080102a0 <chTimeAddX.lto_priv.759>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 80102a0:	b082      	sub	sp, #8
 80102a2:	9001      	str	r0, [sp, #4]
 80102a4:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
#endif

  return systime + (systime_t)interval;
 80102a6:	9a01      	ldr	r2, [sp, #4]
 80102a8:	9b00      	ldr	r3, [sp, #0]
 80102aa:	4413      	add	r3, r2
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	b002      	add	sp, #8
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop
	...

080102c0 <chTimeDiffX.lto_priv.736>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 80102c0:	b082      	sub	sp, #8
 80102c2:	9001      	str	r0, [sp, #4]
 80102c4:	9100      	str	r1, [sp, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80102c6:	9a00      	ldr	r2, [sp, #0]
 80102c8:	9b01      	ldr	r3, [sp, #4]
 80102ca:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	b002      	add	sp, #8
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
	...

080102e0 <st_lld_get_counter.lto_priv.733>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80102e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	4770      	bx	lr
 80102ea:	bf00      	nop
 80102ec:	0000      	movs	r0, r0
	...

080102f0 <port_timer_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {
 80102f0:	b500      	push	{lr}
 80102f2:	b083      	sub	sp, #12
 80102f4:	9001      	str	r0, [sp, #4]

  stStartAlarm(time);
 80102f6:	9801      	ldr	r0, [sp, #4]
 80102f8:	f004 ffb2 	bl	8015260 <stStartAlarm>
}
 80102fc:	b003      	add	sp, #12
 80102fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8010302:	bf00      	nop
	...

08010310 <port_timer_stop_alarm.lto_priv.757>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 8010310:	b508      	push	{r3, lr}

  stStopAlarm();
 8010312:	f004 ffb5 	bl	8015280 <stStopAlarm>
}
 8010316:	bd08      	pop	{r3, pc}
	...

08010320 <port_timer_set_alarm.lto_priv.755>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 8010320:	b500      	push	{lr}
 8010322:	b083      	sub	sp, #12
 8010324:	9001      	str	r0, [sp, #4]

  stSetAlarm(time);
 8010326:	9801      	ldr	r0, [sp, #4]
 8010328:	f004 ffb2 	bl	8015290 <stSetAlarm>
}
 801032c:	b003      	add	sp, #12
 801032e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010332:	bf00      	nop
	...

08010340 <port_timer_get_time.lto_priv.730>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8010340:	b508      	push	{r3, lr}

  return stGetCounter();
 8010342:	f7ff ffcd 	bl	80102e0 <st_lld_get_counter.lto_priv.733>
 8010346:	4603      	mov	r3, r0
}
 8010348:	4618      	mov	r0, r3
 801034a:	bd08      	pop	{r3, pc}
 801034c:	0000      	movs	r0, r0
	...

08010350 <chVTGetSystemTimeX.lto_priv.727>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8010350:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8010352:	f7ff fff5 	bl	8010340 <port_timer_get_time.lto_priv.730>
 8010356:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8010358:	4618      	mov	r0, r3
 801035a:	bd08      	pop	{r3, pc}
 801035c:	0000      	movs	r0, r0
	...

08010360 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8010360:	4b06      	ldr	r3, [pc, #24]	; (801037c <_vt_init+0x1c>)
 8010362:	4a07      	ldr	r2, [pc, #28]	; (8010380 <_vt_init+0x20>)
 8010364:	61da      	str	r2, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8010366:	4b05      	ldr	r3, [pc, #20]	; (801037c <_vt_init+0x1c>)
 8010368:	4a05      	ldr	r2, [pc, #20]	; (8010380 <_vt_init+0x20>)
 801036a:	621a      	str	r2, [r3, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 801036c:	4b03      	ldr	r3, [pc, #12]	; (801037c <_vt_init+0x1c>)
 801036e:	f04f 32ff 	mov.w	r2, #4294967295
 8010372:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8010374:	4b01      	ldr	r3, [pc, #4]	; (801037c <_vt_init+0x1c>)
 8010376:	2200      	movs	r2, #0
 8010378:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 801037a:	4770      	bx	lr
 801037c:	20002710 	.word	0x20002710
 8010380:	2000272c 	.word	0x2000272c
	...

08010390 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8010390:	b500      	push	{lr}
 8010392:	b089      	sub	sp, #36	; 0x24
 8010394:	9003      	str	r0, [sp, #12]
 8010396:	9102      	str	r1, [sp, #8]
 8010398:	9201      	str	r2, [sp, #4]
 801039a:	9300      	str	r3, [sp, #0]
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 801039c:	9b03      	ldr	r3, [sp, #12]
 801039e:	9a00      	ldr	r2, [sp, #0]
 80103a0:	611a      	str	r2, [r3, #16]
  vtp->func = vtfunc;
 80103a2:	9b03      	ldr	r3, [sp, #12]
 80103a4:	9a01      	ldr	r2, [sp, #4]
 80103a6:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
 80103a8:	f7ff ffd2 	bl	8010350 <chVTGetSystemTimeX.lto_priv.727>
 80103ac:	9005      	str	r0, [sp, #20]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80103ae:	9b02      	ldr	r3, [sp, #8]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d801      	bhi.n	80103b8 <chVTDoSetI+0x28>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80103b4:	2302      	movs	r3, #2
 80103b6:	9302      	str	r3, [sp, #8]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80103b8:	4b3f      	ldr	r3, [pc, #252]	; (80104b8 <chVTDoSetI+0x128>)
 80103ba:	69db      	ldr	r3, [r3, #28]
 80103bc:	4a3f      	ldr	r2, [pc, #252]	; (80104bc <chVTDoSetI+0x12c>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d11c      	bne.n	80103fc <chVTDoSetI+0x6c>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 80103c2:	4a3d      	ldr	r2, [pc, #244]	; (80104b8 <chVTDoSetI+0x128>)
 80103c4:	9b05      	ldr	r3, [sp, #20]
 80103c6:	6293      	str	r3, [r2, #40]	; 0x28
      ch.vtlist.next = vtp;
 80103c8:	4a3b      	ldr	r2, [pc, #236]	; (80104b8 <chVTDoSetI+0x128>)
 80103ca:	9b03      	ldr	r3, [sp, #12]
 80103cc:	61d3      	str	r3, [r2, #28]
      ch.vtlist.prev = vtp;
 80103ce:	4a3a      	ldr	r2, [pc, #232]	; (80104b8 <chVTDoSetI+0x128>)
 80103d0:	9b03      	ldr	r3, [sp, #12]
 80103d2:	6213      	str	r3, [r2, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 80103d4:	9b03      	ldr	r3, [sp, #12]
 80103d6:	4a39      	ldr	r2, [pc, #228]	; (80104bc <chVTDoSetI+0x12c>)
 80103d8:	601a      	str	r2, [r3, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80103da:	9b03      	ldr	r3, [sp, #12]
 80103dc:	4a37      	ldr	r2, [pc, #220]	; (80104bc <chVTDoSetI+0x12c>)
 80103de:	605a      	str	r2, [r3, #4]
      vtp->delta = delay;
 80103e0:	9b03      	ldr	r3, [sp, #12]
 80103e2:	9a02      	ldr	r2, [sp, #8]
 80103e4:	609a      	str	r2, [r3, #8]
        delay = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 80103e6:	4b34      	ldr	r3, [pc, #208]	; (80104b8 <chVTDoSetI+0x128>)
 80103e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ea:	4618      	mov	r0, r3
 80103ec:	9902      	ldr	r1, [sp, #8]
 80103ee:	f7ff ff57 	bl	80102a0 <chTimeAddX.lto_priv.759>
 80103f2:	4603      	mov	r3, r0
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7ff ff7b 	bl	80102f0 <port_timer_start_alarm>
 80103fa:	e05a      	b.n	80104b2 <chVTDoSetI+0x122>

      return;
    }

    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;
 80103fc:	4b2e      	ldr	r3, [pc, #184]	; (80104b8 <chVTDoSetI+0x128>)
 80103fe:	69db      	ldr	r3, [r3, #28]
 8010400:	9307      	str	r3, [sp, #28]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8010402:	4b2d      	ldr	r3, [pc, #180]	; (80104b8 <chVTDoSetI+0x128>)
 8010404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010406:	4618      	mov	r0, r3
 8010408:	9905      	ldr	r1, [sp, #20]
 801040a:	f7ff ff59 	bl	80102c0 <chTimeDiffX.lto_priv.736>
 801040e:	4602      	mov	r2, r0
 8010410:	9b02      	ldr	r3, [sp, #8]
 8010412:	4413      	add	r3, r2
 8010414:	9306      	str	r3, [sp, #24]

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8010416:	4b28      	ldr	r3, [pc, #160]	; (80104b8 <chVTDoSetI+0x128>)
 8010418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801041a:	4618      	mov	r0, r3
 801041c:	9905      	ldr	r1, [sp, #20]
 801041e:	f7ff ff4f 	bl	80102c0 <chTimeDiffX.lto_priv.736>
 8010422:	4602      	mov	r2, r0
 8010424:	9b06      	ldr	r3, [sp, #24]
 8010426:	429a      	cmp	r2, r3
 8010428:	d908      	bls.n	801043c <chVTDoSetI+0xac>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 801042a:	9b07      	ldr	r3, [sp, #28]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	9a06      	ldr	r2, [sp, #24]
 8010430:	1ad3      	subs	r3, r2, r3
 8010432:	9306      	str	r3, [sp, #24]
      p = p->next;
 8010434:	9b07      	ldr	r3, [sp, #28]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	9307      	str	r3, [sp, #28]
 801043a:	e019      	b.n	8010470 <chVTDoSetI+0xe0>
    }
    else if (delta < p->delta) {
 801043c:	9b07      	ldr	r3, [sp, #28]
 801043e:	689a      	ldr	r2, [r3, #8]
 8010440:	9b06      	ldr	r3, [sp, #24]
 8010442:	429a      	cmp	r2, r3
 8010444:	d914      	bls.n	8010470 <chVTDoSetI+0xe0>
      sysinterval_t deadline_delta;

      /* A small delay that will become the first element in the delta list
         and next deadline.*/
      deadline_delta = delta;
 8010446:	9b06      	ldr	r3, [sp, #24]
 8010448:	9304      	str	r3, [sp, #16]
      /* The delta could be too large for the physical timer to handle.*/
      if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
        deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif
      port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, deadline_delta));
 801044a:	4b1b      	ldr	r3, [pc, #108]	; (80104b8 <chVTDoSetI+0x128>)
 801044c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801044e:	4618      	mov	r0, r3
 8010450:	9904      	ldr	r1, [sp, #16]
 8010452:	f7ff ff25 	bl	80102a0 <chTimeAddX.lto_priv.759>
 8010456:	4603      	mov	r3, r0
 8010458:	4618      	mov	r0, r3
 801045a:	f7ff ff61 	bl	8010320 <port_timer_set_alarm.lto_priv.755>
 801045e:	e007      	b.n	8010470 <chVTDoSetI+0xe0>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 8010460:	9b07      	ldr	r3, [sp, #28]
 8010462:	689b      	ldr	r3, [r3, #8]
 8010464:	9a06      	ldr	r2, [sp, #24]
 8010466:	1ad3      	subs	r3, r2, r3
 8010468:	9306      	str	r3, [sp, #24]
    p = p->next;
 801046a:	9b07      	ldr	r3, [sp, #28]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	9307      	str	r3, [sp, #28]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8010470:	9b07      	ldr	r3, [sp, #28]
 8010472:	689a      	ldr	r2, [r3, #8]
 8010474:	9b06      	ldr	r3, [sp, #24]
 8010476:	429a      	cmp	r2, r3
 8010478:	d3f2      	bcc.n	8010460 <chVTDoSetI+0xd0>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 801047a:	9b03      	ldr	r3, [sp, #12]
 801047c:	9a07      	ldr	r2, [sp, #28]
 801047e:	601a      	str	r2, [r3, #0]
  vtp->prev = vtp->next->prev;
 8010480:	9b03      	ldr	r3, [sp, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	685a      	ldr	r2, [r3, #4]
 8010486:	9b03      	ldr	r3, [sp, #12]
 8010488:	605a      	str	r2, [r3, #4]
  vtp->prev->next = vtp;
 801048a:	9b03      	ldr	r3, [sp, #12]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	9a03      	ldr	r2, [sp, #12]
 8010490:	601a      	str	r2, [r3, #0]
  p->prev = vtp;
 8010492:	9b07      	ldr	r3, [sp, #28]
 8010494:	9a03      	ldr	r2, [sp, #12]
 8010496:	605a      	str	r2, [r3, #4]
  vtp->delta = delta;
 8010498:	9b03      	ldr	r3, [sp, #12]
 801049a:	9a06      	ldr	r2, [sp, #24]
 801049c:	609a      	str	r2, [r3, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 801049e:	9b07      	ldr	r3, [sp, #28]
 80104a0:	689a      	ldr	r2, [r3, #8]
 80104a2:	9b06      	ldr	r3, [sp, #24]
 80104a4:	1ad2      	subs	r2, r2, r3
 80104a6:	9b07      	ldr	r3, [sp, #28]
 80104a8:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80104aa:	4b03      	ldr	r3, [pc, #12]	; (80104b8 <chVTDoSetI+0x128>)
 80104ac:	f04f 32ff 	mov.w	r2, #4294967295
 80104b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80104b2:	b009      	add	sp, #36	; 0x24
 80104b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80104b8:	20002710 	.word	0x20002710
 80104bc:	2000272c 	.word	0x2000272c

080104c0 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80104c0:	b510      	push	{r4, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	9001      	str	r0, [sp, #4]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80104c6:	4b35      	ldr	r3, [pc, #212]	; (801059c <chVTDoResetI+0xdc>)
 80104c8:	69da      	ldr	r2, [r3, #28]
 80104ca:	9b01      	ldr	r3, [sp, #4]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d01b      	beq.n	8010508 <chVTDoResetI+0x48>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80104d0:	9b01      	ldr	r3, [sp, #4]
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	9a01      	ldr	r2, [sp, #4]
 80104d6:	6812      	ldr	r2, [r2, #0]
 80104d8:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 80104da:	9b01      	ldr	r3, [sp, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	9a01      	ldr	r2, [sp, #4]
 80104e0:	6852      	ldr	r2, [r2, #4]
 80104e2:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 80104e4:	9b01      	ldr	r3, [sp, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80104ea:	9b01      	ldr	r3, [sp, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a2c      	ldr	r2, [pc, #176]	; (80105a0 <chVTDoResetI+0xe0>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d050      	beq.n	8010596 <chVTDoResetI+0xd6>
      vtp->next->delta += vtp->delta;
 80104f4:	9b01      	ldr	r3, [sp, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	9a01      	ldr	r2, [sp, #4]
 80104fa:	6812      	ldr	r2, [r2, #0]
 80104fc:	6891      	ldr	r1, [r2, #8]
 80104fe:	9a01      	ldr	r2, [sp, #4]
 8010500:	6892      	ldr	r2, [r2, #8]
 8010502:	440a      	add	r2, r1
 8010504:	609a      	str	r2, [r3, #8]
 8010506:	e046      	b.n	8010596 <chVTDoResetI+0xd6>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8010508:	9b01      	ldr	r3, [sp, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a23      	ldr	r2, [pc, #140]	; (801059c <chVTDoResetI+0xdc>)
 801050e:	61d3      	str	r3, [r2, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8010510:	4b22      	ldr	r3, [pc, #136]	; (801059c <chVTDoResetI+0xdc>)
 8010512:	69db      	ldr	r3, [r3, #28]
 8010514:	4a22      	ldr	r2, [pc, #136]	; (80105a0 <chVTDoResetI+0xe0>)
 8010516:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
 8010518:	9b01      	ldr	r3, [sp, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 801051e:	4b1f      	ldr	r3, [pc, #124]	; (801059c <chVTDoResetI+0xdc>)
 8010520:	69db      	ldr	r3, [r3, #28]
 8010522:	4a1f      	ldr	r2, [pc, #124]	; (80105a0 <chVTDoResetI+0xe0>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d102      	bne.n	801052e <chVTDoResetI+0x6e>
    port_timer_stop_alarm();
 8010528:	f7ff fef2 	bl	8010310 <port_timer_stop_alarm.lto_priv.757>
 801052c:	e033      	b.n	8010596 <chVTDoResetI+0xd6>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 801052e:	4b1b      	ldr	r3, [pc, #108]	; (801059c <chVTDoResetI+0xdc>)
 8010530:	69db      	ldr	r3, [r3, #28]
 8010532:	4a1a      	ldr	r2, [pc, #104]	; (801059c <chVTDoResetI+0xdc>)
 8010534:	69d2      	ldr	r2, [r2, #28]
 8010536:	6891      	ldr	r1, [r2, #8]
 8010538:	9a01      	ldr	r2, [sp, #4]
 801053a:	6892      	ldr	r2, [r2, #8]
 801053c:	440a      	add	r2, r1
 801053e:	609a      	str	r2, [r3, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8010540:	4b16      	ldr	r3, [pc, #88]	; (801059c <chVTDoResetI+0xdc>)
 8010542:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8010544:	f7ff ff04 	bl	8010350 <chVTGetSystemTimeX.lto_priv.727>
 8010548:	4603      	mov	r3, r0
 801054a:	4620      	mov	r0, r4
 801054c:	4619      	mov	r1, r3
 801054e:	f7ff feb7 	bl	80102c0 <chTimeDiffX.lto_priv.736>
 8010552:	9002      	str	r0, [sp, #8]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8010554:	4b11      	ldr	r3, [pc, #68]	; (801059c <chVTDoResetI+0xdc>)
 8010556:	69db      	ldr	r3, [r3, #28]
 8010558:	689a      	ldr	r2, [r3, #8]
 801055a:	9b02      	ldr	r3, [sp, #8]
 801055c:	429a      	cmp	r2, r3
 801055e:	d91a      	bls.n	8010596 <chVTDoResetI+0xd6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8010560:	4b0e      	ldr	r3, [pc, #56]	; (801059c <chVTDoResetI+0xdc>)
 8010562:	69db      	ldr	r3, [r3, #28]
 8010564:	689a      	ldr	r2, [r3, #8]
 8010566:	9b02      	ldr	r3, [sp, #8]
 8010568:	1ad3      	subs	r3, r2, r3
 801056a:	9303      	str	r3, [sp, #12]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 801056c:	9b03      	ldr	r3, [sp, #12]
 801056e:	2b01      	cmp	r3, #1
 8010570:	d803      	bhi.n	801057a <chVTDoResetI+0xba>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8010572:	9b02      	ldr	r3, [sp, #8]
 8010574:	3302      	adds	r3, #2
 8010576:	9303      	str	r3, [sp, #12]
 8010578:	e003      	b.n	8010582 <chVTDoResetI+0xc2>
  }
  else {
    delta = nowdelta + delta;
 801057a:	9a03      	ldr	r2, [sp, #12]
 801057c:	9b02      	ldr	r3, [sp, #8]
 801057e:	4413      	add	r3, r2
 8010580:	9303      	str	r3, [sp, #12]
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
      delta = (sysinterval_t)TIME_MAX_SYSTIME;
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
 8010582:	4b06      	ldr	r3, [pc, #24]	; (801059c <chVTDoResetI+0xdc>)
 8010584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010586:	4618      	mov	r0, r3
 8010588:	9903      	ldr	r1, [sp, #12]
 801058a:	f7ff fe89 	bl	80102a0 <chTimeAddX.lto_priv.759>
 801058e:	4603      	mov	r3, r0
 8010590:	4618      	mov	r0, r3
 8010592:	f7ff fec5 	bl	8010320 <port_timer_set_alarm.lto_priv.755>
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8010596:	b004      	add	sp, #16
 8010598:	bd10      	pop	{r4, pc}
 801059a:	bf00      	nop
 801059c:	20002710 	.word	0x20002710
 80105a0:	2000272c 	.word	0x2000272c
	...

080105b0 <port_lock.lto_priv.701>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80105b0:	b082      	sub	sp, #8
 80105b2:	2320      	movs	r3, #32
 80105b4:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80105b6:	9b01      	ldr	r3, [sp, #4]
 80105b8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80105bc:	b002      	add	sp, #8
 80105be:	4770      	bx	lr

080105c0 <port_unlock.lto_priv.693>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80105c0:	b082      	sub	sp, #8
 80105c2:	2300      	movs	r3, #0
 80105c4:	9301      	str	r3, [sp, #4]
 80105c6:	9b01      	ldr	r3, [sp, #4]
 80105c8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80105cc:	b002      	add	sp, #8
 80105ce:	4770      	bx	lr

080105d0 <port_lock_from_isr.lto_priv.753>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80105d0:	b508      	push	{r3, lr}

  port_lock();
 80105d2:	f7ff ffed 	bl	80105b0 <port_lock.lto_priv.701>
}
 80105d6:	bd08      	pop	{r3, pc}
	...

080105e0 <port_unlock_from_isr.lto_priv.749>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80105e0:	b508      	push	{r3, lr}

  port_unlock();
 80105e2:	f7ff ffed 	bl	80105c0 <port_unlock.lto_priv.693>
}
 80105e6:	bd08      	pop	{r3, pc}
	...

080105f0 <queue_init.lto_priv.719>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 80105f0:	b082      	sub	sp, #8
 80105f2:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 80105f4:	9b01      	ldr	r3, [sp, #4]
 80105f6:	9a01      	ldr	r2, [sp, #4]
 80105f8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80105fa:	9b01      	ldr	r3, [sp, #4]
 80105fc:	9a01      	ldr	r2, [sp, #4]
 80105fe:	605a      	str	r2, [r3, #4]
}
 8010600:	b002      	add	sp, #8
 8010602:	4770      	bx	lr
	...

08010610 <queue_fifo_remove.lto_priv.714>:
  tp->queue.prev             = tqp->prev;
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8010610:	b084      	sub	sp, #16
 8010612:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
 8010614:	9b01      	ldr	r3, [sp, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	9303      	str	r3, [sp, #12]

  tqp->next             = tp->queue.next;
 801061a:	9b03      	ldr	r3, [sp, #12]
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	9b01      	ldr	r3, [sp, #4]
 8010620:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8010622:	9b01      	ldr	r3, [sp, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	9a01      	ldr	r2, [sp, #4]
 8010628:	605a      	str	r2, [r3, #4]

  return tp;
 801062a:	9b03      	ldr	r3, [sp, #12]
}
 801062c:	4618      	mov	r0, r3
 801062e:	b004      	add	sp, #16
 8010630:	4770      	bx	lr
 8010632:	bf00      	nop
	...

08010640 <queue_dequeue>:
  tqp->prev->queue.next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 8010640:	b082      	sub	sp, #8
 8010642:	9001      	str	r0, [sp, #4]

  tp->queue.prev->queue.next = tp->queue.next;
 8010644:	9b01      	ldr	r3, [sp, #4]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	9a01      	ldr	r2, [sp, #4]
 801064a:	6812      	ldr	r2, [r2, #0]
 801064c:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 801064e:	9b01      	ldr	r3, [sp, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	9a01      	ldr	r2, [sp, #4]
 8010654:	6852      	ldr	r2, [r2, #4]
 8010656:	605a      	str	r2, [r3, #4]

  return tp;
 8010658:	9b01      	ldr	r3, [sp, #4]
}
 801065a:	4618      	mov	r0, r3
 801065c:	b002      	add	sp, #8
 801065e:	4770      	bx	lr

08010660 <chSysLockFromISR.lto_priv.745>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8010660:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8010662:	f7ff ffb5 	bl	80105d0 <port_lock_from_isr.lto_priv.753>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8010666:	bd08      	pop	{r3, pc}
	...

08010670 <chSysUnlockFromISR.lto_priv.741>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8010670:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8010672:	f7ff ffb5 	bl	80105e0 <port_unlock_from_isr.lto_priv.749>
}
 8010676:	bd08      	pop	{r3, pc}
	...

08010680 <chVTIsArmedI>:
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {
 8010680:	b082      	sub	sp, #8
 8010682:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(vtp->func != NULL);
 8010684:	9b01      	ldr	r3, [sp, #4]
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	2b00      	cmp	r3, #0
 801068a:	bf14      	ite	ne
 801068c:	2301      	movne	r3, #1
 801068e:	2300      	moveq	r3, #0
 8010690:	b2db      	uxtb	r3, r3
}
 8010692:	4618      	mov	r0, r3
 8010694:	b002      	add	sp, #8
 8010696:	4770      	bx	lr
	...

080106a0 <chSemFastSignalI>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 80106a0:	b082      	sub	sp, #8
 80106a2:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  sp->cnt++;
 80106a4:	9b01      	ldr	r3, [sp, #4]
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	1c5a      	adds	r2, r3, #1
 80106aa:	9b01      	ldr	r3, [sp, #4]
 80106ac:	609a      	str	r2, [r3, #8]
}
 80106ae:	b002      	add	sp, #8
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
	...

080106c0 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 80106c0:	b508      	push	{r3, lr}

  queue_init(&ch.rlist.queue);
 80106c2:	4806      	ldr	r0, [pc, #24]	; (80106dc <_scheduler_init+0x1c>)
 80106c4:	f7ff ff94 	bl	80105f0 <queue_init.lto_priv.719>
  ch.rlist.prio = NOPRIO;
 80106c8:	4b04      	ldr	r3, [pc, #16]	; (80106dc <_scheduler_init+0x1c>)
 80106ca:	2200      	movs	r2, #0
 80106cc:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80106ce:	4b03      	ldr	r3, [pc, #12]	; (80106dc <_scheduler_init+0x1c>)
 80106d0:	4a02      	ldr	r2, [pc, #8]	; (80106dc <_scheduler_init+0x1c>)
 80106d2:	611a      	str	r2, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 80106d4:	4b01      	ldr	r3, [pc, #4]	; (80106dc <_scheduler_init+0x1c>)
 80106d6:	4a01      	ldr	r2, [pc, #4]	; (80106dc <_scheduler_init+0x1c>)
 80106d8:	615a      	str	r2, [r3, #20]
#endif
}
 80106da:	bd08      	pop	{r3, pc}
 80106dc:	20002710 	.word	0x20002710

080106e0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80106e0:	b084      	sub	sp, #16
 80106e2:	9001      	str	r0, [sp, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80106e4:	9b01      	ldr	r3, [sp, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80106ec:	4b0e      	ldr	r3, [pc, #56]	; (8010728 <chSchReadyI+0x48>)
 80106ee:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 80106f0:	9b03      	ldr	r3, [sp, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	9303      	str	r3, [sp, #12]
  } while (cp->prio >= tp->prio);
 80106f6:	9b03      	ldr	r3, [sp, #12]
 80106f8:	689a      	ldr	r2, [r3, #8]
 80106fa:	9b01      	ldr	r3, [sp, #4]
 80106fc:	689b      	ldr	r3, [r3, #8]
 80106fe:	429a      	cmp	r2, r3
 8010700:	d2f6      	bcs.n	80106f0 <chSchReadyI+0x10>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8010702:	9b01      	ldr	r3, [sp, #4]
 8010704:	9a03      	ldr	r2, [sp, #12]
 8010706:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8010708:	9b03      	ldr	r3, [sp, #12]
 801070a:	685a      	ldr	r2, [r3, #4]
 801070c:	9b01      	ldr	r3, [sp, #4]
 801070e:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8010710:	9b01      	ldr	r3, [sp, #4]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	9a01      	ldr	r2, [sp, #4]
 8010716:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 8010718:	9b03      	ldr	r3, [sp, #12]
 801071a:	9a01      	ldr	r2, [sp, #4]
 801071c:	605a      	str	r2, [r3, #4]

  return tp;
 801071e:	9b01      	ldr	r3, [sp, #4]
}
 8010720:	4618      	mov	r0, r3
 8010722:	b004      	add	sp, #16
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop
 8010728:	20002710 	.word	0x20002710
 801072c:	00000000 	.word	0x00000000

08010730 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 8010730:	b084      	sub	sp, #16
 8010732:	9001      	str	r0, [sp, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8010734:	9b01      	ldr	r3, [sp, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 801073c:	4b0e      	ldr	r3, [pc, #56]	; (8010778 <chSchReadyAheadI+0x48>)
 801073e:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 8010740:	9b03      	ldr	r3, [sp, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	9303      	str	r3, [sp, #12]
  } while (cp->prio > tp->prio);
 8010746:	9b03      	ldr	r3, [sp, #12]
 8010748:	689a      	ldr	r2, [r3, #8]
 801074a:	9b01      	ldr	r3, [sp, #4]
 801074c:	689b      	ldr	r3, [r3, #8]
 801074e:	429a      	cmp	r2, r3
 8010750:	d8f6      	bhi.n	8010740 <chSchReadyAheadI+0x10>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8010752:	9b01      	ldr	r3, [sp, #4]
 8010754:	9a03      	ldr	r2, [sp, #12]
 8010756:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8010758:	9b03      	ldr	r3, [sp, #12]
 801075a:	685a      	ldr	r2, [r3, #4]
 801075c:	9b01      	ldr	r3, [sp, #4]
 801075e:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8010760:	9b01      	ldr	r3, [sp, #4]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	9a01      	ldr	r2, [sp, #4]
 8010766:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 8010768:	9b03      	ldr	r3, [sp, #12]
 801076a:	9a01      	ldr	r2, [sp, #4]
 801076c:	605a      	str	r2, [r3, #4]

  return tp;
 801076e:	9b01      	ldr	r3, [sp, #4]
}
 8010770:	4618      	mov	r0, r3
 8010772:	b004      	add	sp, #16
 8010774:	4770      	bx	lr
 8010776:	bf00      	nop
 8010778:	20002710 	.word	0x20002710
 801077c:	00000000 	.word	0x00000000

08010780 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8010780:	b500      	push	{lr}
 8010782:	b085      	sub	sp, #20
 8010784:	4603      	mov	r3, r0
 8010786:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *otp = currp;
 801078a:	4b0e      	ldr	r3, [pc, #56]	; (80107c4 <chSchGoSleepS+0x44>)
 801078c:	699b      	ldr	r3, [r3, #24]
 801078e:	9303      	str	r3, [sp, #12]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8010790:	9b03      	ldr	r3, [sp, #12]
 8010792:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010796:	f883 2020 	strb.w	r2, [r3, #32]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 801079a:	480a      	ldr	r0, [pc, #40]	; (80107c4 <chSchGoSleepS+0x44>)
 801079c:	f7ff ff38 	bl	8010610 <queue_fifo_remove.lto_priv.714>
 80107a0:	4602      	mov	r2, r0
 80107a2:	4b08      	ldr	r3, [pc, #32]	; (80107c4 <chSchGoSleepS+0x44>)
 80107a4:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 80107a6:	4b07      	ldr	r3, [pc, #28]	; (80107c4 <chSchGoSleepS+0x44>)
 80107a8:	699b      	ldr	r3, [r3, #24]
 80107aa:	2201      	movs	r2, #1
 80107ac:	f883 2020 	strb.w	r2, [r3, #32]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80107b0:	4b04      	ldr	r3, [pc, #16]	; (80107c4 <chSchGoSleepS+0x44>)
 80107b2:	699b      	ldr	r3, [r3, #24]
 80107b4:	4618      	mov	r0, r3
 80107b6:	9903      	ldr	r1, [sp, #12]
 80107b8:	f7f3 fda6 	bl	8004308 <_port_switch>
}
 80107bc:	b005      	add	sp, #20
 80107be:	f85d fb04 	ldr.w	pc, [sp], #4
 80107c2:	bf00      	nop
 80107c4:	20002710 	.word	0x20002710
	...

080107d0 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80107d0:	b500      	push	{lr}
 80107d2:	b085      	sub	sp, #20
 80107d4:	9001      	str	r0, [sp, #4]
  thread_t *tp = (thread_t *)p;
 80107d6:	9b01      	ldr	r3, [sp, #4]
 80107d8:	9303      	str	r3, [sp, #12]

  chSysLockFromISR();
 80107da:	f7ff ff41 	bl	8010660 <chSysLockFromISR.lto_priv.745>
  switch (tp->state) {
 80107de:	9b03      	ldr	r3, [sp, #12]
 80107e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80107e4:	2b07      	cmp	r3, #7
 80107e6:	d823      	bhi.n	8010830 <wakeup+0x60>
 80107e8:	a201      	add	r2, pc, #4	; (adr r2, 80107f0 <wakeup+0x20>)
 80107ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ee:	bf00      	nop
 80107f0:	08010811 	.word	0x08010811
 80107f4:	08010831 	.word	0x08010831
 80107f8:	08010831 	.word	0x08010831
 80107fc:	08010817 	.word	0x08010817
 8010800:	0801082b 	.word	0x0801082b
 8010804:	08010821 	.word	0x08010821
 8010808:	08010831 	.word	0x08010831
 801080c:	0801082b 	.word	0x0801082b
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8010810:	f7ff ff2e 	bl	8010670 <chSysUnlockFromISR.lto_priv.741>
 8010814:	e015      	b.n	8010842 <wakeup+0x72>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8010816:	9b03      	ldr	r3, [sp, #12]
 8010818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801081a:	2200      	movs	r2, #0
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	e007      	b.n	8010830 <wakeup+0x60>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8010820:	9b03      	ldr	r3, [sp, #12]
 8010822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010824:	4618      	mov	r0, r3
 8010826:	f7ff ff3b 	bl	80106a0 <chSemFastSignalI>
    /* Falls through.*/
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 801082a:	9803      	ldr	r0, [sp, #12]
 801082c:	f7ff ff08 	bl	8010640 <queue_dequeue>
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8010830:	9b03      	ldr	r3, [sp, #12]
 8010832:	f04f 32ff 	mov.w	r2, #4294967295
 8010836:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8010838:	9803      	ldr	r0, [sp, #12]
 801083a:	f7ff ff51 	bl	80106e0 <chSchReadyI>
  chSysUnlockFromISR();
 801083e:	f7ff ff17 	bl	8010670 <chSysUnlockFromISR.lto_priv.741>
}
 8010842:	b005      	add	sp, #20
 8010844:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010850 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8010850:	b500      	push	{lr}
 8010852:	b089      	sub	sp, #36	; 0x24
 8010854:	4603      	mov	r3, r0
 8010856:	9100      	str	r1, [sp, #0]
 8010858:	f88d 3007 	strb.w	r3, [sp, #7]

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 801085c:	9b00      	ldr	r3, [sp, #0]
 801085e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010862:	d018      	beq.n	8010896 <chSchGoSleepTimeoutS+0x46>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 8010864:	4b12      	ldr	r3, [pc, #72]	; (80108b0 <chSchGoSleepTimeoutS+0x60>)
 8010866:	699b      	ldr	r3, [r3, #24]
 8010868:	aa03      	add	r2, sp, #12
 801086a:	4610      	mov	r0, r2
 801086c:	9900      	ldr	r1, [sp, #0]
 801086e:	4a11      	ldr	r2, [pc, #68]	; (80108b4 <chSchGoSleepTimeoutS+0x64>)
 8010870:	f7ff fd8e 	bl	8010390 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8010874:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010878:	4618      	mov	r0, r3
 801087a:	f7ff ff81 	bl	8010780 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 801087e:	ab03      	add	r3, sp, #12
 8010880:	4618      	mov	r0, r3
 8010882:	f7ff fefd 	bl	8010680 <chVTIsArmedI>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	d009      	beq.n	80108a0 <chSchGoSleepTimeoutS+0x50>
      chVTDoResetI(&vt);
 801088c:	ab03      	add	r3, sp, #12
 801088e:	4618      	mov	r0, r3
 8010890:	f7ff fe16 	bl	80104c0 <chVTDoResetI>
 8010894:	e004      	b.n	80108a0 <chSchGoSleepTimeoutS+0x50>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8010896:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801089a:	4618      	mov	r0, r3
 801089c:	f7ff ff70 	bl	8010780 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 80108a0:	4b03      	ldr	r3, [pc, #12]	; (80108b0 <chSchGoSleepTimeoutS+0x60>)
 80108a2:	699b      	ldr	r3, [r3, #24]
 80108a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	b009      	add	sp, #36	; 0x24
 80108aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80108ae:	bf00      	nop
 80108b0:	20002710 	.word	0x20002710
 80108b4:	080107d1 	.word	0x080107d1
	...

080108c0 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80108c0:	b500      	push	{lr}
 80108c2:	b085      	sub	sp, #20
 80108c4:	9001      	str	r0, [sp, #4]
 80108c6:	9100      	str	r1, [sp, #0]
  thread_t *otp = currp;
 80108c8:	4b10      	ldr	r3, [pc, #64]	; (801090c <chSchWakeupS+0x4c>)
 80108ca:	699b      	ldr	r3, [r3, #24]
 80108cc:	9303      	str	r3, [sp, #12]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 80108ce:	9b01      	ldr	r3, [sp, #4]
 80108d0:	9a00      	ldr	r2, [sp, #0]
 80108d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 80108d4:	9b01      	ldr	r3, [sp, #4]
 80108d6:	689a      	ldr	r2, [r3, #8]
 80108d8:	9b03      	ldr	r3, [sp, #12]
 80108da:	689b      	ldr	r3, [r3, #8]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d803      	bhi.n	80108e8 <chSchWakeupS+0x28>
    (void) chSchReadyI(ntp);
 80108e0:	9801      	ldr	r0, [sp, #4]
 80108e2:	f7ff fefd 	bl	80106e0 <chSchReadyI>
 80108e6:	e00e      	b.n	8010906 <chSchWakeupS+0x46>
  }
  else {
    otp = chSchReadyI(otp);
 80108e8:	9803      	ldr	r0, [sp, #12]
 80108ea:	f7ff fef9 	bl	80106e0 <chSchReadyI>
 80108ee:	9003      	str	r0, [sp, #12]
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 80108f0:	4a06      	ldr	r2, [pc, #24]	; (801090c <chSchWakeupS+0x4c>)
 80108f2:	9b01      	ldr	r3, [sp, #4]
 80108f4:	6193      	str	r3, [r2, #24]
    ntp->state = CH_STATE_CURRENT;
 80108f6:	9b01      	ldr	r3, [sp, #4]
 80108f8:	2201      	movs	r2, #1
 80108fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 80108fe:	9801      	ldr	r0, [sp, #4]
 8010900:	9903      	ldr	r1, [sp, #12]
 8010902:	f7f3 fd01 	bl	8004308 <_port_switch>
  }
}
 8010906:	b005      	add	sp, #20
 8010908:	f85d fb04 	ldr.w	pc, [sp], #4
 801090c:	20002710 	.word	0x20002710

08010910 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8010910:	b082      	sub	sp, #8
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8010912:	4b09      	ldr	r3, [pc, #36]	; (8010938 <chSchIsPreemptionRequired+0x28>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	9301      	str	r3, [sp, #4]
  tprio_t p2 = currp->prio;
 801091a:	4b07      	ldr	r3, [pc, #28]	; (8010938 <chSchIsPreemptionRequired+0x28>)
 801091c:	699b      	ldr	r3, [r3, #24]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8010922:	9a01      	ldr	r2, [sp, #4]
 8010924:	9b00      	ldr	r3, [sp, #0]
 8010926:	429a      	cmp	r2, r3
 8010928:	bf8c      	ite	hi
 801092a:	2301      	movhi	r3, #1
 801092c:	2300      	movls	r3, #0
 801092e:	b2db      	uxtb	r3, r3
#endif
}
 8010930:	4618      	mov	r0, r3
 8010932:	b002      	add	sp, #8
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	20002710 	.word	0x20002710
 801093c:	00000000 	.word	0x00000000

08010940 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8010940:	b500      	push	{lr}
 8010942:	b083      	sub	sp, #12
  thread_t *otp = currp;
 8010944:	4b0d      	ldr	r3, [pc, #52]	; (801097c <chSchDoReschedule+0x3c>)
 8010946:	699b      	ldr	r3, [r3, #24]
 8010948:	9301      	str	r3, [sp, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 801094a:	480c      	ldr	r0, [pc, #48]	; (801097c <chSchDoReschedule+0x3c>)
 801094c:	f7ff fe60 	bl	8010610 <queue_fifo_remove.lto_priv.714>
 8010950:	4602      	mov	r2, r0
 8010952:	4b0a      	ldr	r3, [pc, #40]	; (801097c <chSchDoReschedule+0x3c>)
 8010954:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8010956:	4b09      	ldr	r3, [pc, #36]	; (801097c <chSchDoReschedule+0x3c>)
 8010958:	699b      	ldr	r3, [r3, #24]
 801095a:	2201      	movs	r2, #1
 801095c:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8010960:	9801      	ldr	r0, [sp, #4]
 8010962:	f7ff fee5 	bl	8010730 <chSchReadyAheadI>
 8010966:	9001      	str	r0, [sp, #4]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8010968:	4b04      	ldr	r3, [pc, #16]	; (801097c <chSchDoReschedule+0x3c>)
 801096a:	699b      	ldr	r3, [r3, #24]
 801096c:	4618      	mov	r0, r3
 801096e:	9901      	ldr	r1, [sp, #4]
 8010970:	f7f3 fcca 	bl	8004308 <_port_switch>
}
 8010974:	b003      	add	sp, #12
 8010976:	f85d fb04 	ldr.w	pc, [sp], #4
 801097a:	bf00      	nop
 801097c:	20002710 	.word	0x20002710

08010980 <port_lock.lto_priv.702>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8010980:	b082      	sub	sp, #8
 8010982:	2320      	movs	r3, #32
 8010984:	9301      	str	r3, [sp, #4]
 8010986:	9b01      	ldr	r3, [sp, #4]
 8010988:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 801098c:	b002      	add	sp, #8
 801098e:	4770      	bx	lr

08010990 <port_unlock.lto_priv.694>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8010990:	b082      	sub	sp, #8
 8010992:	2300      	movs	r3, #0
 8010994:	9301      	str	r3, [sp, #4]
 8010996:	9b01      	ldr	r3, [sp, #4]
 8010998:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 801099c:	b002      	add	sp, #8
 801099e:	4770      	bx	lr

080109a0 <list_init>:
 *
 * @param[in] tlp       pointer to the threads list object
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {
 80109a0:	b082      	sub	sp, #8
 80109a2:	9001      	str	r0, [sp, #4]

  tlp->next = (thread_t *)tlp;
 80109a4:	9b01      	ldr	r3, [sp, #4]
 80109a6:	9a01      	ldr	r2, [sp, #4]
 80109a8:	601a      	str	r2, [r3, #0]
}
 80109aa:	b002      	add	sp, #8
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop

080109b0 <list_notempty>:
 * @param[in] tlp       pointer to the threads list object
 * @return              The status of the list.
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {
 80109b0:	b082      	sub	sp, #8
 80109b2:	9001      	str	r0, [sp, #4]

  return (bool)(tlp->next != (thread_t *)tlp);
 80109b4:	9b01      	ldr	r3, [sp, #4]
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	9b01      	ldr	r3, [sp, #4]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	bf14      	ite	ne
 80109be:	2301      	movne	r3, #1
 80109c0:	2300      	moveq	r3, #0
 80109c2:	b2db      	uxtb	r3, r3
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	b002      	add	sp, #8
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	0000      	movs	r0, r0
	...

080109d0 <queue_init.lto_priv.720>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 80109d0:	b082      	sub	sp, #8
 80109d2:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 80109d4:	9b01      	ldr	r3, [sp, #4]
 80109d6:	9a01      	ldr	r2, [sp, #4]
 80109d8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80109da:	9b01      	ldr	r3, [sp, #4]
 80109dc:	9a01      	ldr	r2, [sp, #4]
 80109de:	605a      	str	r2, [r3, #4]
}
 80109e0:	b002      	add	sp, #8
 80109e2:	4770      	bx	lr
	...

080109f0 <queue_notempty.lto_priv.688>:
 * @param[in] tqp       pointer to the threads queue object
 * @return              The status of the queue.
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {
 80109f0:	b082      	sub	sp, #8
 80109f2:	9001      	str	r0, [sp, #4]

  return (bool)(tqp->next != (const thread_t *)tqp);
 80109f4:	9b01      	ldr	r3, [sp, #4]
 80109f6:	681a      	ldr	r2, [r3, #0]
 80109f8:	9b01      	ldr	r3, [sp, #4]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	bf14      	ite	ne
 80109fe:	2301      	movne	r3, #1
 8010a00:	2300      	moveq	r3, #0
 8010a02:	b2db      	uxtb	r3, r3
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	b002      	add	sp, #8
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	0000      	movs	r0, r0
	...

08010a10 <list_remove>:

  tp->queue.next = tlp->next;
  tlp->next = tp;
}

static inline thread_t *list_remove(threads_list_t *tlp) {
 8010a10:	b084      	sub	sp, #16
 8010a12:	9001      	str	r0, [sp, #4]

  thread_t *tp = tlp->next;
 8010a14:	9b01      	ldr	r3, [sp, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	9303      	str	r3, [sp, #12]
  tlp->next = tp->queue.next;
 8010a1a:	9b03      	ldr	r3, [sp, #12]
 8010a1c:	681a      	ldr	r2, [r3, #0]
 8010a1e:	9b01      	ldr	r3, [sp, #4]
 8010a20:	601a      	str	r2, [r3, #0]

  return tp;
 8010a22:	9b03      	ldr	r3, [sp, #12]
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	b004      	add	sp, #16
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	0000      	movs	r0, r0
	...

08010a30 <queue_insert.lto_priv.717>:
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 8010a30:	b082      	sub	sp, #8
 8010a32:	9001      	str	r0, [sp, #4]
 8010a34:	9100      	str	r1, [sp, #0]

  tp->queue.next             = (thread_t *)tqp;
 8010a36:	9b01      	ldr	r3, [sp, #4]
 8010a38:	9a00      	ldr	r2, [sp, #0]
 8010a3a:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8010a3c:	9b00      	ldr	r3, [sp, #0]
 8010a3e:	685a      	ldr	r2, [r3, #4]
 8010a40:	9b01      	ldr	r3, [sp, #4]
 8010a42:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8010a44:	9b01      	ldr	r3, [sp, #4]
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	9a01      	ldr	r2, [sp, #4]
 8010a4a:	601a      	str	r2, [r3, #0]
  tqp->prev                  = tp;
 8010a4c:	9b00      	ldr	r3, [sp, #0]
 8010a4e:	9a01      	ldr	r2, [sp, #4]
 8010a50:	605a      	str	r2, [r3, #4]
}
 8010a52:	b002      	add	sp, #8
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
	...

08010a60 <queue_fifo_remove.lto_priv.715>:

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8010a60:	b084      	sub	sp, #16
 8010a62:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
 8010a64:	9b01      	ldr	r3, [sp, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	9303      	str	r3, [sp, #12]

  tqp->next             = tp->queue.next;
 8010a6a:	9b03      	ldr	r3, [sp, #12]
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	9b01      	ldr	r3, [sp, #4]
 8010a70:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8010a72:	9b01      	ldr	r3, [sp, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	9a01      	ldr	r2, [sp, #4]
 8010a78:	605a      	str	r2, [r3, #4]

  return tp;
 8010a7a:	9b03      	ldr	r3, [sp, #12]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	b004      	add	sp, #16
 8010a80:	4770      	bx	lr
 8010a82:	bf00      	nop
	...

08010a90 <chSysLock.lto_priv.711>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8010a90:	b508      	push	{r3, lr}

  port_lock();
 8010a92:	f7ff ff75 	bl	8010980 <port_lock.lto_priv.702>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 8010a96:	bd08      	pop	{r3, pc}
	...

08010aa0 <chSysUnlock.lto_priv.707>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8010aa0:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
 8010aa2:	f7ff ff75 	bl	8010990 <port_unlock.lto_priv.694>
}
 8010aa6:	bd08      	pop	{r3, pc}
	...

08010ab0 <chThdGetSelfX>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8010ab0:	4b01      	ldr	r3, [pc, #4]	; (8010ab8 <chThdGetSelfX+0x8>)
 8010ab2:	699b      	ldr	r3, [r3, #24]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	4770      	bx	lr
 8010ab8:	20002710 	.word	0x20002710
 8010abc:	00000000 	.word	0x00000000

08010ac0 <chThdSleepS>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {
 8010ac0:	b500      	push	{lr}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	9001      	str	r0, [sp, #4]

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8010ac6:	2008      	movs	r0, #8
 8010ac8:	9901      	ldr	r1, [sp, #4]
 8010aca:	f7ff fec1 	bl	8010850 <chSchGoSleepTimeoutS>
}
 8010ace:	b003      	add	sp, #12
 8010ad0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010ae0 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8010ae0:	b500      	push	{lr}
 8010ae2:	b085      	sub	sp, #20
 8010ae4:	9001      	str	r0, [sp, #4]
 8010ae6:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);
 8010ae8:	9801      	ldr	r0, [sp, #4]
 8010aea:	f7ff ffb9 	bl	8010a60 <queue_fifo_remove.lto_priv.715>
 8010aee:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8010af0:	9b03      	ldr	r3, [sp, #12]
 8010af2:	9a00      	ldr	r2, [sp, #0]
 8010af4:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8010af6:	9803      	ldr	r0, [sp, #12]
 8010af8:	f7ff fdf2 	bl	80106e0 <chSchReadyI>
}
 8010afc:	b005      	add	sp, #20
 8010afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b02:	bf00      	nop
	...

08010b10 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 8010b10:	b500      	push	{lr}
 8010b12:	b085      	sub	sp, #20
 8010b14:	9003      	str	r0, [sp, #12]
 8010b16:	9102      	str	r1, [sp, #8]
 8010b18:	9201      	str	r2, [sp, #4]

  tp->prio      = prio;
 8010b1a:	9b03      	ldr	r3, [sp, #12]
 8010b1c:	9a01      	ldr	r2, [sp, #4]
 8010b1e:	609a      	str	r2, [r3, #8]
  tp->state     = CH_STATE_WTSTART;
 8010b20:	9b03      	ldr	r3, [sp, #12]
 8010b22:	2202      	movs	r2, #2
 8010b24:	f883 2020 	strb.w	r2, [r3, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8010b28:	9b03      	ldr	r3, [sp, #12]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8010b30:	9b03      	ldr	r3, [sp, #12]
 8010b32:	9a01      	ldr	r2, [sp, #4]
 8010b34:	63da      	str	r2, [r3, #60]	; 0x3c
  tp->mtxlist   = NULL;
 8010b36:	9b03      	ldr	r3, [sp, #12]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8010b3c:	9b03      	ldr	r3, [sp, #12]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8010b42:	9b03      	ldr	r3, [sp, #12]
 8010b44:	2201      	movs	r2, #1
 8010b46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  tp->name      = name;
 8010b4a:	9b03      	ldr	r3, [sp, #12]
 8010b4c:	9a02      	ldr	r2, [sp, #8]
 8010b4e:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
 8010b50:	9b03      	ldr	r3, [sp, #12]
 8010b52:	4a0e      	ldr	r2, [pc, #56]	; (8010b8c <_thread_init+0x7c>)
 8010b54:	611a      	str	r2, [r3, #16]
 8010b56:	4b0d      	ldr	r3, [pc, #52]	; (8010b8c <_thread_init+0x7c>)
 8010b58:	695a      	ldr	r2, [r3, #20]
 8010b5a:	9b03      	ldr	r3, [sp, #12]
 8010b5c:	615a      	str	r2, [r3, #20]
 8010b5e:	9b03      	ldr	r3, [sp, #12]
 8010b60:	695b      	ldr	r3, [r3, #20]
 8010b62:	9a03      	ldr	r2, [sp, #12]
 8010b64:	611a      	str	r2, [r3, #16]
 8010b66:	4a09      	ldr	r2, [pc, #36]	; (8010b8c <_thread_init+0x7c>)
 8010b68:	9b03      	ldr	r3, [sp, #12]
 8010b6a:	6153      	str	r3, [r2, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8010b6c:	9b03      	ldr	r3, [sp, #12]
 8010b6e:	3328      	adds	r3, #40	; 0x28
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7ff ff15 	bl	80109a0 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8010b76:	9b03      	ldr	r3, [sp, #12]
 8010b78:	332c      	adds	r3, #44	; 0x2c
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7ff ff28 	bl	80109d0 <queue_init.lto_priv.720>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 8010b80:	9b03      	ldr	r3, [sp, #12]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	b005      	add	sp, #20
 8010b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b8a:	bf00      	nop
 8010b8c:	20002710 	.word	0x20002710

08010b90 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8010b90:	b500      	push	{lr}
 8010b92:	b085      	sub	sp, #20
 8010b94:	9001      	str	r0, [sp, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8010b96:	9b01      	ldr	r3, [sp, #4]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	3b48      	subs	r3, #72	; 0x48
 8010b9c:	9303      	str	r3, [sp, #12]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8010b9e:	9b01      	ldr	r3, [sp, #4]
 8010ba0:	685a      	ldr	r2, [r3, #4]
 8010ba2:	9b03      	ldr	r3, [sp, #12]
 8010ba4:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8010ba6:	9b03      	ldr	r3, [sp, #12]
 8010ba8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8010bac:	9b03      	ldr	r3, [sp, #12]
 8010bae:	60da      	str	r2, [r3, #12]
 8010bb0:	9b03      	ldr	r3, [sp, #12]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	9a01      	ldr	r2, [sp, #4]
 8010bb6:	6912      	ldr	r2, [r2, #16]
 8010bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8010bba:	9b03      	ldr	r3, [sp, #12]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	9a01      	ldr	r2, [sp, #4]
 8010bc0:	6952      	ldr	r2, [r2, #20]
 8010bc2:	645a      	str	r2, [r3, #68]	; 0x44
 8010bc4:	9b03      	ldr	r3, [sp, #12]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	4a07      	ldr	r2, [pc, #28]	; (8010be8 <chThdCreateSuspendedI+0x58>)
 8010bca:	661a      	str	r2, [r3, #96]	; 0x60

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8010bcc:	9b01      	ldr	r3, [sp, #4]
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	9b01      	ldr	r3, [sp, #4]
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	9803      	ldr	r0, [sp, #12]
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	461a      	mov	r2, r3
 8010bda:	f7ff ff99 	bl	8010b10 <_thread_init>
 8010bde:	4603      	mov	r3, r0
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	b005      	add	sp, #20
 8010be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010be8:	08004321 	.word	0x08004321
 8010bec:	00000000 	.word	0x00000000

08010bf0 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8010bf0:	b500      	push	{lr}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	9001      	str	r0, [sp, #4]
  _thread_memfill((uint8_t *)tdp->wbase,
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8010bf6:	f7ff ff4b 	bl	8010a90 <chSysLock.lto_priv.711>
  tp = chThdCreateSuspendedI(tdp);
 8010bfa:	9801      	ldr	r0, [sp, #4]
 8010bfc:	f7ff ffc8 	bl	8010b90 <chThdCreateSuspendedI>
 8010c00:	9003      	str	r0, [sp, #12]
  chSchWakeupS(tp, MSG_OK);
 8010c02:	9803      	ldr	r0, [sp, #12]
 8010c04:	2100      	movs	r1, #0
 8010c06:	f7ff fe5b 	bl	80108c0 <chSchWakeupS>
  chSysUnlock();
 8010c0a:	f7ff ff49 	bl	8010aa0 <chSysUnlock.lto_priv.707>

  return tp;
 8010c0e:	9b03      	ldr	r3, [sp, #12]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	b005      	add	sp, #20
 8010c14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010c20 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8010c20:	b500      	push	{lr}
 8010c22:	b083      	sub	sp, #12
 8010c24:	9001      	str	r0, [sp, #4]

  chSysLock();
 8010c26:	f7ff ff33 	bl	8010a90 <chSysLock.lto_priv.711>
  chThdExitS(msg);
 8010c2a:	9801      	ldr	r0, [sp, #4]
 8010c2c:	f000 f808 	bl	8010c40 <chThdExitS>
  /* The thread never returns here.*/
}
 8010c30:	b003      	add	sp, #12
 8010c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c36:	bf00      	nop
	...

08010c40 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8010c40:	b500      	push	{lr}
 8010c42:	b085      	sub	sp, #20
 8010c44:	9001      	str	r0, [sp, #4]
  thread_t *tp = currp;
 8010c46:	4b1a      	ldr	r3, [pc, #104]	; (8010cb0 <chThdExitS+0x70>)
 8010c48:	699b      	ldr	r3, [r3, #24]
 8010c4a:	9303      	str	r3, [sp, #12]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8010c4c:	9b03      	ldr	r3, [sp, #12]
 8010c4e:	9a01      	ldr	r2, [sp, #4]
 8010c50:	625a      	str	r2, [r3, #36]	; 0x24
 8010c52:	e008      	b.n	8010c66 <chThdExitS+0x26>
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
    (void) chSchReadyI(list_remove(&tp->waiting));
 8010c54:	9b03      	ldr	r3, [sp, #12]
 8010c56:	3328      	adds	r3, #40	; 0x28
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7ff fed9 	bl	8010a10 <list_remove>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7ff fd3d 	bl	80106e0 <chSchReadyI>
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8010c66:	9b03      	ldr	r3, [sp, #12]
 8010c68:	3328      	adds	r3, #40	; 0x28
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7ff fea0 	bl	80109b0 <list_notempty>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d1ee      	bne.n	8010c54 <chThdExitS+0x14>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d110      	bne.n	8010ca2 <chThdExitS+0x62>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8010c80:	9b03      	ldr	r3, [sp, #12]
 8010c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010c86:	f003 0303 	and.w	r3, r3, #3

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d109      	bne.n	8010ca2 <chThdExitS+0x62>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8010c8e:	9b03      	ldr	r3, [sp, #12]
 8010c90:	695b      	ldr	r3, [r3, #20]
 8010c92:	9a03      	ldr	r2, [sp, #12]
 8010c94:	6912      	ldr	r2, [r2, #16]
 8010c96:	611a      	str	r2, [r3, #16]
 8010c98:	9b03      	ldr	r3, [sp, #12]
 8010c9a:	691b      	ldr	r3, [r3, #16]
 8010c9c:	9a03      	ldr	r2, [sp, #12]
 8010c9e:	6952      	ldr	r2, [r2, #20]
 8010ca0:	615a      	str	r2, [r3, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8010ca2:	200f      	movs	r0, #15
 8010ca4:	f7ff fd6c 	bl	8010780 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8010ca8:	b005      	add	sp, #20
 8010caa:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cae:	bf00      	nop
 8010cb0:	20002710 	.word	0x20002710
	...

08010cc0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8010cc0:	b500      	push	{lr}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	9001      	str	r0, [sp, #4]

  chSysLock();
 8010cc6:	f7ff fee3 	bl	8010a90 <chSysLock.lto_priv.711>
  chThdSleepS(time);
 8010cca:	9801      	ldr	r0, [sp, #4]
 8010ccc:	f7ff fef8 	bl	8010ac0 <chThdSleepS>
  chSysUnlock();
 8010cd0:	f7ff fee6 	bl	8010aa0 <chSysUnlock.lto_priv.707>
}
 8010cd4:	b003      	add	sp, #12
 8010cd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cda:	bf00      	nop
 8010cdc:	0000      	movs	r0, r0
	...

08010ce0 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8010ce0:	b500      	push	{lr}
 8010ce2:	b085      	sub	sp, #20
 8010ce4:	9001      	str	r0, [sp, #4]
 8010ce6:	9100      	str	r1, [sp, #0]
  thread_t *tp = chThdGetSelfX();
 8010ce8:	f7ff fee2 	bl	8010ab0 <chThdGetSelfX>
 8010cec:	9003      	str	r0, [sp, #12]

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 8010cee:	9b00      	ldr	r3, [sp, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d102      	bne.n	8010cfa <chThdSuspendTimeoutS+0x1a>
    return MSG_TIMEOUT;
 8010cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf8:	e00a      	b.n	8010d10 <chThdSuspendTimeoutS+0x30>
  }

  *trp = tp;
 8010cfa:	9b01      	ldr	r3, [sp, #4]
 8010cfc:	9a03      	ldr	r2, [sp, #12]
 8010cfe:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 8010d00:	9b03      	ldr	r3, [sp, #12]
 8010d02:	9a01      	ldr	r2, [sp, #4]
 8010d04:	625a      	str	r2, [r3, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8010d06:	2003      	movs	r0, #3
 8010d08:	9900      	ldr	r1, [sp, #0]
 8010d0a:	f7ff fda1 	bl	8010850 <chSchGoSleepTimeoutS>
 8010d0e:	4603      	mov	r3, r0
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	b005      	add	sp, #20
 8010d14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010d20 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8010d20:	b500      	push	{lr}
 8010d22:	b085      	sub	sp, #20
 8010d24:	9001      	str	r0, [sp, #4]
 8010d26:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
 8010d28:	9b01      	ldr	r3, [sp, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00b      	beq.n	8010d48 <chThdResumeI+0x28>
    thread_t *tp = *trp;
 8010d30:	9b01      	ldr	r3, [sp, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8010d36:	9b01      	ldr	r3, [sp, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 8010d3c:	9b03      	ldr	r3, [sp, #12]
 8010d3e:	9a00      	ldr	r2, [sp, #0]
 8010d40:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8010d42:	9803      	ldr	r0, [sp, #12]
 8010d44:	f7ff fccc 	bl	80106e0 <chSchReadyI>
  }
}
 8010d48:	b005      	add	sp, #20
 8010d4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d4e:	bf00      	nop

08010d50 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8010d50:	b500      	push	{lr}
 8010d52:	b083      	sub	sp, #12
 8010d54:	9001      	str	r0, [sp, #4]
 8010d56:	9100      	str	r1, [sp, #0]

  if (TIME_IMMEDIATE == timeout) {
 8010d58:	9b00      	ldr	r3, [sp, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d102      	bne.n	8010d64 <chThdEnqueueTimeoutS+0x14>
    return MSG_TIMEOUT;
 8010d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d62:	e00a      	b.n	8010d7a <chThdEnqueueTimeoutS+0x2a>
  }

  queue_insert(currp, tqp);
 8010d64:	4b07      	ldr	r3, [pc, #28]	; (8010d84 <chThdEnqueueTimeoutS+0x34>)
 8010d66:	699b      	ldr	r3, [r3, #24]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	9901      	ldr	r1, [sp, #4]
 8010d6c:	f7ff fe60 	bl	8010a30 <queue_insert.lto_priv.717>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8010d70:	2004      	movs	r0, #4
 8010d72:	9900      	ldr	r1, [sp, #0]
 8010d74:	f7ff fd6c 	bl	8010850 <chSchGoSleepTimeoutS>
 8010d78:	4603      	mov	r3, r0
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	b003      	add	sp, #12
 8010d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d82:	bf00      	nop
 8010d84:	20002710 	.word	0x20002710
	...

08010d90 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8010d90:	b500      	push	{lr}
 8010d92:	b083      	sub	sp, #12
 8010d94:	9001      	str	r0, [sp, #4]
 8010d96:	9100      	str	r1, [sp, #0]

  if (queue_notempty(tqp)) {
 8010d98:	9801      	ldr	r0, [sp, #4]
 8010d9a:	f7ff fe29 	bl	80109f0 <queue_notempty.lto_priv.688>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d003      	beq.n	8010dac <chThdDequeueNextI+0x1c>
    chThdDoDequeueNextI(tqp, msg);
 8010da4:	9801      	ldr	r0, [sp, #4]
 8010da6:	9900      	ldr	r1, [sp, #0]
 8010da8:	f7ff fe9a 	bl	8010ae0 <chThdDoDequeueNextI>
  }
}
 8010dac:	b003      	add	sp, #12
 8010dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8010db2:	bf00      	nop
	...

08010dc0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8010dc0:	b500      	push	{lr}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	9001      	str	r0, [sp, #4]
 8010dc6:	9100      	str	r1, [sp, #0]
 8010dc8:	e003      	b.n	8010dd2 <chThdDequeueAllI+0x12>

  while (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
 8010dca:	9801      	ldr	r0, [sp, #4]
 8010dcc:	9900      	ldr	r1, [sp, #0]
 8010dce:	f7ff fe87 	bl	8010ae0 <chThdDoDequeueNextI>
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 8010dd2:	9801      	ldr	r0, [sp, #4]
 8010dd4:	f7ff fe0c 	bl	80109f0 <queue_notempty.lto_priv.688>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d1f5      	bne.n	8010dca <chThdDequeueAllI+0xa>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8010dde:	b003      	add	sp, #12
 8010de0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010df0 <port_rt_get_counter_value.lto_priv.725>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8010df0:	4b01      	ldr	r3, [pc, #4]	; (8010df8 <port_rt_get_counter_value.lto_priv.725+0x8>)
 8010df2:	685b      	ldr	r3, [r3, #4]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	4770      	bx	lr
 8010df8:	e0001000 	.word	0xe0001000
 8010dfc:	00000000 	.word	0x00000000

08010e00 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8010e00:	b084      	sub	sp, #16
 8010e02:	9003      	str	r0, [sp, #12]
 8010e04:	9102      	str	r1, [sp, #8]
 8010e06:	9201      	str	r2, [sp, #4]

  tmp->n++;
 8010e08:	9b03      	ldr	r3, [sp, #12]
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	1c5a      	adds	r2, r3, #1
 8010e0e:	9b03      	ldr	r3, [sp, #12]
 8010e10:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8010e12:	9b03      	ldr	r3, [sp, #12]
 8010e14:	689b      	ldr	r3, [r3, #8]
 8010e16:	9a02      	ldr	r2, [sp, #8]
 8010e18:	1ad2      	subs	r2, r2, r3
 8010e1a:	9b01      	ldr	r3, [sp, #4]
 8010e1c:	1ad2      	subs	r2, r2, r3
 8010e1e:	9b03      	ldr	r3, [sp, #12]
 8010e20:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8010e22:	9b03      	ldr	r3, [sp, #12]
 8010e24:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010e28:	9b03      	ldr	r3, [sp, #12]
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	f04f 0300 	mov.w	r3, #0
 8010e32:	1812      	adds	r2, r2, r0
 8010e34:	eb43 0301 	adc.w	r3, r3, r1
 8010e38:	9903      	ldr	r1, [sp, #12]
 8010e3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  if (tmp->last > tmp->worst) {
 8010e3e:	9b03      	ldr	r3, [sp, #12]
 8010e40:	689a      	ldr	r2, [r3, #8]
 8010e42:	9b03      	ldr	r3, [sp, #12]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d903      	bls.n	8010e52 <tm_stop+0x52>
    tmp->worst = tmp->last;
 8010e4a:	9b03      	ldr	r3, [sp, #12]
 8010e4c:	689a      	ldr	r2, [r3, #8]
 8010e4e:	9b03      	ldr	r3, [sp, #12]
 8010e50:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 8010e52:	9b03      	ldr	r3, [sp, #12]
 8010e54:	689a      	ldr	r2, [r3, #8]
 8010e56:	9b03      	ldr	r3, [sp, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d203      	bcs.n	8010e66 <tm_stop+0x66>
    tmp->best = tmp->last;
 8010e5e:	9b03      	ldr	r3, [sp, #12]
 8010e60:	689a      	ldr	r2, [r3, #8]
 8010e62:	9b03      	ldr	r3, [sp, #12]
 8010e64:	601a      	str	r2, [r3, #0]
  }
}
 8010e66:	b004      	add	sp, #16
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop
 8010e6c:	0000      	movs	r0, r0
	...

08010e70 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8010e70:	b500      	push	{lr}
 8010e72:	b087      	sub	sp, #28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8010e74:	4b0a      	ldr	r3, [pc, #40]	; (8010ea0 <_tm_init+0x30>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	675a      	str	r2, [r3, #116]	; 0x74
  chTMObjectInit(&tm);
 8010e7a:	466b      	mov	r3, sp
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f000 f817 	bl	8010eb0 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 8010e82:	466b      	mov	r3, sp
 8010e84:	4618      	mov	r0, r3
 8010e86:	f000 f82b 	bl	8010ee0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8010e8a:	466b      	mov	r3, sp
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f000 f837 	bl	8010f00 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8010e92:	9b02      	ldr	r3, [sp, #8]
 8010e94:	4a02      	ldr	r2, [pc, #8]	; (8010ea0 <_tm_init+0x30>)
 8010e96:	6753      	str	r3, [r2, #116]	; 0x74
}
 8010e98:	b007      	add	sp, #28
 8010e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e9e:	bf00      	nop
 8010ea0:	20002710 	.word	0x20002710
	...

08010eb0 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8010eb0:	b082      	sub	sp, #8
 8010eb2:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 8010eb4:	9b01      	ldr	r3, [sp, #4]
 8010eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8010eba:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 8010ebc:	9b01      	ldr	r3, [sp, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8010ec2:	9b01      	ldr	r3, [sp, #4]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 8010ec8:	9b01      	ldr	r3, [sp, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 8010ece:	9901      	ldr	r1, [sp, #4]
 8010ed0:	f04f 0200 	mov.w	r2, #0
 8010ed4:	f04f 0300 	mov.w	r3, #0
 8010ed8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8010edc:	b002      	add	sp, #8
 8010ede:	4770      	bx	lr

08010ee0 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 8010ee0:	b500      	push	{lr}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	9001      	str	r0, [sp, #4]

  tmp->last = chSysGetRealtimeCounterX();
 8010ee6:	f7ff ff83 	bl	8010df0 <port_rt_get_counter_value.lto_priv.725>
 8010eea:	4602      	mov	r2, r0
 8010eec:	9b01      	ldr	r3, [sp, #4]
 8010eee:	609a      	str	r2, [r3, #8]
}
 8010ef0:	b003      	add	sp, #12
 8010ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ef6:	bf00      	nop
	...

08010f00 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8010f00:	b500      	push	{lr}
 8010f02:	b083      	sub	sp, #12
 8010f04:	9001      	str	r0, [sp, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8010f06:	f7ff ff73 	bl	8010df0 <port_rt_get_counter_value.lto_priv.725>
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	4b04      	ldr	r3, [pc, #16]	; (8010f20 <chTMStopMeasurementX+0x20>)
 8010f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f10:	9801      	ldr	r0, [sp, #4]
 8010f12:	4611      	mov	r1, r2
 8010f14:	461a      	mov	r2, r3
 8010f16:	f7ff ff73 	bl	8010e00 <tm_stop>
}
 8010f1a:	b003      	add	sp, #12
 8010f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f20:	20002710 	.word	0x20002710
	...

08010f30 <queue_init.lto_priv.678>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8010f30:	b082      	sub	sp, #8
 8010f32:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 8010f34:	9b01      	ldr	r3, [sp, #4]
 8010f36:	9a01      	ldr	r2, [sp, #4]
 8010f38:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8010f3a:	9b01      	ldr	r3, [sp, #4]
 8010f3c:	9a01      	ldr	r2, [sp, #4]
 8010f3e:	605a      	str	r2, [r3, #4]
}
 8010f40:	b002      	add	sp, #8
 8010f42:	4770      	bx	lr
	...

08010f50 <can_lld_rx0_handler>:
 *
 * @param[in] canp      pointer to the @p CANDriver object
 *
 * @notapi
 */
static void can_lld_rx0_handler(CANDriver *canp) {
 8010f50:	b500      	push	{lr}
 8010f52:	b085      	sub	sp, #20
 8010f54:	9001      	str	r0, [sp, #4]
  uint32_t rf0r;

  rf0r = canp->can->RF0R;
 8010f56:	9b01      	ldr	r3, [sp, #4]
 8010f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	9303      	str	r3, [sp, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8010f5e:	9b03      	ldr	r3, [sp, #12]
 8010f60:	f003 0303 	and.w	r3, r3, #3
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d017      	beq.n	8010f98 <can_lld_rx0_handler+0x48>
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8010f68:	9b01      	ldr	r3, [sp, #4]
 8010f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f6c:	9a01      	ldr	r2, [sp, #4]
 8010f6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010f70:	6952      	ldr	r2, [r2, #20]
 8010f72:	f022 0202 	bic.w	r2, r2, #2
 8010f76:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 8010f78:	f003 f94a 	bl	8014210 <osalSysLockFromISR.lto_priv.779>
 8010f7c:	9b01      	ldr	r3, [sp, #4]
 8010f7e:	3310      	adds	r3, #16
 8010f80:	4618      	mov	r0, r3
 8010f82:	2100      	movs	r1, #0
 8010f84:	f003 f954 	bl	8014230 <osalThreadDequeueAllI.lto_priv.796>
 8010f88:	9b01      	ldr	r3, [sp, #4]
 8010f8a:	3318      	adds	r3, #24
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	2101      	movs	r1, #1
 8010f90:	f003 f95e 	bl	8014250 <osalEventBroadcastFlagsI.lto_priv.805>
 8010f94:	f003 f944 	bl	8014220 <osalSysUnlockFromISR.lto_priv.776>
  }
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8010f98:	9b03      	ldr	r3, [sp, #12]
 8010f9a:	f003 0310 	and.w	r3, r3, #16
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d00d      	beq.n	8010fbe <can_lld_rx0_handler+0x6e>
    /* Overflow events handling.*/
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8010fa2:	9b01      	ldr	r3, [sp, #4]
 8010fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa6:	2210      	movs	r2, #16
 8010fa8:	60da      	str	r2, [r3, #12]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 8010faa:	f003 f931 	bl	8014210 <osalSysLockFromISR.lto_priv.779>
 8010fae:	9b01      	ldr	r3, [sp, #4]
 8010fb0:	3320      	adds	r3, #32
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	2110      	movs	r1, #16
 8010fb6:	f003 f94b 	bl	8014250 <osalEventBroadcastFlagsI.lto_priv.805>
 8010fba:	f003 f931 	bl	8014220 <osalSysUnlockFromISR.lto_priv.776>
  }
}
 8010fbe:	b005      	add	sp, #20
 8010fc0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010fd0 <can_lld_rx1_handler>:
 *
 * @param[in] canp      pointer to the @p CANDriver object
 *
 * @notapi
 */
static void can_lld_rx1_handler(CANDriver *canp) {
 8010fd0:	b500      	push	{lr}
 8010fd2:	b085      	sub	sp, #20
 8010fd4:	9001      	str	r0, [sp, #4]
  uint32_t rf1r;

  rf1r = canp->can->RF1R;
 8010fd6:	9b01      	ldr	r3, [sp, #4]
 8010fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	9303      	str	r3, [sp, #12]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8010fde:	9b03      	ldr	r3, [sp, #12]
 8010fe0:	f003 0303 	and.w	r3, r3, #3
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d017      	beq.n	8011018 <can_lld_rx1_handler+0x48>
    /* No more receive events until the queue 0 has been emptied.*/
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8010fe8:	9b01      	ldr	r3, [sp, #4]
 8010fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fec:	9a01      	ldr	r2, [sp, #4]
 8010fee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010ff0:	6952      	ldr	r2, [r2, #20]
 8010ff2:	f022 0210 	bic.w	r2, r2, #16
 8010ff6:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 8010ff8:	f003 f90a 	bl	8014210 <osalSysLockFromISR.lto_priv.779>
 8010ffc:	9b01      	ldr	r3, [sp, #4]
 8010ffe:	3310      	adds	r3, #16
 8011000:	4618      	mov	r0, r3
 8011002:	2100      	movs	r1, #0
 8011004:	f003 f914 	bl	8014230 <osalThreadDequeueAllI.lto_priv.796>
 8011008:	9b01      	ldr	r3, [sp, #4]
 801100a:	3318      	adds	r3, #24
 801100c:	4618      	mov	r0, r3
 801100e:	2102      	movs	r1, #2
 8011010:	f003 f91e 	bl	8014250 <osalEventBroadcastFlagsI.lto_priv.805>
 8011014:	f003 f904 	bl	8014220 <osalSysUnlockFromISR.lto_priv.776>
  }
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8011018:	9b03      	ldr	r3, [sp, #12]
 801101a:	f003 0310 	and.w	r3, r3, #16
 801101e:	2b00      	cmp	r3, #0
 8011020:	d00d      	beq.n	801103e <can_lld_rx1_handler+0x6e>
    /* Overflow events handling.*/
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8011022:	9b01      	ldr	r3, [sp, #4]
 8011024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011026:	2210      	movs	r2, #16
 8011028:	611a      	str	r2, [r3, #16]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 801102a:	f003 f8f1 	bl	8014210 <osalSysLockFromISR.lto_priv.779>
 801102e:	9b01      	ldr	r3, [sp, #4]
 8011030:	3320      	adds	r3, #32
 8011032:	4618      	mov	r0, r3
 8011034:	2110      	movs	r1, #16
 8011036:	f003 f90b 	bl	8014250 <osalEventBroadcastFlagsI.lto_priv.805>
 801103a:	f003 f8f1 	bl	8014220 <osalSysUnlockFromISR.lto_priv.776>
  }
}
 801103e:	b005      	add	sp, #20
 8011040:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011050 <can_lld_sce_handler>:
 *
 * @param[in] canp      pointer to the @p CANDriver object
 *
 * @notapi
 */
static void can_lld_sce_handler(CANDriver *canp) {
 8011050:	b500      	push	{lr}
 8011052:	b087      	sub	sp, #28
 8011054:	9001      	str	r0, [sp, #4]
  uint32_t msr;

  /* Clearing IRQ sources.*/
  msr = canp->can->MSR;
 8011056:	9b01      	ldr	r3, [sp, #4]
 8011058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	9305      	str	r3, [sp, #20]
  canp->can->MSR = msr;
 801105e:	9b01      	ldr	r3, [sp, #4]
 8011060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011062:	9a05      	ldr	r2, [sp, #20]
 8011064:	605a      	str	r2, [r3, #4]

  /* Wakeup event.*/
#if CAN_USE_SLEEP_MODE
  if (msr & CAN_MSR_WKUI) {
 8011066:	9b05      	ldr	r3, [sp, #20]
 8011068:	f003 0308 	and.w	r3, r3, #8
 801106c:	2b00      	cmp	r3, #0
 801106e:	d014      	beq.n	801109a <can_lld_sce_handler+0x4a>
    canp->state = CAN_READY;
 8011070:	9b01      	ldr	r3, [sp, #4]
 8011072:	2203      	movs	r2, #3
 8011074:	701a      	strb	r2, [r3, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8011076:	9b01      	ldr	r3, [sp, #4]
 8011078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801107a:	9a01      	ldr	r2, [sp, #4]
 801107c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801107e:	6812      	ldr	r2, [r2, #0]
 8011080:	f022 0202 	bic.w	r2, r2, #2
 8011084:	601a      	str	r2, [r3, #0]
    _can_wakeup_isr(canp);
 8011086:	f003 f8c3 	bl	8014210 <osalSysLockFromISR.lto_priv.779>
 801108a:	9b01      	ldr	r3, [sp, #4]
 801108c:	3328      	adds	r3, #40	; 0x28
 801108e:	4618      	mov	r0, r3
 8011090:	2100      	movs	r1, #0
 8011092:	f003 f8dd 	bl	8014250 <osalEventBroadcastFlagsI.lto_priv.805>
 8011096:	f003 f8c3 	bl	8014220 <osalSysUnlockFromISR.lto_priv.776>
  }
#endif /* CAN_USE_SLEEP_MODE */
  /* Error event.*/
  if (msr & CAN_MSR_ERRI) {
 801109a:	9b05      	ldr	r3, [sp, #20]
 801109c:	f003 0304 	and.w	r3, r3, #4
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d014      	beq.n	80110ce <can_lld_sce_handler+0x7e>
    eventflags_t flags;
    uint32_t esr = canp->can->ESR;
 80110a4:	9b01      	ldr	r3, [sp, #4]
 80110a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110a8:	699b      	ldr	r3, [r3, #24]
 80110aa:	9304      	str	r3, [sp, #16]
#if STM32_CAN_REPORT_ALL_ERRORS
    flags = (eventflags_t)(esr & 7);
    if ((esr & CAN_ESR_LEC) > 0)
      flags |= CAN_FRAMING_ERROR;
#else
    flags = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	9303      	str	r3, [sp, #12]
#endif

    /* The content of the ESR register is copied unchanged in the upper
       half word of the listener flags mask.*/
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 80110b0:	f003 f8ae 	bl	8014210 <osalSysLockFromISR.lto_priv.779>
 80110b4:	9b01      	ldr	r3, [sp, #4]
 80110b6:	f103 0120 	add.w	r1, r3, #32
 80110ba:	9b04      	ldr	r3, [sp, #16]
 80110bc:	041a      	lsls	r2, r3, #16
 80110be:	9b03      	ldr	r3, [sp, #12]
 80110c0:	4313      	orrs	r3, r2
 80110c2:	4608      	mov	r0, r1
 80110c4:	4619      	mov	r1, r3
 80110c6:	f003 f8c3 	bl	8014250 <osalEventBroadcastFlagsI.lto_priv.805>
 80110ca:	f003 f8a9 	bl	8014220 <osalSysUnlockFromISR.lto_priv.776>
  }
}
 80110ce:	b007      	add	sp, #28
 80110d0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080110e0 <Vector8C>:
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 80110e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);
 80110e2:	4803      	ldr	r0, [pc, #12]	; (80110f0 <Vector8C+0x10>)
 80110e4:	f003 f9cc 	bl	8014480 <can_lld_tx_handler.lto_priv.804>

  OSAL_IRQ_EPILOGUE();
 80110e8:	f7fe f8a2 	bl	800f230 <_port_irq_epilogue>
}
 80110ec:	bd08      	pop	{r3, pc}
 80110ee:	bf00      	nop
 80110f0:	20001080 	.word	0x20001080
	...

08011100 <Vector90>:
/**
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8011100:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);
 8011102:	4803      	ldr	r0, [pc, #12]	; (8011110 <Vector90+0x10>)
 8011104:	f7ff ff24 	bl	8010f50 <can_lld_rx0_handler>

  OSAL_IRQ_EPILOGUE();
 8011108:	f7fe f892 	bl	800f230 <_port_irq_epilogue>
}
 801110c:	bd08      	pop	{r3, pc}
 801110e:	bf00      	nop
 8011110:	20001080 	.word	0x20001080
	...

08011120 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8011120:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);
 8011122:	4803      	ldr	r0, [pc, #12]	; (8011130 <Vector94+0x10>)
 8011124:	f7ff ff54 	bl	8010fd0 <can_lld_rx1_handler>

  OSAL_IRQ_EPILOGUE();
 8011128:	f7fe f882 	bl	800f230 <_port_irq_epilogue>
}
 801112c:	bd08      	pop	{r3, pc}
 801112e:	bf00      	nop
 8011130:	20001080 	.word	0x20001080
	...

08011140 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8011140:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);
 8011142:	4803      	ldr	r0, [pc, #12]	; (8011150 <Vector98+0x10>)
 8011144:	f7ff ff84 	bl	8011050 <can_lld_sce_handler>

  OSAL_IRQ_EPILOGUE();
 8011148:	f7fe f872 	bl	800f230 <_port_irq_epilogue>
}
 801114c:	bd08      	pop	{r3, pc}
 801114e:	bf00      	nop
 8011150:	20001080 	.word	0x20001080
	...

08011160 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 8011160:	b508      	push	{r3, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 8011162:	480e      	ldr	r0, [pc, #56]	; (801119c <can_lld_init+0x3c>)
 8011164:	f003 fa8c 	bl	8014680 <canObjectInit>
  CAND1.can = CAN1;
 8011168:	4b0c      	ldr	r3, [pc, #48]	; (801119c <can_lld_init+0x3c>)
 801116a:	4a0d      	ldr	r2, [pc, #52]	; (80111a0 <can_lld_init+0x40>)
 801116c:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32_CAN1_UNIFIED_NUMBER)
    nvicEnableVector(STM32_CAN1_UNIFIED_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#else
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 801116e:	2013      	movs	r0, #19
 8011170:	210b      	movs	r1, #11
 8011172:	f002 fc0d 	bl	8013990 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8011176:	2014      	movs	r0, #20
 8011178:	210b      	movs	r1, #11
 801117a:	f002 fc09 	bl	8013990 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 801117e:	2015      	movs	r0, #21
 8011180:	210b      	movs	r1, #11
 8011182:	f002 fc05 	bl	8013990 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8011186:	2016      	movs	r0, #22
 8011188:	210b      	movs	r1, #11
 801118a:	f002 fc01 	bl	8013990 <nvicEnableVector>
#endif
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(&CAND1, STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 801118e:	4803      	ldr	r0, [pc, #12]	; (801119c <can_lld_init+0x3c>)
 8011190:	210e      	movs	r1, #14
 8011192:	2200      	movs	r2, #0
 8011194:	2300      	movs	r3, #0
 8011196:	f003 f86b 	bl	8014270 <can_lld_set_filters.lto_priv.802>
#if STM32_HAS_CAN3
#if STM32_CAN_USE_CAN3
  can_lld_set_filters(&CAND3, STM32_CAN3_MAX_FILTERS, 0, NULL);
#endif
#endif
}
 801119a:	bd08      	pop	{r3, pc}
 801119c:	20001080 	.word	0x20001080
 80111a0:	40006400 	.word	0x40006400
	...

080111b0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80111b0:	b500      	push	{lr}
 80111b2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80111b4:	4b0b      	ldr	r3, [pc, #44]	; (80111e4 <Vector6C+0x34>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80111bc:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 0U;
 80111be:	4a09      	ldr	r2, [pc, #36]	; (80111e4 <Vector6C+0x34>)
 80111c0:	9b01      	ldr	r3, [sp, #4]
 80111c2:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[0].dma_func)
 80111c4:	4b08      	ldr	r3, [pc, #32]	; (80111e8 <Vector6C+0x38>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d006      	beq.n	80111da <Vector6C+0x2a>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 80111cc:	4b06      	ldr	r3, [pc, #24]	; (80111e8 <Vector6C+0x38>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4a05      	ldr	r2, [pc, #20]	; (80111e8 <Vector6C+0x38>)
 80111d2:	6852      	ldr	r2, [r2, #4]
 80111d4:	4610      	mov	r0, r2
 80111d6:	9901      	ldr	r1, [sp, #4]
 80111d8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80111da:	f7fe f829 	bl	800f230 <_port_irq_epilogue>
}
 80111de:	b003      	add	sp, #12
 80111e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80111e4:	40026000 	.word	0x40026000
 80111e8:	200010b4 	.word	0x200010b4
 80111ec:	00000000 	.word	0x00000000

080111f0 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80111f0:	b500      	push	{lr}
 80111f2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80111f4:	4b0c      	ldr	r3, [pc, #48]	; (8011228 <Vector70+0x38>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	099b      	lsrs	r3, r3, #6
 80111fa:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80111fe:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 6U;
 8011200:	4a09      	ldr	r2, [pc, #36]	; (8011228 <Vector70+0x38>)
 8011202:	9b01      	ldr	r3, [sp, #4]
 8011204:	019b      	lsls	r3, r3, #6
 8011206:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[1].dma_func)
 8011208:	4b08      	ldr	r3, [pc, #32]	; (801122c <Vector70+0x3c>)
 801120a:	689b      	ldr	r3, [r3, #8]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d006      	beq.n	801121e <Vector70+0x2e>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8011210:	4b06      	ldr	r3, [pc, #24]	; (801122c <Vector70+0x3c>)
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	4a05      	ldr	r2, [pc, #20]	; (801122c <Vector70+0x3c>)
 8011216:	68d2      	ldr	r2, [r2, #12]
 8011218:	4610      	mov	r0, r2
 801121a:	9901      	ldr	r1, [sp, #4]
 801121c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801121e:	f7fe f807 	bl	800f230 <_port_irq_epilogue>
}
 8011222:	b003      	add	sp, #12
 8011224:	f85d fb04 	ldr.w	pc, [sp], #4
 8011228:	40026000 	.word	0x40026000
 801122c:	200010b4 	.word	0x200010b4

08011230 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8011230:	b500      	push	{lr}
 8011232:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8011234:	4b0c      	ldr	r3, [pc, #48]	; (8011268 <Vector74+0x38>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	0c1b      	lsrs	r3, r3, #16
 801123a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 801123e:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 16U;
 8011240:	4a09      	ldr	r2, [pc, #36]	; (8011268 <Vector74+0x38>)
 8011242:	9b01      	ldr	r3, [sp, #4]
 8011244:	041b      	lsls	r3, r3, #16
 8011246:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[2].dma_func)
 8011248:	4b08      	ldr	r3, [pc, #32]	; (801126c <Vector74+0x3c>)
 801124a:	691b      	ldr	r3, [r3, #16]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d006      	beq.n	801125e <Vector74+0x2e>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8011250:	4b06      	ldr	r3, [pc, #24]	; (801126c <Vector74+0x3c>)
 8011252:	691b      	ldr	r3, [r3, #16]
 8011254:	4a05      	ldr	r2, [pc, #20]	; (801126c <Vector74+0x3c>)
 8011256:	6952      	ldr	r2, [r2, #20]
 8011258:	4610      	mov	r0, r2
 801125a:	9901      	ldr	r1, [sp, #4]
 801125c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801125e:	f7fd ffe7 	bl	800f230 <_port_irq_epilogue>
}
 8011262:	b003      	add	sp, #12
 8011264:	f85d fb04 	ldr.w	pc, [sp], #4
 8011268:	40026000 	.word	0x40026000
 801126c:	200010b4 	.word	0x200010b4

08011270 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8011270:	b500      	push	{lr}
 8011272:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8011274:	4b0c      	ldr	r3, [pc, #48]	; (80112a8 <Vector78+0x38>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	0d9b      	lsrs	r3, r3, #22
 801127a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 801127e:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 22U;
 8011280:	4a09      	ldr	r2, [pc, #36]	; (80112a8 <Vector78+0x38>)
 8011282:	9b01      	ldr	r3, [sp, #4]
 8011284:	059b      	lsls	r3, r3, #22
 8011286:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[3].dma_func)
 8011288:	4b08      	ldr	r3, [pc, #32]	; (80112ac <Vector78+0x3c>)
 801128a:	699b      	ldr	r3, [r3, #24]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d006      	beq.n	801129e <Vector78+0x2e>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8011290:	4b06      	ldr	r3, [pc, #24]	; (80112ac <Vector78+0x3c>)
 8011292:	699b      	ldr	r3, [r3, #24]
 8011294:	4a05      	ldr	r2, [pc, #20]	; (80112ac <Vector78+0x3c>)
 8011296:	69d2      	ldr	r2, [r2, #28]
 8011298:	4610      	mov	r0, r2
 801129a:	9901      	ldr	r1, [sp, #4]
 801129c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801129e:	f7fd ffc7 	bl	800f230 <_port_irq_epilogue>
}
 80112a2:	b003      	add	sp, #12
 80112a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80112a8:	40026000 	.word	0x40026000
 80112ac:	200010b4 	.word	0x200010b4

080112b0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80112b0:	b500      	push	{lr}
 80112b2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80112b4:	4b0b      	ldr	r3, [pc, #44]	; (80112e4 <Vector7C+0x34>)
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80112bc:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 0U;
 80112be:	4a09      	ldr	r2, [pc, #36]	; (80112e4 <Vector7C+0x34>)
 80112c0:	9b01      	ldr	r3, [sp, #4]
 80112c2:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[4].dma_func)
 80112c4:	4b08      	ldr	r3, [pc, #32]	; (80112e8 <Vector7C+0x38>)
 80112c6:	6a1b      	ldr	r3, [r3, #32]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d006      	beq.n	80112da <Vector7C+0x2a>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80112cc:	4b06      	ldr	r3, [pc, #24]	; (80112e8 <Vector7C+0x38>)
 80112ce:	6a1b      	ldr	r3, [r3, #32]
 80112d0:	4a05      	ldr	r2, [pc, #20]	; (80112e8 <Vector7C+0x38>)
 80112d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80112d4:	4610      	mov	r0, r2
 80112d6:	9901      	ldr	r1, [sp, #4]
 80112d8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80112da:	f7fd ffa9 	bl	800f230 <_port_irq_epilogue>
}
 80112de:	b003      	add	sp, #12
 80112e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80112e4:	40026000 	.word	0x40026000
 80112e8:	200010b4 	.word	0x200010b4
 80112ec:	00000000 	.word	0x00000000

080112f0 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80112f0:	b500      	push	{lr}
 80112f2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80112f4:	4b0c      	ldr	r3, [pc, #48]	; (8011328 <Vector80+0x38>)
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	099b      	lsrs	r3, r3, #6
 80112fa:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80112fe:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 6U;
 8011300:	4a09      	ldr	r2, [pc, #36]	; (8011328 <Vector80+0x38>)
 8011302:	9b01      	ldr	r3, [sp, #4]
 8011304:	019b      	lsls	r3, r3, #6
 8011306:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[5].dma_func)
 8011308:	4b08      	ldr	r3, [pc, #32]	; (801132c <Vector80+0x3c>)
 801130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801130c:	2b00      	cmp	r3, #0
 801130e:	d006      	beq.n	801131e <Vector80+0x2e>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8011310:	4b06      	ldr	r3, [pc, #24]	; (801132c <Vector80+0x3c>)
 8011312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011314:	4a05      	ldr	r2, [pc, #20]	; (801132c <Vector80+0x3c>)
 8011316:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011318:	4610      	mov	r0, r2
 801131a:	9901      	ldr	r1, [sp, #4]
 801131c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801131e:	f7fd ff87 	bl	800f230 <_port_irq_epilogue>
}
 8011322:	b003      	add	sp, #12
 8011324:	f85d fb04 	ldr.w	pc, [sp], #4
 8011328:	40026000 	.word	0x40026000
 801132c:	200010b4 	.word	0x200010b4

08011330 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8011330:	b500      	push	{lr}
 8011332:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8011334:	4b0c      	ldr	r3, [pc, #48]	; (8011368 <Vector84+0x38>)
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	0c1b      	lsrs	r3, r3, #16
 801133a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 801133e:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 16U;
 8011340:	4a09      	ldr	r2, [pc, #36]	; (8011368 <Vector84+0x38>)
 8011342:	9b01      	ldr	r3, [sp, #4]
 8011344:	041b      	lsls	r3, r3, #16
 8011346:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[6].dma_func)
 8011348:	4b08      	ldr	r3, [pc, #32]	; (801136c <Vector84+0x3c>)
 801134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801134c:	2b00      	cmp	r3, #0
 801134e:	d006      	beq.n	801135e <Vector84+0x2e>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8011350:	4b06      	ldr	r3, [pc, #24]	; (801136c <Vector84+0x3c>)
 8011352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011354:	4a05      	ldr	r2, [pc, #20]	; (801136c <Vector84+0x3c>)
 8011356:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011358:	4610      	mov	r0, r2
 801135a:	9901      	ldr	r1, [sp, #4]
 801135c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801135e:	f7fd ff67 	bl	800f230 <_port_irq_epilogue>
}
 8011362:	b003      	add	sp, #12
 8011364:	f85d fb04 	ldr.w	pc, [sp], #4
 8011368:	40026000 	.word	0x40026000
 801136c:	200010b4 	.word	0x200010b4

08011370 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8011370:	b500      	push	{lr}
 8011372:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8011374:	4b0c      	ldr	r3, [pc, #48]	; (80113a8 <VectorFC+0x38>)
 8011376:	685b      	ldr	r3, [r3, #4]
 8011378:	0d9b      	lsrs	r3, r3, #22
 801137a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 801137e:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 22U;
 8011380:	4a09      	ldr	r2, [pc, #36]	; (80113a8 <VectorFC+0x38>)
 8011382:	9b01      	ldr	r3, [sp, #4]
 8011384:	059b      	lsls	r3, r3, #22
 8011386:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[7].dma_func)
 8011388:	4b08      	ldr	r3, [pc, #32]	; (80113ac <VectorFC+0x3c>)
 801138a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801138c:	2b00      	cmp	r3, #0
 801138e:	d006      	beq.n	801139e <VectorFC+0x2e>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8011390:	4b06      	ldr	r3, [pc, #24]	; (80113ac <VectorFC+0x3c>)
 8011392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011394:	4a05      	ldr	r2, [pc, #20]	; (80113ac <VectorFC+0x3c>)
 8011396:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011398:	4610      	mov	r0, r2
 801139a:	9901      	ldr	r1, [sp, #4]
 801139c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801139e:	f7fd ff47 	bl	800f230 <_port_irq_epilogue>
}
 80113a2:	b003      	add	sp, #12
 80113a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80113a8:	40026000 	.word	0x40026000
 80113ac:	200010b4 	.word	0x200010b4

080113b0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80113b0:	b500      	push	{lr}
 80113b2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80113b4:	4b0b      	ldr	r3, [pc, #44]	; (80113e4 <Vector120+0x34>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80113bc:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 0U;
 80113be:	4a09      	ldr	r2, [pc, #36]	; (80113e4 <Vector120+0x34>)
 80113c0:	9b01      	ldr	r3, [sp, #4]
 80113c2:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[8].dma_func)
 80113c4:	4b08      	ldr	r3, [pc, #32]	; (80113e8 <Vector120+0x38>)
 80113c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d006      	beq.n	80113da <Vector120+0x2a>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80113cc:	4b06      	ldr	r3, [pc, #24]	; (80113e8 <Vector120+0x38>)
 80113ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113d0:	4a05      	ldr	r2, [pc, #20]	; (80113e8 <Vector120+0x38>)
 80113d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80113d4:	4610      	mov	r0, r2
 80113d6:	9901      	ldr	r1, [sp, #4]
 80113d8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80113da:	f7fd ff29 	bl	800f230 <_port_irq_epilogue>
}
 80113de:	b003      	add	sp, #12
 80113e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80113e4:	40026400 	.word	0x40026400
 80113e8:	200010b4 	.word	0x200010b4
 80113ec:	00000000 	.word	0x00000000

080113f0 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80113f0:	b500      	push	{lr}
 80113f2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80113f4:	4b0c      	ldr	r3, [pc, #48]	; (8011428 <Vector124+0x38>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	099b      	lsrs	r3, r3, #6
 80113fa:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80113fe:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 6U;
 8011400:	4a09      	ldr	r2, [pc, #36]	; (8011428 <Vector124+0x38>)
 8011402:	9b01      	ldr	r3, [sp, #4]
 8011404:	019b      	lsls	r3, r3, #6
 8011406:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[9].dma_func)
 8011408:	4b08      	ldr	r3, [pc, #32]	; (801142c <Vector124+0x3c>)
 801140a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801140c:	2b00      	cmp	r3, #0
 801140e:	d006      	beq.n	801141e <Vector124+0x2e>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8011410:	4b06      	ldr	r3, [pc, #24]	; (801142c <Vector124+0x3c>)
 8011412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011414:	4a05      	ldr	r2, [pc, #20]	; (801142c <Vector124+0x3c>)
 8011416:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8011418:	4610      	mov	r0, r2
 801141a:	9901      	ldr	r1, [sp, #4]
 801141c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801141e:	f7fd ff07 	bl	800f230 <_port_irq_epilogue>
}
 8011422:	b003      	add	sp, #12
 8011424:	f85d fb04 	ldr.w	pc, [sp], #4
 8011428:	40026400 	.word	0x40026400
 801142c:	200010b4 	.word	0x200010b4

08011430 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8011430:	b500      	push	{lr}
 8011432:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8011434:	4b0c      	ldr	r3, [pc, #48]	; (8011468 <Vector128+0x38>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	0c1b      	lsrs	r3, r3, #16
 801143a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 801143e:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 16U;
 8011440:	4a09      	ldr	r2, [pc, #36]	; (8011468 <Vector128+0x38>)
 8011442:	9b01      	ldr	r3, [sp, #4]
 8011444:	041b      	lsls	r3, r3, #16
 8011446:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[10].dma_func)
 8011448:	4b08      	ldr	r3, [pc, #32]	; (801146c <Vector128+0x3c>)
 801144a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801144c:	2b00      	cmp	r3, #0
 801144e:	d006      	beq.n	801145e <Vector128+0x2e>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8011450:	4b06      	ldr	r3, [pc, #24]	; (801146c <Vector128+0x3c>)
 8011452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011454:	4a05      	ldr	r2, [pc, #20]	; (801146c <Vector128+0x3c>)
 8011456:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011458:	4610      	mov	r0, r2
 801145a:	9901      	ldr	r1, [sp, #4]
 801145c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801145e:	f7fd fee7 	bl	800f230 <_port_irq_epilogue>
}
 8011462:	b003      	add	sp, #12
 8011464:	f85d fb04 	ldr.w	pc, [sp], #4
 8011468:	40026400 	.word	0x40026400
 801146c:	200010b4 	.word	0x200010b4

08011470 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8011470:	b500      	push	{lr}
 8011472:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8011474:	4b0c      	ldr	r3, [pc, #48]	; (80114a8 <Vector12C+0x38>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	0d9b      	lsrs	r3, r3, #22
 801147a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 801147e:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 22U;
 8011480:	4a09      	ldr	r2, [pc, #36]	; (80114a8 <Vector12C+0x38>)
 8011482:	9b01      	ldr	r3, [sp, #4]
 8011484:	059b      	lsls	r3, r3, #22
 8011486:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[11].dma_func)
 8011488:	4b08      	ldr	r3, [pc, #32]	; (80114ac <Vector12C+0x3c>)
 801148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801148c:	2b00      	cmp	r3, #0
 801148e:	d006      	beq.n	801149e <Vector12C+0x2e>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8011490:	4b06      	ldr	r3, [pc, #24]	; (80114ac <Vector12C+0x3c>)
 8011492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011494:	4a05      	ldr	r2, [pc, #20]	; (80114ac <Vector12C+0x3c>)
 8011496:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8011498:	4610      	mov	r0, r2
 801149a:	9901      	ldr	r1, [sp, #4]
 801149c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801149e:	f7fd fec7 	bl	800f230 <_port_irq_epilogue>
}
 80114a2:	b003      	add	sp, #12
 80114a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80114a8:	40026400 	.word	0x40026400
 80114ac:	200010b4 	.word	0x200010b4

080114b0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80114b0:	b500      	push	{lr}
 80114b2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80114b4:	4b0b      	ldr	r3, [pc, #44]	; (80114e4 <Vector130+0x34>)
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80114bc:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 0U;
 80114be:	4a09      	ldr	r2, [pc, #36]	; (80114e4 <Vector130+0x34>)
 80114c0:	9b01      	ldr	r3, [sp, #4]
 80114c2:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[12].dma_func)
 80114c4:	4b08      	ldr	r3, [pc, #32]	; (80114e8 <Vector130+0x38>)
 80114c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d006      	beq.n	80114da <Vector130+0x2a>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 80114cc:	4b06      	ldr	r3, [pc, #24]	; (80114e8 <Vector130+0x38>)
 80114ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114d0:	4a05      	ldr	r2, [pc, #20]	; (80114e8 <Vector130+0x38>)
 80114d2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80114d4:	4610      	mov	r0, r2
 80114d6:	9901      	ldr	r1, [sp, #4]
 80114d8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80114da:	f7fd fea9 	bl	800f230 <_port_irq_epilogue>
}
 80114de:	b003      	add	sp, #12
 80114e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80114e4:	40026400 	.word	0x40026400
 80114e8:	200010b4 	.word	0x200010b4
 80114ec:	00000000 	.word	0x00000000

080114f0 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80114f0:	b500      	push	{lr}
 80114f2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80114f4:	4b0c      	ldr	r3, [pc, #48]	; (8011528 <Vector150+0x38>)
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	099b      	lsrs	r3, r3, #6
 80114fa:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80114fe:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 6U;
 8011500:	4a09      	ldr	r2, [pc, #36]	; (8011528 <Vector150+0x38>)
 8011502:	9b01      	ldr	r3, [sp, #4]
 8011504:	019b      	lsls	r3, r3, #6
 8011506:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[13].dma_func)
 8011508:	4b08      	ldr	r3, [pc, #32]	; (801152c <Vector150+0x3c>)
 801150a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801150c:	2b00      	cmp	r3, #0
 801150e:	d006      	beq.n	801151e <Vector150+0x2e>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8011510:	4b06      	ldr	r3, [pc, #24]	; (801152c <Vector150+0x3c>)
 8011512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011514:	4a05      	ldr	r2, [pc, #20]	; (801152c <Vector150+0x3c>)
 8011516:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011518:	4610      	mov	r0, r2
 801151a:	9901      	ldr	r1, [sp, #4]
 801151c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801151e:	f7fd fe87 	bl	800f230 <_port_irq_epilogue>
}
 8011522:	b003      	add	sp, #12
 8011524:	f85d fb04 	ldr.w	pc, [sp], #4
 8011528:	40026400 	.word	0x40026400
 801152c:	200010b4 	.word	0x200010b4

08011530 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8011530:	b500      	push	{lr}
 8011532:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8011534:	4b0c      	ldr	r3, [pc, #48]	; (8011568 <Vector154+0x38>)
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	0c1b      	lsrs	r3, r3, #16
 801153a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 801153e:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 16U;
 8011540:	4a09      	ldr	r2, [pc, #36]	; (8011568 <Vector154+0x38>)
 8011542:	9b01      	ldr	r3, [sp, #4]
 8011544:	041b      	lsls	r3, r3, #16
 8011546:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[14].dma_func)
 8011548:	4b08      	ldr	r3, [pc, #32]	; (801156c <Vector154+0x3c>)
 801154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801154c:	2b00      	cmp	r3, #0
 801154e:	d006      	beq.n	801155e <Vector154+0x2e>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8011550:	4b06      	ldr	r3, [pc, #24]	; (801156c <Vector154+0x3c>)
 8011552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011554:	4a05      	ldr	r2, [pc, #20]	; (801156c <Vector154+0x3c>)
 8011556:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8011558:	4610      	mov	r0, r2
 801155a:	9901      	ldr	r1, [sp, #4]
 801155c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801155e:	f7fd fe67 	bl	800f230 <_port_irq_epilogue>
}
 8011562:	b003      	add	sp, #12
 8011564:	f85d fb04 	ldr.w	pc, [sp], #4
 8011568:	40026400 	.word	0x40026400
 801156c:	200010b4 	.word	0x200010b4

08011570 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8011570:	b500      	push	{lr}
 8011572:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8011574:	4b0c      	ldr	r3, [pc, #48]	; (80115a8 <Vector158+0x38>)
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	0d9b      	lsrs	r3, r3, #22
 801157a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 801157e:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 22U;
 8011580:	4a09      	ldr	r2, [pc, #36]	; (80115a8 <Vector158+0x38>)
 8011582:	9b01      	ldr	r3, [sp, #4]
 8011584:	059b      	lsls	r3, r3, #22
 8011586:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[15].dma_func)
 8011588:	4b08      	ldr	r3, [pc, #32]	; (80115ac <Vector158+0x3c>)
 801158a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801158c:	2b00      	cmp	r3, #0
 801158e:	d006      	beq.n	801159e <Vector158+0x2e>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8011590:	4b06      	ldr	r3, [pc, #24]	; (80115ac <Vector158+0x3c>)
 8011592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011594:	4a05      	ldr	r2, [pc, #20]	; (80115ac <Vector158+0x3c>)
 8011596:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8011598:	4610      	mov	r0, r2
 801159a:	9901      	ldr	r1, [sp, #4]
 801159c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 801159e:	f7fd fe47 	bl	800f230 <_port_irq_epilogue>
}
 80115a2:	b003      	add	sp, #12
 80115a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80115a8:	40026400 	.word	0x40026400
 80115ac:	200010b4 	.word	0x200010b4

080115b0 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 80115b0:	b082      	sub	sp, #8
  unsigned i;

  dma_streams_mask = 0U;
 80115b2:	4b16      	ldr	r3, [pc, #88]	; (801160c <dmaInit+0x5c>)
 80115b4:	2200      	movs	r2, #0
 80115b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80115b8:	2300      	movs	r3, #0
 80115ba:	9301      	str	r3, [sp, #4]
 80115bc:	e011      	b.n	80115e2 <dmaInit+0x32>
    _stm32_dma_streams[i].stream->CR = 0U;
 80115be:	4914      	ldr	r1, [pc, #80]	; (8011610 <dmaInit+0x60>)
 80115c0:	9a01      	ldr	r2, [sp, #4]
 80115c2:	4613      	mov	r3, r2
 80115c4:	005b      	lsls	r3, r3, #1
 80115c6:	4413      	add	r3, r2
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	440b      	add	r3, r1
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2200      	movs	r2, #0
 80115d0:	601a      	str	r2, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 80115d2:	4a10      	ldr	r2, [pc, #64]	; (8011614 <dmaInit+0x64>)
 80115d4:	9b01      	ldr	r3, [sp, #4]
 80115d6:	2100      	movs	r1, #0
 80115d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80115dc:	9b01      	ldr	r3, [sp, #4]
 80115de:	3301      	adds	r3, #1
 80115e0:	9301      	str	r3, [sp, #4]
 80115e2:	9b01      	ldr	r3, [sp, #4]
 80115e4:	2b0f      	cmp	r3, #15
 80115e6:	d9ea      	bls.n	80115be <dmaInit+0xe>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 80115e8:	4b0b      	ldr	r3, [pc, #44]	; (8011618 <dmaInit+0x68>)
 80115ea:	f04f 32ff 	mov.w	r2, #4294967295
 80115ee:	609a      	str	r2, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 80115f0:	4b09      	ldr	r3, [pc, #36]	; (8011618 <dmaInit+0x68>)
 80115f2:	f04f 32ff 	mov.w	r2, #4294967295
 80115f6:	60da      	str	r2, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 80115f8:	4b08      	ldr	r3, [pc, #32]	; (801161c <dmaInit+0x6c>)
 80115fa:	f04f 32ff 	mov.w	r2, #4294967295
 80115fe:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8011600:	4b06      	ldr	r3, [pc, #24]	; (801161c <dmaInit+0x6c>)
 8011602:	f04f 32ff 	mov.w	r2, #4294967295
 8011606:	60da      	str	r2, [r3, #12]
}
 8011608:	b002      	add	sp, #8
 801160a:	4770      	bx	lr
 801160c:	200010b0 	.word	0x200010b0
 8011610:	0801d72c 	.word	0x0801d72c
 8011614:	200010b4 	.word	0x200010b4
 8011618:	40026000 	.word	0x40026000
 801161c:	40026400 	.word	0x40026400

08011620 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8011620:	b082      	sub	sp, #8
 8011622:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 8011624:	9b01      	ldr	r3, [sp, #4]
 8011626:	9a01      	ldr	r2, [sp, #4]
 8011628:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 801162a:	9b01      	ldr	r3, [sp, #4]
 801162c:	9a01      	ldr	r2, [sp, #4]
 801162e:	605a      	str	r2, [r3, #4]
}
 8011630:	b002      	add	sp, #8
 8011632:	4770      	bx	lr
	...

08011640 <chThdQueueObjectInit>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8011640:	b500      	push	{lr}
 8011642:	b083      	sub	sp, #12
 8011644:	9001      	str	r0, [sp, #4]

  queue_init(tqp);
 8011646:	9801      	ldr	r0, [sp, #4]
 8011648:	f7ff ffea 	bl	8011620 <queue_init>
}
 801164c:	b003      	add	sp, #12
 801164e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011652:	bf00      	nop
	...

08011660 <osalThreadQueueObjectInit>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8011660:	b500      	push	{lr}
 8011662:	b083      	sub	sp, #12
 8011664:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 8011666:	9801      	ldr	r0, [sp, #4]
 8011668:	f7ff ffea 	bl	8011640 <chThdQueueObjectInit>
}
 801166c:	b003      	add	sp, #12
 801166e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011672:	bf00      	nop
	...

08011680 <_pal_lld_init>:
/**
 * @brief   PAL driver initialization.
 *
 * @notapi
 */
void _pal_lld_init(void) {
 8011680:	b500      	push	{lr}
 8011682:	b083      	sub	sp, #12

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
 8011684:	2300      	movs	r3, #0
 8011686:	9301      	str	r3, [sp, #4]
 8011688:	e017      	b.n	80116ba <_pal_lld_init+0x3a>
    _pal_init_event(i);
 801168a:	9b01      	ldr	r3, [sp, #4]
 801168c:	011b      	lsls	r3, r3, #4
 801168e:	4a0e      	ldr	r2, [pc, #56]	; (80116c8 <_pal_lld_init+0x48>)
 8011690:	4413      	add	r3, r2
 8011692:	4618      	mov	r0, r3
 8011694:	f7ff ffe4 	bl	8011660 <osalThreadQueueObjectInit>
 8011698:	4a0b      	ldr	r2, [pc, #44]	; (80116c8 <_pal_lld_init+0x48>)
 801169a:	9b01      	ldr	r3, [sp, #4]
 801169c:	011b      	lsls	r3, r3, #4
 801169e:	4413      	add	r3, r2
 80116a0:	3308      	adds	r3, #8
 80116a2:	2200      	movs	r2, #0
 80116a4:	601a      	str	r2, [r3, #0]
 80116a6:	4a08      	ldr	r2, [pc, #32]	; (80116c8 <_pal_lld_init+0x48>)
 80116a8:	9b01      	ldr	r3, [sp, #4]
 80116aa:	011b      	lsls	r3, r3, #4
 80116ac:	4413      	add	r3, r2
 80116ae:	3308      	adds	r3, #8
 80116b0:	2200      	movs	r2, #0
 80116b2:	605a      	str	r2, [r3, #4]
void _pal_lld_init(void) {

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
 80116b4:	9b01      	ldr	r3, [sp, #4]
 80116b6:	3301      	adds	r3, #1
 80116b8:	9301      	str	r3, [sp, #4]
 80116ba:	9b01      	ldr	r3, [sp, #4]
 80116bc:	2b0f      	cmp	r3, #15
 80116be:	d9e4      	bls.n	801168a <_pal_lld_init+0xa>
    _pal_init_event(i);
  }
#endif
}
 80116c0:	b003      	add	sp, #12
 80116c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80116c6:	bf00      	nop
 80116c8:	20001134 	.word	0x20001134
 80116cc:	00000000 	.word	0x00000000

080116d0 <port_lock.lto_priv.792>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80116d0:	b082      	sub	sp, #8
 80116d2:	2320      	movs	r3, #32
 80116d4:	9301      	str	r3, [sp, #4]
 80116d6:	9b01      	ldr	r3, [sp, #4]
 80116d8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80116dc:	b002      	add	sp, #8
 80116de:	4770      	bx	lr

080116e0 <port_unlock.lto_priv.790>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80116e0:	b082      	sub	sp, #8
 80116e2:	2300      	movs	r3, #0
 80116e4:	9301      	str	r3, [sp, #4]
 80116e6:	9b01      	ldr	r3, [sp, #4]
 80116e8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80116ec:	b002      	add	sp, #8
 80116ee:	4770      	bx	lr

080116f0 <port_lock_from_isr.lto_priv.788>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80116f0:	b508      	push	{r3, lr}

  port_lock();
 80116f2:	f7ff ffed 	bl	80116d0 <port_lock.lto_priv.792>
}
 80116f6:	bd08      	pop	{r3, pc}
	...

08011700 <port_unlock_from_isr.lto_priv.786>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8011700:	b508      	push	{r3, lr}

  port_unlock();
 8011702:	f7ff ffed 	bl	80116e0 <port_unlock.lto_priv.790>
}
 8011706:	bd08      	pop	{r3, pc}
	...

08011710 <chSysLockFromISR.lto_priv.784>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8011710:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8011712:	f7ff ffed 	bl	80116f0 <port_lock_from_isr.lto_priv.788>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8011716:	bd08      	pop	{r3, pc}
	...

08011720 <chSysUnlockFromISR.lto_priv.782>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8011720:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8011722:	f7ff ffed 	bl	8011700 <port_unlock_from_isr.lto_priv.786>
}
 8011726:	bd08      	pop	{r3, pc}
	...

08011730 <osalSysLockFromISR.lto_priv.780>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8011730:	b508      	push	{r3, lr}

  chSysLockFromISR();
 8011732:	f7ff ffed 	bl	8011710 <chSysLockFromISR.lto_priv.784>
}
 8011736:	bd08      	pop	{r3, pc}
	...

08011740 <osalSysUnlockFromISR.lto_priv.777>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8011740:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 8011742:	f7ff ffed 	bl	8011720 <chSysUnlockFromISR.lto_priv.782>
}
 8011746:	bd08      	pop	{r3, pc}
	...

08011750 <osalSysPolledDelayX>:
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
#if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 8011750:	b500      	push	{lr}
 8011752:	b083      	sub	sp, #12
 8011754:	9001      	str	r0, [sp, #4]

  chSysPolledDelayX(cycles);
 8011756:	9801      	ldr	r0, [sp, #4]
 8011758:	f7fe fd8a 	bl	8010270 <chSysPolledDelayX>
}
 801175c:	b003      	add	sp, #12
 801175e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011762:	bf00      	nop
	...

08011770 <otg_disable_ep>:
  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
    ;
}

static void otg_disable_ep(USBDriver *usbp) {
 8011770:	b084      	sub	sp, #16
 8011772:	9001      	str	r0, [sp, #4]
  stm32_otg_t *otgp = usbp->otg;
 8011774:	9b01      	ldr	r3, [sp, #4]
 8011776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011778:	9302      	str	r3, [sp, #8]
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 801177a:	2300      	movs	r3, #0
 801177c:	9303      	str	r3, [sp, #12]
 801177e:	e032      	b.n	80117e6 <otg_disable_ep+0x76>
    otgp->ie[i].DIEPCTL = 0;
 8011780:	9a02      	ldr	r2, [sp, #8]
 8011782:	9b03      	ldr	r3, [sp, #12]
 8011784:	3348      	adds	r3, #72	; 0x48
 8011786:	015b      	lsls	r3, r3, #5
 8011788:	4413      	add	r3, r2
 801178a:	2200      	movs	r2, #0
 801178c:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPTSIZ = 0;
 801178e:	9a02      	ldr	r2, [sp, #8]
 8011790:	9b03      	ldr	r3, [sp, #12]
 8011792:	015b      	lsls	r3, r3, #5
 8011794:	4413      	add	r3, r2
 8011796:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 801179a:	2200      	movs	r2, #0
 801179c:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 801179e:	9a02      	ldr	r2, [sp, #8]
 80117a0:	9b03      	ldr	r3, [sp, #12]
 80117a2:	015b      	lsls	r3, r3, #5
 80117a4:	4413      	add	r3, r2
 80117a6:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80117aa:	f04f 32ff 	mov.w	r2, #4294967295
 80117ae:	601a      	str	r2, [r3, #0]

    otgp->oe[i].DOEPCTL = 0;
 80117b0:	9a02      	ldr	r2, [sp, #8]
 80117b2:	9b03      	ldr	r3, [sp, #12]
 80117b4:	3358      	adds	r3, #88	; 0x58
 80117b6:	015b      	lsls	r3, r3, #5
 80117b8:	4413      	add	r3, r2
 80117ba:	2200      	movs	r2, #0
 80117bc:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPTSIZ = 0;
 80117be:	9a02      	ldr	r2, [sp, #8]
 80117c0:	9b03      	ldr	r3, [sp, #12]
 80117c2:	015b      	lsls	r3, r3, #5
 80117c4:	4413      	add	r3, r2
 80117c6:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80117ca:	2200      	movs	r2, #0
 80117cc:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80117ce:	9a02      	ldr	r2, [sp, #8]
 80117d0:	9b03      	ldr	r3, [sp, #12]
 80117d2:	015b      	lsls	r3, r3, #5
 80117d4:	4413      	add	r3, r2
 80117d6:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 80117da:	f04f 32ff 	mov.w	r2, #4294967295
 80117de:	601a      	str	r2, [r3, #0]

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80117e0:	9b03      	ldr	r3, [sp, #12]
 80117e2:	3301      	adds	r3, #1
 80117e4:	9303      	str	r3, [sp, #12]
 80117e6:	9b01      	ldr	r3, [sp, #4]
 80117e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117ea:	689a      	ldr	r2, [r3, #8]
 80117ec:	9b03      	ldr	r3, [sp, #12]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d2c6      	bcs.n	8011780 <otg_disable_ep+0x10>

    otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80117f2:	9b02      	ldr	r3, [sp, #8]
 80117f4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80117f8:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
}
 80117fc:	b004      	add	sp, #16
 80117fe:	4770      	bx	lr

08011800 <otg_rxfifo_flush>:

static void otg_rxfifo_flush(USBDriver *usbp) {
 8011800:	b500      	push	{lr}
 8011802:	b085      	sub	sp, #20
 8011804:	9001      	str	r0, [sp, #4]
  stm32_otg_t *otgp = usbp->otg;
 8011806:	9b01      	ldr	r3, [sp, #4]
 8011808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801180a:	9303      	str	r3, [sp, #12]

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 801180c:	9b03      	ldr	r3, [sp, #12]
 801180e:	2210      	movs	r2, #16
 8011810:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8011812:	9b03      	ldr	r3, [sp, #12]
 8011814:	691b      	ldr	r3, [r3, #16]
 8011816:	f003 0310 	and.w	r3, r3, #16
 801181a:	2b00      	cmp	r3, #0
 801181c:	d1f9      	bne.n	8011812 <otg_rxfifo_flush+0x12>
    ;
  /* Wait for 3 PHY Clocks.*/
  osalSysPolledDelayX(18);
 801181e:	2012      	movs	r0, #18
 8011820:	f7ff ff96 	bl	8011750 <osalSysPolledDelayX>
}
 8011824:	b005      	add	sp, #20
 8011826:	f85d fb04 	ldr.w	pc, [sp], #4
 801182a:	bf00      	nop
 801182c:	0000      	movs	r0, r0
	...

08011830 <otg_txfifo_flush>:

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
 8011830:	b500      	push	{lr}
 8011832:	b085      	sub	sp, #20
 8011834:	9001      	str	r0, [sp, #4]
 8011836:	9100      	str	r1, [sp, #0]
  stm32_otg_t *otgp = usbp->otg;
 8011838:	9b01      	ldr	r3, [sp, #4]
 801183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801183c:	9303      	str	r3, [sp, #12]

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 801183e:	9b00      	ldr	r3, [sp, #0]
 8011840:	019b      	lsls	r3, r3, #6
 8011842:	f043 0220 	orr.w	r2, r3, #32
 8011846:	9b03      	ldr	r3, [sp, #12]
 8011848:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 801184a:	9b03      	ldr	r3, [sp, #12]
 801184c:	691b      	ldr	r3, [r3, #16]
 801184e:	f003 0320 	and.w	r3, r3, #32
 8011852:	2b00      	cmp	r3, #0
 8011854:	d1f9      	bne.n	801184a <otg_txfifo_flush+0x1a>
    ;
  /* Wait for 3 PHY Clocks.*/
  osalSysPolledDelayX(18);
 8011856:	2012      	movs	r0, #18
 8011858:	f7ff ff7a 	bl	8011750 <osalSysPolledDelayX>
}
 801185c:	b005      	add	sp, #20
 801185e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011862:	bf00      	nop
	...

08011870 <otg_ram_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {
 8011870:	b082      	sub	sp, #8
 8011872:	9001      	str	r0, [sp, #4]

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8011874:	9b01      	ldr	r3, [sp, #4]
 8011876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011878:	681a      	ldr	r2, [r3, #0]
 801187a:	9b01      	ldr	r3, [sp, #4]
 801187c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801187e:	b002      	add	sp, #8
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
	...

08011890 <otg_ram_alloc>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] size      size of the packet buffer to allocate in words
 *
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
 8011890:	b084      	sub	sp, #16
 8011892:	9001      	str	r0, [sp, #4]
 8011894:	9100      	str	r1, [sp, #0]
  uint32_t next;

  next = usbp->pmnext;
 8011896:	9b01      	ldr	r3, [sp, #4]
 8011898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801189a:	9303      	str	r3, [sp, #12]
  usbp->pmnext += size;
 801189c:	9b01      	ldr	r3, [sp, #4]
 801189e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80118a0:	9b00      	ldr	r3, [sp, #0]
 80118a2:	441a      	add	r2, r3
 80118a4:	9b01      	ldr	r3, [sp, #4]
 80118a6:	65da      	str	r2, [r3, #92]	; 0x5c
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
                "OTG FIFO memory overflow");
  return next;
 80118a8:	9b03      	ldr	r3, [sp, #12]
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	b004      	add	sp, #16
 80118ae:	4770      	bx	lr

080118b0 <otg_fifo_write_from_buffer>:
 *
 * @notapi
 */
static void otg_fifo_write_from_buffer(volatile uint32_t *fifop,
                                       const uint8_t *buf,
                                       size_t n) {
 80118b0:	b084      	sub	sp, #16
 80118b2:	9003      	str	r0, [sp, #12]
 80118b4:	9102      	str	r1, [sp, #8]
 80118b6:	9201      	str	r2, [sp, #4]

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 80118b8:	9b02      	ldr	r3, [sp, #8]
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	9b03      	ldr	r3, [sp, #12]
 80118be:	601a      	str	r2, [r3, #0]
    if (n <= 4) {
 80118c0:	9b01      	ldr	r3, [sp, #4]
 80118c2:	2b04      	cmp	r3, #4
 80118c4:	d906      	bls.n	80118d4 <otg_fifo_write_from_buffer+0x24>
      break;
    }
    n -= 4;
 80118c6:	9b01      	ldr	r3, [sp, #4]
 80118c8:	3b04      	subs	r3, #4
 80118ca:	9301      	str	r3, [sp, #4]
    buf += 4;
 80118cc:	9b02      	ldr	r3, [sp, #8]
 80118ce:	3304      	adds	r3, #4
 80118d0:	9302      	str	r3, [sp, #8]
 80118d2:	e7f1      	b.n	80118b8 <otg_fifo_write_from_buffer+0x8>
  }
}
 80118d4:	b004      	add	sp, #16
 80118d6:	4770      	bx	lr
	...

080118e0 <otg_fifo_read_to_buffer>:
 * @notapi
 */
static void otg_fifo_read_to_buffer(volatile uint32_t *fifop,
                                    uint8_t *buf,
                                    size_t n,
                                    size_t max) {
 80118e0:	b086      	sub	sp, #24
 80118e2:	9003      	str	r0, [sp, #12]
 80118e4:	9102      	str	r1, [sp, #8]
 80118e6:	9201      	str	r2, [sp, #4]
 80118e8:	9300      	str	r3, [sp, #0]
  uint32_t w = 0;
 80118ea:	2300      	movs	r3, #0
 80118ec:	9305      	str	r3, [sp, #20]
  size_t i = 0;
 80118ee:	2300      	movs	r3, #0
 80118f0:	9304      	str	r3, [sp, #16]
 80118f2:	e017      	b.n	8011924 <otg_fifo_read_to_buffer+0x44>

  while (i < n) {
    if ((i & 3) == 0){
 80118f4:	9b04      	ldr	r3, [sp, #16]
 80118f6:	f003 0303 	and.w	r3, r3, #3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d102      	bne.n	8011904 <otg_fifo_read_to_buffer+0x24>
      w = *fifop;
 80118fe:	9b03      	ldr	r3, [sp, #12]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	9305      	str	r3, [sp, #20]
    }
    if (i < max) {
 8011904:	9a04      	ldr	r2, [sp, #16]
 8011906:	9b00      	ldr	r3, [sp, #0]
 8011908:	429a      	cmp	r2, r3
 801190a:	d208      	bcs.n	801191e <otg_fifo_read_to_buffer+0x3e>
      *buf++ = (uint8_t)w;
 801190c:	9b02      	ldr	r3, [sp, #8]
 801190e:	1c5a      	adds	r2, r3, #1
 8011910:	9202      	str	r2, [sp, #8]
 8011912:	9a05      	ldr	r2, [sp, #20]
 8011914:	b2d2      	uxtb	r2, r2
 8011916:	701a      	strb	r2, [r3, #0]
      w >>= 8;
 8011918:	9b05      	ldr	r3, [sp, #20]
 801191a:	0a1b      	lsrs	r3, r3, #8
 801191c:	9305      	str	r3, [sp, #20]
    }
    i++;
 801191e:	9b04      	ldr	r3, [sp, #16]
 8011920:	3301      	adds	r3, #1
 8011922:	9304      	str	r3, [sp, #16]
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8011924:	9a04      	ldr	r2, [sp, #16]
 8011926:	9b01      	ldr	r3, [sp, #4]
 8011928:	429a      	cmp	r2, r3
 801192a:	d3e3      	bcc.n	80118f4 <otg_fifo_read_to_buffer+0x14>
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
  }
}
 801192c:	b006      	add	sp, #24
 801192e:	4770      	bx	lr

08011930 <otg_rxfifo_handler>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
 8011930:	b510      	push	{r4, lr}
 8011932:	b086      	sub	sp, #24
 8011934:	9001      	str	r0, [sp, #4]
  uint32_t sts, cnt, ep;

  /* Popping the event word out of the RX FIFO.*/
  sts = usbp->otg->GRXSTSP;
 8011936:	9b01      	ldr	r3, [sp, #4]
 8011938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801193a:	6a1b      	ldr	r3, [r3, #32]
 801193c:	9305      	str	r3, [sp, #20]

  /* Event details.*/
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 801193e:	9a05      	ldr	r2, [sp, #20]
 8011940:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8011944:	4013      	ands	r3, r2
 8011946:	091b      	lsrs	r3, r3, #4
 8011948:	9304      	str	r3, [sp, #16]
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 801194a:	9b05      	ldr	r3, [sp, #20]
 801194c:	f003 030f 	and.w	r3, r3, #15
 8011950:	9303      	str	r3, [sp, #12]

  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8011952:	9b05      	ldr	r3, [sp, #20]
 8011954:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 8011958:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 801195c:	d066      	beq.n	8011a2c <otg_rxfifo_handler+0xfc>
 801195e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011962:	d806      	bhi.n	8011972 <otg_rxfifo_handler+0x42>
 8011964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011968:	d060      	beq.n	8011a2c <otg_rxfifo_handler+0xfc>
 801196a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801196e:	d018      	beq.n	80119a2 <otg_rxfifo_handler+0x72>
 8011970:	e05c      	b.n	8011a2c <otg_rxfifo_handler+0xfc>
 8011972:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011976:	d059      	beq.n	8011a2c <otg_rxfifo_handler+0xfc>
 8011978:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 801197c:	d156      	bne.n	8011a2c <otg_rxfifo_handler+0xfc>
  case GRXSTSP_SETUP_DATA:
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 801197e:	9b01      	ldr	r3, [sp, #4]
 8011980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011982:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 8011986:	9a01      	ldr	r2, [sp, #4]
 8011988:	9b03      	ldr	r3, [sp, #12]
 801198a:	3302      	adds	r3, #2
 801198c:	009b      	lsls	r3, r3, #2
 801198e:	4413      	add	r3, r2
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	6a1b      	ldr	r3, [r3, #32]
 8011994:	4608      	mov	r0, r1
 8011996:	4619      	mov	r1, r3
 8011998:	9a04      	ldr	r2, [sp, #16]
 801199a:	2308      	movs	r3, #8
 801199c:	f7ff ffa0 	bl	80118e0 <otg_fifo_read_to_buffer>
 80119a0:	e044      	b.n	8011a2c <otg_rxfifo_handler+0xfc>
                            cnt, 8);
    break;
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_OUT_DATA:
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 80119a2:	9b01      	ldr	r3, [sp, #4]
 80119a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119a6:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
                            usbp->epc[ep]->out_state->rxbuf,
 80119aa:	9a01      	ldr	r2, [sp, #4]
 80119ac:	9b03      	ldr	r3, [sp, #12]
 80119ae:	3302      	adds	r3, #2
 80119b0:	009b      	lsls	r3, r3, #2
 80119b2:	4413      	add	r3, r2
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	699b      	ldr	r3, [r3, #24]
                            cnt, 8);
    break;
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_OUT_DATA:
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 80119b8:	689c      	ldr	r4, [r3, #8]
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
 80119ba:	9a01      	ldr	r2, [sp, #4]
 80119bc:	9b03      	ldr	r3, [sp, #12]
 80119be:	3302      	adds	r3, #2
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	4413      	add	r3, r2
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	699b      	ldr	r3, [r3, #24]
 80119c8:	681a      	ldr	r2, [r3, #0]
                            usbp->epc[ep]->out_state->rxcnt);
 80119ca:	9901      	ldr	r1, [sp, #4]
 80119cc:	9b03      	ldr	r3, [sp, #12]
 80119ce:	3302      	adds	r3, #2
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	440b      	add	r3, r1
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	699b      	ldr	r3, [r3, #24]
 80119d8:	685b      	ldr	r3, [r3, #4]
                            cnt, 8);
    break;
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_OUT_DATA:
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	4621      	mov	r1, r4
 80119de:	9a04      	ldr	r2, [sp, #16]
 80119e0:	f7ff ff7e 	bl	80118e0 <otg_fifo_read_to_buffer>
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 80119e4:	9a01      	ldr	r2, [sp, #4]
 80119e6:	9b03      	ldr	r3, [sp, #12]
 80119e8:	3302      	adds	r3, #2
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	4413      	add	r3, r2
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	699a      	ldr	r2, [r3, #24]
 80119f2:	9901      	ldr	r1, [sp, #4]
 80119f4:	9b03      	ldr	r3, [sp, #12]
 80119f6:	3302      	adds	r3, #2
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	440b      	add	r3, r1
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	699b      	ldr	r3, [r3, #24]
 8011a00:	6899      	ldr	r1, [r3, #8]
 8011a02:	9b04      	ldr	r3, [sp, #16]
 8011a04:	440b      	add	r3, r1
 8011a06:	6093      	str	r3, [r2, #8]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8011a08:	9a01      	ldr	r2, [sp, #4]
 8011a0a:	9b03      	ldr	r3, [sp, #12]
 8011a0c:	3302      	adds	r3, #2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	4413      	add	r3, r2
 8011a12:	685b      	ldr	r3, [r3, #4]
 8011a14:	699a      	ldr	r2, [r3, #24]
 8011a16:	9901      	ldr	r1, [sp, #4]
 8011a18:	9b03      	ldr	r3, [sp, #12]
 8011a1a:	3302      	adds	r3, #2
 8011a1c:	009b      	lsls	r3, r3, #2
 8011a1e:	440b      	add	r3, r1
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	699b      	ldr	r3, [r3, #24]
 8011a24:	6859      	ldr	r1, [r3, #4]
 8011a26:	9b04      	ldr	r3, [sp, #16]
 8011a28:	440b      	add	r3, r1
 8011a2a:	6053      	str	r3, [r2, #4]
  case GRXSTSP_OUT_GLOBAL_NAK:
    break;
  default:
    break;
  }
}
 8011a2c:	b006      	add	sp, #24
 8011a2e:	bd10      	pop	{r4, pc}

08011a30 <otg_txfifo_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8011a30:	b500      	push	{lr}
 8011a32:	b085      	sub	sp, #20
 8011a34:	9001      	str	r0, [sp, #4]
 8011a36:	460b      	mov	r3, r1
 8011a38:	f88d 3003 	strb.w	r3, [sp, #3]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8011a3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011a40:	9a01      	ldr	r2, [sp, #4]
 8011a42:	3302      	adds	r3, #2
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	4413      	add	r3, r2
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	695b      	ldr	r3, [r3, #20]
 8011a4c:	685a      	ldr	r2, [r3, #4]
 8011a4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011a52:	9901      	ldr	r1, [sp, #4]
 8011a54:	3302      	adds	r3, #2
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	440b      	add	r3, r1
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	695b      	ldr	r3, [r3, #20]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d310      	bcc.n	8011a86 <otg_txfifo_handler+0x56>
#if 1
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 8011a64:	9b01      	ldr	r3, [sp, #4]
 8011a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a68:	9a01      	ldr	r2, [sp, #4]
 8011a6a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011a6c:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 8011a70:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011a74:	2001      	movs	r0, #1
 8011a76:	fa00 f202 	lsl.w	r2, r0, r2
 8011a7a:	43d2      	mvns	r2, r2
 8011a7c:	400a      	ands	r2, r1
 8011a7e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
#endif
      return true;
 8011a82:	2301      	movs	r3, #1
 8011a84:	e076      	b.n	8011b74 <otg_txfifo_handler+0x144>
    }

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8011a86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011a8a:	9a01      	ldr	r2, [sp, #4]
 8011a8c:	3302      	adds	r3, #2
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	695b      	ldr	r3, [r3, #20]
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011a9c:	9901      	ldr	r1, [sp, #4]
 8011a9e:	3302      	adds	r3, #2
 8011aa0:	009b      	lsls	r3, r3, #2
 8011aa2:	440b      	add	r3, r1
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	695b      	ldr	r3, [r3, #20]
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	1ad3      	subs	r3, r2, r3
 8011aac:	9303      	str	r3, [sp, #12]
    if (n > usbp->epc[ep]->in_maxsize)
 8011aae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011ab2:	9a01      	ldr	r2, [sp, #4]
 8011ab4:	3302      	adds	r3, #2
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	4413      	add	r3, r2
 8011aba:	685b      	ldr	r3, [r3, #4]
 8011abc:	8a1b      	ldrh	r3, [r3, #16]
 8011abe:	461a      	mov	r2, r3
 8011ac0:	9b03      	ldr	r3, [sp, #12]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d208      	bcs.n	8011ad8 <otg_txfifo_handler+0xa8>
      n = usbp->epc[ep]->in_maxsize;
 8011ac6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011aca:	9a01      	ldr	r2, [sp, #4]
 8011acc:	3302      	adds	r3, #2
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4413      	add	r3, r2
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	8a1b      	ldrh	r3, [r3, #16]
 8011ad6:	9303      	str	r3, [sp, #12]

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8011ad8:	9b01      	ldr	r3, [sp, #4]
 8011ada:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011adc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011ae0:	015b      	lsls	r3, r3, #5
 8011ae2:	4413      	add	r3, r2
 8011ae4:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	009a      	lsls	r2, r3, #2
 8011aee:	9b03      	ldr	r3, [sp, #12]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d201      	bcs.n	8011af8 <otg_txfifo_handler+0xc8>
      return false;
 8011af4:	2300      	movs	r3, #0
 8011af6:	e03d      	b.n	8011b74 <otg_txfifo_handler+0x144>

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8011af8:	9b01      	ldr	r3, [sp, #4]
 8011afa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011afc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011b00:	3301      	adds	r3, #1
 8011b02:	031b      	lsls	r3, r3, #12
 8011b04:	18d1      	adds	r1, r2, r3
                               usbp->epc[ep]->in_state->txbuf,
 8011b06:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011b0a:	9a01      	ldr	r2, [sp, #4]
 8011b0c:	3302      	adds	r3, #2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	695b      	ldr	r3, [r3, #20]
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	4608      	mov	r0, r1
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	9a03      	ldr	r2, [sp, #12]
 8011b1e:	f7ff fec7 	bl	80118b0 <otg_fifo_write_from_buffer>
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 8011b22:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011b26:	9a01      	ldr	r2, [sp, #4]
 8011b28:	3302      	adds	r3, #2
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	4413      	add	r3, r2
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	695a      	ldr	r2, [r3, #20]
 8011b32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011b36:	9901      	ldr	r1, [sp, #4]
 8011b38:	3302      	adds	r3, #2
 8011b3a:	009b      	lsls	r3, r3, #2
 8011b3c:	440b      	add	r3, r1
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	695b      	ldr	r3, [r3, #20]
 8011b42:	6899      	ldr	r1, [r3, #8]
 8011b44:	9b03      	ldr	r3, [sp, #12]
 8011b46:	440b      	add	r3, r1
 8011b48:	6093      	str	r3, [r2, #8]
    usbp->epc[ep]->in_state->txcnt += n;
 8011b4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011b4e:	9a01      	ldr	r2, [sp, #4]
 8011b50:	3302      	adds	r3, #2
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4413      	add	r3, r2
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	695a      	ldr	r2, [r3, #20]
 8011b5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011b5e:	9901      	ldr	r1, [sp, #4]
 8011b60:	3302      	adds	r3, #2
 8011b62:	009b      	lsls	r3, r3, #2
 8011b64:	440b      	add	r3, r1
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	695b      	ldr	r3, [r3, #20]
 8011b6a:	6859      	ldr	r1, [r3, #4]
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	440b      	add	r3, r1
 8011b70:	6053      	str	r3, [r2, #4]
 8011b72:	e763      	b.n	8011a3c <otg_txfifo_handler+0xc>
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
  }
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	b005      	add	sp, #20
 8011b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b7c:	0000      	movs	r0, r0
	...

08011b80 <otg_epin_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8011b80:	b500      	push	{lr}
 8011b82:	b087      	sub	sp, #28
 8011b84:	9001      	str	r0, [sp, #4]
 8011b86:	460b      	mov	r3, r1
 8011b88:	f88d 3003 	strb.w	r3, [sp, #3]
  stm32_otg_t *otgp = usbp->otg;
 8011b8c:	9b01      	ldr	r3, [sp, #4]
 8011b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b90:	9305      	str	r3, [sp, #20]
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8011b92:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011b96:	9a05      	ldr	r2, [sp, #20]
 8011b98:	015b      	lsls	r3, r3, #5
 8011b9a:	4413      	add	r3, r2
 8011b9c:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	9304      	str	r3, [sp, #16]

  otgp->ie[ep].DIEPINT = epint;
 8011ba4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011ba8:	9a05      	ldr	r2, [sp, #20]
 8011baa:	015b      	lsls	r3, r3, #5
 8011bac:	4413      	add	r3, r2
 8011bae:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8011bb2:	9a04      	ldr	r2, [sp, #16]
 8011bb4:	601a      	str	r2, [r3, #0]

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8011bb6:	9b04      	ldr	r3, [sp, #16]
 8011bb8:	f003 0301 	and.w	r3, r3, #1
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d052      	beq.n	8011c66 <otg_epin_handler+0xe6>
 8011bc0:	9b05      	ldr	r3, [sp, #20]
 8011bc2:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8011bc6:	f003 0301 	and.w	r3, r3, #1
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d04b      	beq.n	8011c66 <otg_epin_handler+0xe6>
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8011bce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011bd2:	9a01      	ldr	r2, [sp, #4]
 8011bd4:	3302      	adds	r3, #2
 8011bd6:	009b      	lsls	r3, r3, #2
 8011bd8:	4413      	add	r3, r2
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	695b      	ldr	r3, [r3, #20]
 8011bde:	9303      	str	r3, [sp, #12]

    if (isp->txsize < isp->totsize) {
 8011be0:	9b03      	ldr	r3, [sp, #12]
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	9b03      	ldr	r3, [sp, #12]
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d214      	bcs.n	8011c16 <otg_epin_handler+0x96>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 8011bec:	9b03      	ldr	r3, [sp, #12]
 8011bee:	68da      	ldr	r2, [r3, #12]
 8011bf0:	9b03      	ldr	r3, [sp, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	1ad2      	subs	r2, r2, r3
 8011bf6:	9b03      	ldr	r3, [sp, #12]
 8011bf8:	601a      	str	r2, [r3, #0]
      isp->txcnt  = 0;
 8011bfa:	9b03      	ldr	r3, [sp, #12]
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	605a      	str	r2, [r3, #4]
      osalSysLockFromISR();
 8011c00:	f7ff fd96 	bl	8011730 <osalSysLockFromISR.lto_priv.780>
      usb_lld_start_in(usbp, ep);
 8011c04:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011c08:	9801      	ldr	r0, [sp, #4]
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	f000 fc80 	bl	8012510 <usb_lld_start_in>
      osalSysUnlockFromISR();
 8011c10:	f7ff fd96 	bl	8011740 <osalSysUnlockFromISR.lto_priv.777>
 8011c14:	e027      	b.n	8011c66 <otg_epin_handler+0xe6>
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8011c16:	9b01      	ldr	r3, [sp, #4]
 8011c18:	891b      	ldrh	r3, [r3, #8]
 8011c1a:	b299      	uxth	r1, r3
 8011c1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011c20:	2201      	movs	r2, #1
 8011c22:	fa02 f303 	lsl.w	r3, r2, r3
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	43db      	mvns	r3, r3
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	460a      	mov	r2, r1
 8011c2e:	4013      	ands	r3, r2
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	9b01      	ldr	r3, [sp, #4]
 8011c36:	811a      	strh	r2, [r3, #8]
 8011c38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011c3c:	9a01      	ldr	r2, [sp, #4]
 8011c3e:	3302      	adds	r3, #2
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	4413      	add	r3, r2
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	689b      	ldr	r3, [r3, #8]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d00c      	beq.n	8011c66 <otg_epin_handler+0xe6>
 8011c4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011c50:	9a01      	ldr	r2, [sp, #4]
 8011c52:	3302      	adds	r3, #2
 8011c54:	009b      	lsls	r3, r3, #2
 8011c56:	4413      	add	r3, r2
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	689b      	ldr	r3, [r3, #8]
 8011c5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011c60:	9801      	ldr	r0, [sp, #4]
 8011c62:	4611      	mov	r1, r2
 8011c64:	4798      	blx	r3
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8011c66:	9b04      	ldr	r3, [sp, #16]
 8011c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d010      	beq.n	8011c92 <otg_epin_handler+0x112>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8011c70:	9b05      	ldr	r3, [sp, #20]
 8011c72:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8011c76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011c7a:	2101      	movs	r1, #1
 8011c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8011c80:	4013      	ands	r3, r2
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d005      	beq.n	8011c92 <otg_epin_handler+0x112>
    otgp->DIEPEMPMSK &= ~(1 << ep);
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
#else
    /* TX FIFO empty or emptying.*/
    otg_txfifo_handler(usbp, ep);
 8011c86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011c8a:	9801      	ldr	r0, [sp, #4]
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	f7ff fecf 	bl	8011a30 <otg_txfifo_handler>
#endif
  }
}
 8011c92:	b007      	add	sp, #28
 8011c94:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011ca0 <otg_epout_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8011ca0:	b500      	push	{lr}
 8011ca2:	b087      	sub	sp, #28
 8011ca4:	9001      	str	r0, [sp, #4]
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	f88d 3003 	strb.w	r3, [sp, #3]
  stm32_otg_t *otgp = usbp->otg;
 8011cac:	9b01      	ldr	r3, [sp, #4]
 8011cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cb0:	9305      	str	r3, [sp, #20]
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8011cb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011cb6:	9a05      	ldr	r2, [sp, #20]
 8011cb8:	015b      	lsls	r3, r3, #5
 8011cba:	4413      	add	r3, r2
 8011cbc:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	9304      	str	r3, [sp, #16]

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 8011cc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011cc8:	9a05      	ldr	r2, [sp, #20]
 8011cca:	015b      	lsls	r3, r3, #5
 8011ccc:	4413      	add	r3, r2
 8011cce:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8011cd2:	9a04      	ldr	r2, [sp, #16]
 8011cd4:	601a      	str	r2, [r3, #0]

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8011cd6:	9b04      	ldr	r3, [sp, #16]
 8011cd8:	f003 0308 	and.w	r3, r3, #8
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d013      	beq.n	8011d08 <otg_epout_handler+0x68>
 8011ce0:	9b05      	ldr	r3, [sp, #20]
 8011ce2:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8011ce6:	f003 0308 	and.w	r3, r3, #8
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d00c      	beq.n	8011d08 <otg_epout_handler+0x68>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 8011cee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011cf2:	9a01      	ldr	r2, [sp, #4]
 8011cf4:	3302      	adds	r3, #2
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	4413      	add	r3, r2
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011d02:	9801      	ldr	r0, [sp, #4]
 8011d04:	4611      	mov	r1, r2
 8011d06:	4798      	blx	r3
  }

  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8011d08:	9b04      	ldr	r3, [sp, #16]
 8011d0a:	f003 0301 	and.w	r3, r3, #1
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d067      	beq.n	8011de2 <otg_epout_handler+0x142>
 8011d12:	9b05      	ldr	r3, [sp, #20]
 8011d14:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8011d18:	f003 0301 	and.w	r3, r3, #1
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d060      	beq.n	8011de2 <otg_epout_handler+0x142>
    USBOutEndpointState *osp;

    /* OUT state structure pointer for this endpoint.*/
    osp = usbp->epc[ep]->out_state;
 8011d20:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011d24:	9a01      	ldr	r2, [sp, #4]
 8011d26:	3302      	adds	r3, #2
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	4413      	add	r3, r2
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	699b      	ldr	r3, [r3, #24]
 8011d30:	9303      	str	r3, [sp, #12]

    /* EP0 requires special handling.*/
    if (ep == 0) {
 8011d32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d12b      	bne.n	8011d92 <otg_epout_handler+0xf2>
#endif

      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8011d3a:	9b03      	ldr	r3, [sp, #12]
 8011d3c:	685a      	ldr	r2, [r3, #4]
 8011d3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011d42:	9901      	ldr	r1, [sp, #4]
 8011d44:	3302      	adds	r3, #2
 8011d46:	009b      	lsls	r3, r3, #2
 8011d48:	440b      	add	r3, r1
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	8a5b      	ldrh	r3, [r3, #18]
 8011d4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8011d52:	fb03 f301 	mul.w	r3, r3, r1
 8011d56:	1ad3      	subs	r3, r2, r3
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d11a      	bne.n	8011d92 <otg_epout_handler+0xf2>
          (osp->rxsize < osp->totsize)) {
 8011d5c:	9b03      	ldr	r3, [sp, #12]
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	9b03      	ldr	r3, [sp, #12]
 8011d62:	68db      	ldr	r3, [r3, #12]
#endif

      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d214      	bcs.n	8011d92 <otg_epout_handler+0xf2>
          (osp->rxsize < osp->totsize)) {
        osp->rxsize = osp->totsize - osp->rxsize;
 8011d68:	9b03      	ldr	r3, [sp, #12]
 8011d6a:	68da      	ldr	r2, [r3, #12]
 8011d6c:	9b03      	ldr	r3, [sp, #12]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	1ad2      	subs	r2, r2, r3
 8011d72:	9b03      	ldr	r3, [sp, #12]
 8011d74:	601a      	str	r2, [r3, #0]
        osp->rxcnt  = 0;
 8011d76:	9b03      	ldr	r3, [sp, #12]
 8011d78:	2200      	movs	r2, #0
 8011d7a:	605a      	str	r2, [r3, #4]
        osalSysLockFromISR();
 8011d7c:	f7ff fcd8 	bl	8011730 <osalSysLockFromISR.lto_priv.780>
        usb_lld_start_out(usbp, ep);
 8011d80:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011d84:	9801      	ldr	r0, [sp, #4]
 8011d86:	4619      	mov	r1, r3
 8011d88:	f000 fb22 	bl	80123d0 <usb_lld_start_out>
        osalSysUnlockFromISR();
 8011d8c:	f7ff fcd8 	bl	8011740 <osalSysUnlockFromISR.lto_priv.777>
 8011d90:	e027      	b.n	8011de2 <otg_epout_handler+0x142>
        return;
      }
    }

    /* End on OUT transfer.*/
    _usb_isr_invoke_out_cb(usbp, ep);
 8011d92:	9b01      	ldr	r3, [sp, #4]
 8011d94:	895b      	ldrh	r3, [r3, #10]
 8011d96:	b299      	uxth	r1, r3
 8011d98:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011d9c:	2201      	movs	r2, #1
 8011d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	43db      	mvns	r3, r3
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	460a      	mov	r2, r1
 8011daa:	4013      	ands	r3, r2
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	9b01      	ldr	r3, [sp, #4]
 8011db2:	815a      	strh	r2, [r3, #10]
 8011db4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011db8:	9a01      	ldr	r2, [sp, #4]
 8011dba:	3302      	adds	r3, #2
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	4413      	add	r3, r2
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d00c      	beq.n	8011de2 <otg_epout_handler+0x142>
 8011dc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011dcc:	9a01      	ldr	r2, [sp, #4]
 8011dce:	3302      	adds	r3, #2
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	4413      	add	r3, r2
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011ddc:	9801      	ldr	r0, [sp, #4]
 8011dde:	4611      	mov	r1, r2
 8011de0:	4798      	blx	r3
  }
}
 8011de2:	b007      	add	sp, #28
 8011de4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011df0 <otg_isoc_in_failed_handler>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
 8011df0:	b500      	push	{lr}
 8011df2:	b085      	sub	sp, #20
 8011df4:	9001      	str	r0, [sp, #4]
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8011df6:	9b01      	ldr	r3, [sp, #4]
 8011df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dfa:	9302      	str	r3, [sp, #8]

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	f88d 300f 	strb.w	r3, [sp, #15]
 8011e02:	e066      	b.n	8011ed2 <otg_isoc_in_failed_handler+0xe2>
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8011e04:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011e08:	9a02      	ldr	r2, [sp, #8]
 8011e0a:	3348      	adds	r3, #72	; 0x48
 8011e0c:	015b      	lsls	r3, r3, #5
 8011e0e:	4413      	add	r3, r2
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011e16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011e1a:	d155      	bne.n	8011ec8 <otg_isoc_in_failed_handler+0xd8>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8011e1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011e20:	9a02      	ldr	r2, [sp, #8]
 8011e22:	3348      	adds	r3, #72	; 0x48
 8011e24:	015b      	lsls	r3, r3, #5
 8011e26:	4413      	add	r3, r2
 8011e28:	681b      	ldr	r3, [r3, #0]
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	da4c      	bge.n	8011ec8 <otg_isoc_in_failed_handler+0xd8>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
      /* Endpoint enabled -> ISOC IN transfer failed */
      /* Disable endpoint */
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8011e2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011e32:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011e36:	9902      	ldr	r1, [sp, #8]
 8011e38:	3248      	adds	r2, #72	; 0x48
 8011e3a:	0152      	lsls	r2, r2, #5
 8011e3c:	440a      	add	r2, r1
 8011e3e:	6812      	ldr	r2, [r2, #0]
 8011e40:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 8011e44:	9902      	ldr	r1, [sp, #8]
 8011e46:	3348      	adds	r3, #72	; 0x48
 8011e48:	015b      	lsls	r3, r3, #5
 8011e4a:	440b      	add	r3, r1
 8011e4c:	601a      	str	r2, [r3, #0]
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8011e4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011e52:	9a02      	ldr	r2, [sp, #8]
 8011e54:	3348      	adds	r3, #72	; 0x48
 8011e56:	015b      	lsls	r3, r3, #5
 8011e58:	4413      	add	r3, r2
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	dbf6      	blt.n	8011e4e <otg_isoc_in_failed_handler+0x5e>
        ;

      /* Flush FIFO */
      otg_txfifo_flush(usbp, ep);
 8011e60:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011e64:	9801      	ldr	r0, [sp, #4]
 8011e66:	4619      	mov	r1, r3
 8011e68:	f7ff fce2 	bl	8011830 <otg_txfifo_flush>

      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);
 8011e6c:	9b01      	ldr	r3, [sp, #4]
 8011e6e:	891b      	ldrh	r3, [r3, #8]
 8011e70:	b299      	uxth	r1, r3
 8011e72:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011e76:	2201      	movs	r2, #1
 8011e78:	fa02 f303 	lsl.w	r3, r2, r3
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	43db      	mvns	r3, r3
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	460a      	mov	r2, r1
 8011e84:	4013      	ands	r3, r2
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	9b01      	ldr	r3, [sp, #4]
 8011e8c:	811a      	strh	r2, [r3, #8]
 8011e8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011e92:	9a01      	ldr	r2, [sp, #4]
 8011e94:	3302      	adds	r3, #2
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	4413      	add	r3, r2
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	689b      	ldr	r3, [r3, #8]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d00c      	beq.n	8011ebc <otg_isoc_in_failed_handler+0xcc>
 8011ea2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011ea6:	9a01      	ldr	r2, [sp, #4]
 8011ea8:	3302      	adds	r3, #2
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	4413      	add	r3, r2
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	689b      	ldr	r3, [r3, #8]
 8011eb2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011eb6:	9801      	ldr	r0, [sp, #4]
 8011eb8:	4611      	mov	r1, r2
 8011eba:	4798      	blx	r3
      usbp->txpending |= (1 << ep);
      osalThreadResumeI(&usbp->wait, MSG_OK);
      osalSysUnlockFromISR();
#else
    /* TX FIFO empty or emptying.*/
    otg_txfifo_handler(usbp, ep);
 8011ebc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011ec0:	9801      	ldr	r0, [sp, #4]
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	f7ff fdb4 	bl	8011a30 <otg_txfifo_handler>
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8011ec8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	f88d 300f 	strb.w	r3, [sp, #15]
 8011ed2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011ed6:	9b01      	ldr	r3, [sp, #4]
 8011ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011eda:	689b      	ldr	r3, [r3, #8]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d991      	bls.n	8011e04 <otg_isoc_in_failed_handler+0x14>
    /* TX FIFO empty or emptying.*/
    otg_txfifo_handler(usbp, ep);
#endif
    }
  }
}
 8011ee0:	b005      	add	sp, #20
 8011ee2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ee6:	bf00      	nop
	...

08011ef0 <otg_isoc_out_failed_handler>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
 8011ef0:	b500      	push	{lr}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	9001      	str	r0, [sp, #4]
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8011ef6:	9b01      	ldr	r3, [sp, #4]
 8011ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011efa:	9302      	str	r3, [sp, #8]

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8011efc:	2300      	movs	r3, #0
 8011efe:	f88d 300f 	strb.w	r3, [sp, #15]
 8011f02:	e041      	b.n	8011f88 <otg_isoc_out_failed_handler+0x98>
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8011f04:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011f08:	9a02      	ldr	r2, [sp, #8]
 8011f0a:	3358      	adds	r3, #88	; 0x58
 8011f0c:	015b      	lsls	r3, r3, #5
 8011f0e:	4413      	add	r3, r2
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011f1a:	d130      	bne.n	8011f7e <otg_isoc_out_failed_handler+0x8e>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8011f1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011f20:	9a02      	ldr	r2, [sp, #8]
 8011f22:	3358      	adds	r3, #88	; 0x58
 8011f24:	015b      	lsls	r3, r3, #5
 8011f26:	4413      	add	r3, r2
 8011f28:	681b      	ldr	r3, [r3, #0]
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	da27      	bge.n	8011f7e <otg_isoc_out_failed_handler+0x8e>
      /* FIXME: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
 8011f2e:	9b01      	ldr	r3, [sp, #4]
 8011f30:	895b      	ldrh	r3, [r3, #10]
 8011f32:	b299      	uxth	r1, r3
 8011f34:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011f38:	2201      	movs	r2, #1
 8011f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	43db      	mvns	r3, r3
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	460a      	mov	r2, r1
 8011f46:	4013      	ands	r3, r2
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	b29a      	uxth	r2, r3
 8011f4c:	9b01      	ldr	r3, [sp, #4]
 8011f4e:	815a      	strh	r2, [r3, #10]
 8011f50:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011f54:	9a01      	ldr	r2, [sp, #4]
 8011f56:	3302      	adds	r3, #2
 8011f58:	009b      	lsls	r3, r3, #2
 8011f5a:	4413      	add	r3, r2
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00c      	beq.n	8011f7e <otg_isoc_out_failed_handler+0x8e>
 8011f64:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011f68:	9a01      	ldr	r2, [sp, #4]
 8011f6a:	3302      	adds	r3, #2
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	4413      	add	r3, r2
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011f78:	9801      	ldr	r0, [sp, #4]
 8011f7a:	4611      	mov	r1, r2
 8011f7c:	4798      	blx	r3
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8011f7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011f82:	3301      	adds	r3, #1
 8011f84:	f88d 300f 	strb.w	r3, [sp, #15]
 8011f88:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011f8c:	9b01      	ldr	r3, [sp, #4]
 8011f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d9b6      	bls.n	8011f04 <otg_isoc_out_failed_handler+0x14>
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
    }
  }
}
 8011f96:	b005      	add	sp, #20
 8011f98:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f9c:	0000      	movs	r0, r0
	...

08011fa0 <usb_lld_serve_interrupt>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
 8011fa0:	b500      	push	{lr}
 8011fa2:	b087      	sub	sp, #28
 8011fa4:	9001      	str	r0, [sp, #4]
  stm32_otg_t *otgp = usbp->otg;
 8011fa6:	9b01      	ldr	r3, [sp, #4]
 8011fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011faa:	9305      	str	r3, [sp, #20]
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 8011fac:	9b05      	ldr	r3, [sp, #20]
 8011fae:	695b      	ldr	r3, [r3, #20]
 8011fb0:	9304      	str	r3, [sp, #16]
  sts &= otgp->GINTMSK;
 8011fb2:	9b05      	ldr	r3, [sp, #20]
 8011fb4:	699b      	ldr	r3, [r3, #24]
 8011fb6:	9a04      	ldr	r2, [sp, #16]
 8011fb8:	4013      	ands	r3, r2
 8011fba:	9304      	str	r3, [sp, #16]
  otgp->GINTSTS = sts;
 8011fbc:	9b05      	ldr	r3, [sp, #20]
 8011fbe:	9a04      	ldr	r2, [sp, #16]
 8011fc0:	615a      	str	r2, [r3, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 8011fc2:	9b04      	ldr	r3, [sp, #16]
 8011fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d003      	beq.n	8011fd4 <usb_lld_serve_interrupt+0x34>
#if 0
    /* Resetting pending operations.*/
    usbp->txpending = 0;
#endif
    /* Default reset action.*/
    _usb_reset(usbp);
 8011fcc:	9801      	ldr	r0, [sp, #4]
 8011fce:	f001 fa9f 	bl	8013510 <_usb_reset>
 8011fd2:	e0be      	b.n	8012152 <usb_lld_serve_interrupt+0x1b2>
    /* Preventing execution of more handlers, the core has been reset.*/
    return;
  }

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
 8011fd4:	9b04      	ldr	r3, [sp, #16]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	da19      	bge.n	801200e <usb_lld_serve_interrupt+0x6e>
    /* If clocks are gated off, turn them back on (may be the case if
       coming out of suspend mode).*/
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8011fda:	9b05      	ldr	r3, [sp, #20]
 8011fdc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8011fe0:	f003 0303 	and.w	r3, r3, #3
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d007      	beq.n	8011ff8 <usb_lld_serve_interrupt+0x58>
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8011fe8:	9b05      	ldr	r3, [sp, #20]
 8011fea:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8011fee:	f023 0203 	bic.w	r2, r3, #3
 8011ff2:	9b05      	ldr	r3, [sp, #20]
 8011ff4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL &= ~DCTL_RWUSIG;
 8011ff8:	9b05      	ldr	r3, [sp, #20]
 8011ffa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8011ffe:	f023 0201 	bic.w	r2, r3, #1
 8012002:	9b05      	ldr	r3, [sp, #20]
 8012004:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804

    _usb_wakeup(usbp);
 8012008:	9801      	ldr	r0, [sp, #4]
 801200a:	f001 fae1 	bl	80135d0 <_usb_wakeup>
  }

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {
 801200e:	9b04      	ldr	r3, [sp, #16]
 8012010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012014:	2b00      	cmp	r3, #0
 8012016:	d002      	beq.n	801201e <usb_lld_serve_interrupt+0x7e>
#if 0
    /* Resetting pending operations.*/
    usbp->txpending = 0;
#endif
    /* Default suspend action.*/
    _usb_suspend(usbp);
 8012018:	9801      	ldr	r0, [sp, #4]
 801201a:	f001 fab9 	bl	8013590 <_usb_suspend>
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 801201e:	9b04      	ldr	r3, [sp, #16]
 8012020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012024:	2b00      	cmp	r3, #0
 8012026:	d017      	beq.n	8012058 <usb_lld_serve_interrupt+0xb8>
    /* Full or High speed timing selection.*/
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8012028:	9b05      	ldr	r3, [sp, #20]
 801202a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 801202e:	f003 0306 	and.w	r3, r3, #6
 8012032:	2b00      	cmp	r3, #0
 8012034:	d108      	bne.n	8012048 <usb_lld_serve_interrupt+0xa8>
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8012036:	9b05      	ldr	r3, [sp, #20]
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 801203e:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 8012042:	9b05      	ldr	r3, [sp, #20]
 8012044:	60da      	str	r2, [r3, #12]
 8012046:	e007      	b.n	8012058 <usb_lld_serve_interrupt+0xb8>
                      GUSBCFG_TRDT(TRDT_VALUE_HS);
    }
    else {
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8012048:	9b05      	ldr	r3, [sp, #20]
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8012050:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 8012054:	9b05      	ldr	r3, [sp, #20]
 8012056:	60da      	str	r2, [r3, #12]
                      GUSBCFG_TRDT(TRDT_VALUE_FS);
    }
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 8012058:	9b04      	ldr	r3, [sp, #16]
 801205a:	f003 0308 	and.w	r3, r3, #8
 801205e:	2b00      	cmp	r3, #0
 8012060:	d009      	beq.n	8012076 <usb_lld_serve_interrupt+0xd6>
    _usb_isr_invoke_sof_cb(usbp);
 8012062:	9b01      	ldr	r3, [sp, #4]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	68db      	ldr	r3, [r3, #12]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d004      	beq.n	8012076 <usb_lld_serve_interrupt+0xd6>
 801206c:	9b01      	ldr	r3, [sp, #4]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	68db      	ldr	r3, [r3, #12]
 8012072:	9801      	ldr	r0, [sp, #4]
 8012074:	4798      	blx	r3
  }

  /* Isochronous IN failed handling */
  if (sts & GINTSTS_IISOIXFR) {
 8012076:	9b04      	ldr	r3, [sp, #16]
 8012078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801207c:	2b00      	cmp	r3, #0
 801207e:	d002      	beq.n	8012086 <usb_lld_serve_interrupt+0xe6>
    otg_isoc_in_failed_handler(usbp);
 8012080:	9801      	ldr	r0, [sp, #4]
 8012082:	f7ff feb5 	bl	8011df0 <otg_isoc_in_failed_handler>
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 8012086:	9b04      	ldr	r3, [sp, #16]
 8012088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801208c:	2b00      	cmp	r3, #0
 801208e:	d002      	beq.n	8012096 <usb_lld_serve_interrupt+0xf6>
    otg_isoc_out_failed_handler(usbp);
 8012090:	9801      	ldr	r0, [sp, #4]
 8012092:	f7ff ff2d 	bl	8011ef0 <otg_isoc_out_failed_handler>
    osalSysUnlockFromISR();
  }
#else
  /* Performing the whole FIFO emptying in the ISR, it is advised to keep
     this IRQ at a very low priority level.*/
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8012096:	9b04      	ldr	r3, [sp, #16]
 8012098:	f003 0310 	and.w	r3, r3, #16
 801209c:	2b00      	cmp	r3, #0
 801209e:	d002      	beq.n	80120a6 <usb_lld_serve_interrupt+0x106>
    otg_rxfifo_handler(usbp);
 80120a0:	9801      	ldr	r0, [sp, #4]
 80120a2:	f7ff fc45 	bl	8011930 <otg_rxfifo_handler>
  }
#endif

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 80120a6:	9b05      	ldr	r3, [sp, #20]
 80120a8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80120ac:	9303      	str	r3, [sp, #12]
  if (sts & GINTSTS_OEPINT) {
 80120ae:	9b04      	ldr	r3, [sp, #16]
 80120b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d023      	beq.n	8012100 <usb_lld_serve_interrupt+0x160>
    if (src & (1 << 16))
 80120b8:	9b03      	ldr	r3, [sp, #12]
 80120ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d003      	beq.n	80120ca <usb_lld_serve_interrupt+0x12a>
      otg_epout_handler(usbp, 0);
 80120c2:	9801      	ldr	r0, [sp, #4]
 80120c4:	2100      	movs	r1, #0
 80120c6:	f7ff fdeb 	bl	8011ca0 <otg_epout_handler>
    if (src & (1 << 17))
 80120ca:	9b03      	ldr	r3, [sp, #12]
 80120cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d003      	beq.n	80120dc <usb_lld_serve_interrupt+0x13c>
      otg_epout_handler(usbp, 1);
 80120d4:	9801      	ldr	r0, [sp, #4]
 80120d6:	2101      	movs	r1, #1
 80120d8:	f7ff fde2 	bl	8011ca0 <otg_epout_handler>
    if (src & (1 << 18))
 80120dc:	9b03      	ldr	r3, [sp, #12]
 80120de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d003      	beq.n	80120ee <usb_lld_serve_interrupt+0x14e>
      otg_epout_handler(usbp, 2);
 80120e6:	9801      	ldr	r0, [sp, #4]
 80120e8:	2102      	movs	r1, #2
 80120ea:	f7ff fdd9 	bl	8011ca0 <otg_epout_handler>
    if (src & (1 << 19))
 80120ee:	9b03      	ldr	r3, [sp, #12]
 80120f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d003      	beq.n	8012100 <usb_lld_serve_interrupt+0x160>
      otg_epout_handler(usbp, 3);
 80120f8:	9801      	ldr	r0, [sp, #4]
 80120fa:	2103      	movs	r1, #3
 80120fc:	f7ff fdd0 	bl	8011ca0 <otg_epout_handler>
#if USB_MAX_ENDPOINTS >= 8
    if (src & (1 << 24))
      otg_epout_handler(usbp, 8);
#endif
  }
  if (sts & GINTSTS_IEPINT) {
 8012100:	9b04      	ldr	r3, [sp, #16]
 8012102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012106:	2b00      	cmp	r3, #0
 8012108:	d023      	beq.n	8012152 <usb_lld_serve_interrupt+0x1b2>
    if (src & (1 << 0))
 801210a:	9b03      	ldr	r3, [sp, #12]
 801210c:	f003 0301 	and.w	r3, r3, #1
 8012110:	2b00      	cmp	r3, #0
 8012112:	d003      	beq.n	801211c <usb_lld_serve_interrupt+0x17c>
      otg_epin_handler(usbp, 0);
 8012114:	9801      	ldr	r0, [sp, #4]
 8012116:	2100      	movs	r1, #0
 8012118:	f7ff fd32 	bl	8011b80 <otg_epin_handler>
    if (src & (1 << 1))
 801211c:	9b03      	ldr	r3, [sp, #12]
 801211e:	f003 0302 	and.w	r3, r3, #2
 8012122:	2b00      	cmp	r3, #0
 8012124:	d003      	beq.n	801212e <usb_lld_serve_interrupt+0x18e>
      otg_epin_handler(usbp, 1);
 8012126:	9801      	ldr	r0, [sp, #4]
 8012128:	2101      	movs	r1, #1
 801212a:	f7ff fd29 	bl	8011b80 <otg_epin_handler>
    if (src & (1 << 2))
 801212e:	9b03      	ldr	r3, [sp, #12]
 8012130:	f003 0304 	and.w	r3, r3, #4
 8012134:	2b00      	cmp	r3, #0
 8012136:	d003      	beq.n	8012140 <usb_lld_serve_interrupt+0x1a0>
      otg_epin_handler(usbp, 2);
 8012138:	9801      	ldr	r0, [sp, #4]
 801213a:	2102      	movs	r1, #2
 801213c:	f7ff fd20 	bl	8011b80 <otg_epin_handler>
    if (src & (1 << 3))
 8012140:	9b03      	ldr	r3, [sp, #12]
 8012142:	f003 0308 	and.w	r3, r3, #8
 8012146:	2b00      	cmp	r3, #0
 8012148:	d003      	beq.n	8012152 <usb_lld_serve_interrupt+0x1b2>
      otg_epin_handler(usbp, 3);
 801214a:	9801      	ldr	r0, [sp, #4]
 801214c:	2103      	movs	r1, #3
 801214e:	f7ff fd17 	bl	8011b80 <otg_epin_handler>
#if USB_MAX_ENDPOINTS >= 8
    if (src & (1 << 8))
      otg_epin_handler(usbp, 8);
#endif
  }
}
 8012152:	b007      	add	sp, #28
 8012154:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012160 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8012160:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);
 8012162:	4803      	ldr	r0, [pc, #12]	; (8012170 <Vector14C+0x10>)
 8012164:	f7ff ff1c 	bl	8011fa0 <usb_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8012168:	f7fd f862 	bl	800f230 <_port_irq_epilogue>
}
 801216c:	bd08      	pop	{r3, pc}
 801216e:	bf00      	nop
 8012170:	20001234 	.word	0x20001234
	...

08012180 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 8012180:	b508      	push	{r3, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 8012182:	4805      	ldr	r0, [pc, #20]	; (8012198 <usb_lld_init+0x18>)
 8012184:	f001 f914 	bl	80133b0 <usbObjectInit>
#if 0
  USBD1.wait      = NULL;
#endif
  USBD1.otg       = OTG_FS;
 8012188:	4b03      	ldr	r3, [pc, #12]	; (8012198 <usb_lld_init+0x18>)
 801218a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801218e:	655a      	str	r2, [r3, #84]	; 0x54
  USBD1.otgparams = &fsparams;
 8012190:	4b01      	ldr	r3, [pc, #4]	; (8012198 <usb_lld_init+0x18>)
 8012192:	4a02      	ldr	r2, [pc, #8]	; (801219c <usb_lld_init+0x1c>)
 8012194:	659a      	str	r2, [r3, #88]	; 0x58
  }
#endif /* CH_DBG_FILL_THREADS */
#endif /* defined(_CHIBIOS_RT_) */
#endif
#endif
}
 8012196:	bd08      	pop	{r3, pc}
 8012198:	20001234 	.word	0x20001234
 801219c:	0801d810 	.word	0x0801d810

080121a0 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80121a0:	b510      	push	{r4, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	9001      	str	r0, [sp, #4]
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 80121a6:	9b01      	ldr	r3, [sp, #4]
 80121a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121aa:	9302      	str	r3, [sp, #8]

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);
 80121ac:	9801      	ldr	r0, [sp, #4]
 80121ae:	2100      	movs	r1, #0
 80121b0:	f7ff fb3e 	bl	8011830 <otg_txfifo_flush>

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
 80121b4:	9b02      	ldr	r3, [sp, #8]
 80121b6:	2200      	movs	r2, #0
 80121b8:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80121bc:	9b02      	ldr	r3, [sp, #8]
 80121be:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80121c2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80121c6:	2300      	movs	r3, #0
 80121c8:	9303      	str	r3, [sp, #12]
 80121ca:	e024      	b.n	8012216 <usb_lld_reset+0x76>
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80121cc:	9a02      	ldr	r2, [sp, #8]
 80121ce:	9b03      	ldr	r3, [sp, #12]
 80121d0:	3348      	adds	r3, #72	; 0x48
 80121d2:	015b      	lsls	r3, r3, #5
 80121d4:	4413      	add	r3, r2
 80121d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80121da:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80121dc:	9a02      	ldr	r2, [sp, #8]
 80121de:	9b03      	ldr	r3, [sp, #12]
 80121e0:	3358      	adds	r3, #88	; 0x58
 80121e2:	015b      	lsls	r3, r3, #5
 80121e4:	4413      	add	r3, r2
 80121e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80121ea:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80121ec:	9a02      	ldr	r2, [sp, #8]
 80121ee:	9b03      	ldr	r3, [sp, #12]
 80121f0:	015b      	lsls	r3, r3, #5
 80121f2:	4413      	add	r3, r2
 80121f4:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80121f8:	f04f 32ff 	mov.w	r2, #4294967295
 80121fc:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80121fe:	9a02      	ldr	r2, [sp, #8]
 8012200:	9b03      	ldr	r3, [sp, #12]
 8012202:	015b      	lsls	r3, r3, #5
 8012204:	4413      	add	r3, r2
 8012206:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 801220a:	f04f 32ff 	mov.w	r2, #4294967295
 801220e:	601a      	str	r2, [r3, #0]
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8012210:	9b03      	ldr	r3, [sp, #12]
 8012212:	3301      	adds	r3, #1
 8012214:	9303      	str	r3, [sp, #12]
 8012216:	9b01      	ldr	r3, [sp, #4]
 8012218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801221a:	689a      	ldr	r2, [r3, #8]
 801221c:	9b03      	ldr	r3, [sp, #12]
 801221e:	429a      	cmp	r2, r3
 8012220:	d2d4      	bcs.n	80121cc <usb_lld_reset+0x2c>
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);
 8012222:	9801      	ldr	r0, [sp, #4]
 8012224:	f7ff fb24 	bl	8011870 <otg_ram_reset>

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8012228:	9b01      	ldr	r3, [sp, #4]
 801222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	9b02      	ldr	r3, [sp, #8]
 8012230:	625a      	str	r2, [r3, #36]	; 0x24
  otg_rxfifo_flush(usbp);
 8012232:	9801      	ldr	r0, [sp, #4]
 8012234:	f7ff fae4 	bl	8011800 <otg_rxfifo_flush>

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8012238:	9b02      	ldr	r3, [sp, #8]
 801223a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 801223e:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8012242:	9b02      	ldr	r3, [sp, #8]
 8012244:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8012248:	9b02      	ldr	r3, [sp, #8]
 801224a:	699b      	ldr	r3, [r3, #24]
 801224c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8012250:	f043 0310 	orr.w	r3, r3, #16
 8012254:	9a02      	ldr	r2, [sp, #8]
 8012256:	6193      	str	r3, [r2, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8012258:	9b02      	ldr	r3, [sp, #8]
 801225a:	2209      	movs	r2, #9
 801225c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8012260:	9b02      	ldr	r3, [sp, #8]
 8012262:	2209      	movs	r2, #9
 8012264:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8012268:	9b01      	ldr	r3, [sp, #4]
 801226a:	4a17      	ldr	r2, [pc, #92]	; (80122c8 <usb_lld_reset+0x128>)
 801226c:	60da      	str	r2, [r3, #12]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 801226e:	9b02      	ldr	r3, [sp, #8]
 8012270:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8012274:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
 8012278:	2340      	movs	r3, #64	; 0x40
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 801227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801227e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012282:	9a02      	ldr	r2, [sp, #8]
 8012284:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 8012288:	9b02      	ldr	r3, [sp, #8]
 801228a:	2200      	movs	r2, #0
 801228c:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
 8012290:	2340      	movs	r3, #64	; 0x40
 8012292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 801229a:	9a02      	ldr	r2, [sp, #8]
 801229c:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80122a0:	2340      	movs	r3, #64	; 0x40
 80122a2:	089b      	lsrs	r3, r3, #2
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	041b      	lsls	r3, r3, #16
 80122a8:	461c      	mov	r4, r3
                   DIEPTXF_INEPTXSA(otg_ram_alloc(usbp,
 80122aa:	2340      	movs	r3, #64	; 0x40
 80122ac:	089b      	lsrs	r3, r3, #2
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	9801      	ldr	r0, [sp, #4]
 80122b2:	4619      	mov	r1, r3
 80122b4:	f7ff faec 	bl	8011890 <otg_ram_alloc>
 80122b8:	4603      	mov	r3, r0
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80122ba:	ea44 0203 	orr.w	r2, r4, r3
 80122be:	9b02      	ldr	r3, [sp, #8]
 80122c0:	629a      	str	r2, [r3, #40]	; 0x28
                   DIEPTXF_INEPTXSA(otg_ram_alloc(usbp,
                                                  ep0config.in_maxsize / 4));
}
 80122c2:	b004      	add	sp, #16
 80122c4:	bd10      	pop	{r4, pc}
 80122c6:	bf00      	nop
 80122c8:	0801d7ec 	.word	0x0801d7ec
 80122cc:	00000000 	.word	0x00000000

080122d0 <usb_lld_set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
 80122d0:	b084      	sub	sp, #16
 80122d2:	9001      	str	r0, [sp, #4]
  stm32_otg_t *otgp = usbp->otg;
 80122d4:	9b01      	ldr	r3, [sp, #4]
 80122d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122d8:	9303      	str	r3, [sp, #12]

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 80122da:	9b03      	ldr	r3, [sp, #12]
 80122dc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80122e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80122e4:	9a01      	ldr	r2, [sp, #4]
 80122e6:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
 80122ea:	0112      	lsls	r2, r2, #4
 80122ec:	431a      	orrs	r2, r3
 80122ee:	9b03      	ldr	r3, [sp, #12]
 80122f0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80122f4:	b004      	add	sp, #16
 80122f6:	4770      	bx	lr
	...

08012300 <usb_lld_disable_endpoints>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_disable_endpoints(USBDriver *usbp) {
 8012300:	b500      	push	{lr}
 8012302:	b083      	sub	sp, #12
 8012304:	9001      	str	r0, [sp, #4]

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);
 8012306:	9801      	ldr	r0, [sp, #4]
 8012308:	f7ff fab2 	bl	8011870 <otg_ram_reset>

  /* Disabling all endpoints.*/
  otg_disable_ep(usbp);
 801230c:	9801      	ldr	r0, [sp, #4]
 801230e:	f7ff fa2f 	bl	8011770 <otg_disable_ep>
}
 8012312:	b003      	add	sp, #12
 8012314:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012320 <usb_lld_get_status_out>:
 * @retval EP_STATUS_STALLED  The endpoint is stalled.
 * @retval EP_STATUS_ACTIVE   The endpoint is active.
 *
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
 8012320:	b084      	sub	sp, #16
 8012322:	9001      	str	r0, [sp, #4]
 8012324:	460b      	mov	r3, r1
 8012326:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 801232a:	9b01      	ldr	r3, [sp, #4]
 801232c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801232e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012332:	3358      	adds	r3, #88	; 0x58
 8012334:	015b      	lsls	r3, r3, #5
 8012336:	4413      	add	r3, r2
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	9303      	str	r3, [sp, #12]
  if (!(ctl & DOEPCTL_USBAEP))
 801233c:	9b03      	ldr	r3, [sp, #12]
 801233e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012342:	2b00      	cmp	r3, #0
 8012344:	d101      	bne.n	801234a <usb_lld_get_status_out+0x2a>
    return EP_STATUS_DISABLED;
 8012346:	2300      	movs	r3, #0
 8012348:	e007      	b.n	801235a <usb_lld_get_status_out+0x3a>
  if (ctl & DOEPCTL_STALL)
 801234a:	9b03      	ldr	r3, [sp, #12]
 801234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012350:	2b00      	cmp	r3, #0
 8012352:	d001      	beq.n	8012358 <usb_lld_get_status_out+0x38>
    return EP_STATUS_STALLED;
 8012354:	2301      	movs	r3, #1
 8012356:	e000      	b.n	801235a <usb_lld_get_status_out+0x3a>
  return EP_STATUS_ACTIVE;
 8012358:	2302      	movs	r3, #2
}
 801235a:	4618      	mov	r0, r3
 801235c:	b004      	add	sp, #16
 801235e:	4770      	bx	lr

08012360 <usb_lld_get_status_in>:
 * @retval EP_STATUS_STALLED  The endpoint is stalled.
 * @retval EP_STATUS_ACTIVE   The endpoint is active.
 *
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
 8012360:	b084      	sub	sp, #16
 8012362:	9001      	str	r0, [sp, #4]
 8012364:	460b      	mov	r3, r1
 8012366:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 801236a:	9b01      	ldr	r3, [sp, #4]
 801236c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801236e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012372:	3348      	adds	r3, #72	; 0x48
 8012374:	015b      	lsls	r3, r3, #5
 8012376:	4413      	add	r3, r2
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	9303      	str	r3, [sp, #12]
  if (!(ctl & DIEPCTL_USBAEP))
 801237c:	9b03      	ldr	r3, [sp, #12]
 801237e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012382:	2b00      	cmp	r3, #0
 8012384:	d101      	bne.n	801238a <usb_lld_get_status_in+0x2a>
    return EP_STATUS_DISABLED;
 8012386:	2300      	movs	r3, #0
 8012388:	e007      	b.n	801239a <usb_lld_get_status_in+0x3a>
  if (ctl & DIEPCTL_STALL)
 801238a:	9b03      	ldr	r3, [sp, #12]
 801238c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012390:	2b00      	cmp	r3, #0
 8012392:	d001      	beq.n	8012398 <usb_lld_get_status_in+0x38>
    return EP_STATUS_STALLED;
 8012394:	2301      	movs	r3, #1
 8012396:	e000      	b.n	801239a <usb_lld_get_status_in+0x3a>
  return EP_STATUS_ACTIVE;
 8012398:	2302      	movs	r3, #2
}
 801239a:	4618      	mov	r0, r3
 801239c:	b004      	add	sp, #16
 801239e:	4770      	bx	lr

080123a0 <usb_lld_read_setup>:
 * @param[in] ep        endpoint number
 * @param[out] buf      buffer where to copy the packet data
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {
 80123a0:	b500      	push	{lr}
 80123a2:	b085      	sub	sp, #20
 80123a4:	9003      	str	r0, [sp, #12]
 80123a6:	460b      	mov	r3, r1
 80123a8:	9201      	str	r2, [sp, #4]
 80123aa:	f88d 300b 	strb.w	r3, [sp, #11]

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 80123ae:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80123b2:	9a03      	ldr	r2, [sp, #12]
 80123b4:	3302      	adds	r3, #2
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	4413      	add	r3, r2
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	6a1b      	ldr	r3, [r3, #32]
 80123be:	9801      	ldr	r0, [sp, #4]
 80123c0:	4619      	mov	r1, r3
 80123c2:	2208      	movs	r2, #8
 80123c4:	f7fb fb32 	bl	800da2c <memcpy>
}
 80123c8:	b005      	add	sp, #20
 80123ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80123ce:	bf00      	nop

080123d0 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 80123d0:	b086      	sub	sp, #24
 80123d2:	9001      	str	r0, [sp, #4]
 80123d4:	460b      	mov	r3, r1
 80123d6:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80123da:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80123de:	9a01      	ldr	r2, [sp, #4]
 80123e0:	3302      	adds	r3, #2
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	4413      	add	r3, r2
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	699b      	ldr	r3, [r3, #24]
 80123ea:	9305      	str	r3, [sp, #20]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 80123ec:	9b05      	ldr	r3, [sp, #20]
 80123ee:	681a      	ldr	r2, [r3, #0]
 80123f0:	9b05      	ldr	r3, [sp, #20]
 80123f2:	60da      	str	r2, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 80123f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d106      	bne.n	801240a <usb_lld_start_out+0x3a>
 80123fc:	9b05      	ldr	r3, [sp, #20]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2b40      	cmp	r3, #64	; 0x40
 8012402:	d902      	bls.n	801240a <usb_lld_start_out+0x3a>
      osp->rxsize = EP0_MAX_OUTSIZE;
 8012404:	9b05      	ldr	r3, [sp, #20]
 8012406:	2240      	movs	r2, #64	; 0x40
 8012408:	601a      	str	r2, [r3, #0]
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 801240a:	9b05      	ldr	r3, [sp, #20]
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012412:	9901      	ldr	r1, [sp, #4]
 8012414:	3302      	adds	r3, #2
 8012416:	009b      	lsls	r3, r3, #2
 8012418:	440b      	add	r3, r1
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	8a5b      	ldrh	r3, [r3, #18]
 801241e:	4413      	add	r3, r2
 8012420:	1e5a      	subs	r2, r3, #1
           usbp->epc[ep]->out_maxsize;
 8012422:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012426:	9901      	ldr	r1, [sp, #4]
 8012428:	3302      	adds	r3, #2
 801242a:	009b      	lsls	r3, r3, #2
 801242c:	440b      	add	r3, r1
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	8a5b      	ldrh	r3, [r3, #18]
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8012432:	fbb2 f3f3 	udiv	r3, r2, r3
 8012436:	9304      	str	r3, [sp, #16]
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8012438:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801243c:	9a01      	ldr	r2, [sp, #4]
 801243e:	3302      	adds	r3, #2
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	4413      	add	r3, r2
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	8a5b      	ldrh	r3, [r3, #18]
 8012448:	461a      	mov	r2, r3
 801244a:	9b04      	ldr	r3, [sp, #16]
 801244c:	fb03 f302 	mul.w	r3, r3, r2
 8012450:	3303      	adds	r3, #3
 8012452:	f023 0303 	bic.w	r3, r3, #3
 8012456:	9303      	str	r3, [sp, #12]

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8012458:	9b01      	ldr	r3, [sp, #4]
 801245a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801245c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012460:	9a04      	ldr	r2, [sp, #16]
 8012462:	04d0      	lsls	r0, r2, #19
 8012464:	9a03      	ldr	r2, [sp, #12]
 8012466:	4302      	orrs	r2, r0
 8012468:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 801246c:	015b      	lsls	r3, r3, #5
 801246e:	440b      	add	r3, r1
 8012470:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8012474:	601a      	str	r2, [r3, #0]
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8012476:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801247a:	9a01      	ldr	r2, [sp, #4]
 801247c:	3302      	adds	r3, #2
 801247e:	009b      	lsls	r3, r3, #2
 8012480:	4413      	add	r3, r2
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	f003 0303 	and.w	r3, r3, #3
 801248a:	2b01      	cmp	r3, #1
 801248c:	d12c      	bne.n	80124e8 <usb_lld_start_out+0x118>
    /* Odd/even bit toggling for isochronous endpoint.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 801248e:	9b01      	ldr	r3, [sp, #4]
 8012490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012492:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8012496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801249a:	2b00      	cmp	r3, #0
 801249c:	d012      	beq.n	80124c4 <usb_lld_start_out+0xf4>
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 801249e:	9b01      	ldr	r3, [sp, #4]
 80124a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80124a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80124a6:	9a01      	ldr	r2, [sp, #4]
 80124a8:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80124aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80124ae:	3258      	adds	r2, #88	; 0x58
 80124b0:	0152      	lsls	r2, r2, #5
 80124b2:	4402      	add	r2, r0
 80124b4:	6812      	ldr	r2, [r2, #0]
 80124b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80124ba:	3358      	adds	r3, #88	; 0x58
 80124bc:	015b      	lsls	r3, r3, #5
 80124be:	440b      	add	r3, r1
 80124c0:	601a      	str	r2, [r3, #0]
 80124c2:	e011      	b.n	80124e8 <usb_lld_start_out+0x118>
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 80124c4:	9b01      	ldr	r3, [sp, #4]
 80124c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80124c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80124cc:	9a01      	ldr	r2, [sp, #4]
 80124ce:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80124d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80124d4:	3258      	adds	r2, #88	; 0x58
 80124d6:	0152      	lsls	r2, r2, #5
 80124d8:	4402      	add	r2, r0
 80124da:	6812      	ldr	r2, [r2, #0]
 80124dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80124e0:	3358      	adds	r3, #88	; 0x58
 80124e2:	015b      	lsls	r3, r3, #5
 80124e4:	440b      	add	r3, r1
 80124e6:	601a      	str	r2, [r3, #0]
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80124e8:	9b01      	ldr	r3, [sp, #4]
 80124ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80124ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80124f0:	9a01      	ldr	r2, [sp, #4]
 80124f2:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80124f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80124f8:	3258      	adds	r2, #88	; 0x58
 80124fa:	0152      	lsls	r2, r2, #5
 80124fc:	4402      	add	r2, r0
 80124fe:	6812      	ldr	r2, [r2, #0]
 8012500:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8012504:	3358      	adds	r3, #88	; 0x58
 8012506:	015b      	lsls	r3, r3, #5
 8012508:	440b      	add	r3, r1
 801250a:	601a      	str	r2, [r3, #0]
}
 801250c:	b006      	add	sp, #24
 801250e:	4770      	bx	lr

08012510 <usb_lld_start_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8012510:	b084      	sub	sp, #16
 8012512:	9001      	str	r0, [sp, #4]
 8012514:	460b      	mov	r3, r1
 8012516:	f88d 3003 	strb.w	r3, [sp, #3]
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 801251a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801251e:	9a01      	ldr	r2, [sp, #4]
 8012520:	3302      	adds	r3, #2
 8012522:	009b      	lsls	r3, r3, #2
 8012524:	4413      	add	r3, r2
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	695b      	ldr	r3, [r3, #20]
 801252a:	9303      	str	r3, [sp, #12]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 801252c:	9b03      	ldr	r3, [sp, #12]
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	9b03      	ldr	r3, [sp, #12]
 8012532:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 8012534:	9b03      	ldr	r3, [sp, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d10b      	bne.n	8012554 <usb_lld_start_in+0x44>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 801253c:	9b01      	ldr	r3, [sp, #4]
 801253e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012540:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012544:	015b      	lsls	r3, r3, #5
 8012546:	4413      	add	r3, r2
 8012548:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 801254c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012550:	601a      	str	r2, [r3, #0]
 8012552:	e031      	b.n	80125b8 <usb_lld_start_in+0xa8>
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8012554:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d106      	bne.n	801256a <usb_lld_start_in+0x5a>
 801255c:	9b03      	ldr	r3, [sp, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b40      	cmp	r3, #64	; 0x40
 8012562:	d902      	bls.n	801256a <usb_lld_start_in+0x5a>
      isp->txsize = EP0_MAX_INSIZE;
 8012564:	9b03      	ldr	r3, [sp, #12]
 8012566:	2240      	movs	r2, #64	; 0x40
 8012568:	601a      	str	r2, [r3, #0]

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 801256a:	9b03      	ldr	r3, [sp, #12]
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012572:	9901      	ldr	r1, [sp, #4]
 8012574:	3302      	adds	r3, #2
 8012576:	009b      	lsls	r3, r3, #2
 8012578:	440b      	add	r3, r1
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	8a1b      	ldrh	r3, [r3, #16]
 801257e:	4413      	add	r3, r2
 8012580:	1e5a      	subs	r2, r3, #1
                    usbp->epc[ep]->in_maxsize;
 8012582:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012586:	9901      	ldr	r1, [sp, #4]
 8012588:	3302      	adds	r3, #2
 801258a:	009b      	lsls	r3, r3, #2
 801258c:	440b      	add	r3, r1
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	8a1b      	ldrh	r3, [r3, #16]
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8012592:	fbb2 f3f3 	udiv	r3, r2, r3
 8012596:	9302      	str	r3, [sp, #8]
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8012598:	9b01      	ldr	r3, [sp, #4]
 801259a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801259c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80125a0:	9a02      	ldr	r2, [sp, #8]
 80125a2:	04d0      	lsls	r0, r2, #19
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
 80125a4:	9a03      	ldr	r2, [sp, #12]
 80125a6:	6812      	ldr	r2, [r2, #0]

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80125a8:	4302      	orrs	r2, r0
 80125aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80125ae:	015b      	lsls	r3, r3, #5
 80125b0:	440b      	add	r3, r1
 80125b2:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80125b6:	601a      	str	r2, [r3, #0]
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80125b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80125bc:	9a01      	ldr	r2, [sp, #4]
 80125be:	3302      	adds	r3, #2
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	4413      	add	r3, r2
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	f003 0303 	and.w	r3, r3, #3
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d12c      	bne.n	801262a <usb_lld_start_in+0x11a>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80125d0:	9b01      	ldr	r3, [sp, #4]
 80125d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125d4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80125d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d012      	beq.n	8012606 <usb_lld_start_in+0xf6>
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80125e0:	9b01      	ldr	r3, [sp, #4]
 80125e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80125e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80125e8:	9a01      	ldr	r2, [sp, #4]
 80125ea:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80125ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80125f0:	3248      	adds	r2, #72	; 0x48
 80125f2:	0152      	lsls	r2, r2, #5
 80125f4:	4402      	add	r2, r0
 80125f6:	6812      	ldr	r2, [r2, #0]
 80125f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80125fc:	3348      	adds	r3, #72	; 0x48
 80125fe:	015b      	lsls	r3, r3, #5
 8012600:	440b      	add	r3, r1
 8012602:	601a      	str	r2, [r3, #0]
 8012604:	e011      	b.n	801262a <usb_lld_start_in+0x11a>
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8012606:	9b01      	ldr	r3, [sp, #4]
 8012608:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801260a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801260e:	9a01      	ldr	r2, [sp, #4]
 8012610:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8012612:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012616:	3248      	adds	r2, #72	; 0x48
 8012618:	0152      	lsls	r2, r2, #5
 801261a:	4402      	add	r2, r0
 801261c:	6812      	ldr	r2, [r2, #0]
 801261e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8012622:	3348      	adds	r3, #72	; 0x48
 8012624:	015b      	lsls	r3, r3, #5
 8012626:	440b      	add	r3, r1
 8012628:	601a      	str	r2, [r3, #0]
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 801262a:	9b01      	ldr	r3, [sp, #4]
 801262c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801262e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012632:	9a01      	ldr	r2, [sp, #4]
 8012634:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8012636:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801263a:	3248      	adds	r2, #72	; 0x48
 801263c:	0152      	lsls	r2, r2, #5
 801263e:	4402      	add	r2, r0
 8012640:	6812      	ldr	r2, [r2, #0]
 8012642:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8012646:	3348      	adds	r3, #72	; 0x48
 8012648:	015b      	lsls	r3, r3, #5
 801264a:	440b      	add	r3, r1
 801264c:	601a      	str	r2, [r3, #0]
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 801264e:	9b01      	ldr	r3, [sp, #4]
 8012650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012652:	9a01      	ldr	r2, [sp, #4]
 8012654:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012656:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 801265a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801265e:	2001      	movs	r0, #1
 8012660:	fa00 f202 	lsl.w	r2, r0, r2
 8012664:	430a      	orrs	r2, r1
 8012666:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 801266a:	b004      	add	sp, #16
 801266c:	4770      	bx	lr
 801266e:	bf00      	nop

08012670 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8012670:	b082      	sub	sp, #8
 8012672:	9001      	str	r0, [sp, #4]
 8012674:	460b      	mov	r3, r1
 8012676:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 801267a:	9b01      	ldr	r3, [sp, #4]
 801267c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801267e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012682:	9a01      	ldr	r2, [sp, #4]
 8012684:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8012686:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801268a:	3258      	adds	r2, #88	; 0x58
 801268c:	0152      	lsls	r2, r2, #5
 801268e:	4402      	add	r2, r0
 8012690:	6812      	ldr	r2, [r2, #0]
 8012692:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8012696:	3358      	adds	r3, #88	; 0x58
 8012698:	015b      	lsls	r3, r3, #5
 801269a:	440b      	add	r3, r1
 801269c:	601a      	str	r2, [r3, #0]
}
 801269e:	b002      	add	sp, #8
 80126a0:	4770      	bx	lr
 80126a2:	bf00      	nop
	...

080126b0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 80126b0:	b082      	sub	sp, #8
 80126b2:	9001      	str	r0, [sp, #4]
 80126b4:	460b      	mov	r3, r1
 80126b6:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80126ba:	9b01      	ldr	r3, [sp, #4]
 80126bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80126be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80126c2:	9a01      	ldr	r2, [sp, #4]
 80126c4:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80126c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80126ca:	3248      	adds	r2, #72	; 0x48
 80126cc:	0152      	lsls	r2, r2, #5
 80126ce:	4402      	add	r2, r0
 80126d0:	6812      	ldr	r2, [r2, #0]
 80126d2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80126d6:	3348      	adds	r3, #72	; 0x48
 80126d8:	015b      	lsls	r3, r3, #5
 80126da:	440b      	add	r3, r1
 80126dc:	601a      	str	r2, [r3, #0]
}
 80126de:	b002      	add	sp, #8
 80126e0:	4770      	bx	lr
 80126e2:	bf00      	nop
	...

080126f0 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 80126f0:	b082      	sub	sp, #8
 80126f2:	9001      	str	r0, [sp, #4]
 80126f4:	460b      	mov	r3, r1
 80126f6:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 80126fa:	9b01      	ldr	r3, [sp, #4]
 80126fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80126fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012702:	9a01      	ldr	r2, [sp, #4]
 8012704:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8012706:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801270a:	3258      	adds	r2, #88	; 0x58
 801270c:	0152      	lsls	r2, r2, #5
 801270e:	4402      	add	r2, r0
 8012710:	6812      	ldr	r2, [r2, #0]
 8012712:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8012716:	3358      	adds	r3, #88	; 0x58
 8012718:	015b      	lsls	r3, r3, #5
 801271a:	440b      	add	r3, r1
 801271c:	601a      	str	r2, [r3, #0]
}
 801271e:	b002      	add	sp, #8
 8012720:	4770      	bx	lr
 8012722:	bf00      	nop
	...

08012730 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8012730:	b082      	sub	sp, #8
 8012732:	9001      	str	r0, [sp, #4]
 8012734:	460b      	mov	r3, r1
 8012736:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 801273a:	9b01      	ldr	r3, [sp, #4]
 801273c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801273e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012742:	9a01      	ldr	r2, [sp, #4]
 8012744:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8012746:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801274a:	3248      	adds	r2, #72	; 0x48
 801274c:	0152      	lsls	r2, r2, #5
 801274e:	4402      	add	r2, r0
 8012750:	6812      	ldr	r2, [r2, #0]
 8012752:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8012756:	3348      	adds	r3, #72	; 0x48
 8012758:	015b      	lsls	r3, r3, #5
 801275a:	440b      	add	r3, r1
 801275c:	601a      	str	r2, [r3, #0]
}
 801275e:	b002      	add	sp, #8
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop
	...

08012770 <port_lock.lto_priv.793>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8012770:	b082      	sub	sp, #8
 8012772:	2320      	movs	r3, #32
 8012774:	9301      	str	r3, [sp, #4]
 8012776:	9b01      	ldr	r3, [sp, #4]
 8012778:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 801277c:	b002      	add	sp, #8
 801277e:	4770      	bx	lr

08012780 <port_unlock.lto_priv.791>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8012780:	b082      	sub	sp, #8
 8012782:	2300      	movs	r3, #0
 8012784:	9301      	str	r3, [sp, #4]
 8012786:	9b01      	ldr	r3, [sp, #4]
 8012788:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 801278c:	b002      	add	sp, #8
 801278e:	4770      	bx	lr

08012790 <port_lock_from_isr.lto_priv.789>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8012790:	b508      	push	{r3, lr}

  port_lock();
 8012792:	f7ff ffed 	bl	8012770 <port_lock.lto_priv.793>
}
 8012796:	bd08      	pop	{r3, pc}
	...

080127a0 <port_unlock_from_isr.lto_priv.787>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80127a0:	b508      	push	{r3, lr}

  port_unlock();
 80127a2:	f7ff ffed 	bl	8012780 <port_unlock.lto_priv.791>
}
 80127a6:	bd08      	pop	{r3, pc}
	...

080127b0 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 80127b0:	b508      	push	{r3, lr}

  port_lock();
 80127b2:	f7ff ffdd 	bl	8012770 <port_lock.lto_priv.793>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 80127b6:	bd08      	pop	{r3, pc}
	...

080127c0 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 80127c0:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
 80127c2:	f7ff ffdd 	bl	8012780 <port_unlock.lto_priv.791>
}
 80127c6:	bd08      	pop	{r3, pc}
	...

080127d0 <chSysLockFromISR.lto_priv.785>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80127d0:	b508      	push	{r3, lr}

  port_lock_from_isr();
 80127d2:	f7ff ffdd 	bl	8012790 <port_lock_from_isr.lto_priv.789>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 80127d6:	bd08      	pop	{r3, pc}
	...

080127e0 <chSysUnlockFromISR.lto_priv.783>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 80127e0:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 80127e2:	f7ff ffdd 	bl	80127a0 <port_unlock_from_isr.lto_priv.787>
}
 80127e6:	bd08      	pop	{r3, pc}
	...

080127f0 <osalSysLock>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 80127f0:	b508      	push	{r3, lr}

  chSysLock();
 80127f2:	f7ff ffdd 	bl	80127b0 <chSysLock>
}
 80127f6:	bd08      	pop	{r3, pc}
	...

08012800 <osalSysUnlock>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8012800:	b508      	push	{r3, lr}

  chSysUnlock();
 8012802:	f7ff ffdd 	bl	80127c0 <chSysUnlock>
}
 8012806:	bd08      	pop	{r3, pc}
	...

08012810 <osalSysLockFromISR.lto_priv.781>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8012810:	b508      	push	{r3, lr}

  chSysLockFromISR();
 8012812:	f7ff ffdd 	bl	80127d0 <chSysLockFromISR.lto_priv.785>
}
 8012816:	bd08      	pop	{r3, pc}
	...

08012820 <osalSysUnlockFromISR.lto_priv.778>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8012820:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 8012822:	f7ff ffdd 	bl	80127e0 <chSysUnlockFromISR.lto_priv.783>
}
 8012826:	bd08      	pop	{r3, pc}
	...

08012830 <osalThreadSleep.lto_priv.774>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
static inline void osalThreadSleep(sysinterval_t delay) {
 8012830:	b500      	push	{lr}
 8012832:	b083      	sub	sp, #12
 8012834:	9001      	str	r0, [sp, #4]

  chThdSleep(delay);
 8012836:	9801      	ldr	r0, [sp, #4]
 8012838:	f7fe fa42 	bl	8010cc0 <chThdSleep>
}
 801283c:	b003      	add	sp, #12
 801283e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012842:	bf00      	nop
	...

08012850 <osalThreadSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 8012850:	b500      	push	{lr}
 8012852:	b083      	sub	sp, #12
 8012854:	9001      	str	r0, [sp, #4]

  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8012856:	9801      	ldr	r0, [sp, #4]
 8012858:	f04f 31ff 	mov.w	r1, #4294967295
 801285c:	f7fe fa40 	bl	8010ce0 <chThdSuspendTimeoutS>
 8012860:	4603      	mov	r3, r0
}
 8012862:	4618      	mov	r0, r3
 8012864:	b003      	add	sp, #12
 8012866:	f85d fb04 	ldr.w	pc, [sp], #4
 801286a:	bf00      	nop
 801286c:	0000      	movs	r0, r0
	...

08012870 <osalThreadResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8012870:	b500      	push	{lr}
 8012872:	b083      	sub	sp, #12
 8012874:	9001      	str	r0, [sp, #4]
 8012876:	9100      	str	r1, [sp, #0]

  chThdResumeI(trp, msg);
 8012878:	9801      	ldr	r0, [sp, #4]
 801287a:	9900      	ldr	r1, [sp, #0]
 801287c:	f7fe fa50 	bl	8010d20 <chThdResumeI>
}
 8012880:	b003      	add	sp, #12
 8012882:	f85d fb04 	ldr.w	pc, [sp], #4
 8012886:	bf00      	nop
	...

08012890 <sdc_lld_prepare_read_bytes.lto_priv.772>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_lld_prepare_read_bytes(SDCDriver *sdcp,
                                       uint8_t *buf, uint32_t bytes) {
 8012890:	b500      	push	{lr}
 8012892:	b085      	sub	sp, #20
 8012894:	9003      	str	r0, [sp, #12]
 8012896:	9102      	str	r1, [sp, #8]
 8012898:	9201      	str	r2, [sp, #4]
  osalDbgCheck(bytes < 0x1000000);

  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 801289a:	9b03      	ldr	r3, [sp, #12]
 801289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801289e:	4a1d      	ldr	r2, [pc, #116]	; (8012914 <sdc_lld_prepare_read_bytes.lto_priv.772+0x84>)
 80128a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for reading.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 80128a2:	9803      	ldr	r0, [sp, #12]
 80128a4:	f002 fa24 	bl	8014cf0 <_sdc_wait_for_transfer_state>
 80128a8:	4603      	mov	r3, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d001      	beq.n	80128b2 <sdc_lld_prepare_read_bytes.lto_priv.772+0x22>
    return HAL_FAILED;
 80128ae:	2301      	movs	r3, #1
 80128b0:	e02c      	b.n	801290c <sdc_lld_prepare_read_bytes.lto_priv.772+0x7c>

  /* Prepares the DMA channel for writing.*/
  dmaStreamSetMemory0(sdcp->dma, buf);
 80128b2:	9b03      	ldr	r3, [sp, #12]
 80128b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	9a02      	ldr	r2, [sp, #8]
 80128ba:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma, bytes / sizeof (uint32_t));
 80128bc:	9b03      	ldr	r3, [sp, #12]
 80128be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	9a01      	ldr	r2, [sp, #4]
 80128c4:	0892      	lsrs	r2, r2, #2
 80128c6:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 80128c8:	9b03      	ldr	r3, [sp, #12]
 80128ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	9a03      	ldr	r2, [sp, #12]
 80128d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80128d2:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 80128d4:	9b03      	ldr	r3, [sp, #12]
 80128d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	9a03      	ldr	r2, [sp, #12]
 80128dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80128de:	6812      	ldr	r2, [r2, #0]
 80128e0:	6812      	ldr	r2, [r2, #0]
 80128e2:	f042 0201 	orr.w	r2, r2, #1
 80128e6:	601a      	str	r2, [r3, #0]

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80128e8:	9b03      	ldr	r3, [sp, #12]
 80128ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128ec:	4a0a      	ldr	r2, [pc, #40]	; (8012918 <sdc_lld_prepare_read_bytes.lto_priv.772+0x88>)
 80128ee:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 80128f0:	9b03      	ldr	r3, [sp, #12]
 80128f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128f4:	f240 322a 	movw	r2, #810	; 0x32a
 80128f8:	63da      	str	r2, [r3, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_RXOVERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = bytes;
 80128fa:	9b03      	ldr	r3, [sp, #12]
 80128fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128fe:	9a01      	ldr	r2, [sp, #4]
 8012900:	629a      	str	r2, [r3, #40]	; 0x28

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8012902:	9b03      	ldr	r3, [sp, #12]
 8012904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012906:	220f      	movs	r2, #15
 8012908:	62da      	str	r2, [r3, #44]	; 0x2c
                      SDIO_DCTRL_DTMODE |   /* multibyte data transfer */
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  return HAL_SUCCESS;
 801290a:	2300      	movs	r3, #0
}
 801290c:	4618      	mov	r0, r3
 801290e:	b005      	add	sp, #20
 8012910:	f85d fb04 	ldr.w	pc, [sp], #4
 8012914:	016e3600 	.word	0x016e3600
 8012918:	00c007ff 	.word	0x00c007ff
 801291c:	00000000 	.word	0x00000000

08012920 <sdc_lld_prepare_read.lto_priv.771>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_lld_prepare_read(SDCDriver *sdcp, uint32_t startblk,
                                 uint32_t n, uint32_t *resp) {
 8012920:	b500      	push	{lr}
 8012922:	b085      	sub	sp, #20
 8012924:	9003      	str	r0, [sp, #12]
 8012926:	9102      	str	r1, [sp, #8]
 8012928:	9201      	str	r2, [sp, #4]
 801292a:	9300      	str	r3, [sp, #0]

  /* Driver handles data in 512 bytes blocks (just like HC cards). But if we
     have not HC card than we must convert address from blocks to bytes.*/
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 801292c:	9b03      	ldr	r3, [sp, #12]
 801292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012930:	f003 0310 	and.w	r3, r3, #16
 8012934:	2b00      	cmp	r3, #0
 8012936:	d102      	bne.n	801293e <sdc_lld_prepare_read.lto_priv.771+0x1e>
    startblk *= MMCSD_BLOCK_SIZE;
 8012938:	9b02      	ldr	r3, [sp, #8]
 801293a:	025b      	lsls	r3, r3, #9
 801293c:	9302      	str	r3, [sp, #8]

  if (n > 1) {
 801293e:	9b01      	ldr	r3, [sp, #4]
 8012940:	2b01      	cmp	r3, #1
 8012942:	d910      	bls.n	8012966 <sdc_lld_prepare_read.lto_priv.771+0x46>
    /* Send read multiple blocks command to card.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_MULTIPLE_BLOCK,
 8012944:	9803      	ldr	r0, [sp, #12]
 8012946:	2112      	movs	r1, #18
 8012948:	9a02      	ldr	r2, [sp, #8]
 801294a:	9b00      	ldr	r3, [sp, #0]
 801294c:	f7fc fd78 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8012950:	4603      	mov	r3, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	d105      	bne.n	8012962 <sdc_lld_prepare_read.lto_priv.771+0x42>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8012956:	9b00      	ldr	r3, [sp, #0]
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	4b0e      	ldr	r3, [pc, #56]	; (8012994 <sdc_lld_prepare_read.lto_priv.771+0x74>)
 801295c:	4013      	ands	r3, r2
 801295e:	2b00      	cmp	r3, #0
 8012960:	d012      	beq.n	8012988 <sdc_lld_prepare_read.lto_priv.771+0x68>
      return HAL_FAILED;
 8012962:	2301      	movs	r3, #1
 8012964:	e011      	b.n	801298a <sdc_lld_prepare_read.lto_priv.771+0x6a>
  }
  else {
    /* Send read single block command.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_SINGLE_BLOCK,
 8012966:	9803      	ldr	r0, [sp, #12]
 8012968:	2111      	movs	r1, #17
 801296a:	9a02      	ldr	r2, [sp, #8]
 801296c:	9b00      	ldr	r3, [sp, #0]
 801296e:	f7fc fd67 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8012972:	4603      	mov	r3, r0
 8012974:	2b00      	cmp	r3, #0
 8012976:	d105      	bne.n	8012984 <sdc_lld_prepare_read.lto_priv.771+0x64>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8012978:	9b00      	ldr	r3, [sp, #0]
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	4b05      	ldr	r3, [pc, #20]	; (8012994 <sdc_lld_prepare_read.lto_priv.771+0x74>)
 801297e:	4013      	ands	r3, r2
 8012980:	2b00      	cmp	r3, #0
 8012982:	d001      	beq.n	8012988 <sdc_lld_prepare_read.lto_priv.771+0x68>
      return HAL_FAILED;
 8012984:	2301      	movs	r3, #1
 8012986:	e000      	b.n	801298a <sdc_lld_prepare_read.lto_priv.771+0x6a>
  }

  return HAL_SUCCESS;
 8012988:	2300      	movs	r3, #0
}
 801298a:	4618      	mov	r0, r3
 801298c:	b005      	add	sp, #20
 801298e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012992:	bf00      	nop
 8012994:	fdffe008 	.word	0xfdffe008
	...

080129a0 <sdc_lld_prepare_write.lto_priv.770>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_lld_prepare_write(SDCDriver *sdcp, uint32_t startblk,
                                  uint32_t n, uint32_t *resp) {
 80129a0:	b500      	push	{lr}
 80129a2:	b085      	sub	sp, #20
 80129a4:	9003      	str	r0, [sp, #12]
 80129a6:	9102      	str	r1, [sp, #8]
 80129a8:	9201      	str	r2, [sp, #4]
 80129aa:	9300      	str	r3, [sp, #0]

  /* Driver handles data in 512 bytes blocks (just like HC cards). But if we
     have not HC card than we must convert address from blocks to bytes.*/
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 80129ac:	9b03      	ldr	r3, [sp, #12]
 80129ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129b0:	f003 0310 	and.w	r3, r3, #16
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d102      	bne.n	80129be <sdc_lld_prepare_write.lto_priv.770+0x1e>
    startblk *= MMCSD_BLOCK_SIZE;
 80129b8:	9b02      	ldr	r3, [sp, #8]
 80129ba:	025b      	lsls	r3, r3, #9
 80129bc:	9302      	str	r3, [sp, #8]

  if (n > 1) {
 80129be:	9b01      	ldr	r3, [sp, #4]
 80129c0:	2b01      	cmp	r3, #1
 80129c2:	d910      	bls.n	80129e6 <sdc_lld_prepare_write.lto_priv.770+0x46>
    /* Write multiple blocks command.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 80129c4:	9803      	ldr	r0, [sp, #12]
 80129c6:	2119      	movs	r1, #25
 80129c8:	9a02      	ldr	r2, [sp, #8]
 80129ca:	9b00      	ldr	r3, [sp, #0]
 80129cc:	f7fc fd38 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d105      	bne.n	80129e2 <sdc_lld_prepare_write.lto_priv.770+0x42>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 80129d6:	9b00      	ldr	r3, [sp, #0]
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	4b0e      	ldr	r3, [pc, #56]	; (8012a14 <sdc_lld_prepare_write.lto_priv.770+0x74>)
 80129dc:	4013      	ands	r3, r2
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d012      	beq.n	8012a08 <sdc_lld_prepare_write.lto_priv.770+0x68>
      return HAL_FAILED;
 80129e2:	2301      	movs	r3, #1
 80129e4:	e011      	b.n	8012a0a <sdc_lld_prepare_write.lto_priv.770+0x6a>
  }
  else {
    /* Write single block command.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_BLOCK,
 80129e6:	9803      	ldr	r0, [sp, #12]
 80129e8:	2118      	movs	r1, #24
 80129ea:	9a02      	ldr	r2, [sp, #8]
 80129ec:	9b00      	ldr	r3, [sp, #0]
 80129ee:	f7fc fd27 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 80129f2:	4603      	mov	r3, r0
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d105      	bne.n	8012a04 <sdc_lld_prepare_write.lto_priv.770+0x64>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 80129f8:	9b00      	ldr	r3, [sp, #0]
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	4b05      	ldr	r3, [pc, #20]	; (8012a14 <sdc_lld_prepare_write.lto_priv.770+0x74>)
 80129fe:	4013      	ands	r3, r2
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d001      	beq.n	8012a08 <sdc_lld_prepare_write.lto_priv.770+0x68>
      return HAL_FAILED;
 8012a04:	2301      	movs	r3, #1
 8012a06:	e000      	b.n	8012a0a <sdc_lld_prepare_write.lto_priv.770+0x6a>
  }

  return HAL_SUCCESS;
 8012a08:	2300      	movs	r3, #0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	b005      	add	sp, #20
 8012a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a12:	bf00      	nop
 8012a14:	fdffe008 	.word	0xfdffe008
	...

08012a20 <sdc_lld_wait_transaction_end.lto_priv.769>:
 * @return              The operation status.
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 */
static bool sdc_lld_wait_transaction_end(SDCDriver *sdcp, uint32_t n,
                                         uint32_t *resp) {
 8012a20:	b500      	push	{lr}
 8012a22:	b085      	sub	sp, #20
 8012a24:	9003      	str	r0, [sp, #12]
 8012a26:	9102      	str	r1, [sp, #8]
 8012a28:	9201      	str	r2, [sp, #4]

  /* Note the mask is checked before going to sleep because the interrupt
     may have occurred before reaching the critical zone.*/
  osalSysLock();
 8012a2a:	f7ff fee1 	bl	80127f0 <osalSysLock>
  if (sdcp->sdio->MASK != 0)
 8012a2e:	9b03      	ldr	r3, [sp, #12]
 8012a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d004      	beq.n	8012a42 <sdc_lld_wait_transaction_end.lto_priv.769+0x22>
    osalThreadSuspendS(&sdcp->thread);
 8012a38:	9b03      	ldr	r3, [sp, #12]
 8012a3a:	333c      	adds	r3, #60	; 0x3c
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7ff ff07 	bl	8012850 <osalThreadSuspendS>
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0) {
 8012a42:	9b03      	ldr	r3, [sp, #12]
 8012a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d103      	bne.n	8012a58 <sdc_lld_wait_transaction_end.lto_priv.769+0x38>
    osalSysUnlock();
 8012a50:	f7ff fed6 	bl	8012800 <osalSysUnlock>
    return HAL_FAILED;
 8012a54:	2301      	movs	r3, #1
 8012a56:	e027      	b.n	8012aa8 <sdc_lld_wait_transaction_end.lto_priv.769+0x88>
  }

#if (defined(STM32F4XX) || defined(STM32F2XX))
  /* Wait until DMA channel enabled to be sure that all data transferred.*/
  while (sdcp->dma->stream->CR & STM32_DMA_CR_EN)
 8012a58:	9b03      	ldr	r3, [sp, #12]
 8012a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	f003 0301 	and.w	r3, r3, #1
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d1f7      	bne.n	8012a58 <sdc_lld_wait_transaction_end.lto_priv.769+0x38>
    ;

  /* DMA event flags must be manually cleared.*/
  dmaStreamClearInterrupt(sdcp->dma);
 8012a68:	9b03      	ldr	r3, [sp, #12]
 8012a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	9a03      	ldr	r2, [sp, #12]
 8012a70:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012a72:	7a12      	ldrb	r2, [r2, #8]
 8012a74:	4611      	mov	r1, r2
 8012a76:	223d      	movs	r2, #61	; 0x3d
 8012a78:	408a      	lsls	r2, r1
 8012a7a:	601a      	str	r2, [r3, #0]

  sdcp->sdio->ICR = STM32_SDIO_ICR_ALL_FLAGS;
 8012a7c:	9b03      	ldr	r3, [sp, #12]
 8012a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a80:	4a0b      	ldr	r2, [pc, #44]	; (8012ab0 <sdc_lld_wait_transaction_end.lto_priv.769+0x90>)
 8012a82:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->DCTRL = 0;
 8012a84:	9b03      	ldr	r3, [sp, #12]
 8012a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a88:	2200      	movs	r2, #0
 8012a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  osalSysUnlock();
 8012a8c:	f7ff feb8 	bl	8012800 <osalSysUnlock>
  sdcp->sdio->DCTRL = 0;
  osalSysUnlock();
#endif

  /* Finalize transaction.*/
  if (n > 1)
 8012a90:	9b02      	ldr	r3, [sp, #8]
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d907      	bls.n	8012aa6 <sdc_lld_wait_transaction_end.lto_priv.769+0x86>
    return sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8012a96:	9803      	ldr	r0, [sp, #12]
 8012a98:	210c      	movs	r1, #12
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	9b01      	ldr	r3, [sp, #4]
 8012a9e:	f7fc fccf 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	e000      	b.n	8012aa8 <sdc_lld_wait_transaction_end.lto_priv.769+0x88>

  return HAL_SUCCESS;
 8012aa6:	2300      	movs	r3, #0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	b005      	add	sp, #20
 8012aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ab0:	00c007ff 	.word	0x00c007ff
	...

08012ac0 <sdc_lld_collect_errors.lto_priv.773>:
 * @param[in] sdcp      pointer to the @p SDCDriver object
 * @param[in] sta       value of the STA register
 *
 * @notapi
 */
static void sdc_lld_collect_errors(SDCDriver *sdcp, uint32_t sta) {
 8012ac0:	b084      	sub	sp, #16
 8012ac2:	9001      	str	r0, [sp, #4]
 8012ac4:	9100      	str	r1, [sp, #0]
  uint32_t errors = SDC_NO_ERROR;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	9303      	str	r3, [sp, #12]

  if (sta & SDIO_STA_CCRCFAIL)
 8012aca:	9b00      	ldr	r3, [sp, #0]
 8012acc:	f003 0301 	and.w	r3, r3, #1
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d003      	beq.n	8012adc <sdc_lld_collect_errors.lto_priv.773+0x1c>
    errors |= SDC_CMD_CRC_ERROR;
 8012ad4:	9b03      	ldr	r3, [sp, #12]
 8012ad6:	f043 0301 	orr.w	r3, r3, #1
 8012ada:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_DCRCFAIL)
 8012adc:	9b00      	ldr	r3, [sp, #0]
 8012ade:	f003 0302 	and.w	r3, r3, #2
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d003      	beq.n	8012aee <sdc_lld_collect_errors.lto_priv.773+0x2e>
    errors |= SDC_DATA_CRC_ERROR;
 8012ae6:	9b03      	ldr	r3, [sp, #12]
 8012ae8:	f043 0302 	orr.w	r3, r3, #2
 8012aec:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_CTIMEOUT)
 8012aee:	9b00      	ldr	r3, [sp, #0]
 8012af0:	f003 0304 	and.w	r3, r3, #4
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d003      	beq.n	8012b00 <sdc_lld_collect_errors.lto_priv.773+0x40>
    errors |= SDC_COMMAND_TIMEOUT;
 8012af8:	9b03      	ldr	r3, [sp, #12]
 8012afa:	f043 0308 	orr.w	r3, r3, #8
 8012afe:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_DTIMEOUT)
 8012b00:	9b00      	ldr	r3, [sp, #0]
 8012b02:	f003 0308 	and.w	r3, r3, #8
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d003      	beq.n	8012b12 <sdc_lld_collect_errors.lto_priv.773+0x52>
    errors |= SDC_DATA_TIMEOUT;
 8012b0a:	9b03      	ldr	r3, [sp, #12]
 8012b0c:	f043 0304 	orr.w	r3, r3, #4
 8012b10:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_TXUNDERR)
 8012b12:	9b00      	ldr	r3, [sp, #0]
 8012b14:	f003 0310 	and.w	r3, r3, #16
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d003      	beq.n	8012b24 <sdc_lld_collect_errors.lto_priv.773+0x64>
    errors |= SDC_TX_UNDERRUN;
 8012b1c:	9b03      	ldr	r3, [sp, #12]
 8012b1e:	f043 0310 	orr.w	r3, r3, #16
 8012b22:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_RXOVERR)
 8012b24:	9b00      	ldr	r3, [sp, #0]
 8012b26:	f003 0320 	and.w	r3, r3, #32
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d003      	beq.n	8012b36 <sdc_lld_collect_errors.lto_priv.773+0x76>
    errors |= SDC_RX_OVERRUN;
 8012b2e:	9b03      	ldr	r3, [sp, #12]
 8012b30:	f043 0320 	orr.w	r3, r3, #32
 8012b34:	9303      	str	r3, [sp, #12]
  if (sta & SDIO_STA_STBITERR)
 8012b36:	9b00      	ldr	r3, [sp, #0]
 8012b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d003      	beq.n	8012b48 <sdc_lld_collect_errors.lto_priv.773+0x88>
    errors |= SDC_STARTBIT_ERROR;
 8012b40:	9b03      	ldr	r3, [sp, #12]
 8012b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b46:	9303      	str	r3, [sp, #12]

  sdcp->errors |= errors;
 8012b48:	9b01      	ldr	r3, [sp, #4]
 8012b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b4c:	9b03      	ldr	r3, [sp, #12]
 8012b4e:	431a      	orrs	r2, r3
 8012b50:	9b01      	ldr	r3, [sp, #4]
 8012b52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8012b54:	b004      	add	sp, #16
 8012b56:	4770      	bx	lr
	...

08012b60 <sdc_lld_error_cleanup.lto_priv.768>:
 *
 * @notapi
 */
static void sdc_lld_error_cleanup(SDCDriver *sdcp,
                                  uint32_t n,
                                  uint32_t *resp) {
 8012b60:	b500      	push	{lr}
 8012b62:	b087      	sub	sp, #28
 8012b64:	9003      	str	r0, [sp, #12]
 8012b66:	9102      	str	r1, [sp, #8]
 8012b68:	9201      	str	r2, [sp, #4]
  uint32_t sta = sdcp->sdio->STA;
 8012b6a:	9b03      	ldr	r3, [sp, #12]
 8012b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b70:	9305      	str	r3, [sp, #20]

  dmaStreamClearInterrupt(sdcp->dma);
 8012b72:	9b03      	ldr	r3, [sp, #12]
 8012b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	9a03      	ldr	r2, [sp, #12]
 8012b7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012b7c:	7a12      	ldrb	r2, [r2, #8]
 8012b7e:	4611      	mov	r1, r2
 8012b80:	223d      	movs	r2, #61	; 0x3d
 8012b82:	408a      	lsls	r2, r1
 8012b84:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(sdcp->dma);
 8012b86:	9b03      	ldr	r3, [sp, #12]
 8012b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	9a03      	ldr	r2, [sp, #12]
 8012b8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012b90:	6812      	ldr	r2, [r2, #0]
 8012b92:	6812      	ldr	r2, [r2, #0]
 8012b94:	f022 021f 	bic.w	r2, r2, #31
 8012b98:	601a      	str	r2, [r3, #0]
 8012b9a:	9b03      	ldr	r3, [sp, #12]
 8012b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	f003 0301 	and.w	r3, r3, #1
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d1f7      	bne.n	8012b9a <sdc_lld_error_cleanup.lto_priv.768+0x3a>
 8012baa:	9b03      	ldr	r3, [sp, #12]
 8012bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	9a03      	ldr	r2, [sp, #12]
 8012bb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012bb4:	7a12      	ldrb	r2, [r2, #8]
 8012bb6:	4611      	mov	r1, r2
 8012bb8:	223d      	movs	r2, #61	; 0x3d
 8012bba:	408a      	lsls	r2, r1
 8012bbc:	601a      	str	r2, [r3, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8012bbe:	9b03      	ldr	r3, [sp, #12]
 8012bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012bc2:	4a0d      	ldr	r2, [pc, #52]	; (8012bf8 <sdc_lld_error_cleanup.lto_priv.768+0x98>)
 8012bc4:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = 0;
 8012bc6:	9b03      	ldr	r3, [sp, #12]
 8012bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012bca:	2200      	movs	r2, #0
 8012bcc:	63da      	str	r2, [r3, #60]	; 0x3c
  sdcp->sdio->DCTRL = 0;
 8012bce:	9b03      	ldr	r3, [sp, #12]
 8012bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 8012bd6:	9803      	ldr	r0, [sp, #12]
 8012bd8:	9905      	ldr	r1, [sp, #20]
 8012bda:	f7ff ff71 	bl	8012ac0 <sdc_lld_collect_errors.lto_priv.773>
  if (n > 1)
 8012bde:	9b02      	ldr	r3, [sp, #8]
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d905      	bls.n	8012bf0 <sdc_lld_error_cleanup.lto_priv.768+0x90>
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8012be4:	9803      	ldr	r0, [sp, #12]
 8012be6:	210c      	movs	r1, #12
 8012be8:	2200      	movs	r2, #0
 8012bea:	9b01      	ldr	r3, [sp, #4]
 8012bec:	f7fc fc28 	bl	800f440 <sdc_lld_send_cmd_short_crc>
}
 8012bf0:	b007      	add	sp, #28
 8012bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8012bf6:	bf00      	nop
 8012bf8:	00c007ff 	.word	0x00c007ff
 8012bfc:	00000000 	.word	0x00000000

08012c00 <Vector104>:
 * @details It just wakes transaction thread. All error  handling performs in
 *          that thread.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_SDIO_HANDLER) {
 8012c00:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  osalSysLockFromISR();
 8012c02:	f7ff fe05 	bl	8012810 <osalSysLockFromISR.lto_priv.781>

  /* Disables the source but the status flags are not reset because the
     read/write functions needs to check them.*/
  SDIO->MASK = 0;
 8012c06:	4b06      	ldr	r3, [pc, #24]	; (8012c20 <Vector104+0x20>)
 8012c08:	2200      	movs	r2, #0
 8012c0a:	63da      	str	r2, [r3, #60]	; 0x3c

  osalThreadResumeI(&SDCD1.thread, MSG_OK);
 8012c0c:	4805      	ldr	r0, [pc, #20]	; (8012c24 <Vector104+0x24>)
 8012c0e:	2100      	movs	r1, #0
 8012c10:	f7ff fe2e 	bl	8012870 <osalThreadResumeI>

  osalSysUnlockFromISR();
 8012c14:	f7ff fe04 	bl	8012820 <osalSysUnlockFromISR.lto_priv.778>

  OSAL_IRQ_EPILOGUE();
 8012c18:	f7fc fb0a 	bl	800f230 <_port_irq_epilogue>
}
 8012c1c:	bd08      	pop	{r3, pc}
 8012c1e:	bf00      	nop
 8012c20:	40012c00 	.word	0x40012c00
 8012c24:	200012e8 	.word	0x200012e8
	...

08012c30 <sdc_lld_init>:
/**
 * @brief   Low level SDC driver initialization.
 *
 * @notapi
 */
void sdc_lld_init(void) {
 8012c30:	b508      	push	{r3, lr}

  sdcObjectInit(&SDCD1);
 8012c32:	4806      	ldr	r0, [pc, #24]	; (8012c4c <sdc_lld_init+0x1c>)
 8012c34:	f002 f894 	bl	8014d60 <sdcObjectInit>
  SDCD1.thread = NULL;
 8012c38:	4b04      	ldr	r3, [pc, #16]	; (8012c4c <sdc_lld_init+0x1c>)
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  SDCD1.dma    = STM32_DMA_STREAM(STM32_SDC_SDIO_DMA_STREAM);
 8012c3e:	4b03      	ldr	r3, [pc, #12]	; (8012c4c <sdc_lld_init+0x1c>)
 8012c40:	4a03      	ldr	r2, [pc, #12]	; (8012c50 <sdc_lld_init+0x20>)
 8012c42:	645a      	str	r2, [r3, #68]	; 0x44
  SDCD1.sdio   = SDIO;
 8012c44:	4b01      	ldr	r3, [pc, #4]	; (8012c4c <sdc_lld_init+0x1c>)
 8012c46:	4a03      	ldr	r2, [pc, #12]	; (8012c54 <sdc_lld_init+0x24>)
 8012c48:	649a      	str	r2, [r3, #72]	; 0x48
}
 8012c4a:	bd08      	pop	{r3, pc}
 8012c4c:	200012ac 	.word	0x200012ac
 8012c50:	0801d7b0 	.word	0x0801d7b0
 8012c54:	40012c00 	.word	0x40012c00
	...

08012c60 <_write.lto_priv.186>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8012c60:	b500      	push	{lr}
 8012c62:	b085      	sub	sp, #20
 8012c64:	9003      	str	r0, [sp, #12]
 8012c66:	9102      	str	r1, [sp, #8]
 8012c68:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8012c6a:	9b03      	ldr	r3, [sp, #12]
 8012c6c:	3330      	adds	r3, #48	; 0x30
 8012c6e:	4618      	mov	r0, r3
 8012c70:	9902      	ldr	r1, [sp, #8]
 8012c72:	9a01      	ldr	r2, [sp, #4]
 8012c74:	f04f 33ff 	mov.w	r3, #4294967295
 8012c78:	f002 fdf2 	bl	8015860 <oqWriteTimeout>
 8012c7c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	b005      	add	sp, #20
 8012c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c86:	bf00      	nop
	...

08012c90 <_read.lto_priv.188>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8012c90:	b500      	push	{lr}
 8012c92:	b085      	sub	sp, #20
 8012c94:	9003      	str	r0, [sp, #12]
 8012c96:	9102      	str	r1, [sp, #8]
 8012c98:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8012c9a:	9b03      	ldr	r3, [sp, #12]
 8012c9c:	330c      	adds	r3, #12
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	9902      	ldr	r1, [sp, #8]
 8012ca2:	9a01      	ldr	r2, [sp, #4]
 8012ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca8:	f002 fcea 	bl	8015680 <iqReadTimeout>
 8012cac:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	b005      	add	sp, #20
 8012cb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8012cb6:	bf00      	nop
	...

08012cc0 <_put.lto_priv.179>:

static msg_t _put(void *ip, uint8_t b) {
 8012cc0:	b500      	push	{lr}
 8012cc2:	b083      	sub	sp, #12
 8012cc4:	9001      	str	r0, [sp, #4]
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8012ccc:	9b01      	ldr	r3, [sp, #4]
 8012cce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012cd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012cd6:	4610      	mov	r0, r2
 8012cd8:	4619      	mov	r1, r3
 8012cda:	f04f 32ff 	mov.w	r2, #4294967295
 8012cde:	f002 fd37 	bl	8015750 <oqPutTimeout>
 8012ce2:	4603      	mov	r3, r0
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	b003      	add	sp, #12
 8012ce8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012cec:	0000      	movs	r0, r0
	...

08012cf0 <_get.lto_priv.182>:

static msg_t _get(void *ip) {
 8012cf0:	b500      	push	{lr}
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8012cf6:	9b01      	ldr	r3, [sp, #4]
 8012cf8:	330c      	adds	r3, #12
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8012d00:	f002 fc7e 	bl	8015600 <iqGetTimeout>
 8012d04:	4603      	mov	r3, r0
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	b003      	add	sp, #12
 8012d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d0e:	bf00      	nop

08012d10 <_putt.lto_priv.190>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8012d10:	b500      	push	{lr}
 8012d12:	b085      	sub	sp, #20
 8012d14:	9003      	str	r0, [sp, #12]
 8012d16:	460b      	mov	r3, r1
 8012d18:	9201      	str	r2, [sp, #4]
 8012d1a:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8012d1e:	9b03      	ldr	r3, [sp, #12]
 8012d20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d24:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012d28:	4610      	mov	r0, r2
 8012d2a:	4619      	mov	r1, r3
 8012d2c:	9a01      	ldr	r2, [sp, #4]
 8012d2e:	f002 fd0f 	bl	8015750 <oqPutTimeout>
 8012d32:	4603      	mov	r3, r0
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	b005      	add	sp, #20
 8012d38:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d3c:	0000      	movs	r0, r0
	...

08012d40 <_gett.lto_priv.192>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 8012d40:	b500      	push	{lr}
 8012d42:	b083      	sub	sp, #12
 8012d44:	9001      	str	r0, [sp, #4]
 8012d46:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8012d48:	9b01      	ldr	r3, [sp, #4]
 8012d4a:	330c      	adds	r3, #12
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	9900      	ldr	r1, [sp, #0]
 8012d50:	f002 fc56 	bl	8015600 <iqGetTimeout>
 8012d54:	4603      	mov	r3, r0
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	b003      	add	sp, #12
 8012d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d5e:	bf00      	nop

08012d60 <_writet.lto_priv.194>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8012d60:	b500      	push	{lr}
 8012d62:	b085      	sub	sp, #20
 8012d64:	9003      	str	r0, [sp, #12]
 8012d66:	9102      	str	r1, [sp, #8]
 8012d68:	9201      	str	r2, [sp, #4]
 8012d6a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8012d6c:	9b03      	ldr	r3, [sp, #12]
 8012d6e:	3330      	adds	r3, #48	; 0x30
 8012d70:	4618      	mov	r0, r3
 8012d72:	9902      	ldr	r1, [sp, #8]
 8012d74:	9a01      	ldr	r2, [sp, #4]
 8012d76:	9b00      	ldr	r3, [sp, #0]
 8012d78:	f002 fd72 	bl	8015860 <oqWriteTimeout>
 8012d7c:	4603      	mov	r3, r0
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	b005      	add	sp, #20
 8012d82:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d86:	bf00      	nop
	...

08012d90 <_readt.lto_priv.196>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8012d90:	b500      	push	{lr}
 8012d92:	b085      	sub	sp, #20
 8012d94:	9003      	str	r0, [sp, #12]
 8012d96:	9102      	str	r1, [sp, #8]
 8012d98:	9201      	str	r2, [sp, #4]
 8012d9a:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8012d9c:	9b03      	ldr	r3, [sp, #12]
 8012d9e:	330c      	adds	r3, #12
 8012da0:	4618      	mov	r0, r3
 8012da2:	9902      	ldr	r1, [sp, #8]
 8012da4:	9a01      	ldr	r2, [sp, #4]
 8012da6:	9b00      	ldr	r3, [sp, #0]
 8012da8:	f002 fc6a 	bl	8015680 <iqReadTimeout>
 8012dac:	4603      	mov	r3, r0
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	b005      	add	sp, #20
 8012db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8012db6:	bf00      	nop
	...

08012dc0 <_ctl.lto_priv.198>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8012dc0:	b086      	sub	sp, #24
 8012dc2:	9003      	str	r0, [sp, #12]
 8012dc4:	9102      	str	r1, [sp, #8]
 8012dc6:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 8012dc8:	9b03      	ldr	r3, [sp, #12]
 8012dca:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);

  switch (operation) {
 8012dcc:	9b02      	ldr	r3, [sp, #8]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d000      	beq.n	8012dd4 <_ctl.lto_priv.198+0x14>
 8012dd2:	2b01      	cmp	r3, #1
    return sd_lld_control(sdp, operation, arg);
#else
    break;
#endif
  }
  return MSG_OK;
 8012dd4:	2300      	movs	r3, #0
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	b006      	add	sp, #24
 8012dda:	4770      	bx	lr
 8012ddc:	0000      	movs	r0, r0
	...

08012de0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8012de0:	b508      	push	{r3, lr}

  sd_lld_init();
 8012de2:	f7fc ff75 	bl	800fcd0 <sd_lld_init>
}
 8012de6:	bd08      	pop	{r3, pc}
	...

08012df0 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8012df0:	b500      	push	{lr}
 8012df2:	b087      	sub	sp, #28
 8012df4:	9005      	str	r0, [sp, #20]
 8012df6:	9104      	str	r1, [sp, #16]
 8012df8:	9203      	str	r2, [sp, #12]

  sdp->vmt = &vmt;
 8012dfa:	9b05      	ldr	r3, [sp, #20]
 8012dfc:	4a15      	ldr	r2, [pc, #84]	; (8012e54 <sdObjectInit+0x64>)
 8012dfe:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 8012e00:	9b05      	ldr	r3, [sp, #20]
 8012e02:	3304      	adds	r3, #4
 8012e04:	4618      	mov	r0, r3
 8012e06:	f002 f973 	bl	80150f0 <osalEventObjectInit.lto_priv.857>
  sdp->state = SD_STOP;
 8012e0a:	9b05      	ldr	r3, [sp, #20]
 8012e0c:	2201      	movs	r2, #1
 8012e0e:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8012e10:	9b05      	ldr	r3, [sp, #20]
 8012e12:	f103 010c 	add.w	r1, r3, #12
 8012e16:	9b05      	ldr	r3, [sp, #20]
 8012e18:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8012e1c:	9b05      	ldr	r3, [sp, #20]
 8012e1e:	9300      	str	r3, [sp, #0]
 8012e20:	4608      	mov	r0, r1
 8012e22:	4611      	mov	r1, r2
 8012e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012e28:	9b04      	ldr	r3, [sp, #16]
 8012e2a:	f002 fb81 	bl	8015530 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8012e2e:	9b05      	ldr	r3, [sp, #20]
 8012e30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e34:	9b05      	ldr	r3, [sp, #20]
 8012e36:	f203 4254 	addw	r2, r3, #1108	; 0x454
 8012e3a:	9b05      	ldr	r3, [sp, #20]
 8012e3c:	9300      	str	r3, [sp, #0]
 8012e3e:	4608      	mov	r0, r1
 8012e40:	4611      	mov	r1, r2
 8012e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012e46:	9b03      	ldr	r3, [sp, #12]
 8012e48:	f002 fc5a 	bl	8015700 <oqObjectInit>
}
 8012e4c:	b007      	add	sp, #28
 8012e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e52:	bf00      	nop
 8012e54:	0801d6fc 	.word	0x0801d6fc
	...

08012e60 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8012e60:	b500      	push	{lr}
 8012e62:	b083      	sub	sp, #12
 8012e64:	9001      	str	r0, [sp, #4]
 8012e66:	460b      	mov	r3, r1
 8012e68:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8012e6c:	9b01      	ldr	r3, [sp, #4]
 8012e6e:	695b      	ldr	r3, [r3, #20]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d105      	bne.n	8012e80 <sdIncomingDataI+0x20>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8012e74:	9b01      	ldr	r3, [sp, #4]
 8012e76:	3304      	adds	r3, #4
 8012e78:	4618      	mov	r0, r3
 8012e7a:	2104      	movs	r1, #4
 8012e7c:	f002 f948 	bl	8015110 <osalEventBroadcastFlagsI.lto_priv.855>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8012e80:	9b01      	ldr	r3, [sp, #4]
 8012e82:	f103 020c 	add.w	r2, r3, #12
 8012e86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012e8a:	4610      	mov	r0, r2
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	f002 fb77 	bl	8015580 <iqPutI>
 8012e92:	4603      	mov	r3, r0
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	da06      	bge.n	8012ea6 <sdIncomingDataI+0x46>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8012e98:	9b01      	ldr	r3, [sp, #4]
 8012e9a:	3304      	adds	r3, #4
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012ea2:	f002 f935 	bl	8015110 <osalEventBroadcastFlagsI.lto_priv.855>
}
 8012ea6:	b003      	add	sp, #12
 8012ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012eac:	0000      	movs	r0, r0
	...

08012eb0 <sduInit>:
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
}
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
	...

08012ec0 <port_lock.lto_priv.827>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8012ec0:	b082      	sub	sp, #8
 8012ec2:	2320      	movs	r3, #32
 8012ec4:	9301      	str	r3, [sp, #4]
 8012ec6:	9b01      	ldr	r3, [sp, #4]
 8012ec8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8012ecc:	b002      	add	sp, #8
 8012ece:	4770      	bx	lr

08012ed0 <port_unlock.lto_priv.823>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8012ed0:	b082      	sub	sp, #8
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	9301      	str	r3, [sp, #4]
 8012ed6:	9b01      	ldr	r3, [sp, #4]
 8012ed8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8012edc:	b002      	add	sp, #8
 8012ede:	4770      	bx	lr

08012ee0 <port_lock_from_isr.lto_priv.819>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8012ee0:	b508      	push	{r3, lr}

  port_lock();
 8012ee2:	f7ff ffed 	bl	8012ec0 <port_lock.lto_priv.827>
}
 8012ee6:	bd08      	pop	{r3, pc}
	...

08012ef0 <port_unlock_from_isr.lto_priv.815>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8012ef0:	b508      	push	{r3, lr}

  port_unlock();
 8012ef2:	f7ff ffed 	bl	8012ed0 <port_unlock.lto_priv.823>
}
 8012ef6:	bd08      	pop	{r3, pc}
	...

08012f00 <chSysLockFromISR.lto_priv.811>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8012f00:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8012f02:	f7ff ffed 	bl	8012ee0 <port_lock_from_isr.lto_priv.819>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8012f06:	bd08      	pop	{r3, pc}
	...

08012f10 <chSysUnlockFromISR.lto_priv.807>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8012f10:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8012f12:	f7ff ffed 	bl	8012ef0 <port_unlock_from_isr.lto_priv.815>
}
 8012f16:	bd08      	pop	{r3, pc}
	...

08012f20 <osalSysLockFromISR.lto_priv.836>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8012f20:	b508      	push	{r3, lr}

  chSysLockFromISR();
 8012f22:	f7ff ffed 	bl	8012f00 <chSysLockFromISR.lto_priv.811>
}
 8012f26:	bd08      	pop	{r3, pc}
	...

08012f30 <osalSysUnlockFromISR.lto_priv.833>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8012f30:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 8012f32:	f7ff ffed 	bl	8012f10 <chSysUnlockFromISR.lto_priv.807>
}
 8012f36:	bd08      	pop	{r3, pc}
	...

08012f40 <get_hword>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static uint16_t get_hword(uint8_t *p) {
 8012f40:	b084      	sub	sp, #16
 8012f42:	9001      	str	r0, [sp, #4]
  uint16_t hw;

  hw  = (uint16_t)*p++;
 8012f44:	9b01      	ldr	r3, [sp, #4]
 8012f46:	1c5a      	adds	r2, r3, #1
 8012f48:	9201      	str	r2, [sp, #4]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	f8ad 300e 	strh.w	r3, [sp, #14]
  hw |= (uint16_t)*p << 8U;
 8012f50:	9b01      	ldr	r3, [sp, #4]
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	021b      	lsls	r3, r3, #8
 8012f56:	b29a      	uxth	r2, r3
 8012f58:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012f5c:	4313      	orrs	r3, r2
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	f8ad 300e 	strh.w	r3, [sp, #14]
  return hw;
 8012f64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	b004      	add	sp, #16
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop

08012f70 <set_address>:
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8012f70:	b500      	push	{lr}
 8012f72:	b083      	sub	sp, #12
 8012f74:	9001      	str	r0, [sp, #4]

  usbp->address = usbp->setup[2];
 8012f76:	9b01      	ldr	r3, [sp, #4]
 8012f78:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8012f7c:	9b01      	ldr	r3, [sp, #4]
 8012f7e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  usb_lld_set_address(usbp);
 8012f82:	9801      	ldr	r0, [sp, #4]
 8012f84:	f7ff f9a4 	bl	80122d0 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8012f88:	9b01      	ldr	r3, [sp, #4]
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d005      	beq.n	8012f9e <set_address+0x2e>
 8012f92:	9b01      	ldr	r3, [sp, #4]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	9801      	ldr	r0, [sp, #4]
 8012f9a:	2101      	movs	r1, #1
 8012f9c:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 8012f9e:	9b01      	ldr	r3, [sp, #4]
 8012fa0:	2203      	movs	r2, #3
 8012fa2:	701a      	strb	r2, [r3, #0]
}
 8012fa4:	b003      	add	sp, #12
 8012fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8012faa:	bf00      	nop
 8012fac:	0000      	movs	r0, r0
	...

08012fb0 <default_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @return              The request handling exit code.
 * @retval false        Request not recognized by the handler or error.
 * @retval true         Request handled.
 */
static bool default_handler(USBDriver *usbp) {
 8012fb0:	b570      	push	{r4, r5, r6, lr}
 8012fb2:	b084      	sub	sp, #16
 8012fb4:	9001      	str	r0, [sp, #4]
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8012fb6:	9b01      	ldr	r3, [sp, #4]
 8012fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 8012fc0:	9b01      	ldr	r3, [sp, #4]
 8012fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fc6:	021b      	lsls	r3, r3, #8
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
 8012fc8:	4313      	orrs	r3, r2
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8012fca:	f240 3202 	movw	r2, #770	; 0x302
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	f000 81a1 	beq.w	8013316 <default_handler+0x366>
 8012fd4:	f240 3202 	movw	r2, #770	; 0x302
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d815      	bhi.n	8013008 <default_handler+0x58>
 8012fdc:	2b02      	cmp	r3, #2
 8012fde:	f000 810e 	beq.w	80131fe <default_handler+0x24e>
 8012fe2:	2b02      	cmp	r3, #2
 8012fe4:	d805      	bhi.n	8012ff2 <default_handler+0x42>
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d027      	beq.n	801303a <default_handler+0x8a>
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	f000 80fc 	beq.w	80131e8 <default_handler+0x238>
 8012ff0:	e1c6      	b.n	8013380 <default_handler+0x3d0>
 8012ff2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8012ff6:	f000 8159 	beq.w	80132ac <default_handler+0x2fc>
 8012ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012ffe:	d044      	beq.n	801308a <default_handler+0xda>
 8013000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013004:	d026      	beq.n	8013054 <default_handler+0xa4>
 8013006:	e1bb      	b.n	8013380 <default_handler+0x3d0>
 8013008:	f240 6201 	movw	r2, #1537	; 0x601
 801300c:	4293      	cmp	r3, r2
 801300e:	d806      	bhi.n	801301e <default_handler+0x6e>
 8013010:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013014:	d26c      	bcs.n	80130f0 <default_handler+0x140>
 8013016:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 801301a:	d051      	beq.n	80130c0 <default_handler+0x110>
 801301c:	e1b0      	b.n	8013380 <default_handler+0x3d0>
 801301e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8013022:	f000 8098 	beq.w	8013156 <default_handler+0x1a6>
 8013026:	f640 4202 	movw	r2, #3074	; 0xc02
 801302a:	4293      	cmp	r3, r2
 801302c:	f000 80dc 	beq.w	80131e8 <default_handler+0x238>
 8013030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013034:	f000 8082 	beq.w	801313c <default_handler+0x18c>
 8013038:	e1a2      	b.n	8013380 <default_handler+0x3d0>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 801303a:	9b01      	ldr	r3, [sp, #4]
 801303c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8013040:	9b01      	ldr	r3, [sp, #4]
 8013042:	639a      	str	r2, [r3, #56]	; 0x38
 8013044:	9b01      	ldr	r3, [sp, #4]
 8013046:	2202      	movs	r2, #2
 8013048:	63da      	str	r2, [r3, #60]	; 0x3c
 801304a:	9b01      	ldr	r3, [sp, #4]
 801304c:	2200      	movs	r2, #0
 801304e:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8013050:	2301      	movs	r3, #1
 8013052:	e196      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8013054:	9b01      	ldr	r3, [sp, #4]
 8013056:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801305a:	2b01      	cmp	r3, #1
 801305c:	d113      	bne.n	8013086 <default_handler+0xd6>
      usbp->status &= ~2U;
 801305e:	9b01      	ldr	r3, [sp, #4]
 8013060:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8013064:	f023 0302 	bic.w	r3, r3, #2
 8013068:	b29a      	uxth	r2, r3
 801306a:	9b01      	ldr	r3, [sp, #4]
 801306c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8013070:	9b01      	ldr	r3, [sp, #4]
 8013072:	2200      	movs	r2, #0
 8013074:	639a      	str	r2, [r3, #56]	; 0x38
 8013076:	9b01      	ldr	r3, [sp, #4]
 8013078:	2200      	movs	r2, #0
 801307a:	63da      	str	r2, [r3, #60]	; 0x3c
 801307c:	9b01      	ldr	r3, [sp, #4]
 801307e:	2200      	movs	r2, #0
 8013080:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8013082:	2301      	movs	r3, #1
 8013084:	e17d      	b.n	8013382 <default_handler+0x3d2>
    }
    return false;
 8013086:	2300      	movs	r3, #0
 8013088:	e17b      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 801308a:	9b01      	ldr	r3, [sp, #4]
 801308c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013090:	2b01      	cmp	r3, #1
 8013092:	d113      	bne.n	80130bc <default_handler+0x10c>
      usbp->status |= 2U;
 8013094:	9b01      	ldr	r3, [sp, #4]
 8013096:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801309a:	f043 0302 	orr.w	r3, r3, #2
 801309e:	b29a      	uxth	r2, r3
 80130a0:	9b01      	ldr	r3, [sp, #4]
 80130a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80130a6:	9b01      	ldr	r3, [sp, #4]
 80130a8:	2200      	movs	r2, #0
 80130aa:	639a      	str	r2, [r3, #56]	; 0x38
 80130ac:	9b01      	ldr	r3, [sp, #4]
 80130ae:	2200      	movs	r2, #0
 80130b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80130b2:	9b01      	ldr	r3, [sp, #4]
 80130b4:	2200      	movs	r2, #0
 80130b6:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 80130b8:	2301      	movs	r3, #1
 80130ba:	e162      	b.n	8013382 <default_handler+0x3d2>
    }
    return false;
 80130bc:	2300      	movs	r3, #0
 80130be:	e160      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 80130c0:	9b01      	ldr	r3, [sp, #4]
 80130c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d107      	bne.n	80130da <default_handler+0x12a>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
 80130ca:	9b01      	ldr	r3, [sp, #4]
 80130cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 80130d0:	2b05      	cmp	r3, #5
 80130d2:	d102      	bne.n	80130da <default_handler+0x12a>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
 80130d4:	9801      	ldr	r0, [sp, #4]
 80130d6:	f7ff ff4b 	bl	8012f70 <set_address>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80130da:	9b01      	ldr	r3, [sp, #4]
 80130dc:	2200      	movs	r2, #0
 80130de:	639a      	str	r2, [r3, #56]	; 0x38
 80130e0:	9b01      	ldr	r3, [sp, #4]
 80130e2:	2200      	movs	r2, #0
 80130e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80130e6:	9b01      	ldr	r3, [sp, #4]
 80130e8:	2200      	movs	r2, #0
 80130ea:	641a      	str	r2, [r3, #64]	; 0x40
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
 80130ec:	2301      	movs	r3, #1
 80130ee:	e148      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80130f0:	9b01      	ldr	r3, [sp, #4]
 80130f2:	685b      	ldr	r3, [r3, #4]
 80130f4:	685c      	ldr	r4, [r3, #4]
 80130f6:	9b01      	ldr	r3, [sp, #4]
 80130f8:	f893 6047 	ldrb.w	r6, [r3, #71]	; 0x47
 80130fc:	9b01      	ldr	r3, [sp, #4]
 80130fe:	f893 5046 	ldrb.w	r5, [r3, #70]	; 0x46
 8013102:	9b01      	ldr	r3, [sp, #4]
 8013104:	3348      	adds	r3, #72	; 0x48
 8013106:	4618      	mov	r0, r3
 8013108:	f7ff ff1a 	bl	8012f40 <get_hword>
 801310c:	4603      	mov	r3, r0
 801310e:	9801      	ldr	r0, [sp, #4]
 8013110:	4631      	mov	r1, r6
 8013112:	462a      	mov	r2, r5
 8013114:	47a0      	blx	r4
 8013116:	9003      	str	r0, [sp, #12]
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8013118:	9b03      	ldr	r3, [sp, #12]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d101      	bne.n	8013122 <default_handler+0x172>
      return false;
 801311e:	2300      	movs	r3, #0
 8013120:	e12f      	b.n	8013382 <default_handler+0x3d2>
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8013122:	9b03      	ldr	r3, [sp, #12]
 8013124:	685a      	ldr	r2, [r3, #4]
 8013126:	9b01      	ldr	r3, [sp, #4]
 8013128:	639a      	str	r2, [r3, #56]	; 0x38
 801312a:	9b03      	ldr	r3, [sp, #12]
 801312c:	681a      	ldr	r2, [r3, #0]
 801312e:	9b01      	ldr	r3, [sp, #4]
 8013130:	63da      	str	r2, [r3, #60]	; 0x3c
 8013132:	9b01      	ldr	r3, [sp, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	641a      	str	r2, [r3, #64]	; 0x40
    /*lint -restore*/
    return true;
 8013138:	2301      	movs	r3, #1
 801313a:	e122      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 801313c:	9b01      	ldr	r3, [sp, #4]
 801313e:	f103 024f 	add.w	r2, r3, #79	; 0x4f
 8013142:	9b01      	ldr	r3, [sp, #4]
 8013144:	639a      	str	r2, [r3, #56]	; 0x38
 8013146:	9b01      	ldr	r3, [sp, #4]
 8013148:	2201      	movs	r2, #1
 801314a:	63da      	str	r2, [r3, #60]	; 0x3c
 801314c:	9b01      	ldr	r3, [sp, #4]
 801314e:	2200      	movs	r2, #0
 8013150:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8013152:	2301      	movs	r3, #1
 8013154:	e115      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host only if it is different
       from the current configuration.*/
    if (usbp->configuration != usbp->setup[2]) {
 8013156:	9b01      	ldr	r3, [sp, #4]
 8013158:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 801315c:	9b01      	ldr	r3, [sp, #4]
 801315e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013162:	429a      	cmp	r2, r3
 8013164:	d035      	beq.n	80131d2 <default_handler+0x222>
      /* If the USB device is already active then we have to perform the clear
         procedure on the current configuration.*/
      if (usbp->state == USB_ACTIVE) {
 8013166:	9b01      	ldr	r3, [sp, #4]
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	2b04      	cmp	r3, #4
 801316c:	d118      	bne.n	80131a0 <default_handler+0x1f0>
        /* Current configuration cleared.*/
        osalSysLockFromISR ();
 801316e:	f7ff fed7 	bl	8012f20 <osalSysLockFromISR.lto_priv.836>
        usbDisableEndpointsI(usbp);
 8013172:	9801      	ldr	r0, [sp, #4]
 8013174:	f000 f944 	bl	8013400 <usbDisableEndpointsI>
        osalSysUnlockFromISR ();
 8013178:	f7ff feda 	bl	8012f30 <osalSysUnlockFromISR.lto_priv.833>
        usbp->configuration = 0U;
 801317c:	9b01      	ldr	r3, [sp, #4]
 801317e:	2200      	movs	r2, #0
 8013180:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        usbp->state = USB_SELECTED;
 8013184:	9b01      	ldr	r3, [sp, #4]
 8013186:	2203      	movs	r2, #3
 8013188:	701a      	strb	r2, [r3, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 801318a:	9b01      	ldr	r3, [sp, #4]
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d005      	beq.n	80131a0 <default_handler+0x1f0>
 8013194:	9b01      	ldr	r3, [sp, #4]
 8013196:	685b      	ldr	r3, [r3, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	9801      	ldr	r0, [sp, #4]
 801319c:	2103      	movs	r1, #3
 801319e:	4798      	blx	r3
      }
      if (usbp->setup[2] != 0U) {
 80131a0:	9b01      	ldr	r3, [sp, #4]
 80131a2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d013      	beq.n	80131d2 <default_handler+0x222>
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
 80131aa:	9b01      	ldr	r3, [sp, #4]
 80131ac:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80131b0:	9b01      	ldr	r3, [sp, #4]
 80131b2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        usbp->state = USB_ACTIVE;
 80131b6:	9b01      	ldr	r3, [sp, #4]
 80131b8:	2204      	movs	r2, #4
 80131ba:	701a      	strb	r2, [r3, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80131bc:	9b01      	ldr	r3, [sp, #4]
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d005      	beq.n	80131d2 <default_handler+0x222>
 80131c6:	9b01      	ldr	r3, [sp, #4]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	9801      	ldr	r0, [sp, #4]
 80131ce:	2102      	movs	r1, #2
 80131d0:	4798      	blx	r3
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80131d2:	9b01      	ldr	r3, [sp, #4]
 80131d4:	2200      	movs	r2, #0
 80131d6:	639a      	str	r2, [r3, #56]	; 0x38
 80131d8:	9b01      	ldr	r3, [sp, #4]
 80131da:	2200      	movs	r2, #0
 80131dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80131de:	9b01      	ldr	r3, [sp, #4]
 80131e0:	2200      	movs	r2, #0
 80131e2:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 80131e4:	2301      	movs	r3, #1
 80131e6:	e0cc      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 80131e8:	9b01      	ldr	r3, [sp, #4]
 80131ea:	4a67      	ldr	r2, [pc, #412]	; (8013388 <default_handler+0x3d8>)
 80131ec:	639a      	str	r2, [r3, #56]	; 0x38
 80131ee:	9b01      	ldr	r3, [sp, #4]
 80131f0:	2202      	movs	r2, #2
 80131f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80131f4:	9b01      	ldr	r3, [sp, #4]
 80131f6:	2200      	movs	r2, #0
 80131f8:	641a      	str	r2, [r3, #64]	; 0x40
    /*lint -restore*/
    return true;
 80131fa:	2301      	movs	r3, #1
 80131fc:	e0c1      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80131fe:	9b01      	ldr	r3, [sp, #4]
 8013200:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013204:	b2db      	uxtb	r3, r3
 8013206:	b25b      	sxtb	r3, r3
 8013208:	2b00      	cmp	r3, #0
 801320a:	da27      	bge.n	801325c <default_handler+0x2ac>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 801320c:	9b01      	ldr	r3, [sp, #4]
 801320e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013212:	f003 030f 	and.w	r3, r3, #15
 8013216:	b2db      	uxtb	r3, r3
 8013218:	9801      	ldr	r0, [sp, #4]
 801321a:	4619      	mov	r1, r3
 801321c:	f7ff f8a0 	bl	8012360 <usb_lld_get_status_in>
 8013220:	4603      	mov	r3, r0
 8013222:	2b01      	cmp	r3, #1
 8013224:	d002      	beq.n	801322c <default_handler+0x27c>
 8013226:	2b02      	cmp	r3, #2
 8013228:	d00b      	beq.n	8013242 <default_handler+0x292>
 801322a:	e015      	b.n	8013258 <default_handler+0x2a8>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 801322c:	9b01      	ldr	r3, [sp, #4]
 801322e:	4a57      	ldr	r2, [pc, #348]	; (801338c <default_handler+0x3dc>)
 8013230:	639a      	str	r2, [r3, #56]	; 0x38
 8013232:	9b01      	ldr	r3, [sp, #4]
 8013234:	2202      	movs	r2, #2
 8013236:	63da      	str	r2, [r3, #60]	; 0x3c
 8013238:	9b01      	ldr	r3, [sp, #4]
 801323a:	2200      	movs	r2, #0
 801323c:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 801323e:	2301      	movs	r3, #1
 8013240:	e09f      	b.n	8013382 <default_handler+0x3d2>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8013242:	9b01      	ldr	r3, [sp, #4]
 8013244:	4a52      	ldr	r2, [pc, #328]	; (8013390 <default_handler+0x3e0>)
 8013246:	639a      	str	r2, [r3, #56]	; 0x38
 8013248:	9b01      	ldr	r3, [sp, #4]
 801324a:	2202      	movs	r2, #2
 801324c:	63da      	str	r2, [r3, #60]	; 0x3c
 801324e:	9b01      	ldr	r3, [sp, #4]
 8013250:	2200      	movs	r2, #0
 8013252:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 8013254:	2301      	movs	r3, #1
 8013256:	e094      	b.n	8013382 <default_handler+0x3d2>
      case EP_STATUS_DISABLED:
      default:
        return false;
 8013258:	2300      	movs	r3, #0
 801325a:	e092      	b.n	8013382 <default_handler+0x3d2>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 801325c:	9b01      	ldr	r3, [sp, #4]
 801325e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013262:	f003 030f 	and.w	r3, r3, #15
 8013266:	b2db      	uxtb	r3, r3
 8013268:	9801      	ldr	r0, [sp, #4]
 801326a:	4619      	mov	r1, r3
 801326c:	f7ff f858 	bl	8012320 <usb_lld_get_status_out>
 8013270:	4603      	mov	r3, r0
 8013272:	2b01      	cmp	r3, #1
 8013274:	d002      	beq.n	801327c <default_handler+0x2cc>
 8013276:	2b02      	cmp	r3, #2
 8013278:	d00b      	beq.n	8013292 <default_handler+0x2e2>
 801327a:	e015      	b.n	80132a8 <default_handler+0x2f8>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 801327c:	9b01      	ldr	r3, [sp, #4]
 801327e:	4a43      	ldr	r2, [pc, #268]	; (801338c <default_handler+0x3dc>)
 8013280:	639a      	str	r2, [r3, #56]	; 0x38
 8013282:	9b01      	ldr	r3, [sp, #4]
 8013284:	2202      	movs	r2, #2
 8013286:	63da      	str	r2, [r3, #60]	; 0x3c
 8013288:	9b01      	ldr	r3, [sp, #4]
 801328a:	2200      	movs	r2, #0
 801328c:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 801328e:	2301      	movs	r3, #1
 8013290:	e077      	b.n	8013382 <default_handler+0x3d2>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8013292:	9b01      	ldr	r3, [sp, #4]
 8013294:	4a3e      	ldr	r2, [pc, #248]	; (8013390 <default_handler+0x3e0>)
 8013296:	639a      	str	r2, [r3, #56]	; 0x38
 8013298:	9b01      	ldr	r3, [sp, #4]
 801329a:	2202      	movs	r2, #2
 801329c:	63da      	str	r2, [r3, #60]	; 0x3c
 801329e:	9b01      	ldr	r3, [sp, #4]
 80132a0:	2200      	movs	r2, #0
 80132a2:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 80132a4:	2301      	movs	r3, #1
 80132a6:	e06c      	b.n	8013382 <default_handler+0x3d2>
      case EP_STATUS_DISABLED:
      default:
        return false;
 80132a8:	2300      	movs	r3, #0
 80132aa:	e06a      	b.n	8013382 <default_handler+0x3d2>
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80132ac:	9b01      	ldr	r3, [sp, #4]
 80132ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d001      	beq.n	80132ba <default_handler+0x30a>
      return false;
 80132b6:	2300      	movs	r3, #0
 80132b8:	e063      	b.n	8013382 <default_handler+0x3d2>
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80132ba:	9b01      	ldr	r3, [sp, #4]
 80132bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80132c0:	f003 030f 	and.w	r3, r3, #15
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d01b      	beq.n	8013300 <default_handler+0x350>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80132c8:	9b01      	ldr	r3, [sp, #4]
 80132ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	b25b      	sxtb	r3, r3
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	da0a      	bge.n	80132ec <default_handler+0x33c>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 80132d6:	9b01      	ldr	r3, [sp, #4]
 80132d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80132dc:	f003 030f 	and.w	r3, r3, #15
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	9801      	ldr	r0, [sp, #4]
 80132e4:	4619      	mov	r1, r3
 80132e6:	f7ff fa23 	bl	8012730 <usb_lld_clear_in>
 80132ea:	e009      	b.n	8013300 <default_handler+0x350>
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 80132ec:	9b01      	ldr	r3, [sp, #4]
 80132ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80132f2:	f003 030f 	and.w	r3, r3, #15
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	9801      	ldr	r0, [sp, #4]
 80132fa:	4619      	mov	r1, r3
 80132fc:	f7ff f9f8 	bl	80126f0 <usb_lld_clear_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8013300:	9b01      	ldr	r3, [sp, #4]
 8013302:	2200      	movs	r2, #0
 8013304:	639a      	str	r2, [r3, #56]	; 0x38
 8013306:	9b01      	ldr	r3, [sp, #4]
 8013308:	2200      	movs	r2, #0
 801330a:	63da      	str	r2, [r3, #60]	; 0x3c
 801330c:	9b01      	ldr	r3, [sp, #4]
 801330e:	2200      	movs	r2, #0
 8013310:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8013312:	2301      	movs	r3, #1
 8013314:	e035      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8013316:	9b01      	ldr	r3, [sp, #4]
 8013318:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801331c:	2b00      	cmp	r3, #0
 801331e:	d001      	beq.n	8013324 <default_handler+0x374>
      return false;
 8013320:	2300      	movs	r3, #0
 8013322:	e02e      	b.n	8013382 <default_handler+0x3d2>
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8013324:	9b01      	ldr	r3, [sp, #4]
 8013326:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801332a:	f003 030f 	and.w	r3, r3, #15
 801332e:	2b00      	cmp	r3, #0
 8013330:	d01b      	beq.n	801336a <default_handler+0x3ba>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8013332:	9b01      	ldr	r3, [sp, #4]
 8013334:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013338:	b2db      	uxtb	r3, r3
 801333a:	b25b      	sxtb	r3, r3
 801333c:	2b00      	cmp	r3, #0
 801333e:	da0a      	bge.n	8013356 <default_handler+0x3a6>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8013340:	9b01      	ldr	r3, [sp, #4]
 8013342:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013346:	f003 030f 	and.w	r3, r3, #15
 801334a:	b2db      	uxtb	r3, r3
 801334c:	9801      	ldr	r0, [sp, #4]
 801334e:	4619      	mov	r1, r3
 8013350:	f7ff f9ae 	bl	80126b0 <usb_lld_stall_in>
 8013354:	e009      	b.n	801336a <default_handler+0x3ba>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 8013356:	9b01      	ldr	r3, [sp, #4]
 8013358:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801335c:	f003 030f 	and.w	r3, r3, #15
 8013360:	b2db      	uxtb	r3, r3
 8013362:	9801      	ldr	r0, [sp, #4]
 8013364:	4619      	mov	r1, r3
 8013366:	f7ff f983 	bl	8012670 <usb_lld_stall_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 801336a:	9b01      	ldr	r3, [sp, #4]
 801336c:	2200      	movs	r2, #0
 801336e:	639a      	str	r2, [r3, #56]	; 0x38
 8013370:	9b01      	ldr	r3, [sp, #4]
 8013372:	2200      	movs	r2, #0
 8013374:	63da      	str	r2, [r3, #60]	; 0x3c
 8013376:	9b01      	ldr	r3, [sp, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 801337c:	2301      	movs	r3, #1
 801337e:	e000      	b.n	8013382 <default_handler+0x3d2>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_INTERFACE << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_SET_INTERFACE << 8):
    /* All the above requests are not handled here, if you need them then
       use the hook mechanism and provide handling.*/
  default:
    return false;
 8013380:	2300      	movs	r3, #0
  }
}
 8013382:	4618      	mov	r0, r3
 8013384:	b004      	add	sp, #16
 8013386:	bd70      	pop	{r4, r5, r6, pc}
 8013388:	0801d720 	.word	0x0801d720
 801338c:	0801d728 	.word	0x0801d728
 8013390:	0801d724 	.word	0x0801d724
	...

080133a0 <usbInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void usbInit(void) {
 80133a0:	b508      	push	{r3, lr}

  usb_lld_init();
 80133a2:	f7fe feed 	bl	8012180 <usb_lld_init>
}
 80133a6:	bd08      	pop	{r3, pc}
	...

080133b0 <usbObjectInit>:
 *
 * @param[out] usbp     pointer to the @p USBDriver object
 *
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
 80133b0:	b084      	sub	sp, #16
 80133b2:	9001      	str	r0, [sp, #4]
  unsigned i;

  usbp->state        = USB_STOP;
 80133b4:	9b01      	ldr	r3, [sp, #4]
 80133b6:	2201      	movs	r2, #1
 80133b8:	701a      	strb	r2, [r3, #0]
  usbp->config       = NULL;
 80133ba:	9b01      	ldr	r3, [sp, #4]
 80133bc:	2200      	movs	r2, #0
 80133be:	605a      	str	r2, [r3, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80133c0:	2300      	movs	r3, #0
 80133c2:	9303      	str	r3, [sp, #12]
 80133c4:	e00f      	b.n	80133e6 <usbObjectInit+0x36>
    usbp->in_params[i]  = NULL;
 80133c6:	9a01      	ldr	r2, [sp, #4]
 80133c8:	9b03      	ldr	r3, [sp, #12]
 80133ca:	3306      	adds	r3, #6
 80133cc:	009b      	lsls	r3, r3, #2
 80133ce:	4413      	add	r3, r2
 80133d0:	2200      	movs	r2, #0
 80133d2:	605a      	str	r2, [r3, #4]
    usbp->out_params[i] = NULL;
 80133d4:	9b01      	ldr	r3, [sp, #4]
 80133d6:	9a03      	ldr	r2, [sp, #12]
 80133d8:	320a      	adds	r2, #10
 80133da:	2100      	movs	r1, #0
 80133dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80133e0:	9b03      	ldr	r3, [sp, #12]
 80133e2:	3301      	adds	r3, #1
 80133e4:	9303      	str	r3, [sp, #12]
 80133e6:	9b03      	ldr	r3, [sp, #12]
 80133e8:	2b02      	cmp	r3, #2
 80133ea:	d9ec      	bls.n	80133c6 <usbObjectInit+0x16>
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 80133ec:	9b01      	ldr	r3, [sp, #4]
 80133ee:	2200      	movs	r2, #0
 80133f0:	811a      	strh	r2, [r3, #8]
  usbp->receiving    = 0;
 80133f2:	9b01      	ldr	r3, [sp, #4]
 80133f4:	2200      	movs	r2, #0
 80133f6:	815a      	strh	r2, [r3, #10]
}
 80133f8:	b004      	add	sp, #16
 80133fa:	4770      	bx	lr
 80133fc:	0000      	movs	r0, r0
	...

08013400 <usbDisableEndpointsI>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @iclass
 */
void usbDisableEndpointsI(USBDriver *usbp) {
 8013400:	b500      	push	{lr}
 8013402:	b085      	sub	sp, #20
 8013404:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
 8013406:	9b01      	ldr	r3, [sp, #4]
 8013408:	891b      	ldrh	r3, [r3, #8]
 801340a:	f003 0301 	and.w	r3, r3, #1
 801340e:	b29a      	uxth	r2, r3
 8013410:	9b01      	ldr	r3, [sp, #4]
 8013412:	811a      	strh	r2, [r3, #8]
  usbp->receiving    &= 1U;
 8013414:	9b01      	ldr	r3, [sp, #4]
 8013416:	895b      	ldrh	r3, [r3, #10]
 8013418:	f003 0301 	and.w	r3, r3, #1
 801341c:	b29a      	uxth	r2, r3
 801341e:	9b01      	ldr	r3, [sp, #4]
 8013420:	815a      	strh	r2, [r3, #10]

  for (i = 1; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8013422:	2301      	movs	r3, #1
 8013424:	9303      	str	r3, [sp, #12]
 8013426:	e009      	b.n	801343c <usbDisableEndpointsI+0x3c>
      if (usbp->epc[i]->out_state != NULL) {
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
    }
#endif
    usbp->epc[i] = NULL;
 8013428:	9a01      	ldr	r2, [sp, #4]
 801342a:	9b03      	ldr	r3, [sp, #12]
 801342c:	3302      	adds	r3, #2
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	4413      	add	r3, r2
 8013432:	2200      	movs	r2, #0
 8013434:	605a      	str	r2, [r3, #4]
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
  usbp->receiving    &= 1U;

  for (i = 1; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8013436:	9b03      	ldr	r3, [sp, #12]
 8013438:	3301      	adds	r3, #1
 801343a:	9303      	str	r3, [sp, #12]
 801343c:	9b03      	ldr	r3, [sp, #12]
 801343e:	2b03      	cmp	r3, #3
 8013440:	d9f2      	bls.n	8013428 <usbDisableEndpointsI+0x28>
#endif
    usbp->epc[i] = NULL;
  }

  /* Low level endpoints deactivation.*/
  usb_lld_disable_endpoints(usbp);
 8013442:	9801      	ldr	r0, [sp, #4]
 8013444:	f7fe ff5c 	bl	8012300 <usb_lld_disable_endpoints>
}
 8013448:	b005      	add	sp, #20
 801344a:	f85d fb04 	ldr.w	pc, [sp], #4
 801344e:	bf00      	nop

08013450 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 8013450:	b500      	push	{lr}
 8013452:	b087      	sub	sp, #28
 8013454:	9003      	str	r0, [sp, #12]
 8013456:	9201      	str	r2, [sp, #4]
 8013458:	9300      	str	r3, [sp, #0]
 801345a:	460b      	mov	r3, r1
 801345c:	f88d 300b 	strb.w	r3, [sp, #11]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8013460:	9b03      	ldr	r3, [sp, #12]
 8013462:	895a      	ldrh	r2, [r3, #10]
 8013464:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013468:	2101      	movs	r1, #1
 801346a:	fa01 f303 	lsl.w	r3, r1, r3
 801346e:	b29b      	uxth	r3, r3
 8013470:	4313      	orrs	r3, r2
 8013472:	b29a      	uxth	r2, r3
 8013474:	9b03      	ldr	r3, [sp, #12]
 8013476:	815a      	strh	r2, [r3, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8013478:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801347c:	9a03      	ldr	r2, [sp, #12]
 801347e:	3302      	adds	r3, #2
 8013480:	009b      	lsls	r3, r3, #2
 8013482:	4413      	add	r3, r2
 8013484:	685b      	ldr	r3, [r3, #4]
 8013486:	699b      	ldr	r3, [r3, #24]
 8013488:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  osp->rxbuf  = buf;
 801348a:	9b05      	ldr	r3, [sp, #20]
 801348c:	9a01      	ldr	r2, [sp, #4]
 801348e:	609a      	str	r2, [r3, #8]
  osp->rxsize = n;
 8013490:	9b05      	ldr	r3, [sp, #20]
 8013492:	9a00      	ldr	r2, [sp, #0]
 8013494:	601a      	str	r2, [r3, #0]
  osp->rxcnt  = 0;
 8013496:	9b05      	ldr	r3, [sp, #20]
 8013498:	2200      	movs	r2, #0
 801349a:	605a      	str	r2, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 801349c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80134a0:	9803      	ldr	r0, [sp, #12]
 80134a2:	4619      	mov	r1, r3
 80134a4:	f7fe ff94 	bl	80123d0 <usb_lld_start_out>
}
 80134a8:	b007      	add	sp, #28
 80134aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80134ae:	bf00      	nop

080134b0 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 80134b0:	b500      	push	{lr}
 80134b2:	b087      	sub	sp, #28
 80134b4:	9003      	str	r0, [sp, #12]
 80134b6:	9201      	str	r2, [sp, #4]
 80134b8:	9300      	str	r3, [sp, #0]
 80134ba:	460b      	mov	r3, r1
 80134bc:	f88d 300b 	strb.w	r3, [sp, #11]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80134c0:	9b03      	ldr	r3, [sp, #12]
 80134c2:	891a      	ldrh	r2, [r3, #8]
 80134c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80134c8:	2101      	movs	r1, #1
 80134ca:	fa01 f303 	lsl.w	r3, r1, r3
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4313      	orrs	r3, r2
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	9b03      	ldr	r3, [sp, #12]
 80134d6:	811a      	strh	r2, [r3, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 80134d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80134dc:	9a03      	ldr	r2, [sp, #12]
 80134de:	3302      	adds	r3, #2
 80134e0:	009b      	lsls	r3, r3, #2
 80134e2:	4413      	add	r3, r2
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	695b      	ldr	r3, [r3, #20]
 80134e8:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  isp->txbuf  = buf;
 80134ea:	9b05      	ldr	r3, [sp, #20]
 80134ec:	9a01      	ldr	r2, [sp, #4]
 80134ee:	609a      	str	r2, [r3, #8]
  isp->txsize = n;
 80134f0:	9b05      	ldr	r3, [sp, #20]
 80134f2:	9a00      	ldr	r2, [sp, #0]
 80134f4:	601a      	str	r2, [r3, #0]
  isp->txcnt  = 0;
 80134f6:	9b05      	ldr	r3, [sp, #20]
 80134f8:	2200      	movs	r2, #0
 80134fa:	605a      	str	r2, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 80134fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013500:	9803      	ldr	r0, [sp, #12]
 8013502:	4619      	mov	r1, r3
 8013504:	f7ff f804 	bl	8012510 <usb_lld_start_in>
}
 8013508:	b007      	add	sp, #28
 801350a:	f85d fb04 	ldr.w	pc, [sp], #4
 801350e:	bf00      	nop

08013510 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8013510:	b500      	push	{lr}
 8013512:	b085      	sub	sp, #20
 8013514:	9001      	str	r0, [sp, #4]
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8013516:	9b01      	ldr	r3, [sp, #4]
 8013518:	2202      	movs	r2, #2
 801351a:	701a      	strb	r2, [r3, #0]

  /* Resetting internal state.*/
  usbp->status        = 0;
 801351c:	9b01      	ldr	r3, [sp, #4]
 801351e:	2200      	movs	r2, #0
 8013520:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  usbp->address       = 0;
 8013524:	9b01      	ldr	r3, [sp, #4]
 8013526:	2200      	movs	r2, #0
 8013528:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  usbp->configuration = 0;
 801352c:	9b01      	ldr	r3, [sp, #4]
 801352e:	2200      	movs	r2, #0
 8013530:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
  usbp->transmitting  = 0;
 8013534:	9b01      	ldr	r3, [sp, #4]
 8013536:	2200      	movs	r2, #0
 8013538:	811a      	strh	r2, [r3, #8]
  usbp->receiving     = 0;
 801353a:	9b01      	ldr	r3, [sp, #4]
 801353c:	2200      	movs	r2, #0
 801353e:	815a      	strh	r2, [r3, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8013540:	2300      	movs	r3, #0
 8013542:	9303      	str	r3, [sp, #12]
 8013544:	e009      	b.n	801355a <_usb_reset+0x4a>
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 8013546:	9a01      	ldr	r2, [sp, #4]
 8013548:	9b03      	ldr	r3, [sp, #12]
 801354a:	3302      	adds	r3, #2
 801354c:	009b      	lsls	r3, r3, #2
 801354e:	4413      	add	r3, r2
 8013550:	2200      	movs	r2, #0
 8013552:	605a      	str	r2, [r3, #4]
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8013554:	9b03      	ldr	r3, [sp, #12]
 8013556:	3301      	adds	r3, #1
 8013558:	9303      	str	r3, [sp, #12]
 801355a:	9b03      	ldr	r3, [sp, #12]
 801355c:	2b03      	cmp	r3, #3
 801355e:	d9f2      	bls.n	8013546 <_usb_reset+0x36>
#endif
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_STP_WAITING;
 8013560:	9b01      	ldr	r3, [sp, #4]
 8013562:	2200      	movs	r2, #0
 8013564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8013568:	9801      	ldr	r0, [sp, #4]
 801356a:	f7fe fe19 	bl	80121a0 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 801356e:	9b01      	ldr	r3, [sp, #4]
 8013570:	685b      	ldr	r3, [r3, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d005      	beq.n	8013584 <_usb_reset+0x74>
 8013578:	9b01      	ldr	r3, [sp, #4]
 801357a:	685b      	ldr	r3, [r3, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	9801      	ldr	r0, [sp, #4]
 8013580:	2100      	movs	r1, #0
 8013582:	4798      	blx	r3
}
 8013584:	b005      	add	sp, #20
 8013586:	f85d fb04 	ldr.w	pc, [sp], #4
 801358a:	bf00      	nop
 801358c:	0000      	movs	r0, r0
	...

08013590 <_usb_suspend>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {
 8013590:	b500      	push	{lr}
 8013592:	b083      	sub	sp, #12
 8013594:	9001      	str	r0, [sp, #4]
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
 8013596:	9b01      	ldr	r3, [sp, #4]
 8013598:	781a      	ldrb	r2, [r3, #0]
 801359a:	9b01      	ldr	r3, [sp, #4]
 801359c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  usbp->state       = USB_SUSPENDED;
 80135a0:	9b01      	ldr	r3, [sp, #4]
 80135a2:	2205      	movs	r2, #5
 80135a4:	701a      	strb	r2, [r3, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80135a6:	9b01      	ldr	r3, [sp, #4]
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d005      	beq.n	80135bc <_usb_suspend+0x2c>
 80135b0:	9b01      	ldr	r3, [sp, #4]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	9801      	ldr	r0, [sp, #4]
 80135b8:	2104      	movs	r1, #4
 80135ba:	4798      	blx	r3
        osalSysUnlockFromISR();
      }
    }
  }
#endif
}
 80135bc:	b003      	add	sp, #12
 80135be:	f85d fb04 	ldr.w	pc, [sp], #4
 80135c2:	bf00      	nop
	...

080135d0 <_usb_wakeup>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {
 80135d0:	b500      	push	{lr}
 80135d2:	b083      	sub	sp, #12
 80135d4:	9001      	str	r0, [sp, #4]

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;
 80135d6:	9b01      	ldr	r3, [sp, #4]
 80135d8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80135dc:	9b01      	ldr	r3, [sp, #4]
 80135de:	701a      	strb	r2, [r3, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80135e0:	9b01      	ldr	r3, [sp, #4]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d005      	beq.n	80135f6 <_usb_wakeup+0x26>
 80135ea:	9b01      	ldr	r3, [sp, #4]
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	9801      	ldr	r0, [sp, #4]
 80135f2:	2105      	movs	r1, #5
 80135f4:	4798      	blx	r3
}
 80135f6:	b003      	add	sp, #12
 80135f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80135fc:	0000      	movs	r0, r0
	...

08013600 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8013600:	b500      	push	{lr}
 8013602:	b085      	sub	sp, #20
 8013604:	9001      	str	r0, [sp, #4]
 8013606:	460b      	mov	r3, r1
 8013608:	f88d 3003 	strb.w	r3, [sp, #3]
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 801360c:	9b01      	ldr	r3, [sp, #4]
 801360e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013612:	2b00      	cmp	r3, #0
 8013614:	d003      	beq.n	801361e <_usb_ep0setup+0x1e>
    /* This is unexpected could require handling with a warning event.*/
    /* TODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
 8013616:	9b01      	ldr	r3, [sp, #4]
 8013618:	2200      	movs	r2, #0
 801361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  /* Reading the setup data into the driver buffer.*/
  usbReadSetup(usbp, ep, usbp->setup);
 801361e:	9b01      	ldr	r3, [sp, #4]
 8013620:	3344      	adds	r3, #68	; 0x44
 8013622:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013626:	9801      	ldr	r0, [sp, #4]
 8013628:	4611      	mov	r1, r2
 801362a:	461a      	mov	r2, r3
 801362c:	f7fe feb8 	bl	80123a0 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8013630:	9b01      	ldr	r3, [sp, #4]
 8013632:	685b      	ldr	r3, [r3, #4]
 8013634:	689b      	ldr	r3, [r3, #8]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d00a      	beq.n	8013650 <_usb_ep0setup+0x50>
      !(usbp->config->requests_hook_cb(usbp))) {
 801363a:	9b01      	ldr	r3, [sp, #4]
 801363c:	685b      	ldr	r3, [r3, #4]
 801363e:	689b      	ldr	r3, [r3, #8]
 8013640:	9801      	ldr	r0, [sp, #4]
 8013642:	4798      	blx	r3
 8013644:	4603      	mov	r3, r0
 8013646:	f083 0301 	eor.w	r3, r3, #1
 801364a:	b2db      	uxtb	r3, r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 801364c:	2b00      	cmp	r3, #0
 801364e:	d027      	beq.n	80136a0 <_usb_ep0setup+0xa0>
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8013650:	9b01      	ldr	r3, [sp, #4]
 8013652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801365a:	2b00      	cmp	r3, #0
 801365c:	d108      	bne.n	8013670 <_usb_ep0setup+0x70>
        !default_handler(usbp)) {
 801365e:	9801      	ldr	r0, [sp, #4]
 8013660:	f7ff fca6 	bl	8012fb0 <default_handler>
 8013664:	4603      	mov	r3, r0
 8013666:	f083 0301 	eor.w	r3, r3, #1
 801366a:	b2db      	uxtb	r3, r3
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 801366c:	2b00      	cmp	r3, #0
 801366e:	d017      	beq.n	80136a0 <_usb_ep0setup+0xa0>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 8013670:	9801      	ldr	r0, [sp, #4]
 8013672:	2100      	movs	r1, #0
 8013674:	f7ff f81c 	bl	80126b0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 8013678:	9801      	ldr	r0, [sp, #4]
 801367a:	2100      	movs	r1, #0
 801367c:	f7fe fff8 	bl	8012670 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8013680:	9b01      	ldr	r3, [sp, #4]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d005      	beq.n	8013696 <_usb_ep0setup+0x96>
 801368a:	9b01      	ldr	r3, [sp, #4]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	9801      	ldr	r0, [sp, #4]
 8013692:	2106      	movs	r1, #6
 8013694:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8013696:	9b01      	ldr	r3, [sp, #4]
 8013698:	2206      	movs	r2, #6
 801369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801369e:	e05c      	b.n	801375a <_usb_ep0setup+0x15a>
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80136a0:	9b01      	ldr	r3, [sp, #4]
 80136a2:	334a      	adds	r3, #74	; 0x4a
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7ff fc4b 	bl	8012f40 <get_hword>
 80136aa:	4603      	mov	r3, r0
 80136ac:	9303      	str	r3, [sp, #12]
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80136ae:	9b01      	ldr	r3, [sp, #4]
 80136b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80136b2:	9b03      	ldr	r3, [sp, #12]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d902      	bls.n	80136be <_usb_ep0setup+0xbe>
    usbp->ep0n = max;
 80136b8:	9b01      	ldr	r3, [sp, #4]
 80136ba:	9a03      	ldr	r2, [sp, #12]
 80136bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80136be:	9b01      	ldr	r3, [sp, #4]
 80136c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136c4:	b2db      	uxtb	r3, r3
 80136c6:	b25b      	sxtb	r3, r3
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	da23      	bge.n	8013714 <_usb_ep0setup+0x114>
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 80136cc:	9b01      	ldr	r3, [sp, #4]
 80136ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d010      	beq.n	80136f6 <_usb_ep0setup+0xf6>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_IN_TX;
 80136d4:	9b01      	ldr	r3, [sp, #4]
 80136d6:	2209      	movs	r2, #9
 80136d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      osalSysLockFromISR();
 80136dc:	f7ff fc20 	bl	8012f20 <osalSysLockFromISR.lto_priv.836>
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80136e0:	9b01      	ldr	r3, [sp, #4]
 80136e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136e4:	9b01      	ldr	r3, [sp, #4]
 80136e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136e8:	9801      	ldr	r0, [sp, #4]
 80136ea:	2100      	movs	r1, #0
 80136ec:	f7ff fee0 	bl	80134b0 <usbStartTransmitI>
      osalSysUnlockFromISR();
 80136f0:	f7ff fc1e 	bl	8012f30 <osalSysUnlockFromISR.lto_priv.833>
 80136f4:	e031      	b.n	801375a <_usb_ep0setup+0x15a>
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80136f6:	9b01      	ldr	r3, [sp, #4]
 80136f8:	2214      	movs	r2, #20
 80136fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
 80136fe:	f7ff fc0f 	bl	8012f20 <osalSysLockFromISR.lto_priv.836>
      usbStartReceiveI(usbp, 0, NULL, 0);
 8013702:	9801      	ldr	r0, [sp, #4]
 8013704:	2100      	movs	r1, #0
 8013706:	2200      	movs	r2, #0
 8013708:	2300      	movs	r3, #0
 801370a:	f7ff fea1 	bl	8013450 <usbStartReceiveI>
      osalSysUnlockFromISR();
 801370e:	f7ff fc0f 	bl	8012f30 <osalSysUnlockFromISR.lto_priv.833>
 8013712:	e022      	b.n	801375a <_usb_ep0setup+0x15a>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8013714:	9b01      	ldr	r3, [sp, #4]
 8013716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013718:	2b00      	cmp	r3, #0
 801371a:	d010      	beq.n	801373e <_usb_ep0setup+0x13e>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_OUT_RX;
 801371c:	9b01      	ldr	r3, [sp, #4]
 801371e:	2215      	movs	r2, #21
 8013720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      osalSysLockFromISR();
 8013724:	f7ff fbfc 	bl	8012f20 <osalSysLockFromISR.lto_priv.836>
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8013728:	9b01      	ldr	r3, [sp, #4]
 801372a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801372c:	9b01      	ldr	r3, [sp, #4]
 801372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013730:	9801      	ldr	r0, [sp, #4]
 8013732:	2100      	movs	r1, #0
 8013734:	f7ff fe8c 	bl	8013450 <usbStartReceiveI>
      osalSysUnlockFromISR();
 8013738:	f7ff fbfa 	bl	8012f30 <osalSysUnlockFromISR.lto_priv.833>
 801373c:	e00d      	b.n	801375a <_usb_ep0setup+0x15a>
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 801373e:	9b01      	ldr	r3, [sp, #4]
 8013740:	220b      	movs	r2, #11
 8013742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
 8013746:	f7ff fbeb 	bl	8012f20 <osalSysLockFromISR.lto_priv.836>
      usbStartTransmitI(usbp, 0, NULL, 0);
 801374a:	9801      	ldr	r0, [sp, #4]
 801374c:	2100      	movs	r1, #0
 801374e:	2200      	movs	r2, #0
 8013750:	2300      	movs	r3, #0
 8013752:	f7ff fead 	bl	80134b0 <usbStartTransmitI>
      osalSysUnlockFromISR();
 8013756:	f7ff fbeb 	bl	8012f30 <osalSysUnlockFromISR.lto_priv.833>
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 801375a:	b005      	add	sp, #20
 801375c:	f85d fb04 	ldr.w	pc, [sp], #4

08013760 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8013760:	b500      	push	{lr}
 8013762:	b085      	sub	sp, #20
 8013764:	9001      	str	r0, [sp, #4]
 8013766:	460b      	mov	r3, r1
 8013768:	f88d 3003 	strb.w	r3, [sp, #3]
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 801376c:	9b01      	ldr	r3, [sp, #4]
 801376e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013772:	2b15      	cmp	r3, #21
 8013774:	f200 808a 	bhi.w	801388c <_usb_ep0in+0x12c>
 8013778:	a201      	add	r2, pc, #4	; (adr r2, 8013780 <_usb_ep0in+0x20>)
 801377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801377e:	bf00      	nop
 8013780:	0801385f 	.word	0x0801385f
 8013784:	0801388d 	.word	0x0801388d
 8013788:	0801388d 	.word	0x0801388d
 801378c:	0801388d 	.word	0x0801388d
 8013790:	0801388d 	.word	0x0801388d
 8013794:	0801388d 	.word	0x0801388d
 8013798:	0801385f 	.word	0x0801385f
 801379c:	0801388d 	.word	0x0801388d
 80137a0:	0801388d 	.word	0x0801388d
 80137a4:	080137d9 	.word	0x080137d9
 80137a8:	08013827 	.word	0x08013827
 80137ac:	08013845 	.word	0x08013845
 80137b0:	0801388d 	.word	0x0801388d
 80137b4:	0801388d 	.word	0x0801388d
 80137b8:	0801388d 	.word	0x0801388d
 80137bc:	0801388d 	.word	0x0801388d
 80137c0:	0801388d 	.word	0x0801388d
 80137c4:	0801388d 	.word	0x0801388d
 80137c8:	0801388d 	.word	0x0801388d
 80137cc:	0801388d 	.word	0x0801388d
 80137d0:	0801385f 	.word	0x0801385f
 80137d4:	0801385f 	.word	0x0801385f
  case USB_EP0_IN_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 80137d8:	9b01      	ldr	r3, [sp, #4]
 80137da:	334a      	adds	r3, #74	; 0x4a
 80137dc:	4618      	mov	r0, r3
 80137de:	f7ff fbaf 	bl	8012f40 <get_hword>
 80137e2:	4603      	mov	r3, r0
 80137e4:	9303      	str	r3, [sp, #12]
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 80137e6:	9b01      	ldr	r3, [sp, #4]
 80137e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80137ea:	9b03      	ldr	r3, [sp, #12]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d21a      	bcs.n	8013826 <_usb_ep0in+0xc6>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 80137f0:	9b01      	ldr	r3, [sp, #4]
 80137f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137f4:	9a01      	ldr	r2, [sp, #4]
 80137f6:	68d2      	ldr	r2, [r2, #12]
 80137f8:	8a12      	ldrh	r2, [r2, #16]
 80137fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80137fe:	fb02 f201 	mul.w	r2, r2, r1
 8013802:	1a9b      	subs	r3, r3, r2
  case USB_EP0_IN_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8013804:	2b00      	cmp	r3, #0
 8013806:	d10e      	bne.n	8013826 <_usb_ep0in+0xc6>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      osalSysLockFromISR();
 8013808:	f7ff fb8a 	bl	8012f20 <osalSysLockFromISR.lto_priv.836>
      usbStartTransmitI(usbp, 0, NULL, 0);
 801380c:	9801      	ldr	r0, [sp, #4]
 801380e:	2100      	movs	r1, #0
 8013810:	2200      	movs	r2, #0
 8013812:	2300      	movs	r3, #0
 8013814:	f7ff fe4c 	bl	80134b0 <usbStartTransmitI>
      osalSysUnlockFromISR();
 8013818:	f7ff fb8a 	bl	8012f30 <osalSysUnlockFromISR.lto_priv.833>
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 801381c:	9b01      	ldr	r3, [sp, #4]
 801381e:	220a      	movs	r2, #10
 8013820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8013824:	e032      	b.n	801388c <_usb_ep0in+0x12c>
      return;
    }
    /* Falls through.*/
  case USB_EP0_IN_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8013826:	9b01      	ldr	r3, [sp, #4]
 8013828:	2214      	movs	r2, #20
 801382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 801382e:	f7ff fb77 	bl	8012f20 <osalSysLockFromISR.lto_priv.836>
    usbStartReceiveI(usbp, 0, NULL, 0);
 8013832:	9801      	ldr	r0, [sp, #4]
 8013834:	2100      	movs	r1, #0
 8013836:	2200      	movs	r2, #0
 8013838:	2300      	movs	r3, #0
 801383a:	f7ff fe09 	bl	8013450 <usbStartReceiveI>
    osalSysUnlockFromISR();
 801383e:	f7ff fb77 	bl	8012f30 <osalSysUnlockFromISR.lto_priv.833>
 8013842:	e023      	b.n	801388c <_usb_ep0in+0x12c>
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_IN_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8013844:	9b01      	ldr	r3, [sp, #4]
 8013846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013848:	2b00      	cmp	r3, #0
 801384a:	d003      	beq.n	8013854 <_usb_ep0in+0xf4>
      usbp->ep0endcb(usbp);
 801384c:	9b01      	ldr	r3, [sp, #4]
 801384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013850:	9801      	ldr	r0, [sp, #4]
 8013852:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8013854:	9b01      	ldr	r3, [sp, #4]
 8013856:	2200      	movs	r2, #0
 8013858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801385c:	e016      	b.n	801388c <_usb_ep0in+0x12c>
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 801385e:	9801      	ldr	r0, [sp, #4]
 8013860:	2100      	movs	r1, #0
 8013862:	f7fe ff25 	bl	80126b0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8013866:	9801      	ldr	r0, [sp, #4]
 8013868:	2100      	movs	r1, #0
 801386a:	f7fe ff01 	bl	8012670 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 801386e:	9b01      	ldr	r3, [sp, #4]
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d005      	beq.n	8013884 <_usb_ep0in+0x124>
 8013878:	9b01      	ldr	r3, [sp, #4]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	9801      	ldr	r0, [sp, #4]
 8013880:	2106      	movs	r1, #6
 8013882:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8013884:	9b01      	ldr	r3, [sp, #4]
 8013886:	2206      	movs	r2, #6
 8013888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 801388c:	b005      	add	sp, #20
 801388e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013892:	bf00      	nop
	...

080138a0 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80138a0:	b500      	push	{lr}
 80138a2:	b083      	sub	sp, #12
 80138a4:	9001      	str	r0, [sp, #4]
 80138a6:	460b      	mov	r3, r1
 80138a8:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)ep;
  switch (usbp->ep0state) {
 80138ac:	9b01      	ldr	r3, [sp, #4]
 80138ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80138b2:	2b15      	cmp	r3, #21
 80138b4:	d867      	bhi.n	8013986 <_usb_ep0out+0xe6>
 80138b6:	a201      	add	r2, pc, #4	; (adr r2, 80138bc <_usb_ep0out+0x1c>)
 80138b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138bc:	08013959 	.word	0x08013959
 80138c0:	08013987 	.word	0x08013987
 80138c4:	08013987 	.word	0x08013987
 80138c8:	08013987 	.word	0x08013987
 80138cc:	08013987 	.word	0x08013987
 80138d0:	08013987 	.word	0x08013987
 80138d4:	08013959 	.word	0x08013959
 80138d8:	08013987 	.word	0x08013987
 80138dc:	08013987 	.word	0x08013987
 80138e0:	08013959 	.word	0x08013959
 80138e4:	08013959 	.word	0x08013959
 80138e8:	08013959 	.word	0x08013959
 80138ec:	08013987 	.word	0x08013987
 80138f0:	08013987 	.word	0x08013987
 80138f4:	08013987 	.word	0x08013987
 80138f8:	08013987 	.word	0x08013987
 80138fc:	08013987 	.word	0x08013987
 8013900:	08013987 	.word	0x08013987
 8013904:	08013987 	.word	0x08013987
 8013908:	08013987 	.word	0x08013987
 801390c:	08013933 	.word	0x08013933
 8013910:	08013915 	.word	0x08013915
  case USB_EP0_OUT_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8013914:	9b01      	ldr	r3, [sp, #4]
 8013916:	220b      	movs	r2, #11
 8013918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 801391c:	f7ff fb00 	bl	8012f20 <osalSysLockFromISR.lto_priv.836>
    usbStartTransmitI(usbp, 0, NULL, 0);
 8013920:	9801      	ldr	r0, [sp, #4]
 8013922:	2100      	movs	r1, #0
 8013924:	2200      	movs	r2, #0
 8013926:	2300      	movs	r3, #0
 8013928:	f7ff fdc2 	bl	80134b0 <usbStartTransmitI>
    osalSysUnlockFromISR();
 801392c:	f7ff fb00 	bl	8012f30 <osalSysUnlockFromISR.lto_priv.833>
 8013930:	e029      	b.n	8013986 <_usb_ep0out+0xe6>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8013932:	9b01      	ldr	r3, [sp, #4]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	699b      	ldr	r3, [r3, #24]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d123      	bne.n	8013986 <_usb_ep0out+0xe6>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 801393e:	9b01      	ldr	r3, [sp, #4]
 8013940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013942:	2b00      	cmp	r3, #0
 8013944:	d003      	beq.n	801394e <_usb_ep0out+0xae>
      usbp->ep0endcb(usbp);
 8013946:	9b01      	ldr	r3, [sp, #4]
 8013948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801394a:	9801      	ldr	r0, [sp, #4]
 801394c:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 801394e:	9b01      	ldr	r3, [sp, #4]
 8013950:	2200      	movs	r2, #0
 8013952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8013956:	e016      	b.n	8013986 <_usb_ep0out+0xe6>
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8013958:	9801      	ldr	r0, [sp, #4]
 801395a:	2100      	movs	r1, #0
 801395c:	f7fe fea8 	bl	80126b0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8013960:	9801      	ldr	r0, [sp, #4]
 8013962:	2100      	movs	r1, #0
 8013964:	f7fe fe84 	bl	8012670 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8013968:	9b01      	ldr	r3, [sp, #4]
 801396a:	685b      	ldr	r3, [r3, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d005      	beq.n	801397e <_usb_ep0out+0xde>
 8013972:	9b01      	ldr	r3, [sp, #4]
 8013974:	685b      	ldr	r3, [r3, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	9801      	ldr	r0, [sp, #4]
 801397a:	2106      	movs	r1, #6
 801397c:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 801397e:	9b01      	ldr	r3, [sp, #4]
 8013980:	2206      	movs	r2, #6
 8013982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8013986:	b003      	add	sp, #12
 8013988:	f85d fb04 	ldr.w	pc, [sp], #4
 801398c:	0000      	movs	r0, r0
	...

08013990 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8013990:	b082      	sub	sp, #8
 8013992:	9001      	str	r0, [sp, #4]
 8013994:	9100      	str	r1, [sp, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8013996:	4a12      	ldr	r2, [pc, #72]	; (80139e0 <nvicEnableVector+0x50>)
 8013998:	9b00      	ldr	r3, [sp, #0]
 801399a:	b2db      	uxtb	r3, r3
 801399c:	011b      	lsls	r3, r3, #4
 801399e:	b2d9      	uxtb	r1, r3
 80139a0:	9b01      	ldr	r3, [sp, #4]
 80139a2:	4413      	add	r3, r2
 80139a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80139a8:	460a      	mov	r2, r1
 80139aa:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80139ac:	490c      	ldr	r1, [pc, #48]	; (80139e0 <nvicEnableVector+0x50>)
 80139ae:	9b01      	ldr	r3, [sp, #4]
 80139b0:	095b      	lsrs	r3, r3, #5
 80139b2:	9a01      	ldr	r2, [sp, #4]
 80139b4:	f002 021f 	and.w	r2, r2, #31
 80139b8:	2001      	movs	r0, #1
 80139ba:	fa00 f202 	lsl.w	r2, r0, r2
 80139be:	3360      	adds	r3, #96	; 0x60
 80139c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80139c4:	4906      	ldr	r1, [pc, #24]	; (80139e0 <nvicEnableVector+0x50>)
 80139c6:	9b01      	ldr	r3, [sp, #4]
 80139c8:	095b      	lsrs	r3, r3, #5
 80139ca:	9a01      	ldr	r2, [sp, #4]
 80139cc:	f002 021f 	and.w	r2, r2, #31
 80139d0:	2001      	movs	r0, #1
 80139d2:	fa00 f202 	lsl.w	r2, r0, r2
 80139d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80139da:	b002      	add	sp, #8
 80139dc:	4770      	bx	lr
 80139de:	bf00      	nop
 80139e0:	e000e100 	.word	0xe000e100
	...

080139f0 <port_lock.lto_priv.828>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80139f0:	b082      	sub	sp, #8
 80139f2:	2320      	movs	r3, #32
 80139f4:	9301      	str	r3, [sp, #4]
 80139f6:	9b01      	ldr	r3, [sp, #4]
 80139f8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80139fc:	b002      	add	sp, #8
 80139fe:	4770      	bx	lr

08013a00 <port_unlock.lto_priv.824>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8013a00:	b082      	sub	sp, #8
 8013a02:	2300      	movs	r3, #0
 8013a04:	9301      	str	r3, [sp, #4]
 8013a06:	9b01      	ldr	r3, [sp, #4]
 8013a08:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8013a0c:	b002      	add	sp, #8
 8013a0e:	4770      	bx	lr

08013a10 <port_lock_from_isr.lto_priv.820>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8013a10:	b508      	push	{r3, lr}

  port_lock();
 8013a12:	f7ff ffed 	bl	80139f0 <port_lock.lto_priv.828>
}
 8013a16:	bd08      	pop	{r3, pc}
	...

08013a20 <port_unlock_from_isr.lto_priv.816>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8013a20:	b508      	push	{r3, lr}

  port_unlock();
 8013a22:	f7ff ffed 	bl	8013a00 <port_unlock.lto_priv.824>
}
 8013a26:	bd08      	pop	{r3, pc}
	...

08013a30 <chSysLockFromISR.lto_priv.812>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8013a30:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8013a32:	f7ff ffed 	bl	8013a10 <port_lock_from_isr.lto_priv.820>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8013a36:	bd08      	pop	{r3, pc}
	...

08013a40 <chSysUnlockFromISR.lto_priv.808>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8013a40:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8013a42:	f7ff ffed 	bl	8013a20 <port_unlock_from_isr.lto_priv.816>
}
 8013a46:	bd08      	pop	{r3, pc}
	...

08013a50 <osalSysLockFromISR.lto_priv.837>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8013a50:	b508      	push	{r3, lr}

  chSysLockFromISR();
 8013a52:	f7ff ffed 	bl	8013a30 <chSysLockFromISR.lto_priv.812>
}
 8013a56:	bd08      	pop	{r3, pc}
	...

08013a60 <osalSysUnlockFromISR.lto_priv.834>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8013a60:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 8013a62:	f7ff ffed 	bl	8013a40 <chSysUnlockFromISR.lto_priv.808>
}
 8013a66:	bd08      	pop	{r3, pc}
	...

08013a70 <osalThreadDequeueAllI.lto_priv.831>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8013a70:	b500      	push	{lr}
 8013a72:	b083      	sub	sp, #12
 8013a74:	9001      	str	r0, [sp, #4]
 8013a76:	9100      	str	r1, [sp, #0]

  chThdDequeueAllI(tqp, msg);
 8013a78:	9801      	ldr	r0, [sp, #4]
 8013a7a:	9900      	ldr	r1, [sp, #0]
 8013a7c:	f7fd f9a0 	bl	8010dc0 <chThdDequeueAllI>
}
 8013a80:	b003      	add	sp, #12
 8013a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a86:	bf00      	nop
	...

08013a90 <Vector58>:
/**
 * @brief   EXTI[0] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector58) {
 8013a90:	b500      	push	{lr}
 8013a92:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8013a94:	4b14      	ldr	r3, [pc, #80]	; (8013ae8 <Vector58+0x58>)
 8013a96:	695b      	ldr	r3, [r3, #20]
 8013a98:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 0);
 8013a9a:	4b13      	ldr	r3, [pc, #76]	; (8013ae8 <Vector58+0x58>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	f003 0301 	and.w	r3, r3, #1
 8013aa2:	9a01      	ldr	r2, [sp, #4]
 8013aa4:	4013      	ands	r3, r2
 8013aa6:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 8013aa8:	4a0f      	ldr	r2, [pc, #60]	; (8013ae8 <Vector58+0x58>)
 8013aaa:	9b01      	ldr	r3, [sp, #4]
 8013aac:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 8013aae:	9b01      	ldr	r3, [sp, #4]
 8013ab0:	f003 0301 	and.w	r3, r3, #1
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d011      	beq.n	8013adc <Vector58+0x4c>
 8013ab8:	4b0c      	ldr	r3, [pc, #48]	; (8013aec <Vector58+0x5c>)
 8013aba:	689b      	ldr	r3, [r3, #8]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d005      	beq.n	8013acc <Vector58+0x3c>
 8013ac0:	4b0a      	ldr	r3, [pc, #40]	; (8013aec <Vector58+0x5c>)
 8013ac2:	689b      	ldr	r3, [r3, #8]
 8013ac4:	4a09      	ldr	r2, [pc, #36]	; (8013aec <Vector58+0x5c>)
 8013ac6:	68d2      	ldr	r2, [r2, #12]
 8013ac8:	4610      	mov	r0, r2
 8013aca:	4798      	blx	r3
 8013acc:	f7ff ffc0 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013ad0:	4806      	ldr	r0, [pc, #24]	; (8013aec <Vector58+0x5c>)
 8013ad2:	2100      	movs	r1, #0
 8013ad4:	f7ff ffcc 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013ad8:	f7ff ffc2 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>

  OSAL_IRQ_EPILOGUE();
 8013adc:	f7fb fba8 	bl	800f230 <_port_irq_epilogue>
}
 8013ae0:	b003      	add	sp, #12
 8013ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ae6:	bf00      	nop
 8013ae8:	40013c00 	.word	0x40013c00
 8013aec:	20001134 	.word	0x20001134

08013af0 <Vector5C>:
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 8013af0:	b500      	push	{lr}
 8013af2:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8013af4:	4b14      	ldr	r3, [pc, #80]	; (8013b48 <Vector5C+0x58>)
 8013af6:	695b      	ldr	r3, [r3, #20]
 8013af8:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 1);
 8013afa:	4b13      	ldr	r3, [pc, #76]	; (8013b48 <Vector5C+0x58>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	f003 0302 	and.w	r3, r3, #2
 8013b02:	9a01      	ldr	r2, [sp, #4]
 8013b04:	4013      	ands	r3, r2
 8013b06:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 8013b08:	4a0f      	ldr	r2, [pc, #60]	; (8013b48 <Vector5C+0x58>)
 8013b0a:	9b01      	ldr	r3, [sp, #4]
 8013b0c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 8013b0e:	9b01      	ldr	r3, [sp, #4]
 8013b10:	f003 0302 	and.w	r3, r3, #2
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d011      	beq.n	8013b3c <Vector5C+0x4c>
 8013b18:	4b0c      	ldr	r3, [pc, #48]	; (8013b4c <Vector5C+0x5c>)
 8013b1a:	699b      	ldr	r3, [r3, #24]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d005      	beq.n	8013b2c <Vector5C+0x3c>
 8013b20:	4b0a      	ldr	r3, [pc, #40]	; (8013b4c <Vector5C+0x5c>)
 8013b22:	699b      	ldr	r3, [r3, #24]
 8013b24:	4a09      	ldr	r2, [pc, #36]	; (8013b4c <Vector5C+0x5c>)
 8013b26:	69d2      	ldr	r2, [r2, #28]
 8013b28:	4610      	mov	r0, r2
 8013b2a:	4798      	blx	r3
 8013b2c:	f7ff ff90 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013b30:	4807      	ldr	r0, [pc, #28]	; (8013b50 <Vector5C+0x60>)
 8013b32:	2100      	movs	r1, #0
 8013b34:	f7ff ff9c 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013b38:	f7ff ff92 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>

  OSAL_IRQ_EPILOGUE();
 8013b3c:	f7fb fb78 	bl	800f230 <_port_irq_epilogue>
}
 8013b40:	b003      	add	sp, #12
 8013b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b46:	bf00      	nop
 8013b48:	40013c00 	.word	0x40013c00
 8013b4c:	20001134 	.word	0x20001134
 8013b50:	20001144 	.word	0x20001144
	...

08013b60 <Vector60>:
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8013b60:	b500      	push	{lr}
 8013b62:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8013b64:	4b14      	ldr	r3, [pc, #80]	; (8013bb8 <Vector60+0x58>)
 8013b66:	695b      	ldr	r3, [r3, #20]
 8013b68:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 2);
 8013b6a:	4b13      	ldr	r3, [pc, #76]	; (8013bb8 <Vector60+0x58>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	f003 0304 	and.w	r3, r3, #4
 8013b72:	9a01      	ldr	r2, [sp, #4]
 8013b74:	4013      	ands	r3, r2
 8013b76:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 8013b78:	4a0f      	ldr	r2, [pc, #60]	; (8013bb8 <Vector60+0x58>)
 8013b7a:	9b01      	ldr	r3, [sp, #4]
 8013b7c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 8013b7e:	9b01      	ldr	r3, [sp, #4]
 8013b80:	f003 0304 	and.w	r3, r3, #4
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d011      	beq.n	8013bac <Vector60+0x4c>
 8013b88:	4b0c      	ldr	r3, [pc, #48]	; (8013bbc <Vector60+0x5c>)
 8013b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d005      	beq.n	8013b9c <Vector60+0x3c>
 8013b90:	4b0a      	ldr	r3, [pc, #40]	; (8013bbc <Vector60+0x5c>)
 8013b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b94:	4a09      	ldr	r2, [pc, #36]	; (8013bbc <Vector60+0x5c>)
 8013b96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013b98:	4610      	mov	r0, r2
 8013b9a:	4798      	blx	r3
 8013b9c:	f7ff ff58 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013ba0:	4807      	ldr	r0, [pc, #28]	; (8013bc0 <Vector60+0x60>)
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	f7ff ff64 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013ba8:	f7ff ff5a 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>

  OSAL_IRQ_EPILOGUE();
 8013bac:	f7fb fb40 	bl	800f230 <_port_irq_epilogue>
}
 8013bb0:	b003      	add	sp, #12
 8013bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8013bb6:	bf00      	nop
 8013bb8:	40013c00 	.word	0x40013c00
 8013bbc:	20001134 	.word	0x20001134
 8013bc0:	20001154 	.word	0x20001154
	...

08013bd0 <Vector64>:
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 8013bd0:	b500      	push	{lr}
 8013bd2:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8013bd4:	4b14      	ldr	r3, [pc, #80]	; (8013c28 <Vector64+0x58>)
 8013bd6:	695b      	ldr	r3, [r3, #20]
 8013bd8:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 3);
 8013bda:	4b13      	ldr	r3, [pc, #76]	; (8013c28 <Vector64+0x58>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	f003 0308 	and.w	r3, r3, #8
 8013be2:	9a01      	ldr	r2, [sp, #4]
 8013be4:	4013      	ands	r3, r2
 8013be6:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 8013be8:	4a0f      	ldr	r2, [pc, #60]	; (8013c28 <Vector64+0x58>)
 8013bea:	9b01      	ldr	r3, [sp, #4]
 8013bec:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 8013bee:	9b01      	ldr	r3, [sp, #4]
 8013bf0:	f003 0308 	and.w	r3, r3, #8
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d011      	beq.n	8013c1c <Vector64+0x4c>
 8013bf8:	4b0c      	ldr	r3, [pc, #48]	; (8013c2c <Vector64+0x5c>)
 8013bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d005      	beq.n	8013c0c <Vector64+0x3c>
 8013c00:	4b0a      	ldr	r3, [pc, #40]	; (8013c2c <Vector64+0x5c>)
 8013c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c04:	4a09      	ldr	r2, [pc, #36]	; (8013c2c <Vector64+0x5c>)
 8013c06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013c08:	4610      	mov	r0, r2
 8013c0a:	4798      	blx	r3
 8013c0c:	f7ff ff20 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013c10:	4807      	ldr	r0, [pc, #28]	; (8013c30 <Vector64+0x60>)
 8013c12:	2100      	movs	r1, #0
 8013c14:	f7ff ff2c 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013c18:	f7ff ff22 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>

  OSAL_IRQ_EPILOGUE();
 8013c1c:	f7fb fb08 	bl	800f230 <_port_irq_epilogue>
}
 8013c20:	b003      	add	sp, #12
 8013c22:	f85d fb04 	ldr.w	pc, [sp], #4
 8013c26:	bf00      	nop
 8013c28:	40013c00 	.word	0x40013c00
 8013c2c:	20001134 	.word	0x20001134
 8013c30:	20001164 	.word	0x20001164
	...

08013c40 <Vector68>:
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 8013c40:	b500      	push	{lr}
 8013c42:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8013c44:	4b14      	ldr	r3, [pc, #80]	; (8013c98 <Vector68+0x58>)
 8013c46:	695b      	ldr	r3, [r3, #20]
 8013c48:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 4);
 8013c4a:	4b13      	ldr	r3, [pc, #76]	; (8013c98 <Vector68+0x58>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	f003 0310 	and.w	r3, r3, #16
 8013c52:	9a01      	ldr	r2, [sp, #4]
 8013c54:	4013      	ands	r3, r2
 8013c56:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 8013c58:	4a0f      	ldr	r2, [pc, #60]	; (8013c98 <Vector68+0x58>)
 8013c5a:	9b01      	ldr	r3, [sp, #4]
 8013c5c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 8013c5e:	9b01      	ldr	r3, [sp, #4]
 8013c60:	f003 0310 	and.w	r3, r3, #16
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d011      	beq.n	8013c8c <Vector68+0x4c>
 8013c68:	4b0c      	ldr	r3, [pc, #48]	; (8013c9c <Vector68+0x5c>)
 8013c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d005      	beq.n	8013c7c <Vector68+0x3c>
 8013c70:	4b0a      	ldr	r3, [pc, #40]	; (8013c9c <Vector68+0x5c>)
 8013c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c74:	4a09      	ldr	r2, [pc, #36]	; (8013c9c <Vector68+0x5c>)
 8013c76:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8013c78:	4610      	mov	r0, r2
 8013c7a:	4798      	blx	r3
 8013c7c:	f7ff fee8 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013c80:	4807      	ldr	r0, [pc, #28]	; (8013ca0 <Vector68+0x60>)
 8013c82:	2100      	movs	r1, #0
 8013c84:	f7ff fef4 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013c88:	f7ff feea 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>

  OSAL_IRQ_EPILOGUE();
 8013c8c:	f7fb fad0 	bl	800f230 <_port_irq_epilogue>
}
 8013c90:	b003      	add	sp, #12
 8013c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8013c96:	bf00      	nop
 8013c98:	40013c00 	.word	0x40013c00
 8013c9c:	20001134 	.word	0x20001134
 8013ca0:	20001174 	.word	0x20001174
	...

08013cb0 <Vector9C>:
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 8013cb0:	b500      	push	{lr}
 8013cb2:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8013cb4:	4b45      	ldr	r3, [pc, #276]	; (8013dcc <Vector9C+0x11c>)
 8013cb6:	695b      	ldr	r3, [r3, #20]
 8013cb8:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8013cba:	4b44      	ldr	r3, [pc, #272]	; (8013dcc <Vector9C+0x11c>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8013cc2:	9a01      	ldr	r2, [sp, #4]
 8013cc4:	4013      	ands	r3, r2
 8013cc6:	9301      	str	r3, [sp, #4]
                     (1U << 9));
  EXTI->PR = pr;
 8013cc8:	4a40      	ldr	r2, [pc, #256]	; (8013dcc <Vector9C+0x11c>)
 8013cca:	9b01      	ldr	r3, [sp, #4]
 8013ccc:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 5);
 8013cce:	9b01      	ldr	r3, [sp, #4]
 8013cd0:	f003 0320 	and.w	r3, r3, #32
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d011      	beq.n	8013cfc <Vector9C+0x4c>
 8013cd8:	4b3d      	ldr	r3, [pc, #244]	; (8013dd0 <Vector9C+0x120>)
 8013cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d005      	beq.n	8013cec <Vector9C+0x3c>
 8013ce0:	4b3b      	ldr	r3, [pc, #236]	; (8013dd0 <Vector9C+0x120>)
 8013ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ce4:	4a3a      	ldr	r2, [pc, #232]	; (8013dd0 <Vector9C+0x120>)
 8013ce6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8013ce8:	4610      	mov	r0, r2
 8013cea:	4798      	blx	r3
 8013cec:	f7ff feb0 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013cf0:	4838      	ldr	r0, [pc, #224]	; (8013dd4 <Vector9C+0x124>)
 8013cf2:	2100      	movs	r1, #0
 8013cf4:	f7ff febc 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013cf8:	f7ff feb2 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>
  exti_serve_irq(pr, 6);
 8013cfc:	9b01      	ldr	r3, [sp, #4]
 8013cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d011      	beq.n	8013d2a <Vector9C+0x7a>
 8013d06:	4b32      	ldr	r3, [pc, #200]	; (8013dd0 <Vector9C+0x120>)
 8013d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d005      	beq.n	8013d1a <Vector9C+0x6a>
 8013d0e:	4b30      	ldr	r3, [pc, #192]	; (8013dd0 <Vector9C+0x120>)
 8013d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013d12:	4a2f      	ldr	r2, [pc, #188]	; (8013dd0 <Vector9C+0x120>)
 8013d14:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8013d16:	4610      	mov	r0, r2
 8013d18:	4798      	blx	r3
 8013d1a:	f7ff fe99 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013d1e:	482e      	ldr	r0, [pc, #184]	; (8013dd8 <Vector9C+0x128>)
 8013d20:	2100      	movs	r1, #0
 8013d22:	f7ff fea5 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013d26:	f7ff fe9b 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>
  exti_serve_irq(pr, 7);
 8013d2a:	9b01      	ldr	r3, [sp, #4]
 8013d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d011      	beq.n	8013d58 <Vector9C+0xa8>
 8013d34:	4b26      	ldr	r3, [pc, #152]	; (8013dd0 <Vector9C+0x120>)
 8013d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d005      	beq.n	8013d48 <Vector9C+0x98>
 8013d3c:	4b24      	ldr	r3, [pc, #144]	; (8013dd0 <Vector9C+0x120>)
 8013d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d40:	4a23      	ldr	r2, [pc, #140]	; (8013dd0 <Vector9C+0x120>)
 8013d42:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8013d44:	4610      	mov	r0, r2
 8013d46:	4798      	blx	r3
 8013d48:	f7ff fe82 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013d4c:	4823      	ldr	r0, [pc, #140]	; (8013ddc <Vector9C+0x12c>)
 8013d4e:	2100      	movs	r1, #0
 8013d50:	f7ff fe8e 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013d54:	f7ff fe84 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>
  exti_serve_irq(pr, 8);
 8013d58:	9b01      	ldr	r3, [sp, #4]
 8013d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d014      	beq.n	8013d8c <Vector9C+0xdc>
 8013d62:	4b1b      	ldr	r3, [pc, #108]	; (8013dd0 <Vector9C+0x120>)
 8013d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d007      	beq.n	8013d7c <Vector9C+0xcc>
 8013d6c:	4b18      	ldr	r3, [pc, #96]	; (8013dd0 <Vector9C+0x120>)
 8013d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d72:	4a17      	ldr	r2, [pc, #92]	; (8013dd0 <Vector9C+0x120>)
 8013d74:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8013d78:	4610      	mov	r0, r2
 8013d7a:	4798      	blx	r3
 8013d7c:	f7ff fe68 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013d80:	4817      	ldr	r0, [pc, #92]	; (8013de0 <Vector9C+0x130>)
 8013d82:	2100      	movs	r1, #0
 8013d84:	f7ff fe74 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013d88:	f7ff fe6a 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>
  exti_serve_irq(pr, 9);
 8013d8c:	9b01      	ldr	r3, [sp, #4]
 8013d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d014      	beq.n	8013dc0 <Vector9C+0x110>
 8013d96:	4b0e      	ldr	r3, [pc, #56]	; (8013dd0 <Vector9C+0x120>)
 8013d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d007      	beq.n	8013db0 <Vector9C+0x100>
 8013da0:	4b0b      	ldr	r3, [pc, #44]	; (8013dd0 <Vector9C+0x120>)
 8013da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013da6:	4a0a      	ldr	r2, [pc, #40]	; (8013dd0 <Vector9C+0x120>)
 8013da8:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8013dac:	4610      	mov	r0, r2
 8013dae:	4798      	blx	r3
 8013db0:	f7ff fe4e 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013db4:	480b      	ldr	r0, [pc, #44]	; (8013de4 <Vector9C+0x134>)
 8013db6:	2100      	movs	r1, #0
 8013db8:	f7ff fe5a 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013dbc:	f7ff fe50 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>

  OSAL_IRQ_EPILOGUE();
 8013dc0:	f7fb fa36 	bl	800f230 <_port_irq_epilogue>
}
 8013dc4:	b003      	add	sp, #12
 8013dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dca:	bf00      	nop
 8013dcc:	40013c00 	.word	0x40013c00
 8013dd0:	20001134 	.word	0x20001134
 8013dd4:	20001184 	.word	0x20001184
 8013dd8:	20001194 	.word	0x20001194
 8013ddc:	200011a4 	.word	0x200011a4
 8013de0:	200011b4 	.word	0x200011b4
 8013de4:	200011c4 	.word	0x200011c4
	...

08013df0 <VectorE0>:
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8013df0:	b500      	push	{lr}
 8013df2:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8013df4:	4b56      	ldr	r3, [pc, #344]	; (8013f50 <VectorE0+0x160>)
 8013df6:	695b      	ldr	r3, [r3, #20]
 8013df8:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8013dfa:	4b55      	ldr	r3, [pc, #340]	; (8013f50 <VectorE0+0x160>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8013e02:	9a01      	ldr	r2, [sp, #4]
 8013e04:	4013      	ands	r3, r2
 8013e06:	9301      	str	r3, [sp, #4]
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 8013e08:	4a51      	ldr	r2, [pc, #324]	; (8013f50 <VectorE0+0x160>)
 8013e0a:	9b01      	ldr	r3, [sp, #4]
 8013e0c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 10);
 8013e0e:	9b01      	ldr	r3, [sp, #4]
 8013e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d014      	beq.n	8013e42 <VectorE0+0x52>
 8013e18:	4b4e      	ldr	r3, [pc, #312]	; (8013f54 <VectorE0+0x164>)
 8013e1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d007      	beq.n	8013e32 <VectorE0+0x42>
 8013e22:	4b4c      	ldr	r3, [pc, #304]	; (8013f54 <VectorE0+0x164>)
 8013e24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013e28:	4a4a      	ldr	r2, [pc, #296]	; (8013f54 <VectorE0+0x164>)
 8013e2a:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8013e2e:	4610      	mov	r0, r2
 8013e30:	4798      	blx	r3
 8013e32:	f7ff fe0d 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013e36:	4848      	ldr	r0, [pc, #288]	; (8013f58 <VectorE0+0x168>)
 8013e38:	2100      	movs	r1, #0
 8013e3a:	f7ff fe19 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013e3e:	f7ff fe0f 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>
  exti_serve_irq(pr, 11);
 8013e42:	9b01      	ldr	r3, [sp, #4]
 8013e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d014      	beq.n	8013e76 <VectorE0+0x86>
 8013e4c:	4b41      	ldr	r3, [pc, #260]	; (8013f54 <VectorE0+0x164>)
 8013e4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d007      	beq.n	8013e66 <VectorE0+0x76>
 8013e56:	4b3f      	ldr	r3, [pc, #252]	; (8013f54 <VectorE0+0x164>)
 8013e58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013e5c:	4a3d      	ldr	r2, [pc, #244]	; (8013f54 <VectorE0+0x164>)
 8013e5e:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8013e62:	4610      	mov	r0, r2
 8013e64:	4798      	blx	r3
 8013e66:	f7ff fdf3 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013e6a:	483c      	ldr	r0, [pc, #240]	; (8013f5c <VectorE0+0x16c>)
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	f7ff fdff 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013e72:	f7ff fdf5 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>
  exti_serve_irq(pr, 12);
 8013e76:	9b01      	ldr	r3, [sp, #4]
 8013e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d014      	beq.n	8013eaa <VectorE0+0xba>
 8013e80:	4b34      	ldr	r3, [pc, #208]	; (8013f54 <VectorE0+0x164>)
 8013e82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d007      	beq.n	8013e9a <VectorE0+0xaa>
 8013e8a:	4b32      	ldr	r3, [pc, #200]	; (8013f54 <VectorE0+0x164>)
 8013e8c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013e90:	4a30      	ldr	r2, [pc, #192]	; (8013f54 <VectorE0+0x164>)
 8013e92:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8013e96:	4610      	mov	r0, r2
 8013e98:	4798      	blx	r3
 8013e9a:	f7ff fdd9 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013e9e:	4830      	ldr	r0, [pc, #192]	; (8013f60 <VectorE0+0x170>)
 8013ea0:	2100      	movs	r1, #0
 8013ea2:	f7ff fde5 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013ea6:	f7ff fddb 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>
  exti_serve_irq(pr, 13);
 8013eaa:	9b01      	ldr	r3, [sp, #4]
 8013eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d014      	beq.n	8013ede <VectorE0+0xee>
 8013eb4:	4b27      	ldr	r3, [pc, #156]	; (8013f54 <VectorE0+0x164>)
 8013eb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d007      	beq.n	8013ece <VectorE0+0xde>
 8013ebe:	4b25      	ldr	r3, [pc, #148]	; (8013f54 <VectorE0+0x164>)
 8013ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013ec4:	4a23      	ldr	r2, [pc, #140]	; (8013f54 <VectorE0+0x164>)
 8013ec6:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8013eca:	4610      	mov	r0, r2
 8013ecc:	4798      	blx	r3
 8013ece:	f7ff fdbf 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013ed2:	4824      	ldr	r0, [pc, #144]	; (8013f64 <VectorE0+0x174>)
 8013ed4:	2100      	movs	r1, #0
 8013ed6:	f7ff fdcb 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013eda:	f7ff fdc1 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>
  exti_serve_irq(pr, 14);
 8013ede:	9b01      	ldr	r3, [sp, #4]
 8013ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d014      	beq.n	8013f12 <VectorE0+0x122>
 8013ee8:	4b1a      	ldr	r3, [pc, #104]	; (8013f54 <VectorE0+0x164>)
 8013eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d007      	beq.n	8013f02 <VectorE0+0x112>
 8013ef2:	4b18      	ldr	r3, [pc, #96]	; (8013f54 <VectorE0+0x164>)
 8013ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013ef8:	4a16      	ldr	r2, [pc, #88]	; (8013f54 <VectorE0+0x164>)
 8013efa:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8013efe:	4610      	mov	r0, r2
 8013f00:	4798      	blx	r3
 8013f02:	f7ff fda5 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013f06:	4818      	ldr	r0, [pc, #96]	; (8013f68 <VectorE0+0x178>)
 8013f08:	2100      	movs	r1, #0
 8013f0a:	f7ff fdb1 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013f0e:	f7ff fda7 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>
  exti_serve_irq(pr, 15);
 8013f12:	9b01      	ldr	r3, [sp, #4]
 8013f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d014      	beq.n	8013f46 <VectorE0+0x156>
 8013f1c:	4b0d      	ldr	r3, [pc, #52]	; (8013f54 <VectorE0+0x164>)
 8013f1e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d007      	beq.n	8013f36 <VectorE0+0x146>
 8013f26:	4b0b      	ldr	r3, [pc, #44]	; (8013f54 <VectorE0+0x164>)
 8013f28:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8013f2c:	4a09      	ldr	r2, [pc, #36]	; (8013f54 <VectorE0+0x164>)
 8013f2e:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
 8013f32:	4610      	mov	r0, r2
 8013f34:	4798      	blx	r3
 8013f36:	f7ff fd8b 	bl	8013a50 <osalSysLockFromISR.lto_priv.837>
 8013f3a:	480c      	ldr	r0, [pc, #48]	; (8013f6c <VectorE0+0x17c>)
 8013f3c:	2100      	movs	r1, #0
 8013f3e:	f7ff fd97 	bl	8013a70 <osalThreadDequeueAllI.lto_priv.831>
 8013f42:	f7ff fd8d 	bl	8013a60 <osalSysUnlockFromISR.lto_priv.834>

  OSAL_IRQ_EPILOGUE();
 8013f46:	f7fb f973 	bl	800f230 <_port_irq_epilogue>
}
 8013f4a:	b003      	add	sp, #12
 8013f4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f50:	40013c00 	.word	0x40013c00
 8013f54:	20001134 	.word	0x20001134
 8013f58:	200011d4 	.word	0x200011d4
 8013f5c:	200011e4 	.word	0x200011e4
 8013f60:	200011f4 	.word	0x200011f4
 8013f64:	20001204 	.word	0x20001204
 8013f68:	20001214 	.word	0x20001214
 8013f6c:	20001224 	.word	0x20001224

08013f70 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8013f70:	b508      	push	{r3, lr}

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8013f72:	2006      	movs	r0, #6
 8013f74:	2106      	movs	r1, #6
 8013f76:	f7ff fd0b 	bl	8013990 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 8013f7a:	2007      	movs	r0, #7
 8013f7c:	2106      	movs	r1, #6
 8013f7e:	f7ff fd07 	bl	8013990 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8013f82:	2008      	movs	r0, #8
 8013f84:	2106      	movs	r1, #6
 8013f86:	f7ff fd03 	bl	8013990 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 8013f8a:	2009      	movs	r0, #9
 8013f8c:	2106      	movs	r1, #6
 8013f8e:	f7ff fcff 	bl	8013990 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8013f92:	200a      	movs	r0, #10
 8013f94:	2106      	movs	r1, #6
 8013f96:	f7ff fcfb 	bl	8013990 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 8013f9a:	2017      	movs	r0, #23
 8013f9c:	2106      	movs	r1, #6
 8013f9e:	f7ff fcf7 	bl	8013990 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8013fa2:	2028      	movs	r0, #40	; 0x28
 8013fa4:	2106      	movs	r1, #6
 8013fa6:	f7ff fcf3 	bl	8013990 <nvicEnableVector>
#endif
}
 8013faa:	bd08      	pop	{r3, pc}
 8013fac:	0000      	movs	r0, r0
	...

08013fb0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8013fb0:	4a0d      	ldr	r2, [pc, #52]	; (8013fe8 <hal_lld_backup_domain_init+0x38>)
 8013fb2:	4b0d      	ldr	r3, [pc, #52]	; (8013fe8 <hal_lld_backup_domain_init+0x38>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013fba:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8013fbc:	4b0b      	ldr	r3, [pc, #44]	; (8013fec <hal_lld_backup_domain_init+0x3c>)
 8013fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013fc8:	d006      	beq.n	8013fd8 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8013fca:	4b08      	ldr	r3, [pc, #32]	; (8013fec <hal_lld_backup_domain_init+0x3c>)
 8013fcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013fd0:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8013fd2:	4b06      	ldr	r3, [pc, #24]	; (8013fec <hal_lld_backup_domain_init+0x3c>)
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8013fd8:	4a03      	ldr	r2, [pc, #12]	; (8013fe8 <hal_lld_backup_domain_init+0x38>)
 8013fda:	4b03      	ldr	r3, [pc, #12]	; (8013fe8 <hal_lld_backup_domain_init+0x38>)
 8013fdc:	685b      	ldr	r3, [r3, #4]
 8013fde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013fe2:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop
 8013fe8:	40007000 	.word	0x40007000
 8013fec:	40023800 	.word	0x40023800

08013ff0 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8013ff0:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8013ff2:	4a1c      	ldr	r2, [pc, #112]	; (8014064 <hal_lld_init+0x74>)
 8013ff4:	4b1b      	ldr	r3, [pc, #108]	; (8014064 <hal_lld_init+0x74>)
 8013ff6:	691b      	ldr	r3, [r3, #16]
 8013ff8:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 8013ffc:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 8014000:	6113      	str	r3, [r2, #16]
 8014002:	4b18      	ldr	r3, [pc, #96]	; (8014064 <hal_lld_init+0x74>)
 8014004:	2200      	movs	r2, #0
 8014006:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8014008:	4b16      	ldr	r3, [pc, #88]	; (8014064 <hal_lld_init+0x74>)
 801400a:	695b      	ldr	r3, [r3, #20]
 801400c:	4b15      	ldr	r3, [pc, #84]	; (8014064 <hal_lld_init+0x74>)
 801400e:	f04f 32ff 	mov.w	r2, #4294967295
 8014012:	615a      	str	r2, [r3, #20]
 8014014:	4b13      	ldr	r3, [pc, #76]	; (8014064 <hal_lld_init+0x74>)
 8014016:	2200      	movs	r2, #0
 8014018:	615a      	str	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 801401a:	4a12      	ldr	r2, [pc, #72]	; (8014064 <hal_lld_init+0x74>)
 801401c:	4b11      	ldr	r3, [pc, #68]	; (8014064 <hal_lld_init+0x74>)
 801401e:	6a1b      	ldr	r3, [r3, #32]
 8014020:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
 8014024:	6213      	str	r3, [r2, #32]
 8014026:	4b0f      	ldr	r3, [pc, #60]	; (8014064 <hal_lld_init+0x74>)
 8014028:	2200      	movs	r2, #0
 801402a:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 801402c:	4b0d      	ldr	r3, [pc, #52]	; (8014064 <hal_lld_init+0x74>)
 801402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014030:	4b0c      	ldr	r3, [pc, #48]	; (8014064 <hal_lld_init+0x74>)
 8014032:	f04f 32ff 	mov.w	r2, #4294967295
 8014036:	625a      	str	r2, [r3, #36]	; 0x24
 8014038:	4b0a      	ldr	r3, [pc, #40]	; (8014064 <hal_lld_init+0x74>)
 801403a:	2200      	movs	r2, #0
 801403c:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 801403e:	4a09      	ldr	r2, [pc, #36]	; (8014064 <hal_lld_init+0x74>)
 8014040:	4b08      	ldr	r3, [pc, #32]	; (8014064 <hal_lld_init+0x74>)
 8014042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014048:	6413      	str	r3, [r2, #64]	; 0x40
 801404a:	4a06      	ldr	r2, [pc, #24]	; (8014064 <hal_lld_init+0x74>)
 801404c:	4b05      	ldr	r3, [pc, #20]	; (8014064 <hal_lld_init+0x74>)
 801404e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014054:	6613      	str	r3, [r2, #96]	; 0x60

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8014056:	f7ff ffab 	bl	8013fb0 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 801405a:	f7fd faa9 	bl	80115b0 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 801405e:	f7ff ff87 	bl	8013f70 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8014062:	bd08      	pop	{r3, pc}
 8014064:	40023800 	.word	0x40023800
	...

08014070 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8014070:	4b44      	ldr	r3, [pc, #272]	; (8014184 <stm32_clock_init+0x114>)
 8014072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014076:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8014078:	4b43      	ldr	r3, [pc, #268]	; (8014188 <stm32_clock_init+0x118>)
 801407a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801407e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8014080:	4a40      	ldr	r2, [pc, #256]	; (8014184 <stm32_clock_init+0x114>)
 8014082:	4b40      	ldr	r3, [pc, #256]	; (8014184 <stm32_clock_init+0x114>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	f043 0301 	orr.w	r3, r3, #1
 801408a:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 801408c:	4b3d      	ldr	r3, [pc, #244]	; (8014184 <stm32_clock_init+0x114>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f003 0302 	and.w	r3, r3, #2
 8014094:	2b00      	cmp	r3, #0
 8014096:	d0f9      	beq.n	801408c <stm32_clock_init+0x1c>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8014098:	4a3a      	ldr	r2, [pc, #232]	; (8014184 <stm32_clock_init+0x114>)
 801409a:	4b3a      	ldr	r3, [pc, #232]	; (8014184 <stm32_clock_init+0x114>)
 801409c:	689b      	ldr	r3, [r3, #8]
 801409e:	f023 0303 	bic.w	r3, r3, #3
 80140a2:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80140a4:	4a37      	ldr	r2, [pc, #220]	; (8014184 <stm32_clock_init+0x114>)
 80140a6:	4b37      	ldr	r3, [pc, #220]	; (8014184 <stm32_clock_init+0x114>)
 80140a8:	689b      	ldr	r3, [r3, #8]
 80140aa:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80140ac:	4b35      	ldr	r3, [pc, #212]	; (8014184 <stm32_clock_init+0x114>)
 80140ae:	689b      	ldr	r3, [r3, #8]
 80140b0:	f003 030c 	and.w	r3, r3, #12
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d1f9      	bne.n	80140ac <stm32_clock_init+0x3c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80140b8:	4a32      	ldr	r2, [pc, #200]	; (8014184 <stm32_clock_init+0x114>)
 80140ba:	4b32      	ldr	r3, [pc, #200]	; (8014184 <stm32_clock_init+0x114>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 80140c2:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80140c4:	4b2f      	ldr	r3, [pc, #188]	; (8014184 <stm32_clock_init+0x114>)
 80140c6:	2200      	movs	r2, #0
 80140c8:	609a      	str	r2, [r3, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80140ca:	4a2e      	ldr	r2, [pc, #184]	; (8014184 <stm32_clock_init+0x114>)
 80140cc:	4b2d      	ldr	r3, [pc, #180]	; (8014184 <stm32_clock_init+0x114>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80140d4:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80140d6:	4b2b      	ldr	r3, [pc, #172]	; (8014184 <stm32_clock_init+0x114>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d0f9      	beq.n	80140d6 <stm32_clock_init+0x66>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80140e2:	4a28      	ldr	r2, [pc, #160]	; (8014184 <stm32_clock_init+0x114>)
 80140e4:	4b27      	ldr	r3, [pc, #156]	; (8014184 <stm32_clock_init+0x114>)
 80140e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140e8:	f043 0301 	orr.w	r3, r3, #1
 80140ec:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80140ee:	4b25      	ldr	r3, [pc, #148]	; (8014184 <stm32_clock_init+0x114>)
 80140f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140f2:	f003 0302 	and.w	r3, r3, #2
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d0f9      	beq.n	80140ee <stm32_clock_init+0x7e>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80140fa:	4b22      	ldr	r3, [pc, #136]	; (8014184 <stm32_clock_init+0x114>)
 80140fc:	4a23      	ldr	r2, [pc, #140]	; (801418c <stm32_clock_init+0x11c>)
 80140fe:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8014100:	4a20      	ldr	r2, [pc, #128]	; (8014184 <stm32_clock_init+0x114>)
 8014102:	4b20      	ldr	r3, [pc, #128]	; (8014184 <stm32_clock_init+0x114>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801410a:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 801410c:	4b1e      	ldr	r3, [pc, #120]	; (8014188 <stm32_clock_init+0x118>)
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014114:	2b00      	cmp	r3, #0
 8014116:	d0f9      	beq.n	801410c <stm32_clock_init+0x9c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8014118:	4b1a      	ldr	r3, [pc, #104]	; (8014184 <stm32_clock_init+0x114>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014120:	2b00      	cmp	r3, #0
 8014122:	d0f9      	beq.n	8014118 <stm32_clock_init+0xa8>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8014124:	4b17      	ldr	r3, [pc, #92]	; (8014184 <stm32_clock_init+0x114>)
 8014126:	4a1a      	ldr	r2, [pc, #104]	; (8014190 <stm32_clock_init+0x120>)
 8014128:	609a      	str	r2, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 801412a:	4b1a      	ldr	r3, [pc, #104]	; (8014194 <stm32_clock_init+0x124>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	4a1a      	ldr	r2, [pc, #104]	; (8014198 <stm32_clock_init+0x128>)
 8014130:	4293      	cmp	r3, r2
 8014132:	d109      	bne.n	8014148 <stm32_clock_init+0xd8>
 8014134:	4b19      	ldr	r3, [pc, #100]	; (801419c <stm32_clock_init+0x12c>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	4a19      	ldr	r2, [pc, #100]	; (80141a0 <stm32_clock_init+0x130>)
 801413a:	4293      	cmp	r3, r2
 801413c:	d104      	bne.n	8014148 <stm32_clock_init+0xd8>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 801413e:	4b19      	ldr	r3, [pc, #100]	; (80141a4 <stm32_clock_init+0x134>)
 8014140:	f240 1205 	movw	r2, #261	; 0x105
 8014144:	601a      	str	r2, [r3, #0]
 8014146:	e003      	b.n	8014150 <stm32_clock_init+0xe0>
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8014148:	4b16      	ldr	r3, [pc, #88]	; (80141a4 <stm32_clock_init+0x134>)
 801414a:	f240 7205 	movw	r2, #1797	; 0x705
 801414e:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8014150:	4a0c      	ldr	r2, [pc, #48]	; (8014184 <stm32_clock_init+0x114>)
 8014152:	4b0c      	ldr	r3, [pc, #48]	; (8014184 <stm32_clock_init+0x114>)
 8014154:	689b      	ldr	r3, [r3, #8]
 8014156:	f043 0302 	orr.w	r3, r3, #2
 801415a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 801415c:	4b09      	ldr	r3, [pc, #36]	; (8014184 <stm32_clock_init+0x114>)
 801415e:	689b      	ldr	r3, [r3, #8]
 8014160:	f003 030c 	and.w	r3, r3, #12
 8014164:	2b08      	cmp	r3, #8
 8014166:	d1f9      	bne.n	801415c <stm32_clock_init+0xec>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8014168:	4a06      	ldr	r2, [pc, #24]	; (8014184 <stm32_clock_init+0x114>)
 801416a:	4b06      	ldr	r3, [pc, #24]	; (8014184 <stm32_clock_init+0x114>)
 801416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801416e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014172:	6453      	str	r3, [r2, #68]	; 0x44
 8014174:	4a03      	ldr	r2, [pc, #12]	; (8014184 <stm32_clock_init+0x114>)
 8014176:	4b03      	ldr	r3, [pc, #12]	; (8014184 <stm32_clock_init+0x114>)
 8014178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801417a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801417e:	6653      	str	r3, [r2, #100]	; 0x64
}
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	40023800 	.word	0x40023800
 8014188:	40007000 	.word	0x40007000
 801418c:	07405410 	.word	0x07405410
 8014190:	38889400 	.word	0x38889400
 8014194:	e0042000 	.word	0xe0042000
 8014198:	20006411 	.word	0x20006411
 801419c:	e000ed00 	.word	0xe000ed00
 80141a0:	410fc241 	.word	0x410fc241
 80141a4:	40023c00 	.word	0x40023c00
	...

080141b0 <port_lock.lto_priv.829>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80141b0:	b082      	sub	sp, #8
 80141b2:	2320      	movs	r3, #32
 80141b4:	9301      	str	r3, [sp, #4]
 80141b6:	9b01      	ldr	r3, [sp, #4]
 80141b8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80141bc:	b002      	add	sp, #8
 80141be:	4770      	bx	lr

080141c0 <port_unlock.lto_priv.825>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80141c0:	b082      	sub	sp, #8
 80141c2:	2300      	movs	r3, #0
 80141c4:	9301      	str	r3, [sp, #4]
 80141c6:	9b01      	ldr	r3, [sp, #4]
 80141c8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80141cc:	b002      	add	sp, #8
 80141ce:	4770      	bx	lr

080141d0 <port_lock_from_isr.lto_priv.821>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80141d0:	b508      	push	{r3, lr}

  port_lock();
 80141d2:	f7ff ffed 	bl	80141b0 <port_lock.lto_priv.829>
}
 80141d6:	bd08      	pop	{r3, pc}
	...

080141e0 <port_unlock_from_isr.lto_priv.817>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80141e0:	b508      	push	{r3, lr}

  port_unlock();
 80141e2:	f7ff ffed 	bl	80141c0 <port_unlock.lto_priv.825>
}
 80141e6:	bd08      	pop	{r3, pc}
	...

080141f0 <chSysLockFromISR.lto_priv.813>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80141f0:	b508      	push	{r3, lr}

  port_lock_from_isr();
 80141f2:	f7ff ffed 	bl	80141d0 <port_lock_from_isr.lto_priv.821>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 80141f6:	bd08      	pop	{r3, pc}
	...

08014200 <chSysUnlockFromISR.lto_priv.809>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8014200:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8014202:	f7ff ffed 	bl	80141e0 <port_unlock_from_isr.lto_priv.817>
}
 8014206:	bd08      	pop	{r3, pc}
	...

08014210 <osalSysLockFromISR.lto_priv.779>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8014210:	b508      	push	{r3, lr}

  chSysLockFromISR();
 8014212:	f7ff ffed 	bl	80141f0 <chSysLockFromISR.lto_priv.813>
}
 8014216:	bd08      	pop	{r3, pc}
	...

08014220 <osalSysUnlockFromISR.lto_priv.776>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8014220:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
 8014222:	f7ff ffed 	bl	8014200 <chSysUnlockFromISR.lto_priv.809>
}
 8014226:	bd08      	pop	{r3, pc}
	...

08014230 <osalThreadDequeueAllI.lto_priv.796>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8014230:	b500      	push	{lr}
 8014232:	b083      	sub	sp, #12
 8014234:	9001      	str	r0, [sp, #4]
 8014236:	9100      	str	r1, [sp, #0]

  chThdDequeueAllI(tqp, msg);
 8014238:	9801      	ldr	r0, [sp, #4]
 801423a:	9900      	ldr	r1, [sp, #0]
 801423c:	f7fc fdc0 	bl	8010dc0 <chThdDequeueAllI>
}
 8014240:	b003      	add	sp, #12
 8014242:	f85d fb04 	ldr.w	pc, [sp], #4
 8014246:	bf00      	nop
	...

08014250 <osalEventBroadcastFlagsI.lto_priv.805>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8014250:	b500      	push	{lr}
 8014252:	b083      	sub	sp, #12
 8014254:	9001      	str	r0, [sp, #4]
 8014256:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8014258:	9801      	ldr	r0, [sp, #4]
 801425a:	9900      	ldr	r1, [sp, #0]
 801425c:	f7fa fe40 	bl	800eee0 <chEvtBroadcastFlagsI>
}
 8014260:	b003      	add	sp, #12
 8014262:	f85d fb04 	ldr.w	pc, [sp], #4
 8014266:	bf00      	nop
	...

08014270 <can_lld_set_filters.lto_priv.802>:
 * @notapi
 */
static void can_lld_set_filters(CANDriver* canp,
                                uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {
 8014270:	b086      	sub	sp, #24
 8014272:	9003      	str	r0, [sp, #12]
 8014274:	9102      	str	r1, [sp, #8]
 8014276:	9201      	str	r2, [sp, #4]
 8014278:	9300      	str	r3, [sp, #0]
  }
#endif

  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if(canp == &CAND1) {
 801427a:	9b03      	ldr	r3, [sp, #12]
 801427c:	4a7c      	ldr	r2, [pc, #496]	; (8014470 <can_lld_set_filters.lto_priv.802+0x200>)
 801427e:	4293      	cmp	r3, r2
 8014280:	d126      	bne.n	80142d0 <can_lld_set_filters.lto_priv.802+0x60>
    rccEnableCAN1(true);
 8014282:	4a7c      	ldr	r2, [pc, #496]	; (8014474 <can_lld_set_filters.lto_priv.802+0x204>)
 8014284:	4b7b      	ldr	r3, [pc, #492]	; (8014474 <can_lld_set_filters.lto_priv.802+0x204>)
 8014286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801428c:	6413      	str	r3, [r2, #64]	; 0x40
 801428e:	4a79      	ldr	r2, [pc, #484]	; (8014474 <can_lld_set_filters.lto_priv.802+0x204>)
 8014290:	4b78      	ldr	r3, [pc, #480]	; (8014474 <can_lld_set_filters.lto_priv.802+0x204>)
 8014292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014294:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014298:	6613      	str	r3, [r2, #96]	; 0x60
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 801429a:	9b03      	ldr	r3, [sp, #12]
 801429c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801429e:	9b03      	ldr	r3, [sp, #12]
 80142a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80142a6:	0c1b      	lsrs	r3, r3, #16
 80142a8:	041b      	lsls	r3, r3, #16
 80142aa:	f043 0301 	orr.w	r3, r3, #1
 80142ae:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 80142b2:	9b03      	ldr	r3, [sp, #12]
 80142b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142b6:	9b03      	ldr	r3, [sp, #12]
 80142b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80142be:	0c1b      	lsrs	r3, r3, #16
 80142c0:	041b      	lsls	r3, r3, #16
 80142c2:	9902      	ldr	r1, [sp, #8]
 80142c4:	0209      	lsls	r1, r1, #8
 80142c6:	430b      	orrs	r3, r1
 80142c8:	f043 0301 	orr.w	r3, r3, #1
 80142cc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  }
#endif

  if (num > 0) {
 80142d0:	9b01      	ldr	r3, [sp, #4]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	f000 8098 	beq.w	8014408 <can_lld_set_filters.lto_priv.802+0x198>
    uint32_t i, fmask;

    /* All filters cleared.*/
    canp->can->FA1R = 0;
 80142d8:	9b03      	ldr	r3, [sp, #12]
 80142da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142dc:	2200      	movs	r2, #0
 80142de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    canp->can->FM1R = 0;
 80142e2:	9b03      	ldr	r3, [sp, #12]
 80142e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142e6:	2200      	movs	r2, #0
 80142e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    canp->can->FS1R = 0;
 80142ec:	9b03      	ldr	r3, [sp, #12]
 80142ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f0:	2200      	movs	r2, #0
 80142f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    canp->can->FFA1R = 0;
 80142f6:	9b03      	ldr	r3, [sp, #12]
 80142f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142fa:	2200      	movs	r2, #0
 80142fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

#if STM32_CAN_USE_CAN1
    if(canp == &CAND1) {
 8014300:	9b03      	ldr	r3, [sp, #12]
 8014302:	4a5b      	ldr	r2, [pc, #364]	; (8014470 <can_lld_set_filters.lto_priv.802+0x200>)
 8014304:	4293      	cmp	r3, r2
 8014306:	d117      	bne.n	8014338 <can_lld_set_filters.lto_priv.802+0xc8>
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 8014308:	2300      	movs	r3, #0
 801430a:	9305      	str	r3, [sp, #20]
 801430c:	e011      	b.n	8014332 <can_lld_set_filters.lto_priv.802+0xc2>
        canp->can->sFilterRegister[i].FR1 = 0;
 801430e:	9b03      	ldr	r3, [sp, #12]
 8014310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014312:	9a05      	ldr	r2, [sp, #20]
 8014314:	3248      	adds	r2, #72	; 0x48
 8014316:	2100      	movs	r1, #0
 8014318:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        canp->can->sFilterRegister[i].FR2 = 0;
 801431c:	9b03      	ldr	r3, [sp, #12]
 801431e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014320:	9b05      	ldr	r3, [sp, #20]
 8014322:	3348      	adds	r3, #72	; 0x48
 8014324:	00db      	lsls	r3, r3, #3
 8014326:	4413      	add	r3, r2
 8014328:	2200      	movs	r2, #0
 801432a:	605a      	str	r2, [r3, #4]
    canp->can->FS1R = 0;
    canp->can->FFA1R = 0;

#if STM32_CAN_USE_CAN1
    if(canp == &CAND1) {
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 801432c:	9b05      	ldr	r3, [sp, #20]
 801432e:	3301      	adds	r3, #1
 8014330:	9305      	str	r3, [sp, #20]
 8014332:	9b05      	ldr	r3, [sp, #20]
 8014334:	2b1b      	cmp	r3, #27
 8014336:	d9ea      	bls.n	801430e <can_lld_set_filters.lto_priv.802+0x9e>
      }
    }
#endif

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 8014338:	2300      	movs	r3, #0
 801433a:	9305      	str	r3, [sp, #20]
 801433c:	e05f      	b.n	80143fe <can_lld_set_filters.lto_priv.802+0x18e>
      fmask = 1 << cfp->filter;
 801433e:	9b00      	ldr	r3, [sp, #0]
 8014340:	881b      	ldrh	r3, [r3, #0]
 8014342:	461a      	mov	r2, r3
 8014344:	2301      	movs	r3, #1
 8014346:	4093      	lsls	r3, r2
 8014348:	9304      	str	r3, [sp, #16]
      if (cfp->mode)
 801434a:	9b00      	ldr	r3, [sp, #0]
 801434c:	789b      	ldrb	r3, [r3, #2]
 801434e:	f003 0301 	and.w	r3, r3, #1
 8014352:	b2db      	uxtb	r3, r3
 8014354:	2b00      	cmp	r3, #0
 8014356:	d009      	beq.n	801436c <can_lld_set_filters.lto_priv.802+0xfc>
        canp->can->FM1R |= fmask;
 8014358:	9b03      	ldr	r3, [sp, #12]
 801435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801435c:	9a03      	ldr	r2, [sp, #12]
 801435e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014360:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8014364:	9a04      	ldr	r2, [sp, #16]
 8014366:	430a      	orrs	r2, r1
 8014368:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (cfp->scale)
 801436c:	9b00      	ldr	r3, [sp, #0]
 801436e:	789b      	ldrb	r3, [r3, #2]
 8014370:	f003 0302 	and.w	r3, r3, #2
 8014374:	b2db      	uxtb	r3, r3
 8014376:	2b00      	cmp	r3, #0
 8014378:	d009      	beq.n	801438e <can_lld_set_filters.lto_priv.802+0x11e>
        canp->can->FS1R |= fmask;
 801437a:	9b03      	ldr	r3, [sp, #12]
 801437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801437e:	9a03      	ldr	r2, [sp, #12]
 8014380:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014382:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8014386:	9a04      	ldr	r2, [sp, #16]
 8014388:	430a      	orrs	r2, r1
 801438a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
      if (cfp->assignment)
 801438e:	9b00      	ldr	r3, [sp, #0]
 8014390:	789b      	ldrb	r3, [r3, #2]
 8014392:	f003 0304 	and.w	r3, r3, #4
 8014396:	b2db      	uxtb	r3, r3
 8014398:	2b00      	cmp	r3, #0
 801439a:	d009      	beq.n	80143b0 <can_lld_set_filters.lto_priv.802+0x140>
        canp->can->FFA1R |= fmask;
 801439c:	9b03      	ldr	r3, [sp, #12]
 801439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a0:	9a03      	ldr	r2, [sp, #12]
 80143a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80143a4:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 80143a8:	9a04      	ldr	r2, [sp, #16]
 80143aa:	430a      	orrs	r2, r1
 80143ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      canp->can->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 80143b0:	9b03      	ldr	r3, [sp, #12]
 80143b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b4:	9a00      	ldr	r2, [sp, #0]
 80143b6:	8812      	ldrh	r2, [r2, #0]
 80143b8:	4610      	mov	r0, r2
 80143ba:	9a00      	ldr	r2, [sp, #0]
 80143bc:	6851      	ldr	r1, [r2, #4]
 80143be:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80143c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      canp->can->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 80143c6:	9b03      	ldr	r3, [sp, #12]
 80143c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80143ca:	9b00      	ldr	r3, [sp, #0]
 80143cc:	881b      	ldrh	r3, [r3, #0]
 80143ce:	4618      	mov	r0, r3
 80143d0:	9b00      	ldr	r3, [sp, #0]
 80143d2:	689a      	ldr	r2, [r3, #8]
 80143d4:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80143d8:	00db      	lsls	r3, r3, #3
 80143da:	440b      	add	r3, r1
 80143dc:	605a      	str	r2, [r3, #4]
      canp->can->FA1R |= fmask;
 80143de:	9b03      	ldr	r3, [sp, #12]
 80143e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e2:	9a03      	ldr	r2, [sp, #12]
 80143e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80143e6:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 80143ea:	9a04      	ldr	r2, [sp, #16]
 80143ec:	430a      	orrs	r2, r1
 80143ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
      cfp++;
 80143f2:	9b00      	ldr	r3, [sp, #0]
 80143f4:	330c      	adds	r3, #12
 80143f6:	9300      	str	r3, [sp, #0]
      }
    }
#endif

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
 80143f8:	9b05      	ldr	r3, [sp, #20]
 80143fa:	3301      	adds	r3, #1
 80143fc:	9305      	str	r3, [sp, #20]
 80143fe:	9a05      	ldr	r2, [sp, #20]
 8014400:	9b01      	ldr	r3, [sp, #4]
 8014402:	429a      	cmp	r2, r3
 8014404:	d39b      	bcc.n	801433e <can_lld_set_filters.lto_priv.802+0xce>
 8014406:	e01d      	b.n	8014444 <can_lld_set_filters.lto_priv.802+0x1d4>
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    canp->can->sFilterRegister[0].FR1 = 0;
 8014408:	9b03      	ldr	r3, [sp, #12]
 801440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801440c:	2200      	movs	r2, #0
 801440e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
 8014412:	9b03      	ldr	r3, [sp, #12]
 8014414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014416:	2200      	movs	r2, #0
 8014418:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
    if(canp == &CAND1) {
      canp->can->sFilterRegister[can2sb].FR1 = 0;
      canp->can->sFilterRegister[can2sb].FR2 = 0;
    }
#endif
    canp->can->FM1R = 0;
 801441c:	9b03      	ldr	r3, [sp, #12]
 801441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014420:	2200      	movs	r2, #0
 8014422:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    canp->can->FFA1R = 0;
 8014426:	9b03      	ldr	r3, [sp, #12]
 8014428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801442a:	2200      	movs	r2, #0
 801442c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    canp->can->FS1R = 1;
 8014430:	9b03      	ldr	r3, [sp, #12]
 8014432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014434:	2201      	movs	r2, #1
 8014436:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    canp->can->FA1R = 1;
 801443a:	9b03      	ldr	r3, [sp, #12]
 801443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801443e:	2201      	movs	r2, #1
 8014440:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
      canp->can->FS1R |= 1 << can2sb;
      canp->can->FA1R |= 1 << can2sb;
    }
#endif
  }
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8014444:	9b03      	ldr	r3, [sp, #12]
 8014446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014448:	9a03      	ldr	r2, [sp, #12]
 801444a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801444c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8014450:	f022 0201 	bic.w	r2, r2, #1
 8014454:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if(canp == &CAND1) {
 8014458:	9b03      	ldr	r3, [sp, #12]
 801445a:	4a05      	ldr	r2, [pc, #20]	; (8014470 <can_lld_set_filters.lto_priv.802+0x200>)
 801445c:	4293      	cmp	r3, r2
 801445e:	d105      	bne.n	801446c <can_lld_set_filters.lto_priv.802+0x1fc>
    rccDisableCAN1();
 8014460:	4a04      	ldr	r2, [pc, #16]	; (8014474 <can_lld_set_filters.lto_priv.802+0x204>)
 8014462:	4b04      	ldr	r3, [pc, #16]	; (8014474 <can_lld_set_filters.lto_priv.802+0x204>)
 8014464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014466:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801446a:	6413      	str	r3, [r2, #64]	; 0x40
#if STM32_CAN_USE_CAN3
  if(canp == &CAND3) {
    rccDisableCAN3();
  }
#endif
}
 801446c:	b006      	add	sp, #24
 801446e:	4770      	bx	lr
 8014470:	20001080 	.word	0x20001080
 8014474:	40023800 	.word	0x40023800
	...

08014480 <can_lld_tx_handler.lto_priv.804>:
 *
 * @param[in] canp      pointer to the @p CANDriver object
 *
 * @notapi
 */
static void can_lld_tx_handler(CANDriver *canp) {
 8014480:	b500      	push	{lr}
 8014482:	b085      	sub	sp, #20
 8014484:	9001      	str	r0, [sp, #4]
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8014486:	9b01      	ldr	r3, [sp, #4]
 8014488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801448a:	689b      	ldr	r3, [r3, #8]
 801448c:	9302      	str	r3, [sp, #8]
  canp->can->TSR = tsr;
 801448e:	9b01      	ldr	r3, [sp, #4]
 8014490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014492:	9a02      	ldr	r2, [sp, #8]
 8014494:	609a      	str	r2, [r3, #8]

  /* Flags to be signaled through the TX event source.*/
  flags = 0U;
 8014496:	2300      	movs	r3, #0
 8014498:	9303      	str	r3, [sp, #12]

  /* Checking mailbox 0.*/
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 801449a:	9b02      	ldr	r3, [sp, #8]
 801449c:	f003 0301 	and.w	r3, r3, #1
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d00d      	beq.n	80144c0 <can_lld_tx_handler.lto_priv.804+0x40>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 80144a4:	9b02      	ldr	r3, [sp, #8]
 80144a6:	f003 030c 	and.w	r3, r3, #12
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d004      	beq.n	80144b8 <can_lld_tx_handler.lto_priv.804+0x38>
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
 80144ae:	9b03      	ldr	r3, [sp, #12]
 80144b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80144b4:	9303      	str	r3, [sp, #12]
 80144b6:	e003      	b.n	80144c0 <can_lld_tx_handler.lto_priv.804+0x40>
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(1U);
 80144b8:	9b03      	ldr	r3, [sp, #12]
 80144ba:	f043 0301 	orr.w	r3, r3, #1
 80144be:	9303      	str	r3, [sp, #12]
    }
  }

  /* Checking mailbox 1.*/
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 80144c0:	9b02      	ldr	r3, [sp, #8]
 80144c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00d      	beq.n	80144e6 <can_lld_tx_handler.lto_priv.804+0x66>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 80144ca:	9b02      	ldr	r3, [sp, #8]
 80144cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d004      	beq.n	80144de <can_lld_tx_handler.lto_priv.804+0x5e>
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 80144d4:	9b03      	ldr	r3, [sp, #12]
 80144d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80144da:	9303      	str	r3, [sp, #12]
 80144dc:	e003      	b.n	80144e6 <can_lld_tx_handler.lto_priv.804+0x66>
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(2U);
 80144de:	9b03      	ldr	r3, [sp, #12]
 80144e0:	f043 0302 	orr.w	r3, r3, #2
 80144e4:	9303      	str	r3, [sp, #12]
    }
  }

  /* Checking mailbox 2.*/
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 80144e6:	9b02      	ldr	r3, [sp, #8]
 80144e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d00d      	beq.n	801450c <can_lld_tx_handler.lto_priv.804+0x8c>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 80144f0:	9b02      	ldr	r3, [sp, #8]
 80144f2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d004      	beq.n	8014504 <can_lld_tx_handler.lto_priv.804+0x84>
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 80144fa:	9b03      	ldr	r3, [sp, #12]
 80144fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014500:	9303      	str	r3, [sp, #12]
 8014502:	e003      	b.n	801450c <can_lld_tx_handler.lto_priv.804+0x8c>
    }
    else {
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8014504:	9b03      	ldr	r3, [sp, #12]
 8014506:	f043 0304 	orr.w	r3, r3, #4
 801450a:	9303      	str	r3, [sp, #12]
    }
  }

  /* Signaling flags and waking up threads waiting for a transmission slot.*/
  _can_tx_empty_isr(canp, flags);
 801450c:	f7ff fe80 	bl	8014210 <osalSysLockFromISR.lto_priv.779>
 8014510:	9b01      	ldr	r3, [sp, #4]
 8014512:	3308      	adds	r3, #8
 8014514:	4618      	mov	r0, r3
 8014516:	2100      	movs	r1, #0
 8014518:	f7ff fe8a 	bl	8014230 <osalThreadDequeueAllI.lto_priv.796>
 801451c:	9b01      	ldr	r3, [sp, #4]
 801451e:	331c      	adds	r3, #28
 8014520:	4618      	mov	r0, r3
 8014522:	9903      	ldr	r1, [sp, #12]
 8014524:	f7ff fe94 	bl	8014250 <osalEventBroadcastFlagsI.lto_priv.805>
 8014528:	f7ff fe7a 	bl	8014220 <osalSysUnlockFromISR.lto_priv.776>
}
 801452c:	b005      	add	sp, #20
 801452e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014532:	bf00      	nop
	...

08014540 <_mmcsd_get_capacity>:
 * @return              The card capacity.
 * @retval 0            CSD format error
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8014540:	b500      	push	{lr}
 8014542:	b087      	sub	sp, #28
 8014544:	9001      	str	r0, [sp, #4]
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8014546:	9801      	ldr	r0, [sp, #4]
 8014548:	217f      	movs	r1, #127	; 0x7f
 801454a:	227e      	movs	r2, #126	; 0x7e
 801454c:	f001 f9c8 	bl	80158e0 <_mmcsd_get_slice>
 8014550:	4603      	mov	r3, r0
 8014552:	2b00      	cmp	r3, #0
 8014554:	d002      	beq.n	801455c <_mmcsd_get_capacity+0x1c>
 8014556:	2b01      	cmp	r3, #1
 8014558:	d01b      	beq.n	8014592 <_mmcsd_get_capacity+0x52>
 801455a:	e023      	b.n	80145a4 <_mmcsd_get_capacity+0x64>
  case 0:
    /* CSD version 1.0 */
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 801455c:	9801      	ldr	r0, [sp, #4]
 801455e:	2149      	movs	r1, #73	; 0x49
 8014560:	223e      	movs	r2, #62	; 0x3e
 8014562:	f001 f9bd 	bl	80158e0 <_mmcsd_get_slice>
 8014566:	9005      	str	r0, [sp, #20]
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 8014568:	9801      	ldr	r0, [sp, #4]
 801456a:	2131      	movs	r1, #49	; 0x31
 801456c:	222f      	movs	r2, #47	; 0x2f
 801456e:	f001 f9b7 	bl	80158e0 <_mmcsd_get_slice>
 8014572:	9004      	str	r0, [sp, #16]
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 8014574:	9801      	ldr	r0, [sp, #4]
 8014576:	2153      	movs	r1, #83	; 0x53
 8014578:	2250      	movs	r2, #80	; 0x50
 801457a:	f001 f9b1 	bl	80158e0 <_mmcsd_get_slice>
 801457e:	9003      	str	r0, [sp, #12]
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 8014580:	9b05      	ldr	r3, [sp, #20]
 8014582:	3301      	adds	r3, #1
 8014584:	9a04      	ldr	r2, [sp, #16]
 8014586:	3202      	adds	r2, #2
 8014588:	4093      	lsls	r3, r2
 801458a:	9a03      	ldr	r2, [sp, #12]
 801458c:	3a09      	subs	r2, #9
 801458e:	4093      	lsls	r3, r2
 8014590:	e009      	b.n	80145a6 <_mmcsd_get_capacity+0x66>
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8014592:	9801      	ldr	r0, [sp, #4]
 8014594:	2145      	movs	r1, #69	; 0x45
 8014596:	2230      	movs	r2, #48	; 0x30
 8014598:	f001 f9a2 	bl	80158e0 <_mmcsd_get_slice>
 801459c:	4603      	mov	r3, r0
 801459e:	3301      	adds	r3, #1
 80145a0:	029b      	lsls	r3, r3, #10
 80145a2:	e000      	b.n	80145a6 <_mmcsd_get_capacity+0x66>
  default:
    /* Reserved value detected.*/
    break;
  }
  return 0U;
 80145a4:	2300      	movs	r3, #0
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	b007      	add	sp, #28
 80145aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80145ae:	bf00      	nop

080145b0 <_mmcsd_get_capacity_ext>:
 *
 * @return              The card capacity.
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {
 80145b0:	b082      	sub	sp, #8
 80145b2:	9001      	str	r0, [sp, #4]

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
 80145b4:	9b01      	ldr	r3, [sp, #4]
 80145b6:	33d7      	adds	r3, #215	; 0xd7
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	061a      	lsls	r2, r3, #24
         ((uint32_t)ext_csd[214] << 16U) +
 80145bc:	9b01      	ldr	r3, [sp, #4]
 80145be:	33d6      	adds	r3, #214	; 0xd6
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	041b      	lsls	r3, r3, #16
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
 80145c4:	441a      	add	r2, r3
         ((uint32_t)ext_csd[214] << 16U) +
         ((uint32_t)ext_csd[213] << 8U)  +
 80145c6:	9b01      	ldr	r3, [sp, #4]
 80145c8:	33d5      	adds	r3, #213	; 0xd5
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	021b      	lsls	r3, r3, #8
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
         ((uint32_t)ext_csd[214] << 16U) +
 80145ce:	4413      	add	r3, r2
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
 80145d0:	9a01      	ldr	r2, [sp, #4]
 80145d2:	32d4      	adds	r2, #212	; 0xd4
 80145d4:	7812      	ldrb	r2, [r2, #0]
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
 80145d6:	4413      	add	r3, r2
         ((uint32_t)ext_csd[214] << 16U) +
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
}
 80145d8:	4618      	mov	r0, r3
 80145da:	b002      	add	sp, #8
 80145dc:	4770      	bx	lr
 80145de:	bf00      	nop

080145e0 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 80145e0:	b082      	sub	sp, #8
 80145e2:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 80145e4:	9b01      	ldr	r3, [sp, #4]
 80145e6:	9a01      	ldr	r2, [sp, #4]
 80145e8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80145ea:	9b01      	ldr	r3, [sp, #4]
 80145ec:	9a01      	ldr	r2, [sp, #4]
 80145ee:	605a      	str	r2, [r3, #4]
}
 80145f0:	b002      	add	sp, #8
 80145f2:	4770      	bx	lr
	...

08014600 <chThdQueueObjectInit>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8014600:	b500      	push	{lr}
 8014602:	b083      	sub	sp, #12
 8014604:	9001      	str	r0, [sp, #4]

  queue_init(tqp);
 8014606:	9801      	ldr	r0, [sp, #4]
 8014608:	f7ff ffea 	bl	80145e0 <queue_init>
}
 801460c:	b003      	add	sp, #12
 801460e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014612:	bf00      	nop
	...

08014620 <chEvtObjectInit.lto_priv.859>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 8014620:	b082      	sub	sp, #8
 8014622:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
 8014624:	9b01      	ldr	r3, [sp, #4]
 8014626:	9a01      	ldr	r2, [sp, #4]
 8014628:	601a      	str	r2, [r3, #0]
}
 801462a:	b002      	add	sp, #8
 801462c:	4770      	bx	lr
 801462e:	bf00      	nop

08014630 <osalThreadQueueObjectInit>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8014630:	b500      	push	{lr}
 8014632:	b083      	sub	sp, #12
 8014634:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 8014636:	9801      	ldr	r0, [sp, #4]
 8014638:	f7ff ffe2 	bl	8014600 <chThdQueueObjectInit>
}
 801463c:	b003      	add	sp, #12
 801463e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014642:	bf00      	nop
	...

08014650 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8014650:	b500      	push	{lr}
 8014652:	b083      	sub	sp, #12
 8014654:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 8014656:	9801      	ldr	r0, [sp, #4]
 8014658:	f7ff ffe2 	bl	8014620 <chEvtObjectInit.lto_priv.859>
}
 801465c:	b003      	add	sp, #12
 801465e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014662:	bf00      	nop
	...

08014670 <canInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void canInit(void) {
 8014670:	b508      	push	{r3, lr}

  can_lld_init();
 8014672:	f7fc fd75 	bl	8011160 <can_lld_init>
}
 8014676:	bd08      	pop	{r3, pc}
	...

08014680 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 8014680:	b500      	push	{lr}
 8014682:	b083      	sub	sp, #12
 8014684:	9001      	str	r0, [sp, #4]

  canp->state       = CAN_STOP;
 8014686:	9b01      	ldr	r3, [sp, #4]
 8014688:	2201      	movs	r2, #1
 801468a:	701a      	strb	r2, [r3, #0]
  canp->config      = NULL;
 801468c:	9b01      	ldr	r3, [sp, #4]
 801468e:	2200      	movs	r2, #0
 8014690:	605a      	str	r2, [r3, #4]
  osalThreadQueueObjectInit(&canp->txqueue);
 8014692:	9b01      	ldr	r3, [sp, #4]
 8014694:	3308      	adds	r3, #8
 8014696:	4618      	mov	r0, r3
 8014698:	f7ff ffca 	bl	8014630 <osalThreadQueueObjectInit>
  osalThreadQueueObjectInit(&canp->rxqueue);
 801469c:	9b01      	ldr	r3, [sp, #4]
 801469e:	3310      	adds	r3, #16
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7ff ffc5 	bl	8014630 <osalThreadQueueObjectInit>
#if !defined(CAN_ENFORCE_USE_CALLBACKS)
  osalEventObjectInit(&canp->rxfull_event);
 80146a6:	9b01      	ldr	r3, [sp, #4]
 80146a8:	3318      	adds	r3, #24
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7ff ffd0 	bl	8014650 <osalEventObjectInit>
  osalEventObjectInit(&canp->txempty_event);
 80146b0:	9b01      	ldr	r3, [sp, #4]
 80146b2:	331c      	adds	r3, #28
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7ff ffcb 	bl	8014650 <osalEventObjectInit>
  osalEventObjectInit(&canp->error_event);
 80146ba:	9b01      	ldr	r3, [sp, #4]
 80146bc:	3320      	adds	r3, #32
 80146be:	4618      	mov	r0, r3
 80146c0:	f7ff ffc6 	bl	8014650 <osalEventObjectInit>
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 80146c4:	9b01      	ldr	r3, [sp, #4]
 80146c6:	3324      	adds	r3, #36	; 0x24
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7ff ffc1 	bl	8014650 <osalEventObjectInit>
  osalEventObjectInit(&canp->wakeup_event);
 80146ce:	9b01      	ldr	r3, [sp, #4]
 80146d0:	3328      	adds	r3, #40	; 0x28
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7ff ffbc 	bl	8014650 <osalEventObjectInit>
  canp->error_cb    = NULL;
#if CAN_USE_SLEEP_MODE == TRUE
  canp->wakeup_cb   = NULL;
#endif
#endif /* defined(CAN_ENFORCE_USE_CALLBACKS) */
}
 80146d8:	b003      	add	sp, #12
 80146da:	f85d fb04 	ldr.w	pc, [sp], #4
 80146de:	bf00      	nop

080146e0 <port_lock.lto_priv.875>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80146e0:	b082      	sub	sp, #8
 80146e2:	2320      	movs	r3, #32
 80146e4:	9301      	str	r3, [sp, #4]
 80146e6:	9b01      	ldr	r3, [sp, #4]
 80146e8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80146ec:	b002      	add	sp, #8
 80146ee:	4770      	bx	lr

080146f0 <port_unlock.lto_priv.871>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80146f0:	b082      	sub	sp, #8
 80146f2:	2300      	movs	r3, #0
 80146f4:	9301      	str	r3, [sp, #4]
 80146f6:	9b01      	ldr	r3, [sp, #4]
 80146f8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80146fc:	b002      	add	sp, #8
 80146fe:	4770      	bx	lr

08014700 <chSysLock.lto_priv.867>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 8014700:	b508      	push	{r3, lr}

  port_lock();
 8014702:	f7ff ffed 	bl	80146e0 <port_lock.lto_priv.875>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 8014706:	bd08      	pop	{r3, pc}
	...

08014710 <chSysUnlock.lto_priv.863>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8014710:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
 8014712:	f7ff ffed 	bl	80146f0 <port_unlock.lto_priv.871>
}
 8014716:	bd08      	pop	{r3, pc}
	...

08014720 <osalSysLock.lto_priv.883>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8014720:	b508      	push	{r3, lr}

  chSysLock();
 8014722:	f7ff ffed 	bl	8014700 <chSysLock.lto_priv.867>
}
 8014726:	bd08      	pop	{r3, pc}
	...

08014730 <osalSysUnlock.lto_priv.880>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8014730:	b508      	push	{r3, lr}

  chSysUnlock();
 8014732:	f7ff ffed 	bl	8014710 <chSysUnlock.lto_priv.863>
}
 8014736:	bd08      	pop	{r3, pc}
	...

08014740 <osalThreadSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
static inline void osalThreadSleep(sysinterval_t delay) {
 8014740:	b500      	push	{lr}
 8014742:	b083      	sub	sp, #12
 8014744:	9001      	str	r0, [sp, #4]

  chThdSleep(delay);
 8014746:	9801      	ldr	r0, [sp, #4]
 8014748:	f7fc faba 	bl	8010cc0 <chThdSleep>
}
 801474c:	b003      	add	sp, #12
 801474e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014752:	bf00      	nop
	...

08014760 <mode_detect>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mode_detect(SDCDriver *sdcp) {
 8014760:	b500      	push	{lr}
 8014762:	b085      	sub	sp, #20
 8014764:	9001      	str	r0, [sp, #4]
  uint32_t resp[1];

  /* V2.0 cards detection.*/
  if (!sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_IF_COND,
 8014766:	ab03      	add	r3, sp, #12
 8014768:	9801      	ldr	r0, [sp, #4]
 801476a:	2108      	movs	r1, #8
 801476c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8014770:	f7fa fe66 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8014774:	4603      	mov	r3, r0
 8014776:	f083 0301 	eor.w	r3, r3, #1
 801477a:	b2db      	uxtb	r3, r3
 801477c:	2b00      	cmp	r3, #0
 801477e:	d01a      	beq.n	80147b6 <mode_detect+0x56>
                                  MMCSD_CMD8_PATTERN, resp)) {
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 8014780:	9b01      	ldr	r3, [sp, #4]
 8014782:	2201      	movs	r2, #1
 8014784:	631a      	str	r2, [r3, #48]	; 0x30
    /* Voltage verification.*/
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8014786:	9b03      	ldr	r3, [sp, #12]
 8014788:	0a1b      	lsrs	r3, r3, #8
 801478a:	f003 030f 	and.w	r3, r3, #15
 801478e:	2b01      	cmp	r3, #1
 8014790:	d001      	beq.n	8014796 <mode_detect+0x36>
      return HAL_FAILED;
 8014792:	2301      	movs	r3, #1
 8014794:	e02a      	b.n	80147ec <mode_detect+0x8c>
    }
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8014796:	ab03      	add	r3, sp, #12
 8014798:	9801      	ldr	r0, [sp, #4]
 801479a:	2137      	movs	r1, #55	; 0x37
 801479c:	2200      	movs	r2, #0
 801479e:	f7fa fe4f 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d104      	bne.n	80147b2 <mode_detect+0x52>
        MMCSD_R1_ERROR(resp[0])) {
 80147a8:	9a03      	ldr	r2, [sp, #12]
 80147aa:	4b12      	ldr	r3, [pc, #72]	; (80147f4 <mode_detect+0x94>)
 80147ac:	4013      	ands	r3, r2
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
    /* Voltage verification.*/
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
      return HAL_FAILED;
    }
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d01b      	beq.n	80147ea <mode_detect+0x8a>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 80147b2:	2301      	movs	r3, #1
 80147b4:	e01a      	b.n	80147ec <mode_detect+0x8c>
    }
  }
  else {
    /* MMC or SD V1.1 detection.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80147b6:	ab03      	add	r3, sp, #12
 80147b8:	9801      	ldr	r0, [sp, #4]
 80147ba:	2137      	movs	r1, #55	; 0x37
 80147bc:	2200      	movs	r2, #0
 80147be:	f7fa fe3f 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 80147c2:	4603      	mov	r3, r0
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d104      	bne.n	80147d2 <mode_detect+0x72>
        MMCSD_R1_ERROR(resp[0])) {
 80147c8:	9a03      	ldr	r2, [sp, #12]
 80147ca:	4b0a      	ldr	r3, [pc, #40]	; (80147f4 <mode_detect+0x94>)
 80147cc:	4013      	ands	r3, r2
      return HAL_FAILED;
    }
  }
  else {
    /* MMC or SD V1.1 detection.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d003      	beq.n	80147da <mode_detect+0x7a>
        MMCSD_R1_ERROR(resp[0])) {
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 80147d2:	9b01      	ldr	r3, [sp, #4]
 80147d4:	2202      	movs	r2, #2
 80147d6:	631a      	str	r2, [r3, #48]	; 0x30
 80147d8:	e007      	b.n	80147ea <mode_detect+0x8a>
    }
    else {
      sdcp->cardmode = SDC_MODE_CARDTYPE_SDV11;
 80147da:	9b01      	ldr	r3, [sp, #4]
 80147dc:	2200      	movs	r2, #0
 80147de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Reset error flag illegal command.*/
      sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 80147e0:	9801      	ldr	r0, [sp, #4]
 80147e2:	2100      	movs	r1, #0
 80147e4:	2200      	movs	r2, #0
 80147e6:	f7fa fdcb 	bl	800f380 <sdc_lld_send_cmd_none>
    }
  }

  return HAL_SUCCESS;
 80147ea:	2300      	movs	r3, #0
}
 80147ec:	4618      	mov	r0, r3
 80147ee:	b005      	add	sp, #20
 80147f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80147f4:	fdffe008 	.word	0xfdffe008
	...

08014800 <mmc_init>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mmc_init(SDCDriver *sdcp) {
 8014800:	b500      	push	{lr}
 8014802:	b087      	sub	sp, #28
 8014804:	9001      	str	r0, [sp, #4]
  uint32_t ocr;
  unsigned i;
  uint32_t resp[1];

  ocr = 0xC0FF8000U;
 8014806:	4b17      	ldr	r3, [pc, #92]	; (8014864 <mmc_init+0x64>)
 8014808:	9304      	str	r3, [sp, #16]
  i = 0;
 801480a:	2300      	movs	r3, #0
 801480c:	9305      	str	r3, [sp, #20]
  while (true) {
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_INIT, ocr, resp)) {
 801480e:	ab03      	add	r3, sp, #12
 8014810:	9801      	ldr	r0, [sp, #4]
 8014812:	2101      	movs	r1, #1
 8014814:	9a04      	ldr	r2, [sp, #16]
 8014816:	f7fa fdd3 	bl	800f3c0 <sdc_lld_send_cmd_short>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d001      	beq.n	8014824 <mmc_init+0x24>
      return HAL_FAILED;
 8014820:	2301      	movs	r3, #1
 8014822:	e01b      	b.n	801485c <mmc_init+0x5c>
    }
    if ((resp[0] & 0x80000000U) != 0U) {
 8014824:	9b03      	ldr	r3, [sp, #12]
 8014826:	2b00      	cmp	r3, #0
 8014828:	da0b      	bge.n	8014842 <mmc_init+0x42>
      if ((resp[0] & 0x40000000U) != 0U) {
 801482a:	9b03      	ldr	r3, [sp, #12]
 801482c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014830:	2b00      	cmp	r3, #0
 8014832:	d012      	beq.n	801485a <mmc_init+0x5a>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8014834:	9b01      	ldr	r3, [sp, #4]
 8014836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014838:	f043 0210 	orr.w	r2, r3, #16
 801483c:	9b01      	ldr	r3, [sp, #4]
 801483e:	631a      	str	r2, [r3, #48]	; 0x30
 8014840:	e00b      	b.n	801485a <mmc_init+0x5a>
      }
      break;
    }
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8014842:	9b05      	ldr	r3, [sp, #20]
 8014844:	3301      	adds	r3, #1
 8014846:	9305      	str	r3, [sp, #20]
 8014848:	9b05      	ldr	r3, [sp, #20]
 801484a:	2b63      	cmp	r3, #99	; 0x63
 801484c:	d901      	bls.n	8014852 <mmc_init+0x52>
      return HAL_FAILED;
 801484e:	2301      	movs	r3, #1
 8014850:	e004      	b.n	801485c <mmc_init+0x5c>
    }
    osalThreadSleepMilliseconds(10);
 8014852:	2064      	movs	r0, #100	; 0x64
 8014854:	f7ff ff74 	bl	8014740 <osalThreadSleep>
 8014858:	e7d9      	b.n	801480e <mmc_init+0xe>
  }

  return HAL_SUCCESS;
 801485a:	2300      	movs	r3, #0
}
 801485c:	4618      	mov	r0, r3
 801485e:	b007      	add	sp, #28
 8014860:	f85d fb04 	ldr.w	pc, [sp], #4
 8014864:	c0ff8000 	.word	0xc0ff8000
	...

08014870 <sdc_init>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_init(SDCDriver *sdcp) {
 8014870:	b500      	push	{lr}
 8014872:	b087      	sub	sp, #28
 8014874:	9001      	str	r0, [sp, #4]
  unsigned i;
  uint32_t ocr;
  uint32_t resp[1];

  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_SDV20) {
 8014876:	9b01      	ldr	r3, [sp, #4]
 8014878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801487a:	f003 030f 	and.w	r3, r3, #15
 801487e:	2b01      	cmp	r3, #1
 8014880:	d102      	bne.n	8014888 <sdc_init+0x18>
    ocr = SDC_INIT_OCR_V20;
 8014882:	4b21      	ldr	r3, [pc, #132]	; (8014908 <sdc_init+0x98>)
 8014884:	9304      	str	r3, [sp, #16]
 8014886:	e001      	b.n	801488c <sdc_init+0x1c>
  }
  else {
    ocr = SDC_INIT_OCR;
 8014888:	4b20      	ldr	r3, [pc, #128]	; (801490c <sdc_init+0x9c>)
 801488a:	9304      	str	r3, [sp, #16]
  }

  i = 0;
 801488c:	2300      	movs	r3, #0
 801488e:	9305      	str	r3, [sp, #20]
  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8014890:	ab03      	add	r3, sp, #12
 8014892:	9801      	ldr	r0, [sp, #4]
 8014894:	2137      	movs	r1, #55	; 0x37
 8014896:	2200      	movs	r2, #0
 8014898:	f7fa fdd2 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 801489c:	4603      	mov	r3, r0
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d104      	bne.n	80148ac <sdc_init+0x3c>
        MMCSD_R1_ERROR(resp[0])) {
 80148a2:	9a03      	ldr	r2, [sp, #12]
 80148a4:	4b1a      	ldr	r3, [pc, #104]	; (8014910 <sdc_init+0xa0>)
 80148a6:	4013      	ands	r3, r2
    ocr = SDC_INIT_OCR;
  }

  i = 0;
  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d001      	beq.n	80148b0 <sdc_init+0x40>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 80148ac:	2301      	movs	r3, #1
 80148ae:	e026      	b.n	80148fe <sdc_init+0x8e>
    }
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_APP_OP_COND, ocr, resp)) {
 80148b0:	ab03      	add	r3, sp, #12
 80148b2:	9801      	ldr	r0, [sp, #4]
 80148b4:	2129      	movs	r1, #41	; 0x29
 80148b6:	9a04      	ldr	r2, [sp, #16]
 80148b8:	f7fa fd82 	bl	800f3c0 <sdc_lld_send_cmd_short>
 80148bc:	4603      	mov	r3, r0
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d001      	beq.n	80148c6 <sdc_init+0x56>
      return HAL_FAILED;
 80148c2:	2301      	movs	r3, #1
 80148c4:	e01b      	b.n	80148fe <sdc_init+0x8e>
    }
    if ((resp[0] & 0x80000000U) != 0U) {
 80148c6:	9b03      	ldr	r3, [sp, #12]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	da0b      	bge.n	80148e4 <sdc_init+0x74>
      if ((resp[0] & 0x40000000U) != 0U) {
 80148cc:	9b03      	ldr	r3, [sp, #12]
 80148ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d012      	beq.n	80148fc <sdc_init+0x8c>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 80148d6:	9b01      	ldr	r3, [sp, #4]
 80148d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148da:	f043 0210 	orr.w	r2, r3, #16
 80148de:	9b01      	ldr	r3, [sp, #4]
 80148e0:	631a      	str	r2, [r3, #48]	; 0x30
 80148e2:	e00b      	b.n	80148fc <sdc_init+0x8c>
      }
      break;
    }
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 80148e4:	9b05      	ldr	r3, [sp, #20]
 80148e6:	3301      	adds	r3, #1
 80148e8:	9305      	str	r3, [sp, #20]
 80148ea:	9b05      	ldr	r3, [sp, #20]
 80148ec:	2b63      	cmp	r3, #99	; 0x63
 80148ee:	d901      	bls.n	80148f4 <sdc_init+0x84>
      return HAL_FAILED;
 80148f0:	2301      	movs	r3, #1
 80148f2:	e004      	b.n	80148fe <sdc_init+0x8e>
    }
    osalThreadSleepMilliseconds(10);
 80148f4:	2064      	movs	r0, #100	; 0x64
 80148f6:	f7ff ff23 	bl	8014740 <osalThreadSleep>
 80148fa:	e7c9      	b.n	8014890 <sdc_init+0x20>
  }

  return HAL_SUCCESS;
 80148fc:	2300      	movs	r3, #0
}
 80148fe:	4618      	mov	r0, r3
 8014900:	b007      	add	sp, #28
 8014902:	f85d fb04 	ldr.w	pc, [sp], #4
 8014906:	bf00      	nop
 8014908:	50ff8000 	.word	0x50ff8000
 801490c:	80100000 	.word	0x80100000
 8014910:	fdffe008 	.word	0xfdffe008
	...

08014920 <mmc_cmd6_construct>:
 * @return              CMD6 argument.
 *
 * @notapi
 */
static uint32_t mmc_cmd6_construct(mmc_switch_t access, uint32_t idx,
                                   uint32_t value, uint32_t cmd_set) {
 8014920:	b084      	sub	sp, #16
 8014922:	9102      	str	r1, [sp, #8]
 8014924:	9201      	str	r2, [sp, #4]
 8014926:	9300      	str	r3, [sp, #0]
 8014928:	4603      	mov	r3, r0
 801492a:	f88d 300f 	strb.w	r3, [sp, #15]

  osalDbgAssert(idx <= 191U, "This field is not writable");
  osalDbgAssert(cmd_set < 8U, "This field has only 3 bits");

  return ((uint32_t)access << 24U) | (idx << 16U) | (value << 8U) | cmd_set;
 801492e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014932:	061a      	lsls	r2, r3, #24
 8014934:	9b02      	ldr	r3, [sp, #8]
 8014936:	041b      	lsls	r3, r3, #16
 8014938:	431a      	orrs	r2, r3
 801493a:	9b01      	ldr	r3, [sp, #4]
 801493c:	021b      	lsls	r3, r3, #8
 801493e:	431a      	orrs	r2, r3
 8014940:	9b00      	ldr	r3, [sp, #0]
 8014942:	4313      	orrs	r3, r2
}
 8014944:	4618      	mov	r0, r3
 8014946:	b004      	add	sp, #16
 8014948:	4770      	bx	lr
 801494a:	bf00      	nop
 801494c:	0000      	movs	r0, r0
	...

08014950 <sdc_cmd6_construct>:
 *
 * @notapi
 */
static uint32_t sdc_cmd6_construct(sd_switch_t mode,
                                   sd_switch_function_t function,
                                   uint32_t value) {
 8014950:	b084      	sub	sp, #16
 8014952:	4603      	mov	r3, r0
 8014954:	9200      	str	r2, [sp, #0]
 8014956:	f88d 3007 	strb.w	r3, [sp, #7]
 801495a:	460b      	mov	r3, r1
 801495c:	f88d 3006 	strb.w	r3, [sp, #6]
  uint32_t ret = 0xFFFFFF;
 8014960:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014964:	9303      	str	r3, [sp, #12]

  osalDbgAssert((value < 16U), "This field has only 4 bits");

  ret &= ~((uint32_t)0xFU << ((uint32_t)function * 4U));
 8014966:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801496a:	009b      	lsls	r3, r3, #2
 801496c:	461a      	mov	r2, r3
 801496e:	230f      	movs	r3, #15
 8014970:	4093      	lsls	r3, r2
 8014972:	43db      	mvns	r3, r3
 8014974:	9a03      	ldr	r2, [sp, #12]
 8014976:	4013      	ands	r3, r2
 8014978:	9303      	str	r3, [sp, #12]
  ret |= value << ((uint32_t)function * 4U);
 801497a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801497e:	009b      	lsls	r3, r3, #2
 8014980:	461a      	mov	r2, r3
 8014982:	9b00      	ldr	r3, [sp, #0]
 8014984:	4093      	lsls	r3, r2
 8014986:	9a03      	ldr	r2, [sp, #12]
 8014988:	4313      	orrs	r3, r2
 801498a:	9303      	str	r3, [sp, #12]
  return ret | ((uint32_t)mode << 31U);
 801498c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014990:	07da      	lsls	r2, r3, #31
 8014992:	9b03      	ldr	r3, [sp, #12]
 8014994:	4313      	orrs	r3, r2
}
 8014996:	4618      	mov	r0, r3
 8014998:	b004      	add	sp, #16
 801499a:	4770      	bx	lr
 801499c:	0000      	movs	r0, r0
	...

080149a0 <sdc_cmd6_extract_info>:
 * @return              extracted answer.
 *
 * @notapi
 */
static uint16_t sdc_cmd6_extract_info(sd_switch_function_t function,
                                      const uint8_t *buf) {
 80149a0:	b084      	sub	sp, #16
 80149a2:	4603      	mov	r3, r0
 80149a4:	9100      	str	r1, [sp, #0]
 80149a6:	f88d 3007 	strb.w	r3, [sp, #7]

  unsigned start = 12U - ((unsigned)function * 2U);
 80149aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80149ae:	4613      	mov	r3, r2
 80149b0:	07db      	lsls	r3, r3, #31
 80149b2:	1a9b      	subs	r3, r3, r2
 80149b4:	005b      	lsls	r3, r3, #1
 80149b6:	330c      	adds	r3, #12
 80149b8:	9303      	str	r3, [sp, #12]

  return ((uint16_t)buf[start] << 8U) | (uint16_t)buf[start + 1U];
 80149ba:	9a00      	ldr	r2, [sp, #0]
 80149bc:	9b03      	ldr	r3, [sp, #12]
 80149be:	4413      	add	r3, r2
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	021b      	lsls	r3, r3, #8
 80149c4:	b299      	uxth	r1, r3
 80149c6:	9b03      	ldr	r3, [sp, #12]
 80149c8:	3301      	adds	r3, #1
 80149ca:	9a00      	ldr	r2, [sp, #0]
 80149cc:	4413      	add	r3, r2
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	b29b      	uxth	r3, r3
 80149d2:	460a      	mov	r2, r1
 80149d4:	4313      	orrs	r3, r2
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	b29b      	uxth	r3, r3
}
 80149da:	4618      	mov	r0, r3
 80149dc:	b004      	add	sp, #16
 80149de:	4770      	bx	lr

080149e0 <sdc_cmd6_check_status>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_cmd6_check_status(sd_switch_function_t function,
                                 const uint8_t *buf) {
 80149e0:	b084      	sub	sp, #16
 80149e2:	4603      	mov	r3, r0
 80149e4:	9100      	str	r1, [sp, #0]
 80149e6:	f88d 3007 	strb.w	r3, [sp, #7]

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 80149ea:	9b00      	ldr	r3, [sp, #0]
 80149ec:	330e      	adds	r3, #14
 80149ee:	781b      	ldrb	r3, [r3, #0]
 80149f0:	041a      	lsls	r2, r3, #16
        ((uint32_t)buf[15] << 8U) |
 80149f2:	9b00      	ldr	r3, [sp, #0]
 80149f4:	330f      	adds	r3, #15
 80149f6:	781b      	ldrb	r3, [r3, #0]
 80149f8:	021b      	lsls	r3, r3, #8
                                 const uint8_t *buf) {

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 80149fa:	4313      	orrs	r3, r2
        ((uint32_t)buf[15] << 8U) |
        (uint32_t)buf[16];
 80149fc:	9a00      	ldr	r2, [sp, #0]
 80149fe:	3210      	adds	r2, #16
 8014a00:	7812      	ldrb	r2, [r2, #0]
                                 const uint8_t *buf) {

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 8014a02:	4313      	orrs	r3, r2
 8014a04:	9303      	str	r3, [sp, #12]
        ((uint32_t)buf[15] << 8U) |
        (uint32_t)buf[16];
  status = (tmp >> ((uint32_t)function * 4U)) & 0xFU;
 8014a06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014a0a:	009b      	lsls	r3, r3, #2
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	9b03      	ldr	r3, [sp, #12]
 8014a10:	40d3      	lsrs	r3, r2
 8014a12:	f003 030f 	and.w	r3, r3, #15
 8014a16:	9302      	str	r3, [sp, #8]
  if (0xFU != status) {
 8014a18:	9b02      	ldr	r3, [sp, #8]
 8014a1a:	2b0f      	cmp	r3, #15
 8014a1c:	d001      	beq.n	8014a22 <sdc_cmd6_check_status+0x42>
    return HAL_SUCCESS;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	e000      	b.n	8014a24 <sdc_cmd6_check_status+0x44>
  }
  return HAL_FAILED;
 8014a22:	2301      	movs	r3, #1
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	b004      	add	sp, #16
 8014a28:	4770      	bx	lr
 8014a2a:	bf00      	nop
 8014a2c:	0000      	movs	r0, r0
	...

08014a30 <sdc_detect_bus_clk>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 8014a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a32:	b089      	sub	sp, #36	; 0x24
 8014a34:	af02      	add	r7, sp, #8
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	6039      	str	r1, [r7, #0]
 8014a3a:	4669      	mov	r1, sp
 8014a3c:	460e      	mov	r6, r1
  uint32_t cmdarg;
  const size_t N = 64;
 8014a3e:	2140      	movs	r1, #64	; 0x40
 8014a40:	6179      	str	r1, [r7, #20]
  uint8_t tmp[N];
 8014a42:	6979      	ldr	r1, [r7, #20]
 8014a44:	3901      	subs	r1, #1
 8014a46:	6139      	str	r1, [r7, #16]
 8014a48:	6979      	ldr	r1, [r7, #20]
 8014a4a:	4608      	mov	r0, r1
 8014a4c:	f04f 0100 	mov.w	r1, #0
 8014a50:	00cd      	lsls	r5, r1, #3
 8014a52:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 8014a56:	00c4      	lsls	r4, r0, #3
 8014a58:	6979      	ldr	r1, [r7, #20]
 8014a5a:	4608      	mov	r0, r1
 8014a5c:	f04f 0100 	mov.w	r1, #0
 8014a60:	00cb      	lsls	r3, r1, #3
 8014a62:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8014a66:	00c2      	lsls	r2, r0, #3
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	3307      	adds	r3, #7
 8014a6c:	08db      	lsrs	r3, r3, #3
 8014a6e:	00db      	lsls	r3, r3, #3
 8014a70:	ebad 0d03 	sub.w	sp, sp, r3
 8014a74:	ab02      	add	r3, sp, #8
 8014a76:	3300      	adds	r3, #0
 8014a78:	60fb      	str	r3, [r7, #12]

  /* Safe default.*/
  *clk = SDC_CLK_25MHz;
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	701a      	strb	r2, [r3, #0]

  /* Looks like only "high capacity" cards produce meaningful results during
     this clock detection procedure.*/
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	3318      	adds	r3, #24
 8014a84:	4618      	mov	r0, r3
 8014a86:	217f      	movs	r1, #127	; 0x7f
 8014a88:	227e      	movs	r2, #126	; 0x7e
 8014a8a:	f000 ff29 	bl	80158e0 <_mmcsd_get_slice>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d104      	bne.n	8014a9e <sdc_detect_bus_clk+0x6e>
    *clk = SDC_CLK_25MHz;
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	2200      	movs	r2, #0
 8014a98:	701a      	strb	r2, [r3, #0]
    return HAL_SUCCESS;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	e03e      	b.n	8014b1c <sdc_detect_bus_clk+0xec>
  }

  /* Read switch functions' register.*/
  if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, 0)) {
 8014a9e:	68fa      	ldr	r2, [r7, #12]
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	9300      	str	r3, [sp, #0]
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	4611      	mov	r1, r2
 8014aa8:	697a      	ldr	r2, [r7, #20]
 8014aaa:	2306      	movs	r3, #6
 8014aac:	f7fa fd58 	bl	800f560 <sdc_lld_read_special>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d001      	beq.n	8014aba <sdc_detect_bus_clk+0x8a>
    return HAL_FAILED;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	e030      	b.n	8014b1c <sdc_detect_bus_clk+0xec>
  }

  /* Check card capabilities parsing acquired data.*/
  if ((sdc_cmd6_extract_info(SD_SWITCH_FUNCTION_SPEED, tmp) & 2U) == 2U) {
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	2000      	movs	r0, #0
 8014abe:	4619      	mov	r1, r3
 8014ac0:	f7ff ff6e 	bl	80149a0 <sdc_cmd6_extract_info>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	f003 0302 	and.w	r3, r3, #2
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d025      	beq.n	8014b1a <sdc_detect_bus_clk+0xea>
    /* Construct command to set the bus speed.*/
    cmdarg = sdc_cmd6_construct(SD_SWITCH_SET, SD_SWITCH_FUNCTION_SPEED, 1);
 8014ace:	2001      	movs	r0, #1
 8014ad0:	2100      	movs	r1, #0
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	f7ff ff3c 	bl	8014950 <sdc_cmd6_construct>
 8014ad8:	60b8      	str	r0, [r7, #8]

    /* Write constructed command and read operation status in single call.*/
    if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, cmdarg)) {
 8014ada:	68fa      	ldr	r2, [r7, #12]
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	9300      	str	r3, [sp, #0]
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	4611      	mov	r1, r2
 8014ae4:	697a      	ldr	r2, [r7, #20]
 8014ae6:	2306      	movs	r3, #6
 8014ae8:	f7fa fd3a 	bl	800f560 <sdc_lld_read_special>
 8014aec:	4603      	mov	r3, r0
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d001      	beq.n	8014af6 <sdc_detect_bus_clk+0xc6>
      return HAL_FAILED;
 8014af2:	2301      	movs	r3, #1
 8014af4:	e012      	b.n	8014b1c <sdc_detect_bus_clk+0xec>
    }

    /* Check card answer for success status bits.*/
    if (HAL_SUCCESS == sdc_cmd6_check_status(SD_SWITCH_FUNCTION_SPEED, tmp)) {
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2000      	movs	r0, #0
 8014afa:	4619      	mov	r1, r3
 8014afc:	f7ff ff70 	bl	80149e0 <sdc_cmd6_check_status>
 8014b00:	4603      	mov	r3, r0
 8014b02:	f083 0301 	eor.w	r3, r3, #1
 8014b06:	b2db      	uxtb	r3, r3
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d003      	beq.n	8014b14 <sdc_detect_bus_clk+0xe4>
      *clk = SDC_CLK_50MHz;
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	2201      	movs	r2, #1
 8014b10:	701a      	strb	r2, [r3, #0]
 8014b12:	e002      	b.n	8014b1a <sdc_detect_bus_clk+0xea>
    }
    else {
      *clk = SDC_CLK_25MHz;
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	2200      	movs	r2, #0
 8014b18:	701a      	strb	r2, [r3, #0]
    }
  }

  return HAL_SUCCESS;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	46b5      	mov	sp, r6
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	371c      	adds	r7, #28
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b26:	bf00      	nop
	...

08014b30 <mmc_detect_bus_clk>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mmc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 8014b30:	b500      	push	{lr}
 8014b32:	b087      	sub	sp, #28
 8014b34:	9001      	str	r0, [sp, #4]
 8014b36:	9100      	str	r1, [sp, #0]
  uint32_t cmdarg;
  uint32_t resp[1];
  uint8_t *scratchpad = sdcp->config->scratchpad;
 8014b38:	9b01      	ldr	r3, [sp, #4]
 8014b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	9305      	str	r3, [sp, #20]

  /* Safe default.*/
  *clk = SDC_CLK_25MHz;
 8014b40:	9b00      	ldr	r3, [sp, #0]
 8014b42:	2200      	movs	r2, #0
 8014b44:	701a      	strb	r2, [r3, #0]

  /* Use safe default when there is no space for data.*/
  if (NULL == scratchpad) {
 8014b46:	9b05      	ldr	r3, [sp, #20]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d101      	bne.n	8014b50 <mmc_detect_bus_clk+0x20>
    return HAL_SUCCESS;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	e01b      	b.n	8014b88 <mmc_detect_bus_clk+0x58>
  }

  cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 185, 1, 0);
 8014b50:	2003      	movs	r0, #3
 8014b52:	21b9      	movs	r1, #185	; 0xb9
 8014b54:	2201      	movs	r2, #1
 8014b56:	2300      	movs	r3, #0
 8014b58:	f7ff fee2 	bl	8014920 <mmc_cmd6_construct>
 8014b5c:	9004      	str	r0, [sp, #16]
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8014b5e:	ab03      	add	r3, sp, #12
 8014b60:	9801      	ldr	r0, [sp, #4]
 8014b62:	2106      	movs	r1, #6
 8014b64:	9a04      	ldr	r2, [sp, #16]
 8014b66:	f7fa fc6b 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	f083 0301 	eor.w	r3, r3, #1
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d007      	beq.n	8014b86 <mmc_detect_bus_clk+0x56>
                                   MMCSD_R1_ERROR(resp[0]))) {
 8014b76:	9a03      	ldr	r2, [sp, #12]
 8014b78:	4b05      	ldr	r3, [pc, #20]	; (8014b90 <mmc_detect_bus_clk+0x60>)
 8014b7a:	4013      	ands	r3, r2
  if (NULL == scratchpad) {
    return HAL_SUCCESS;
  }

  cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 185, 1, 0);
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d102      	bne.n	8014b86 <mmc_detect_bus_clk+0x56>
                                   MMCSD_R1_ERROR(resp[0]))) {
    *clk = SDC_CLK_50MHz;
 8014b80:	9b00      	ldr	r3, [sp, #0]
 8014b82:	2201      	movs	r2, #1
 8014b84:	701a      	strb	r2, [r3, #0]
  }

  return HAL_SUCCESS;
 8014b86:	2300      	movs	r3, #0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	b007      	add	sp, #28
 8014b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b90:	fdffe008 	.word	0xfdffe008
	...

08014ba0 <detect_bus_clk>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 8014ba0:	b500      	push	{lr}
 8014ba2:	b083      	sub	sp, #12
 8014ba4:	9001      	str	r0, [sp, #4]
 8014ba6:	9100      	str	r1, [sp, #0]

  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8014ba8:	9b01      	ldr	r3, [sp, #4]
 8014baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bac:	f003 030f 	and.w	r3, r3, #15
 8014bb0:	2b02      	cmp	r3, #2
 8014bb2:	d105      	bne.n	8014bc0 <detect_bus_clk+0x20>
    return mmc_detect_bus_clk(sdcp, clk);
 8014bb4:	9801      	ldr	r0, [sp, #4]
 8014bb6:	9900      	ldr	r1, [sp, #0]
 8014bb8:	f7ff ffba 	bl	8014b30 <mmc_detect_bus_clk>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	e004      	b.n	8014bca <detect_bus_clk+0x2a>
  }
  return sdc_detect_bus_clk(sdcp, clk);
 8014bc0:	9801      	ldr	r0, [sp, #4]
 8014bc2:	9900      	ldr	r1, [sp, #0]
 8014bc4:	f7ff ff34 	bl	8014a30 <sdc_detect_bus_clk>
 8014bc8:	4603      	mov	r3, r0
}
 8014bca:	4618      	mov	r0, r3
 8014bcc:	b003      	add	sp, #12
 8014bce:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bd2:	bf00      	nop
	...

08014be0 <sdc_set_bus_width>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_set_bus_width(SDCDriver *sdcp) {
 8014be0:	b500      	push	{lr}
 8014be2:	b085      	sub	sp, #20
 8014be4:	9001      	str	r0, [sp, #4]
  uint32_t resp[1];

  if (SDC_MODE_1BIT == sdcp->config->bus_width) {
 8014be6:	9b01      	ldr	r3, [sp, #4]
 8014be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bea:	791b      	ldrb	r3, [r3, #4]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d101      	bne.n	8014bf4 <sdc_set_bus_width+0x14>
    /* Nothing to do. Bus is already in 1bit mode.*/
    return HAL_SUCCESS;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	e02c      	b.n	8014c4e <sdc_set_bus_width+0x6e>
  }
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
 8014bf4:	9b01      	ldr	r3, [sp, #4]
 8014bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf8:	791b      	ldrb	r3, [r3, #4]
 8014bfa:	2b01      	cmp	r3, #1
 8014bfc:	d124      	bne.n	8014c48 <sdc_set_bus_width+0x68>
    sdc_lld_set_bus_mode(sdcp, SDC_MODE_4BIT);
 8014bfe:	9801      	ldr	r0, [sp, #4]
 8014c00:	2101      	movs	r1, #1
 8014c02:	f7fa fb95 	bl	800f330 <sdc_lld_set_bus_mode>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8014c06:	9b01      	ldr	r3, [sp, #4]
 8014c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c0a:	ab03      	add	r3, sp, #12
 8014c0c:	9801      	ldr	r0, [sp, #4]
 8014c0e:	2137      	movs	r1, #55	; 0x37
 8014c10:	f7fa fc16 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8014c14:	4603      	mov	r3, r0
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d104      	bne.n	8014c24 <sdc_set_bus_width+0x44>
        MMCSD_R1_ERROR(resp[0])) {
 8014c1a:	9a03      	ldr	r2, [sp, #12]
 8014c1c:	4b0e      	ldr	r3, [pc, #56]	; (8014c58 <sdc_set_bus_width+0x78>)
 8014c1e:	4013      	ands	r3, r2
    /* Nothing to do. Bus is already in 1bit mode.*/
    return HAL_SUCCESS;
  }
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
    sdc_lld_set_bus_mode(sdcp, SDC_MODE_4BIT);
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d001      	beq.n	8014c28 <sdc_set_bus_width+0x48>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8014c24:	2301      	movs	r3, #1
 8014c26:	e012      	b.n	8014c4e <sdc_set_bus_width+0x6e>
    }

    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 8014c28:	ab03      	add	r3, sp, #12
 8014c2a:	9801      	ldr	r0, [sp, #4]
 8014c2c:	2106      	movs	r1, #6
 8014c2e:	2202      	movs	r2, #2
 8014c30:	f7fa fc06 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8014c34:	4603      	mov	r3, r0
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d104      	bne.n	8014c44 <sdc_set_bus_width+0x64>
        MMCSD_R1_ERROR(resp[0])) {
 8014c3a:	9a03      	ldr	r2, [sp, #12]
 8014c3c:	4b06      	ldr	r3, [pc, #24]	; (8014c58 <sdc_set_bus_width+0x78>)
 8014c3e:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
    }

    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d003      	beq.n	8014c4c <sdc_set_bus_width+0x6c>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8014c44:	2301      	movs	r3, #1
 8014c46:	e002      	b.n	8014c4e <sdc_set_bus_width+0x6e>
    }
  }
  else {
    /* SD card does not support 8bit bus.*/
    return HAL_FAILED;
 8014c48:	2301      	movs	r3, #1
 8014c4a:	e000      	b.n	8014c4e <sdc_set_bus_width+0x6e>
  }

  return HAL_SUCCESS;
 8014c4c:	2300      	movs	r3, #0
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	b005      	add	sp, #20
 8014c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c56:	bf00      	nop
 8014c58:	fdffe008 	.word	0xfdffe008
 8014c5c:	00000000 	.word	0x00000000

08014c60 <mmc_set_bus_width>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mmc_set_bus_width(SDCDriver *sdcp) {
 8014c60:	b500      	push	{lr}
 8014c62:	b085      	sub	sp, #20
 8014c64:	9001      	str	r0, [sp, #4]
  uint32_t resp[1];
  uint32_t cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 0, 0);
 8014c66:	2003      	movs	r0, #3
 8014c68:	21b7      	movs	r1, #183	; 0xb7
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	f7ff fe57 	bl	8014920 <mmc_cmd6_construct>
 8014c72:	9003      	str	r0, [sp, #12]

  switch (sdcp->config->bus_width) {
 8014c74:	9b01      	ldr	r3, [sp, #4]
 8014c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c78:	791b      	ldrb	r3, [r3, #4]
 8014c7a:	2b01      	cmp	r3, #1
 8014c7c:	d005      	beq.n	8014c8a <mmc_set_bus_width+0x2a>
 8014c7e:	2b02      	cmp	r3, #2
 8014c80:	d00b      	beq.n	8014c9a <mmc_set_bus_width+0x3a>
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d110      	bne.n	8014ca8 <mmc_set_bus_width+0x48>
  case SDC_MODE_1BIT:
    /* Nothing to do. Bus is already in 1bit mode.*/
    return HAL_SUCCESS;
 8014c86:	2300      	movs	r3, #0
 8014c88:	e026      	b.n	8014cd8 <mmc_set_bus_width+0x78>
  case SDC_MODE_4BIT:
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 1, 0);
 8014c8a:	2003      	movs	r0, #3
 8014c8c:	21b7      	movs	r1, #183	; 0xb7
 8014c8e:	2201      	movs	r2, #1
 8014c90:	2300      	movs	r3, #0
 8014c92:	f7ff fe45 	bl	8014920 <mmc_cmd6_construct>
 8014c96:	9003      	str	r0, [sp, #12]
 8014c98:	e006      	b.n	8014ca8 <mmc_set_bus_width+0x48>
    break;
  case SDC_MODE_8BIT:
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 2, 0);
 8014c9a:	2003      	movs	r0, #3
 8014c9c:	21b7      	movs	r1, #183	; 0xb7
 8014c9e:	2202      	movs	r2, #2
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	f7ff fe3d 	bl	8014920 <mmc_cmd6_construct>
 8014ca6:	9003      	str	r0, [sp, #12]
  default:
    osalDbgAssert(false, "unexpected case");
    break;
  }

  sdc_lld_set_bus_mode(sdcp, sdcp->config->bus_width);
 8014ca8:	9b01      	ldr	r3, [sp, #4]
 8014caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cac:	791b      	ldrb	r3, [r3, #4]
 8014cae:	9801      	ldr	r0, [sp, #4]
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	f7fa fb3d 	bl	800f330 <sdc_lld_set_bus_mode>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8014cb6:	ab02      	add	r3, sp, #8
 8014cb8:	9801      	ldr	r0, [sp, #4]
 8014cba:	2106      	movs	r1, #6
 8014cbc:	9a03      	ldr	r2, [sp, #12]
 8014cbe:	f7fa fbbf 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d104      	bne.n	8014cd2 <mmc_set_bus_width+0x72>
      MMCSD_R1_ERROR(resp[0])) {
 8014cc8:	9a02      	ldr	r2, [sp, #8]
 8014cca:	4b05      	ldr	r3, [pc, #20]	; (8014ce0 <mmc_set_bus_width+0x80>)
 8014ccc:	4013      	ands	r3, r2
    osalDbgAssert(false, "unexpected case");
    break;
  }

  sdc_lld_set_bus_mode(sdcp, sdcp->config->bus_width);
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d001      	beq.n	8014cd6 <mmc_set_bus_width+0x76>
      MMCSD_R1_ERROR(resp[0])) {
    return HAL_FAILED;
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	e000      	b.n	8014cd8 <mmc_set_bus_width+0x78>
  }

  return HAL_SUCCESS;
 8014cd6:	2300      	movs	r3, #0
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	b005      	add	sp, #20
 8014cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8014ce0:	fdffe008 	.word	0xfdffe008
	...

08014cf0 <_sdc_wait_for_transfer_state>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 8014cf0:	b500      	push	{lr}
 8014cf2:	b085      	sub	sp, #20
 8014cf4:	9001      	str	r0, [sp, #4]
  uint32_t resp[1];

  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 8014cf6:	9b01      	ldr	r3, [sp, #4]
 8014cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014cfa:	ab03      	add	r3, sp, #12
 8014cfc:	9801      	ldr	r0, [sp, #4]
 8014cfe:	210d      	movs	r1, #13
 8014d00:	f7fa fb9e 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8014d04:	4603      	mov	r3, r0
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d104      	bne.n	8014d14 <_sdc_wait_for_transfer_state+0x24>
                                   sdcp->rca, resp) ||
        MMCSD_R1_ERROR(resp[0])) {
 8014d0a:	9a03      	ldr	r2, [sp, #12]
 8014d0c:	4b0d      	ldr	r3, [pc, #52]	; (8014d44 <_sdc_wait_for_transfer_state+0x54>)
 8014d0e:	4013      	ands	r3, r2
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
  uint32_t resp[1];

  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
                                   sdcp->rca, resp) ||
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d001      	beq.n	8014d18 <_sdc_wait_for_transfer_state+0x28>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8014d14:	2301      	movs	r3, #1
 8014d16:	e011      	b.n	8014d3c <_sdc_wait_for_transfer_state+0x4c>
    }

    switch (MMCSD_R1_STS(resp[0])) {
 8014d18:	9b03      	ldr	r3, [sp, #12]
 8014d1a:	0a5b      	lsrs	r3, r3, #9
 8014d1c:	f003 030f 	and.w	r3, r3, #15
 8014d20:	2b04      	cmp	r3, #4
 8014d22:	d004      	beq.n	8014d2e <_sdc_wait_for_transfer_state+0x3e>
 8014d24:	2b04      	cmp	r3, #4
 8014d26:	d308      	bcc.n	8014d3a <_sdc_wait_for_transfer_state+0x4a>
 8014d28:	2b07      	cmp	r3, #7
 8014d2a:	d806      	bhi.n	8014d3a <_sdc_wait_for_transfer_state+0x4a>
 8014d2c:	e001      	b.n	8014d32 <_sdc_wait_for_transfer_state+0x42>
    case MMCSD_STS_TRAN:
      return HAL_SUCCESS;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	e004      	b.n	8014d3c <_sdc_wait_for_transfer_state+0x4c>
    case MMCSD_STS_DATA:
    case MMCSD_STS_RCV:
    case MMCSD_STS_PRG:
#if SDC_NICE_WAITING == TRUE
      osalThreadSleepMilliseconds(1);
 8014d32:	200a      	movs	r0, #10
 8014d34:	f7ff fd04 	bl	8014740 <osalThreadSleep>
 8014d38:	e7dd      	b.n	8014cf6 <_sdc_wait_for_transfer_state+0x6>
#endif
      continue;
    default:
      /* The card should have been initialized so any other state is not
         valid and is reported as an error.*/
      return HAL_FAILED;
 8014d3a:	2301      	movs	r3, #1
    }
  }
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	b005      	add	sp, #20
 8014d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d44:	fdffe008 	.word	0xfdffe008
	...

08014d50 <sdcInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdcInit(void) {
 8014d50:	b508      	push	{r3, lr}

  sdc_lld_init();
 8014d52:	f7fd ff6d 	bl	8012c30 <sdc_lld_init>
}
 8014d56:	bd08      	pop	{r3, pc}
	...

08014d60 <sdcObjectInit>:
 *
 * @param[out] sdcp     pointer to the @p SDCDriver object
 *
 * @init
 */
void sdcObjectInit(SDCDriver *sdcp) {
 8014d60:	b082      	sub	sp, #8
 8014d62:	9001      	str	r0, [sp, #4]

  sdcp->vmt      = &sdc_vmt;
 8014d64:	9b01      	ldr	r3, [sp, #4]
 8014d66:	4a08      	ldr	r2, [pc, #32]	; (8014d88 <sdcObjectInit+0x28>)
 8014d68:	601a      	str	r2, [r3, #0]
  sdcp->state    = BLK_STOP;
 8014d6a:	9b01      	ldr	r3, [sp, #4]
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	711a      	strb	r2, [r3, #4]
  sdcp->errors   = SDC_NO_ERROR;
 8014d70:	9b01      	ldr	r3, [sp, #4]
 8014d72:	2200      	movs	r2, #0
 8014d74:	635a      	str	r2, [r3, #52]	; 0x34
  sdcp->config   = NULL;
 8014d76:	9b01      	ldr	r3, [sp, #4]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  sdcp->capacity = 0;
 8014d7c:	9b01      	ldr	r3, [sp, #4]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014d82:	b002      	add	sp, #8
 8014d84:	4770      	bx	lr
 8014d86:	bf00      	nop
 8014d88:	0801d6dc 	.word	0x0801d6dc
 8014d8c:	00000000 	.word	0x00000000

08014d90 <sdcConnect>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcConnect(SDCDriver *sdcp) {
 8014d90:	b500      	push	{lr}
 8014d92:	b089      	sub	sp, #36	; 0x24
 8014d94:	9003      	str	r0, [sp, #12]
  uint32_t resp[1];
  sdcbusclk_t clk = SDC_CLK_25MHz;
 8014d96:	2300      	movs	r3, #0
 8014d98:	f88d 3017 	strb.w	r3, [sp, #23]
  osalDbgCheck(sdcp != NULL);
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
                "invalid state");

  /* Connection procedure in progress.*/
  sdcp->state = BLK_CONNECTING;
 8014d9c:	9b03      	ldr	r3, [sp, #12]
 8014d9e:	2203      	movs	r2, #3
 8014da0:	711a      	strb	r2, [r3, #4]

  /* Card clock initialization.*/
  sdc_lld_start_clk(sdcp);
 8014da2:	9803      	ldr	r0, [sp, #12]
 8014da4:	f7fa fa84 	bl	800f2b0 <sdc_lld_start_clk>

  /* Enforces the initial card state.*/
  sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 8014da8:	9803      	ldr	r0, [sp, #12]
 8014daa:	2100      	movs	r1, #0
 8014dac:	2200      	movs	r2, #0
 8014dae:	f7fa fae7 	bl	800f380 <sdc_lld_send_cmd_none>

  /* Detect card type.*/
  if (HAL_FAILED == mode_detect(sdcp)) {
 8014db2:	9803      	ldr	r0, [sp, #12]
 8014db4:	f7ff fcd4 	bl	8014760 <mode_detect>
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	f040 80b4 	bne.w	8014f28 <sdcConnect+0x198>
    goto failed;
  }

  /* Perform specific initialization procedure.*/
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 8014dc0:	9b03      	ldr	r3, [sp, #12]
 8014dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dc4:	f003 030f 	and.w	r3, r3, #15
 8014dc8:	2b02      	cmp	r3, #2
 8014dca:	d107      	bne.n	8014ddc <sdcConnect+0x4c>
    if (HAL_FAILED == mmc_init(sdcp)) {
 8014dcc:	9803      	ldr	r0, [sp, #12]
 8014dce:	f7ff fd17 	bl	8014800 <mmc_init>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	f040 80a7 	bne.w	8014f28 <sdcConnect+0x198>
 8014dda:	e006      	b.n	8014dea <sdcConnect+0x5a>
      goto failed;
    }
  }
  else {
    if (HAL_FAILED == sdc_init(sdcp)) {
 8014ddc:	9803      	ldr	r0, [sp, #12]
 8014dde:	f7ff fd47 	bl	8014870 <sdc_init>
 8014de2:	4603      	mov	r3, r0
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	f040 809f 	bne.w	8014f28 <sdcConnect+0x198>
      goto failed;
    }
  }

  /* Reads CID.*/
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_ALL_SEND_CID, 0, sdcp->cid)) {
 8014dea:	9b03      	ldr	r3, [sp, #12]
 8014dec:	3308      	adds	r3, #8
 8014dee:	9803      	ldr	r0, [sp, #12]
 8014df0:	2102      	movs	r1, #2
 8014df2:	2200      	movs	r2, #0
 8014df4:	f7fa fb64 	bl	800f4c0 <sdc_lld_send_cmd_long_crc>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	f040 8094 	bne.w	8014f28 <sdcConnect+0x198>
    goto failed;
  }

  /* Asks for the RCA.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_RELATIVE_ADDR,
 8014e00:	9b03      	ldr	r3, [sp, #12]
 8014e02:	3338      	adds	r3, #56	; 0x38
 8014e04:	9803      	ldr	r0, [sp, #12]
 8014e06:	2103      	movs	r1, #3
 8014e08:	2200      	movs	r2, #0
 8014e0a:	f7fa fb19 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	f040 8089 	bne.w	8014f28 <sdcConnect+0x198>
                                 0, &sdcp->rca)) {
    goto failed;
  }

  /* Reads CSD.*/
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 8014e16:	9b03      	ldr	r3, [sp, #12]
 8014e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                                sdcp->rca, sdcp->csd)) {
 8014e1a:	9b03      	ldr	r3, [sp, #12]
 8014e1c:	3318      	adds	r3, #24
                                 0, &sdcp->rca)) {
    goto failed;
  }

  /* Reads CSD.*/
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 8014e1e:	9803      	ldr	r0, [sp, #12]
 8014e20:	2109      	movs	r1, #9
 8014e22:	f7fa fb4d 	bl	800f4c0 <sdc_lld_send_cmd_long_crc>
 8014e26:	4603      	mov	r3, r0
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d17d      	bne.n	8014f28 <sdcConnect+0x198>
                                sdcp->rca, sdcp->csd)) {
    goto failed;
  }

  /* Selects the card for operations.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEL_DESEL_CARD,
 8014e2c:	9b03      	ldr	r3, [sp, #12]
 8014e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014e30:	ab06      	add	r3, sp, #24
 8014e32:	9803      	ldr	r0, [sp, #12]
 8014e34:	2107      	movs	r1, #7
 8014e36:	f7fa fb03 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d173      	bne.n	8014f28 <sdcConnect+0x198>
                                 sdcp->rca, resp)) {
    goto failed;
  }

  /* Switches to high speed.*/
  if (HAL_SUCCESS != detect_bus_clk(sdcp, &clk)) {
 8014e40:	f10d 0317 	add.w	r3, sp, #23
 8014e44:	9803      	ldr	r0, [sp, #12]
 8014e46:	4619      	mov	r1, r3
 8014e48:	f7ff feaa 	bl	8014ba0 <detect_bus_clk>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d16a      	bne.n	8014f28 <sdcConnect+0x198>
    goto failed;
  }
  sdc_lld_set_data_clk(sdcp, clk);
 8014e52:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8014e56:	9803      	ldr	r0, [sp, #12]
 8014e58:	4619      	mov	r1, r3
 8014e5a:	f7fa fa49 	bl	800f2f0 <sdc_lld_set_data_clk>

  /* Reads extended CSD if needed and possible.*/
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8014e5e:	9b03      	ldr	r3, [sp, #12]
 8014e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e62:	f003 030f 	and.w	r3, r3, #15
 8014e66:	2b02      	cmp	r3, #2
 8014e68:	d12c      	bne.n	8014ec4 <sdcConnect+0x134>

    /* The card is a MMC, checking if it is a large device.*/
    if (_mmcsd_get_slice(sdcp->csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE) > 1U) {
 8014e6a:	9b03      	ldr	r3, [sp, #12]
 8014e6c:	3318      	adds	r3, #24
 8014e6e:	4618      	mov	r0, r3
 8014e70:	217f      	movs	r1, #127	; 0x7f
 8014e72:	227e      	movs	r2, #126	; 0x7e
 8014e74:	f000 fd34 	bl	80158e0 <_mmcsd_get_slice>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	2b01      	cmp	r3, #1
 8014e7c:	d919      	bls.n	8014eb2 <sdcConnect+0x122>
      uint8_t *ext_csd = sdcp->config->scratchpad;
 8014e7e:	9b03      	ldr	r3, [sp, #12]
 8014e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	9307      	str	r3, [sp, #28]

      /* Size detection requires the buffer.*/
      if (NULL == ext_csd) {
 8014e86:	9b07      	ldr	r3, [sp, #28]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d04d      	beq.n	8014f28 <sdcConnect+0x198>
        goto failed;
      }

      if(sdc_lld_read_special(sdcp, ext_csd, 512, MMCSD_CMD_SEND_EXT_CSD, 0)) {
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	9300      	str	r3, [sp, #0]
 8014e90:	9803      	ldr	r0, [sp, #12]
 8014e92:	9907      	ldr	r1, [sp, #28]
 8014e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014e98:	2308      	movs	r3, #8
 8014e9a:	f7fa fb61 	bl	800f560 <sdc_lld_read_special>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d141      	bne.n	8014f28 <sdcConnect+0x198>
        goto failed;
      }

      /* Capacity from the EXT_CSD.*/
      sdcp->capacity = _mmcsd_get_capacity_ext(ext_csd);
 8014ea4:	9807      	ldr	r0, [sp, #28]
 8014ea6:	f7ff fb83 	bl	80145b0 <_mmcsd_get_capacity_ext>
 8014eaa:	4602      	mov	r2, r0
 8014eac:	9b03      	ldr	r3, [sp, #12]
 8014eae:	629a      	str	r2, [r3, #40]	; 0x28
 8014eb0:	e010      	b.n	8014ed4 <sdcConnect+0x144>
    }
    else {
      /* Capacity from the normal CSD.*/
      sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8014eb2:	9b03      	ldr	r3, [sp, #12]
 8014eb4:	3318      	adds	r3, #24
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7ff fb42 	bl	8014540 <_mmcsd_get_capacity>
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	9b03      	ldr	r3, [sp, #12]
 8014ec0:	629a      	str	r2, [r3, #40]	; 0x28
 8014ec2:	e007      	b.n	8014ed4 <sdcConnect+0x144>
    }
  }
  else {
    /* The card is an SDC, capacity from the normal CSD.*/
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8014ec4:	9b03      	ldr	r3, [sp, #12]
 8014ec6:	3318      	adds	r3, #24
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f7ff fb39 	bl	8014540 <_mmcsd_get_capacity>
 8014ece:	4602      	mov	r2, r0
 8014ed0:	9b03      	ldr	r3, [sp, #12]
 8014ed2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Block length fixed at 512 bytes.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
 8014ed4:	ab06      	add	r3, sp, #24
 8014ed6:	9803      	ldr	r0, [sp, #12]
 8014ed8:	2110      	movs	r1, #16
 8014eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ede:	f7fa faaf 	bl	800f440 <sdc_lld_send_cmd_short_crc>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d11f      	bne.n	8014f28 <sdcConnect+0x198>
                                 MMCSD_BLOCK_SIZE, resp) ||
      MMCSD_R1_ERROR(resp[0])) {
 8014ee8:	9a06      	ldr	r2, [sp, #24]
 8014eea:	4b15      	ldr	r3, [pc, #84]	; (8014f40 <sdcConnect+0x1b0>)
 8014eec:	4013      	ands	r3, r2
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
  }

  /* Block length fixed at 512 bytes.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
                                 MMCSD_BLOCK_SIZE, resp) ||
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d11a      	bne.n	8014f28 <sdcConnect+0x198>
      MMCSD_R1_ERROR(resp[0])) {
    goto failed;
  }

  /* Switches to wide bus mode.*/
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8014ef2:	9b03      	ldr	r3, [sp, #12]
 8014ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ef6:	f003 030f 	and.w	r3, r3, #15
 8014efa:	2b01      	cmp	r3, #1
 8014efc:	d902      	bls.n	8014f04 <sdcConnect+0x174>
 8014efe:	2b02      	cmp	r3, #2
 8014f00:	d007      	beq.n	8014f12 <sdcConnect+0x182>
 8014f02:	e011      	b.n	8014f28 <sdcConnect+0x198>
  case SDC_MODE_CARDTYPE_SDV11:
  case SDC_MODE_CARDTYPE_SDV20:
    if (HAL_FAILED == sdc_set_bus_width(sdcp)) {
 8014f04:	9803      	ldr	r0, [sp, #12]
 8014f06:	f7ff fe6b 	bl	8014be0 <sdc_set_bus_width>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d10b      	bne.n	8014f28 <sdcConnect+0x198>
 8014f10:	e005      	b.n	8014f1e <sdcConnect+0x18e>
      goto failed;
    }
    break;
  case SDC_MODE_CARDTYPE_MMC:
    if (HAL_FAILED == mmc_set_bus_width(sdcp)) {
 8014f12:	9803      	ldr	r0, [sp, #12]
 8014f14:	f7ff fea4 	bl	8014c60 <mmc_set_bus_width>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d104      	bne.n	8014f28 <sdcConnect+0x198>
    /* Unknown type.*/
    goto failed;
  }

  /* Initialization complete.*/
  sdcp->state = BLK_READY;
 8014f1e:	9b03      	ldr	r3, [sp, #12]
 8014f20:	2205      	movs	r2, #5
 8014f22:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 8014f24:	2300      	movs	r3, #0
 8014f26:	e006      	b.n	8014f36 <sdcConnect+0x1a6>

  /* Connection failed, state reset to BLK_ACTIVE.*/
failed:
  sdc_lld_stop_clk(sdcp);
 8014f28:	9803      	ldr	r0, [sp, #12]
 8014f2a:	f7fa f9f1 	bl	800f310 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 8014f2e:	9b03      	ldr	r3, [sp, #12]
 8014f30:	2202      	movs	r2, #2
 8014f32:	711a      	strb	r2, [r3, #4]
  return HAL_FAILED;
 8014f34:	2301      	movs	r3, #1
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	b009      	add	sp, #36	; 0x24
 8014f3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f3e:	bf00      	nop
 8014f40:	fdffe008 	.word	0xfdffe008
	...

08014f50 <sdcDisconnect>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcDisconnect(SDCDriver *sdcp) {
 8014f50:	b500      	push	{lr}
 8014f52:	b083      	sub	sp, #12
 8014f54:	9001      	str	r0, [sp, #4]

  osalDbgCheck(sdcp != NULL);

  osalSysLock();
 8014f56:	f7ff fbe3 	bl	8014720 <osalSysLock.lto_priv.883>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
                "invalid state");
  if (sdcp->state == BLK_ACTIVE) {
 8014f5a:	9b01      	ldr	r3, [sp, #4]
 8014f5c:	791b      	ldrb	r3, [r3, #4]
 8014f5e:	2b02      	cmp	r3, #2
 8014f60:	d103      	bne.n	8014f6a <sdcDisconnect+0x1a>
    osalSysUnlock();
 8014f62:	f7ff fbe5 	bl	8014730 <osalSysUnlock.lto_priv.880>
    return HAL_SUCCESS;
 8014f66:	2300      	movs	r3, #0
 8014f68:	e019      	b.n	8014f9e <sdcDisconnect+0x4e>
  }
  sdcp->state = BLK_DISCONNECTING;
 8014f6a:	9b01      	ldr	r3, [sp, #4]
 8014f6c:	2204      	movs	r2, #4
 8014f6e:	711a      	strb	r2, [r3, #4]
  osalSysUnlock();
 8014f70:	f7ff fbde 	bl	8014730 <osalSysUnlock.lto_priv.880>

  /* Waits for eventual pending operations completion.*/
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8014f74:	9801      	ldr	r0, [sp, #4]
 8014f76:	f7ff febb 	bl	8014cf0 <_sdc_wait_for_transfer_state>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d007      	beq.n	8014f90 <sdcDisconnect+0x40>
    sdc_lld_stop_clk(sdcp);
 8014f80:	9801      	ldr	r0, [sp, #4]
 8014f82:	f7fa f9c5 	bl	800f310 <sdc_lld_stop_clk>
    sdcp->state = BLK_ACTIVE;
 8014f86:	9b01      	ldr	r3, [sp, #4]
 8014f88:	2202      	movs	r2, #2
 8014f8a:	711a      	strb	r2, [r3, #4]
    return HAL_FAILED;
 8014f8c:	2301      	movs	r3, #1
 8014f8e:	e006      	b.n	8014f9e <sdcDisconnect+0x4e>
  }

  /* Card clock stopped.*/
  sdc_lld_stop_clk(sdcp);
 8014f90:	9801      	ldr	r0, [sp, #4]
 8014f92:	f7fa f9bd 	bl	800f310 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 8014f96:	9b01      	ldr	r3, [sp, #4]
 8014f98:	2202      	movs	r2, #2
 8014f9a:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 8014f9c:	2300      	movs	r3, #0
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	b003      	add	sp, #12
 8014fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fa6:	bf00      	nop
	...

08014fb0 <sdcRead>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 8014fb0:	b500      	push	{lr}
 8014fb2:	b087      	sub	sp, #28
 8014fb4:	9003      	str	r0, [sp, #12]
 8014fb6:	9102      	str	r1, [sp, #8]
 8014fb8:	9201      	str	r2, [sp, #4]
 8014fba:	9300      	str	r3, [sp, #0]
  bool status;

  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");

  if ((startblk + n - 1U) > sdcp->capacity) {
 8014fbc:	9a02      	ldr	r2, [sp, #8]
 8014fbe:	9b00      	ldr	r3, [sp, #0]
 8014fc0:	4413      	add	r3, r2
 8014fc2:	1e5a      	subs	r2, r3, #1
 8014fc4:	9b03      	ldr	r3, [sp, #12]
 8014fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d907      	bls.n	8014fdc <sdcRead+0x2c>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8014fcc:	9b03      	ldr	r3, [sp, #12]
 8014fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014fd4:	9b03      	ldr	r3, [sp, #12]
 8014fd6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_FAILED;
 8014fd8:	2301      	movs	r3, #1
 8014fda:	e010      	b.n	8014ffe <sdcRead+0x4e>
  }

  /* Read operation in progress.*/
  sdcp->state = BLK_READING;
 8014fdc:	9b03      	ldr	r3, [sp, #12]
 8014fde:	2206      	movs	r2, #6
 8014fe0:	711a      	strb	r2, [r3, #4]

  status = sdc_lld_read(sdcp, startblk, buf, n);
 8014fe2:	9803      	ldr	r0, [sp, #12]
 8014fe4:	9902      	ldr	r1, [sp, #8]
 8014fe6:	9a01      	ldr	r2, [sp, #4]
 8014fe8:	9b00      	ldr	r3, [sp, #0]
 8014fea:	f7fa fbc1 	bl	800f770 <sdc_lld_read>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	f88d 3017 	strb.w	r3, [sp, #23]

  /* Read operation finished.*/
  sdcp->state = BLK_READY;
 8014ff4:	9b03      	ldr	r3, [sp, #12]
 8014ff6:	2205      	movs	r2, #5
 8014ff8:	711a      	strb	r2, [r3, #4]
  return status;
 8014ffa:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	b007      	add	sp, #28
 8015002:	f85d fb04 	ldr.w	pc, [sp], #4
 8015006:	bf00      	nop
	...

08015010 <sdcWrite>:
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcWrite(SDCDriver *sdcp, uint32_t startblk,
              const uint8_t *buf, uint32_t n) {
 8015010:	b500      	push	{lr}
 8015012:	b087      	sub	sp, #28
 8015014:	9003      	str	r0, [sp, #12]
 8015016:	9102      	str	r1, [sp, #8]
 8015018:	9201      	str	r2, [sp, #4]
 801501a:	9300      	str	r3, [sp, #0]
  bool status;

  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");

  if ((startblk + n - 1U) > sdcp->capacity) {
 801501c:	9a02      	ldr	r2, [sp, #8]
 801501e:	9b00      	ldr	r3, [sp, #0]
 8015020:	4413      	add	r3, r2
 8015022:	1e5a      	subs	r2, r3, #1
 8015024:	9b03      	ldr	r3, [sp, #12]
 8015026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015028:	429a      	cmp	r2, r3
 801502a:	d907      	bls.n	801503c <sdcWrite+0x2c>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 801502c:	9b03      	ldr	r3, [sp, #12]
 801502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015030:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8015034:	9b03      	ldr	r3, [sp, #12]
 8015036:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_FAILED;
 8015038:	2301      	movs	r3, #1
 801503a:	e010      	b.n	801505e <sdcWrite+0x4e>
  }

  /* Write operation in progress.*/
  sdcp->state = BLK_WRITING;
 801503c:	9b03      	ldr	r3, [sp, #12]
 801503e:	2207      	movs	r2, #7
 8015040:	711a      	strb	r2, [r3, #4]

  status = sdc_lld_write(sdcp, startblk, buf, n);
 8015042:	9803      	ldr	r0, [sp, #12]
 8015044:	9902      	ldr	r1, [sp, #8]
 8015046:	9a01      	ldr	r2, [sp, #4]
 8015048:	9b00      	ldr	r3, [sp, #0]
 801504a:	f7fa fbd1 	bl	800f7f0 <sdc_lld_write>
 801504e:	4603      	mov	r3, r0
 8015050:	f88d 3017 	strb.w	r3, [sp, #23]

  /* Write operation finished.*/
  sdcp->state = BLK_READY;
 8015054:	9b03      	ldr	r3, [sp, #12]
 8015056:	2205      	movs	r2, #5
 8015058:	711a      	strb	r2, [r3, #4]
  return status;
 801505a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 801505e:	4618      	mov	r0, r3
 8015060:	b007      	add	sp, #28
 8015062:	f85d fb04 	ldr.w	pc, [sp], #4
 8015066:	bf00      	nop
	...

08015070 <sdcSync>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcSync(SDCDriver *sdcp) {
 8015070:	b500      	push	{lr}
 8015072:	b085      	sub	sp, #20
 8015074:	9001      	str	r0, [sp, #4]
  bool result;

  osalDbgCheck(sdcp != NULL);

  if (sdcp->state != BLK_READY) {
 8015076:	9b01      	ldr	r3, [sp, #4]
 8015078:	791b      	ldrb	r3, [r3, #4]
 801507a:	2b05      	cmp	r3, #5
 801507c:	d001      	beq.n	8015082 <sdcSync+0x12>
    return HAL_FAILED;
 801507e:	2301      	movs	r3, #1
 8015080:	e00d      	b.n	801509e <sdcSync+0x2e>
  }

  /* Synchronization operation in progress.*/
  sdcp->state = BLK_SYNCING;
 8015082:	9b01      	ldr	r3, [sp, #4]
 8015084:	2208      	movs	r2, #8
 8015086:	711a      	strb	r2, [r3, #4]

  result = sdc_lld_sync(sdcp);
 8015088:	9801      	ldr	r0, [sp, #4]
 801508a:	f7fa fbf9 	bl	800f880 <sdc_lld_sync>
 801508e:	4603      	mov	r3, r0
 8015090:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Synchronization operation finished.*/
  sdcp->state = BLK_READY;
 8015094:	9b01      	ldr	r3, [sp, #4]
 8015096:	2205      	movs	r2, #5
 8015098:	711a      	strb	r2, [r3, #4]
  return result;
 801509a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 801509e:	4618      	mov	r0, r3
 80150a0:	b005      	add	sp, #20
 80150a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80150a6:	bf00      	nop
	...

080150b0 <sdcGetInfo>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcGetInfo(SDCDriver *sdcp, BlockDeviceInfo *bdip) {
 80150b0:	b082      	sub	sp, #8
 80150b2:	9001      	str	r0, [sp, #4]
 80150b4:	9100      	str	r1, [sp, #0]

  osalDbgCheck((sdcp != NULL) && (bdip != NULL));

  if (sdcp->state != BLK_READY) {
 80150b6:	9b01      	ldr	r3, [sp, #4]
 80150b8:	791b      	ldrb	r3, [r3, #4]
 80150ba:	2b05      	cmp	r3, #5
 80150bc:	d001      	beq.n	80150c2 <sdcGetInfo+0x12>
    return HAL_FAILED;
 80150be:	2301      	movs	r3, #1
 80150c0:	e008      	b.n	80150d4 <sdcGetInfo+0x24>
  }

  bdip->blk_num = sdcp->capacity;
 80150c2:	9b01      	ldr	r3, [sp, #4]
 80150c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80150c6:	9b00      	ldr	r3, [sp, #0]
 80150c8:	605a      	str	r2, [r3, #4]
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 80150ca:	9b00      	ldr	r3, [sp, #0]
 80150cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150d0:	601a      	str	r2, [r3, #0]

  return HAL_SUCCESS;
 80150d2:	2300      	movs	r3, #0
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	b002      	add	sp, #8
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop
 80150dc:	0000      	movs	r0, r0
	...

080150e0 <chEvtObjectInit.lto_priv.860>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 80150e0:	b082      	sub	sp, #8
 80150e2:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
 80150e4:	9b01      	ldr	r3, [sp, #4]
 80150e6:	9a01      	ldr	r2, [sp, #4]
 80150e8:	601a      	str	r2, [r3, #0]
}
 80150ea:	b002      	add	sp, #8
 80150ec:	4770      	bx	lr
 80150ee:	bf00      	nop

080150f0 <osalEventObjectInit.lto_priv.857>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 80150f0:	b500      	push	{lr}
 80150f2:	b083      	sub	sp, #12
 80150f4:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 80150f6:	9801      	ldr	r0, [sp, #4]
 80150f8:	f7ff fff2 	bl	80150e0 <chEvtObjectInit.lto_priv.860>
}
 80150fc:	b003      	add	sp, #12
 80150fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8015102:	bf00      	nop
	...

08015110 <osalEventBroadcastFlagsI.lto_priv.855>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8015110:	b500      	push	{lr}
 8015112:	b083      	sub	sp, #12
 8015114:	9001      	str	r0, [sp, #4]
 8015116:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8015118:	9801      	ldr	r0, [sp, #4]
 801511a:	9900      	ldr	r1, [sp, #0]
 801511c:	f7f9 fee0 	bl	800eee0 <chEvtBroadcastFlagsI>
}
 8015120:	b003      	add	sp, #12
 8015122:	f85d fb04 	ldr.w	pc, [sp], #4
 8015126:	bf00      	nop
	...

08015130 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8015130:	4770      	bx	lr
 8015132:	bf00      	nop
	...

08015140 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8015140:	4770      	bx	lr
 8015142:	bf00      	nop
	...

08015150 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8015150:	e7fe      	b.n	8015150 <__default_exit>
 8015152:	bf00      	nop
	...

08015160 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8015160:	b084      	sub	sp, #16
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8015162:	4b16      	ldr	r3, [pc, #88]	; (80151bc <__init_ram_areas+0x5c>)
 8015164:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8015166:	9b03      	ldr	r3, [sp, #12]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 801516c:	9b03      	ldr	r3, [sp, #12]
 801516e:	685b      	ldr	r3, [r3, #4]
 8015170:	9301      	str	r3, [sp, #4]
 8015172:	e009      	b.n	8015188 <__init_ram_areas+0x28>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8015174:	9b02      	ldr	r3, [sp, #8]
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	9b01      	ldr	r3, [sp, #4]
 801517a:	601a      	str	r2, [r3, #0]
      p++;
 801517c:	9b01      	ldr	r3, [sp, #4]
 801517e:	3304      	adds	r3, #4
 8015180:	9301      	str	r3, [sp, #4]
      tp++;
 8015182:	9b02      	ldr	r3, [sp, #8]
 8015184:	3304      	adds	r3, #4
 8015186:	9302      	str	r3, [sp, #8]
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8015188:	9b03      	ldr	r3, [sp, #12]
 801518a:	689a      	ldr	r2, [r3, #8]
 801518c:	9b01      	ldr	r3, [sp, #4]
 801518e:	429a      	cmp	r2, r3
 8015190:	d8f0      	bhi.n	8015174 <__init_ram_areas+0x14>
 8015192:	e005      	b.n	80151a0 <__init_ram_areas+0x40>
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8015194:	9b01      	ldr	r3, [sp, #4]
 8015196:	2200      	movs	r2, #0
 8015198:	601a      	str	r2, [r3, #0]
      p++;
 801519a:	9b01      	ldr	r3, [sp, #4]
 801519c:	3304      	adds	r3, #4
 801519e:	9301      	str	r3, [sp, #4]
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80151a0:	9b03      	ldr	r3, [sp, #12]
 80151a2:	68da      	ldr	r2, [r3, #12]
 80151a4:	9b01      	ldr	r3, [sp, #4]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d8f4      	bhi.n	8015194 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 80151aa:	9b03      	ldr	r3, [sp, #12]
 80151ac:	3310      	adds	r3, #16
 80151ae:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80151b0:	9b03      	ldr	r3, [sp, #12]
 80151b2:	4a03      	ldr	r2, [pc, #12]	; (80151c0 <__init_ram_areas+0x60>)
 80151b4:	4293      	cmp	r3, r2
 80151b6:	d3d6      	bcc.n	8015166 <__init_ram_areas+0x6>
#endif
}
 80151b8:	b004      	add	sp, #16
 80151ba:	4770      	bx	lr
 80151bc:	0801d65c 	.word	0x0801d65c
 80151c0:	0801d6dc 	.word	0x0801d6dc
	...

080151d0 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 80151d0:	4770      	bx	lr
 80151d2:	bf00      	nop
	...

080151e0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 80151e0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 80151e2:	f7ff fff5 	bl	80151d0 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 80151e6:	f7fe ff03 	bl	8013ff0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 80151ea:	f7fc fa49 	bl	8011680 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 80151ee:	f7ff fa3f 	bl	8014670 <canInit>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80151f2:	f7fd fdf5 	bl	8012de0 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
 80151f6:	f7ff fdab 	bl	8014d50 <sdcInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 80151fa:	f7fe f8d1 	bl	80133a0 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 80151fe:	f7fd fe57 	bl	8012eb0 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8015202:	f7fa fe2d 	bl	800fe60 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8015206:	f000 f823 	bl	8015250 <stInit>
#endif
}
 801520a:	bd08      	pop	{r3, pc}
 801520c:	0000      	movs	r0, r0
	...

08015210 <st_lld_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {
 8015210:	b082      	sub	sp, #8
 8015212:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8015214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015218:	9b01      	ldr	r3, [sp, #4]
 801521a:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 801521c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015220:	2200      	movs	r2, #0
 8015222:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8015224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015228:	2202      	movs	r2, #2
 801522a:	60da      	str	r2, [r3, #12]
}
 801522c:	b002      	add	sp, #8
 801522e:	4770      	bx	lr

08015230 <st_lld_stop_alarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8015230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015234:	2200      	movs	r2, #0
 8015236:	60da      	str	r2, [r3, #12]
}
 8015238:	4770      	bx	lr
 801523a:	bf00      	nop
 801523c:	0000      	movs	r0, r0
	...

08015240 <st_lld_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {
 8015240:	b082      	sub	sp, #8
 8015242:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8015244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015248:	9b01      	ldr	r3, [sp, #4]
 801524a:	6353      	str	r3, [r2, #52]	; 0x34
}
 801524c:	b002      	add	sp, #8
 801524e:	4770      	bx	lr

08015250 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8015250:	b508      	push	{r3, lr}

  st_lld_init();
 8015252:	f7fa fb7d 	bl	800f950 <st_lld_init>
}
 8015256:	bd08      	pop	{r3, pc}
	...

08015260 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8015260:	b500      	push	{lr}
 8015262:	b083      	sub	sp, #12
 8015264:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 8015266:	9801      	ldr	r0, [sp, #4]
 8015268:	f7ff ffd2 	bl	8015210 <st_lld_start_alarm>
}
 801526c:	b003      	add	sp, #12
 801526e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015272:	bf00      	nop
	...

08015280 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8015280:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
 8015282:	f7ff ffd5 	bl	8015230 <st_lld_stop_alarm>
}
 8015286:	bd08      	pop	{r3, pc}
	...

08015290 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8015290:	b500      	push	{lr}
 8015292:	b083      	sub	sp, #12
 8015294:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 8015296:	9801      	ldr	r0, [sp, #4]
 8015298:	f7ff ffd2 	bl	8015240 <st_lld_set_alarm>
}
 801529c:	b003      	add	sp, #12
 801529e:	f85d fb04 	ldr.w	pc, [sp], #4
 80152a2:	bf00      	nop
	...

080152b0 <port_lock.lto_priv.909>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80152b0:	b082      	sub	sp, #8
 80152b2:	2320      	movs	r3, #32
 80152b4:	9301      	str	r3, [sp, #4]
 80152b6:	9b01      	ldr	r3, [sp, #4]
 80152b8:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80152bc:	b002      	add	sp, #8
 80152be:	4770      	bx	lr

080152c0 <port_unlock.lto_priv.907>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80152c0:	b082      	sub	sp, #8
 80152c2:	2300      	movs	r3, #0
 80152c4:	9301      	str	r3, [sp, #4]
 80152c6:	9b01      	ldr	r3, [sp, #4]
 80152c8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80152cc:	b002      	add	sp, #8
 80152ce:	4770      	bx	lr

080152d0 <queue_init.lto_priv.905>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 80152d0:	b082      	sub	sp, #8
 80152d2:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 80152d4:	9b01      	ldr	r3, [sp, #4]
 80152d6:	9a01      	ldr	r2, [sp, #4]
 80152d8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80152da:	9b01      	ldr	r3, [sp, #4]
 80152dc:	9a01      	ldr	r2, [sp, #4]
 80152de:	605a      	str	r2, [r3, #4]
}
 80152e0:	b002      	add	sp, #8
 80152e2:	4770      	bx	lr
	...

080152f0 <chSysLock.lto_priv.903>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 80152f0:	b508      	push	{r3, lr}

  port_lock();
 80152f2:	f7ff ffdd 	bl	80152b0 <port_lock.lto_priv.909>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 80152f6:	bd08      	pop	{r3, pc}
	...

08015300 <chSysUnlock.lto_priv.901>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8015300:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
 8015302:	f7ff ffdd 	bl	80152c0 <port_unlock.lto_priv.907>
}
 8015306:	bd08      	pop	{r3, pc}
	...

08015310 <chThdQueueObjectInit.lto_priv.899>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8015310:	b500      	push	{lr}
 8015312:	b083      	sub	sp, #12
 8015314:	9001      	str	r0, [sp, #4]

  queue_init(tqp);
 8015316:	9801      	ldr	r0, [sp, #4]
 8015318:	f7ff ffda 	bl	80152d0 <queue_init.lto_priv.905>
}
 801531c:	b003      	add	sp, #12
 801531e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015322:	bf00      	nop
	...

08015330 <osalSysLock.lto_priv.897>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8015330:	b508      	push	{r3, lr}

  chSysLock();
 8015332:	f7ff ffdd 	bl	80152f0 <chSysLock.lto_priv.903>
}
 8015336:	bd08      	pop	{r3, pc}
	...

08015340 <osalSysUnlock.lto_priv.895>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8015340:	b508      	push	{r3, lr}

  chSysUnlock();
 8015342:	f7ff ffdd 	bl	8015300 <chSysUnlock.lto_priv.901>
}
 8015346:	bd08      	pop	{r3, pc}
	...

08015350 <osalThreadQueueObjectInit.lto_priv.893>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8015350:	b500      	push	{lr}
 8015352:	b083      	sub	sp, #12
 8015354:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 8015356:	9801      	ldr	r0, [sp, #4]
 8015358:	f7ff ffda 	bl	8015310 <chThdQueueObjectInit.lto_priv.899>
}
 801535c:	b003      	add	sp, #12
 801535e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015362:	bf00      	nop
	...

08015370 <osalThreadEnqueueTimeoutS.lto_priv.891>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 8015370:	b500      	push	{lr}
 8015372:	b083      	sub	sp, #12
 8015374:	9001      	str	r0, [sp, #4]
 8015376:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 8015378:	9801      	ldr	r0, [sp, #4]
 801537a:	9900      	ldr	r1, [sp, #0]
 801537c:	f7fb fce8 	bl	8010d50 <chThdEnqueueTimeoutS>
 8015380:	4603      	mov	r3, r0
}
 8015382:	4618      	mov	r0, r3
 8015384:	b003      	add	sp, #12
 8015386:	f85d fb04 	ldr.w	pc, [sp], #4
 801538a:	bf00      	nop
 801538c:	0000      	movs	r0, r0
	...

08015390 <osalThreadDequeueNextI.lto_priv.889>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8015390:	b500      	push	{lr}
 8015392:	b083      	sub	sp, #12
 8015394:	9001      	str	r0, [sp, #4]
 8015396:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 8015398:	9801      	ldr	r0, [sp, #4]
 801539a:	9900      	ldr	r1, [sp, #0]
 801539c:	f7fb fcf8 	bl	8010d90 <chThdDequeueNextI>
}
 80153a0:	b003      	add	sp, #12
 80153a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80153a6:	bf00      	nop
	...

080153b0 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 80153b0:	b500      	push	{lr}
 80153b2:	b087      	sub	sp, #28
 80153b4:	9003      	str	r0, [sp, #12]
 80153b6:	9102      	str	r1, [sp, #8]
 80153b8:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 80153ba:	9b03      	ldr	r3, [sp, #12]
 80153bc:	689a      	ldr	r2, [r3, #8]
 80153be:	9b01      	ldr	r3, [sp, #4]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d202      	bcs.n	80153ca <iq_read+0x1a>
    n = iqGetFullI(iqp);
 80153c4:	9b03      	ldr	r3, [sp, #12]
 80153c6:	689b      	ldr	r3, [r3, #8]
 80153c8:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80153ca:	9b03      	ldr	r3, [sp, #12]
 80153cc:	691b      	ldr	r3, [r3, #16]
 80153ce:	461a      	mov	r2, r3
 80153d0:	9b03      	ldr	r3, [sp, #12]
 80153d2:	699b      	ldr	r3, [r3, #24]
 80153d4:	1ad3      	subs	r3, r2, r3
 80153d6:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 80153d8:	9a01      	ldr	r2, [sp, #4]
 80153da:	9b05      	ldr	r3, [sp, #20]
 80153dc:	429a      	cmp	r2, r3
 80153de:	d20d      	bcs.n	80153fc <iq_read+0x4c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80153e0:	9b03      	ldr	r3, [sp, #12]
 80153e2:	699b      	ldr	r3, [r3, #24]
 80153e4:	9802      	ldr	r0, [sp, #8]
 80153e6:	4619      	mov	r1, r3
 80153e8:	9a01      	ldr	r2, [sp, #4]
 80153ea:	f7f8 fb1f 	bl	800da2c <memcpy>
    iqp->q_rdptr += n;
 80153ee:	9b03      	ldr	r3, [sp, #12]
 80153f0:	699a      	ldr	r2, [r3, #24]
 80153f2:	9b01      	ldr	r3, [sp, #4]
 80153f4:	441a      	add	r2, r3
 80153f6:	9b03      	ldr	r3, [sp, #12]
 80153f8:	619a      	str	r2, [r3, #24]
 80153fa:	e02b      	b.n	8015454 <iq_read+0xa4>
  }
  else if (n > s1) {
 80153fc:	9a01      	ldr	r2, [sp, #4]
 80153fe:	9b05      	ldr	r3, [sp, #20]
 8015400:	429a      	cmp	r2, r3
 8015402:	d91c      	bls.n	801543e <iq_read+0x8e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8015404:	9b03      	ldr	r3, [sp, #12]
 8015406:	699b      	ldr	r3, [r3, #24]
 8015408:	9802      	ldr	r0, [sp, #8]
 801540a:	4619      	mov	r1, r3
 801540c:	9a05      	ldr	r2, [sp, #20]
 801540e:	f7f8 fb0d 	bl	800da2c <memcpy>
    bp += s1;
 8015412:	9a02      	ldr	r2, [sp, #8]
 8015414:	9b05      	ldr	r3, [sp, #20]
 8015416:	4413      	add	r3, r2
 8015418:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 801541a:	9a01      	ldr	r2, [sp, #4]
 801541c:	9b05      	ldr	r3, [sp, #20]
 801541e:	1ad3      	subs	r3, r2, r3
 8015420:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8015422:	9b03      	ldr	r3, [sp, #12]
 8015424:	68db      	ldr	r3, [r3, #12]
 8015426:	9802      	ldr	r0, [sp, #8]
 8015428:	4619      	mov	r1, r3
 801542a:	9a04      	ldr	r2, [sp, #16]
 801542c:	f7f8 fafe 	bl	800da2c <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8015430:	9b03      	ldr	r3, [sp, #12]
 8015432:	68da      	ldr	r2, [r3, #12]
 8015434:	9b04      	ldr	r3, [sp, #16]
 8015436:	441a      	add	r2, r3
 8015438:	9b03      	ldr	r3, [sp, #12]
 801543a:	619a      	str	r2, [r3, #24]
 801543c:	e00a      	b.n	8015454 <iq_read+0xa4>
  }
  else { /* n == s1 */
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 801543e:	9b03      	ldr	r3, [sp, #12]
 8015440:	699b      	ldr	r3, [r3, #24]
 8015442:	9802      	ldr	r0, [sp, #8]
 8015444:	4619      	mov	r1, r3
 8015446:	9a01      	ldr	r2, [sp, #4]
 8015448:	f7f8 faf0 	bl	800da2c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 801544c:	9b03      	ldr	r3, [sp, #12]
 801544e:	68da      	ldr	r2, [r3, #12]
 8015450:	9b03      	ldr	r3, [sp, #12]
 8015452:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 8015454:	9b03      	ldr	r3, [sp, #12]
 8015456:	689a      	ldr	r2, [r3, #8]
 8015458:	9b01      	ldr	r3, [sp, #4]
 801545a:	1ad2      	subs	r2, r2, r3
 801545c:	9b03      	ldr	r3, [sp, #12]
 801545e:	609a      	str	r2, [r3, #8]
  return n;
 8015460:	9b01      	ldr	r3, [sp, #4]
}
 8015462:	4618      	mov	r0, r3
 8015464:	b007      	add	sp, #28
 8015466:	f85d fb04 	ldr.w	pc, [sp], #4
 801546a:	bf00      	nop
 801546c:	0000      	movs	r0, r0
	...

08015470 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8015470:	b500      	push	{lr}
 8015472:	b087      	sub	sp, #28
 8015474:	9003      	str	r0, [sp, #12]
 8015476:	9102      	str	r1, [sp, #8]
 8015478:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 801547a:	9b03      	ldr	r3, [sp, #12]
 801547c:	689a      	ldr	r2, [r3, #8]
 801547e:	9b01      	ldr	r3, [sp, #4]
 8015480:	429a      	cmp	r2, r3
 8015482:	d202      	bcs.n	801548a <oq_write+0x1a>
    n = oqGetEmptyI(oqp);
 8015484:	9b03      	ldr	r3, [sp, #12]
 8015486:	689b      	ldr	r3, [r3, #8]
 8015488:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 801548a:	9b03      	ldr	r3, [sp, #12]
 801548c:	691b      	ldr	r3, [r3, #16]
 801548e:	461a      	mov	r2, r3
 8015490:	9b03      	ldr	r3, [sp, #12]
 8015492:	695b      	ldr	r3, [r3, #20]
 8015494:	1ad3      	subs	r3, r2, r3
 8015496:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8015498:	9a01      	ldr	r2, [sp, #4]
 801549a:	9b05      	ldr	r3, [sp, #20]
 801549c:	429a      	cmp	r2, r3
 801549e:	d20d      	bcs.n	80154bc <oq_write+0x4c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80154a0:	9b03      	ldr	r3, [sp, #12]
 80154a2:	695b      	ldr	r3, [r3, #20]
 80154a4:	4618      	mov	r0, r3
 80154a6:	9902      	ldr	r1, [sp, #8]
 80154a8:	9a01      	ldr	r2, [sp, #4]
 80154aa:	f7f8 fabf 	bl	800da2c <memcpy>
    oqp->q_wrptr += n;
 80154ae:	9b03      	ldr	r3, [sp, #12]
 80154b0:	695a      	ldr	r2, [r3, #20]
 80154b2:	9b01      	ldr	r3, [sp, #4]
 80154b4:	441a      	add	r2, r3
 80154b6:	9b03      	ldr	r3, [sp, #12]
 80154b8:	615a      	str	r2, [r3, #20]
 80154ba:	e02b      	b.n	8015514 <oq_write+0xa4>
  }
  else if (n > s1) {
 80154bc:	9a01      	ldr	r2, [sp, #4]
 80154be:	9b05      	ldr	r3, [sp, #20]
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d91c      	bls.n	80154fe <oq_write+0x8e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80154c4:	9b03      	ldr	r3, [sp, #12]
 80154c6:	695b      	ldr	r3, [r3, #20]
 80154c8:	4618      	mov	r0, r3
 80154ca:	9902      	ldr	r1, [sp, #8]
 80154cc:	9a05      	ldr	r2, [sp, #20]
 80154ce:	f7f8 faad 	bl	800da2c <memcpy>
    bp += s1;
 80154d2:	9a02      	ldr	r2, [sp, #8]
 80154d4:	9b05      	ldr	r3, [sp, #20]
 80154d6:	4413      	add	r3, r2
 80154d8:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80154da:	9a01      	ldr	r2, [sp, #4]
 80154dc:	9b05      	ldr	r3, [sp, #20]
 80154de:	1ad3      	subs	r3, r2, r3
 80154e0:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80154e2:	9b03      	ldr	r3, [sp, #12]
 80154e4:	68db      	ldr	r3, [r3, #12]
 80154e6:	4618      	mov	r0, r3
 80154e8:	9902      	ldr	r1, [sp, #8]
 80154ea:	9a04      	ldr	r2, [sp, #16]
 80154ec:	f7f8 fa9e 	bl	800da2c <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80154f0:	9b03      	ldr	r3, [sp, #12]
 80154f2:	68da      	ldr	r2, [r3, #12]
 80154f4:	9b04      	ldr	r3, [sp, #16]
 80154f6:	441a      	add	r2, r3
 80154f8:	9b03      	ldr	r3, [sp, #12]
 80154fa:	615a      	str	r2, [r3, #20]
 80154fc:	e00a      	b.n	8015514 <oq_write+0xa4>
  }
  else { /* n == s1 */
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80154fe:	9b03      	ldr	r3, [sp, #12]
 8015500:	695b      	ldr	r3, [r3, #20]
 8015502:	4618      	mov	r0, r3
 8015504:	9902      	ldr	r1, [sp, #8]
 8015506:	9a01      	ldr	r2, [sp, #4]
 8015508:	f7f8 fa90 	bl	800da2c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 801550c:	9b03      	ldr	r3, [sp, #12]
 801550e:	68da      	ldr	r2, [r3, #12]
 8015510:	9b03      	ldr	r3, [sp, #12]
 8015512:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 8015514:	9b03      	ldr	r3, [sp, #12]
 8015516:	689a      	ldr	r2, [r3, #8]
 8015518:	9b01      	ldr	r3, [sp, #4]
 801551a:	1ad2      	subs	r2, r2, r3
 801551c:	9b03      	ldr	r3, [sp, #12]
 801551e:	609a      	str	r2, [r3, #8]
  return n;
 8015520:	9b01      	ldr	r3, [sp, #4]
}
 8015522:	4618      	mov	r0, r3
 8015524:	b007      	add	sp, #28
 8015526:	f85d fb04 	ldr.w	pc, [sp], #4
 801552a:	bf00      	nop
 801552c:	0000      	movs	r0, r0
	...

08015530 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8015530:	b500      	push	{lr}
 8015532:	b085      	sub	sp, #20
 8015534:	9003      	str	r0, [sp, #12]
 8015536:	9102      	str	r1, [sp, #8]
 8015538:	9201      	str	r2, [sp, #4]
 801553a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 801553c:	9b03      	ldr	r3, [sp, #12]
 801553e:	4618      	mov	r0, r3
 8015540:	f7ff ff06 	bl	8015350 <osalThreadQueueObjectInit.lto_priv.893>
  iqp->q_counter = 0;
 8015544:	9b03      	ldr	r3, [sp, #12]
 8015546:	2200      	movs	r2, #0
 8015548:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 801554a:	9b03      	ldr	r3, [sp, #12]
 801554c:	9a02      	ldr	r2, [sp, #8]
 801554e:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8015550:	9b03      	ldr	r3, [sp, #12]
 8015552:	9a02      	ldr	r2, [sp, #8]
 8015554:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8015556:	9b03      	ldr	r3, [sp, #12]
 8015558:	9a02      	ldr	r2, [sp, #8]
 801555a:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 801555c:	9a02      	ldr	r2, [sp, #8]
 801555e:	9b01      	ldr	r3, [sp, #4]
 8015560:	441a      	add	r2, r3
 8015562:	9b03      	ldr	r3, [sp, #12]
 8015564:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8015566:	9b03      	ldr	r3, [sp, #12]
 8015568:	9a00      	ldr	r2, [sp, #0]
 801556a:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 801556c:	9b03      	ldr	r3, [sp, #12]
 801556e:	9a06      	ldr	r2, [sp, #24]
 8015570:	621a      	str	r2, [r3, #32]
}
 8015572:	b005      	add	sp, #20
 8015574:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015580 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8015580:	b500      	push	{lr}
 8015582:	b083      	sub	sp, #12
 8015584:	9001      	str	r0, [sp, #4]
 8015586:	460b      	mov	r3, r1
 8015588:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 801558c:	9b01      	ldr	r3, [sp, #4]
 801558e:	695a      	ldr	r2, [r3, #20]
 8015590:	9b01      	ldr	r3, [sp, #4]
 8015592:	699b      	ldr	r3, [r3, #24]
 8015594:	429a      	cmp	r2, r3
 8015596:	d105      	bne.n	80155a4 <iqPutI+0x24>
 8015598:	9b01      	ldr	r3, [sp, #4]
 801559a:	689b      	ldr	r3, [r3, #8]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d001      	beq.n	80155a4 <iqPutI+0x24>
 80155a0:	2301      	movs	r3, #1
 80155a2:	e000      	b.n	80155a6 <iqPutI+0x26>
 80155a4:	2300      	movs	r3, #0
 80155a6:	f003 0301 	and.w	r3, r3, #1
 80155aa:	b2db      	uxtb	r3, r3
 80155ac:	f083 0301 	eor.w	r3, r3, #1
 80155b0:	b2db      	uxtb	r3, r3
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d01d      	beq.n	80155f2 <iqPutI+0x72>
    iqp->q_counter++;
 80155b6:	9b01      	ldr	r3, [sp, #4]
 80155b8:	689b      	ldr	r3, [r3, #8]
 80155ba:	1c5a      	adds	r2, r3, #1
 80155bc:	9b01      	ldr	r3, [sp, #4]
 80155be:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 80155c0:	9b01      	ldr	r3, [sp, #4]
 80155c2:	695b      	ldr	r3, [r3, #20]
 80155c4:	1c59      	adds	r1, r3, #1
 80155c6:	9a01      	ldr	r2, [sp, #4]
 80155c8:	6151      	str	r1, [r2, #20]
 80155ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80155ce:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 80155d0:	9b01      	ldr	r3, [sp, #4]
 80155d2:	695a      	ldr	r2, [r3, #20]
 80155d4:	9b01      	ldr	r3, [sp, #4]
 80155d6:	691b      	ldr	r3, [r3, #16]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d303      	bcc.n	80155e4 <iqPutI+0x64>
      iqp->q_wrptr = iqp->q_buffer;
 80155dc:	9b01      	ldr	r3, [sp, #4]
 80155de:	68da      	ldr	r2, [r3, #12]
 80155e0:	9b01      	ldr	r3, [sp, #4]
 80155e2:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 80155e4:	9b01      	ldr	r3, [sp, #4]
 80155e6:	4618      	mov	r0, r3
 80155e8:	2100      	movs	r1, #0
 80155ea:	f7ff fed1 	bl	8015390 <osalThreadDequeueNextI.lto_priv.889>

    return MSG_OK;
 80155ee:	2300      	movs	r3, #0
 80155f0:	e001      	b.n	80155f6 <iqPutI+0x76>
  }

  return MSG_TIMEOUT;
 80155f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	b003      	add	sp, #12
 80155fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80155fe:	bf00      	nop

08015600 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8015600:	b500      	push	{lr}
 8015602:	b085      	sub	sp, #20
 8015604:	9001      	str	r0, [sp, #4]
 8015606:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 8015608:	f7ff fe92 	bl	8015330 <osalSysLock.lto_priv.897>
 801560c:	e00c      	b.n	8015628 <iqGetTimeout+0x28>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 801560e:	9b01      	ldr	r3, [sp, #4]
 8015610:	4618      	mov	r0, r3
 8015612:	9900      	ldr	r1, [sp, #0]
 8015614:	f7ff feac 	bl	8015370 <osalThreadEnqueueTimeoutS.lto_priv.891>
 8015618:	9003      	str	r0, [sp, #12]
    if (msg < MSG_OK) {
 801561a:	9b03      	ldr	r3, [sp, #12]
 801561c:	2b00      	cmp	r3, #0
 801561e:	da03      	bge.n	8015628 <iqGetTimeout+0x28>
      osalSysUnlock();
 8015620:	f7ff fe8e 	bl	8015340 <osalSysUnlock.lto_priv.895>
      return msg;
 8015624:	9b03      	ldr	r3, [sp, #12]
 8015626:	e026      	b.n	8015676 <iqGetTimeout+0x76>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 8015628:	9b01      	ldr	r3, [sp, #4]
 801562a:	689b      	ldr	r3, [r3, #8]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d0ee      	beq.n	801560e <iqGetTimeout+0xe>
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8015630:	9b01      	ldr	r3, [sp, #4]
 8015632:	689b      	ldr	r3, [r3, #8]
 8015634:	1e5a      	subs	r2, r3, #1
 8015636:	9b01      	ldr	r3, [sp, #4]
 8015638:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 801563a:	9b01      	ldr	r3, [sp, #4]
 801563c:	699b      	ldr	r3, [r3, #24]
 801563e:	1c59      	adds	r1, r3, #1
 8015640:	9a01      	ldr	r2, [sp, #4]
 8015642:	6191      	str	r1, [r2, #24]
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	f88d 300b 	strb.w	r3, [sp, #11]
  if (iqp->q_rdptr >= iqp->q_top) {
 801564a:	9b01      	ldr	r3, [sp, #4]
 801564c:	699a      	ldr	r2, [r3, #24]
 801564e:	9b01      	ldr	r3, [sp, #4]
 8015650:	691b      	ldr	r3, [r3, #16]
 8015652:	429a      	cmp	r2, r3
 8015654:	d303      	bcc.n	801565e <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 8015656:	9b01      	ldr	r3, [sp, #4]
 8015658:	68da      	ldr	r2, [r3, #12]
 801565a:	9b01      	ldr	r3, [sp, #4]
 801565c:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 801565e:	9b01      	ldr	r3, [sp, #4]
 8015660:	69db      	ldr	r3, [r3, #28]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d003      	beq.n	801566e <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 8015666:	9b01      	ldr	r3, [sp, #4]
 8015668:	69db      	ldr	r3, [r3, #28]
 801566a:	9801      	ldr	r0, [sp, #4]
 801566c:	4798      	blx	r3
  }

  osalSysUnlock();
 801566e:	f7ff fe67 	bl	8015340 <osalSysUnlock.lto_priv.895>

  return (msg_t)b;
 8015672:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
 8015676:	4618      	mov	r0, r3
 8015678:	b005      	add	sp, #20
 801567a:	f85d fb04 	ldr.w	pc, [sp], #4
 801567e:	bf00      	nop

08015680 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8015680:	b500      	push	{lr}
 8015682:	b089      	sub	sp, #36	; 0x24
 8015684:	9003      	str	r0, [sp, #12]
 8015686:	9102      	str	r1, [sp, #8]
 8015688:	9201      	str	r2, [sp, #4]
 801568a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 801568c:	9b03      	ldr	r3, [sp, #12]
 801568e:	69db      	ldr	r3, [r3, #28]
 8015690:	9306      	str	r3, [sp, #24]
  size_t rd = 0;
 8015692:	2300      	movs	r3, #0
 8015694:	9307      	str	r3, [sp, #28]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8015696:	f7ff fe4b 	bl	8015330 <osalSysLock.lto_priv.897>
 801569a:	e024      	b.n	80156e6 <iqReadTimeout+0x66>

  while (rd < n) {
    size_t done;

    done = iq_read(iqp, bp, n);
 801569c:	9803      	ldr	r0, [sp, #12]
 801569e:	9902      	ldr	r1, [sp, #8]
 80156a0:	9a01      	ldr	r2, [sp, #4]
 80156a2:	f7ff fe85 	bl	80153b0 <iq_read>
 80156a6:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 80156a8:	9b05      	ldr	r3, [sp, #20]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d109      	bne.n	80156c2 <iqReadTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80156ae:	9b03      	ldr	r3, [sp, #12]
 80156b0:	4618      	mov	r0, r3
 80156b2:	9900      	ldr	r1, [sp, #0]
 80156b4:	f7ff fe5c 	bl	8015370 <osalThreadEnqueueTimeoutS.lto_priv.891>
 80156b8:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80156ba:	9b04      	ldr	r3, [sp, #16]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d116      	bne.n	80156ee <iqReadTimeout+0x6e>
 80156c0:	e011      	b.n	80156e6 <iqReadTimeout+0x66>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 80156c2:	9b06      	ldr	r3, [sp, #24]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d002      	beq.n	80156ce <iqReadTimeout+0x4e>
        nfy(iqp);
 80156c8:	9b06      	ldr	r3, [sp, #24]
 80156ca:	9803      	ldr	r0, [sp, #12]
 80156cc:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 80156ce:	f7ff fe37 	bl	8015340 <osalSysUnlock.lto_priv.895>

      rd += done;
 80156d2:	9a07      	ldr	r2, [sp, #28]
 80156d4:	9b05      	ldr	r3, [sp, #20]
 80156d6:	4413      	add	r3, r2
 80156d8:	9307      	str	r3, [sp, #28]
      bp += done;
 80156da:	9a02      	ldr	r2, [sp, #8]
 80156dc:	9b05      	ldr	r3, [sp, #20]
 80156de:	4413      	add	r3, r2
 80156e0:	9302      	str	r3, [sp, #8]

      osalSysLock();
 80156e2:	f7ff fe25 	bl	8015330 <osalSysLock.lto_priv.897>

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (rd < n) {
 80156e6:	9a07      	ldr	r2, [sp, #28]
 80156e8:	9b01      	ldr	r3, [sp, #4]
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d3d6      	bcc.n	801569c <iqReadTimeout+0x1c>

      osalSysLock();
    }
  }

  osalSysUnlock();
 80156ee:	f7ff fe27 	bl	8015340 <osalSysUnlock.lto_priv.895>
  return rd;
 80156f2:	9b07      	ldr	r3, [sp, #28]
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	b009      	add	sp, #36	; 0x24
 80156f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80156fc:	0000      	movs	r0, r0
	...

08015700 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8015700:	b500      	push	{lr}
 8015702:	b085      	sub	sp, #20
 8015704:	9003      	str	r0, [sp, #12]
 8015706:	9102      	str	r1, [sp, #8]
 8015708:	9201      	str	r2, [sp, #4]
 801570a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 801570c:	9b03      	ldr	r3, [sp, #12]
 801570e:	4618      	mov	r0, r3
 8015710:	f7ff fe1e 	bl	8015350 <osalThreadQueueObjectInit.lto_priv.893>
  oqp->q_counter = size;
 8015714:	9b03      	ldr	r3, [sp, #12]
 8015716:	9a01      	ldr	r2, [sp, #4]
 8015718:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 801571a:	9b03      	ldr	r3, [sp, #12]
 801571c:	9a02      	ldr	r2, [sp, #8]
 801571e:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8015720:	9b03      	ldr	r3, [sp, #12]
 8015722:	9a02      	ldr	r2, [sp, #8]
 8015724:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8015726:	9b03      	ldr	r3, [sp, #12]
 8015728:	9a02      	ldr	r2, [sp, #8]
 801572a:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 801572c:	9a02      	ldr	r2, [sp, #8]
 801572e:	9b01      	ldr	r3, [sp, #4]
 8015730:	441a      	add	r2, r3
 8015732:	9b03      	ldr	r3, [sp, #12]
 8015734:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 8015736:	9b03      	ldr	r3, [sp, #12]
 8015738:	9a00      	ldr	r2, [sp, #0]
 801573a:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 801573c:	9b03      	ldr	r3, [sp, #12]
 801573e:	9a06      	ldr	r2, [sp, #24]
 8015740:	621a      	str	r2, [r3, #32]
}
 8015742:	b005      	add	sp, #20
 8015744:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015750 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8015750:	b500      	push	{lr}
 8015752:	b087      	sub	sp, #28
 8015754:	9003      	str	r0, [sp, #12]
 8015756:	460b      	mov	r3, r1
 8015758:	9201      	str	r2, [sp, #4]
 801575a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
 801575e:	f7ff fde7 	bl	8015330 <osalSysLock.lto_priv.897>
 8015762:	e00c      	b.n	801577e <oqPutTimeout+0x2e>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8015764:	9b03      	ldr	r3, [sp, #12]
 8015766:	4618      	mov	r0, r3
 8015768:	9901      	ldr	r1, [sp, #4]
 801576a:	f7ff fe01 	bl	8015370 <osalThreadEnqueueTimeoutS.lto_priv.891>
 801576e:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
 8015770:	9b05      	ldr	r3, [sp, #20]
 8015772:	2b00      	cmp	r3, #0
 8015774:	da03      	bge.n	801577e <oqPutTimeout+0x2e>
      osalSysUnlock();
 8015776:	f7ff fde3 	bl	8015340 <osalSysUnlock.lto_priv.895>
      return msg;
 801577a:	9b05      	ldr	r3, [sp, #20]
 801577c:	e025      	b.n	80157ca <oqPutTimeout+0x7a>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 801577e:	9b03      	ldr	r3, [sp, #12]
 8015780:	689b      	ldr	r3, [r3, #8]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d0ee      	beq.n	8015764 <oqPutTimeout+0x14>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8015786:	9b03      	ldr	r3, [sp, #12]
 8015788:	689b      	ldr	r3, [r3, #8]
 801578a:	1e5a      	subs	r2, r3, #1
 801578c:	9b03      	ldr	r3, [sp, #12]
 801578e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8015790:	9b03      	ldr	r3, [sp, #12]
 8015792:	695b      	ldr	r3, [r3, #20]
 8015794:	1c59      	adds	r1, r3, #1
 8015796:	9a03      	ldr	r2, [sp, #12]
 8015798:	6151      	str	r1, [r2, #20]
 801579a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 801579e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80157a0:	9b03      	ldr	r3, [sp, #12]
 80157a2:	695a      	ldr	r2, [r3, #20]
 80157a4:	9b03      	ldr	r3, [sp, #12]
 80157a6:	691b      	ldr	r3, [r3, #16]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d303      	bcc.n	80157b4 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 80157ac:	9b03      	ldr	r3, [sp, #12]
 80157ae:	68da      	ldr	r2, [r3, #12]
 80157b0:	9b03      	ldr	r3, [sp, #12]
 80157b2:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80157b4:	9b03      	ldr	r3, [sp, #12]
 80157b6:	69db      	ldr	r3, [r3, #28]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d003      	beq.n	80157c4 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
 80157bc:	9b03      	ldr	r3, [sp, #12]
 80157be:	69db      	ldr	r3, [r3, #28]
 80157c0:	9803      	ldr	r0, [sp, #12]
 80157c2:	4798      	blx	r3
  }

  osalSysUnlock();
 80157c4:	f7ff fdbc 	bl	8015340 <osalSysUnlock.lto_priv.895>

  return MSG_OK;
 80157c8:	2300      	movs	r3, #0
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	b007      	add	sp, #28
 80157ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80157d2:	bf00      	nop
	...

080157e0 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 80157e0:	b500      	push	{lr}
 80157e2:	b085      	sub	sp, #20
 80157e4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 80157e6:	9b01      	ldr	r3, [sp, #4]
 80157e8:	695a      	ldr	r2, [r3, #20]
 80157ea:	9b01      	ldr	r3, [sp, #4]
 80157ec:	699b      	ldr	r3, [r3, #24]
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d105      	bne.n	80157fe <oqGetI+0x1e>
 80157f2:	9b01      	ldr	r3, [sp, #4]
 80157f4:	689b      	ldr	r3, [r3, #8]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d001      	beq.n	80157fe <oqGetI+0x1e>
 80157fa:	2301      	movs	r3, #1
 80157fc:	e000      	b.n	8015800 <oqGetI+0x20>
 80157fe:	2300      	movs	r3, #0
 8015800:	f003 0301 	and.w	r3, r3, #1
 8015804:	b2db      	uxtb	r3, r3
 8015806:	f083 0301 	eor.w	r3, r3, #1
 801580a:	b2db      	uxtb	r3, r3
 801580c:	2b00      	cmp	r3, #0
 801580e:	d01e      	beq.n	801584e <oqGetI+0x6e>
    uint8_t b;

    oqp->q_counter++;
 8015810:	9b01      	ldr	r3, [sp, #4]
 8015812:	689b      	ldr	r3, [r3, #8]
 8015814:	1c5a      	adds	r2, r3, #1
 8015816:	9b01      	ldr	r3, [sp, #4]
 8015818:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 801581a:	9b01      	ldr	r3, [sp, #4]
 801581c:	699b      	ldr	r3, [r3, #24]
 801581e:	1c59      	adds	r1, r3, #1
 8015820:	9a01      	ldr	r2, [sp, #4]
 8015822:	6191      	str	r1, [r2, #24]
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 801582a:	9b01      	ldr	r3, [sp, #4]
 801582c:	699a      	ldr	r2, [r3, #24]
 801582e:	9b01      	ldr	r3, [sp, #4]
 8015830:	691b      	ldr	r3, [r3, #16]
 8015832:	429a      	cmp	r2, r3
 8015834:	d303      	bcc.n	801583e <oqGetI+0x5e>
      oqp->q_rdptr = oqp->q_buffer;
 8015836:	9b01      	ldr	r3, [sp, #4]
 8015838:	68da      	ldr	r2, [r3, #12]
 801583a:	9b01      	ldr	r3, [sp, #4]
 801583c:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 801583e:	9b01      	ldr	r3, [sp, #4]
 8015840:	4618      	mov	r0, r3
 8015842:	2100      	movs	r1, #0
 8015844:	f7ff fda4 	bl	8015390 <osalThreadDequeueNextI.lto_priv.889>

    return (msg_t)b;
 8015848:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801584c:	e001      	b.n	8015852 <oqGetI+0x72>
  }

  return MSG_TIMEOUT;
 801584e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015852:	4618      	mov	r0, r3
 8015854:	b005      	add	sp, #20
 8015856:	f85d fb04 	ldr.w	pc, [sp], #4
 801585a:	bf00      	nop
 801585c:	0000      	movs	r0, r0
	...

08015860 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8015860:	b500      	push	{lr}
 8015862:	b089      	sub	sp, #36	; 0x24
 8015864:	9003      	str	r0, [sp, #12]
 8015866:	9102      	str	r1, [sp, #8]
 8015868:	9201      	str	r2, [sp, #4]
 801586a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 801586c:	9b03      	ldr	r3, [sp, #12]
 801586e:	69db      	ldr	r3, [r3, #28]
 8015870:	9306      	str	r3, [sp, #24]
  size_t wr = 0;
 8015872:	2300      	movs	r3, #0
 8015874:	9307      	str	r3, [sp, #28]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8015876:	f7ff fd5b 	bl	8015330 <osalSysLock.lto_priv.897>
 801587a:	e024      	b.n	80158c6 <oqWriteTimeout+0x66>

  while (wr < n) {
    size_t done;

    done = oq_write(oqp, bp, n);
 801587c:	9803      	ldr	r0, [sp, #12]
 801587e:	9902      	ldr	r1, [sp, #8]
 8015880:	9a01      	ldr	r2, [sp, #4]
 8015882:	f7ff fdf5 	bl	8015470 <oq_write>
 8015886:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8015888:	9b05      	ldr	r3, [sp, #20]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d109      	bne.n	80158a2 <oqWriteTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 801588e:	9b03      	ldr	r3, [sp, #12]
 8015890:	4618      	mov	r0, r3
 8015892:	9900      	ldr	r1, [sp, #0]
 8015894:	f7ff fd6c 	bl	8015370 <osalThreadEnqueueTimeoutS.lto_priv.891>
 8015898:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 801589a:	9b04      	ldr	r3, [sp, #16]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d116      	bne.n	80158ce <oqWriteTimeout+0x6e>
 80158a0:	e011      	b.n	80158c6 <oqWriteTimeout+0x66>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80158a2:	9b06      	ldr	r3, [sp, #24]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d002      	beq.n	80158ae <oqWriteTimeout+0x4e>
        nfy(oqp);
 80158a8:	9b06      	ldr	r3, [sp, #24]
 80158aa:	9803      	ldr	r0, [sp, #12]
 80158ac:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 80158ae:	f7ff fd47 	bl	8015340 <osalSysUnlock.lto_priv.895>

      wr += done;
 80158b2:	9a07      	ldr	r2, [sp, #28]
 80158b4:	9b05      	ldr	r3, [sp, #20]
 80158b6:	4413      	add	r3, r2
 80158b8:	9307      	str	r3, [sp, #28]
      bp += done;
 80158ba:	9a02      	ldr	r2, [sp, #8]
 80158bc:	9b05      	ldr	r3, [sp, #20]
 80158be:	4413      	add	r3, r2
 80158c0:	9302      	str	r3, [sp, #8]

      osalSysLock();
 80158c2:	f7ff fd35 	bl	8015330 <osalSysLock.lto_priv.897>

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
 80158c6:	9a07      	ldr	r2, [sp, #28]
 80158c8:	9b01      	ldr	r3, [sp, #4]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d3d6      	bcc.n	801587c <oqWriteTimeout+0x1c>

      osalSysLock();
    }
  }

  osalSysUnlock();
 80158ce:	f7ff fd37 	bl	8015340 <osalSysUnlock.lto_priv.895>
  return wr;
 80158d2:	9b07      	ldr	r3, [sp, #28]
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	b009      	add	sp, #36	; 0x24
 80158d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80158dc:	0000      	movs	r0, r0
	...

080158e0 <_mmcsd_get_slice>:
 *
 * @notapi
 */
uint32_t _mmcsd_get_slice(const uint32_t *data,
                          uint32_t end,
                          uint32_t start) {
 80158e0:	b088      	sub	sp, #32
 80158e2:	9003      	str	r0, [sp, #12]
 80158e4:	9102      	str	r1, [sp, #8]
 80158e6:	9201      	str	r2, [sp, #4]
  unsigned startidx, endidx, startoff;
  uint32_t endmask;

  osalDbgCheck((end >= start) && ((end - start) < 32U));

  startidx = start / 32U;
 80158e8:	9b01      	ldr	r3, [sp, #4]
 80158ea:	095b      	lsrs	r3, r3, #5
 80158ec:	9307      	str	r3, [sp, #28]
  startoff = start % 32U;
 80158ee:	9b01      	ldr	r3, [sp, #4]
 80158f0:	f003 031f 	and.w	r3, r3, #31
 80158f4:	9306      	str	r3, [sp, #24]
  endidx   = end / 32U;
 80158f6:	9b02      	ldr	r3, [sp, #8]
 80158f8:	095b      	lsrs	r3, r3, #5
 80158fa:	9305      	str	r3, [sp, #20]
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 80158fc:	9b02      	ldr	r3, [sp, #8]
 80158fe:	f003 031f 	and.w	r3, r3, #31
 8015902:	3301      	adds	r3, #1
 8015904:	461a      	mov	r2, r3
 8015906:	2301      	movs	r3, #1
 8015908:	4093      	lsls	r3, r2
 801590a:	3b01      	subs	r3, #1
 801590c:	9304      	str	r3, [sp, #16]

  /* One or two pieces?*/
  if (startidx < endidx) {
 801590e:	9a07      	ldr	r2, [sp, #28]
 8015910:	9b05      	ldr	r3, [sp, #20]
 8015912:	429a      	cmp	r2, r3
 8015914:	d213      	bcs.n	801593e <_mmcsd_get_slice+0x5e>
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8015916:	9b07      	ldr	r3, [sp, #28]
 8015918:	009b      	lsls	r3, r3, #2
 801591a:	9a03      	ldr	r2, [sp, #12]
 801591c:	4413      	add	r3, r2
 801591e:	681a      	ldr	r2, [r3, #0]
 8015920:	9b06      	ldr	r3, [sp, #24]
 8015922:	40da      	lsrs	r2, r3
           ((data[endidx] & endmask) << (32U - startoff));
 8015924:	9b05      	ldr	r3, [sp, #20]
 8015926:	009b      	lsls	r3, r3, #2
 8015928:	9903      	ldr	r1, [sp, #12]
 801592a:	440b      	add	r3, r1
 801592c:	6819      	ldr	r1, [r3, #0]
 801592e:	9b04      	ldr	r3, [sp, #16]
 8015930:	400b      	ands	r3, r1
 8015932:	9906      	ldr	r1, [sp, #24]
 8015934:	f1c1 0120 	rsb	r1, r1, #32
 8015938:	408b      	lsls	r3, r1
  endidx   = end / 32U;
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;

  /* One or two pieces?*/
  if (startidx < endidx) {
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 801593a:	4313      	orrs	r3, r2
 801593c:	e009      	b.n	8015952 <_mmcsd_get_slice+0x72>
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 801593e:	9b07      	ldr	r3, [sp, #28]
 8015940:	009b      	lsls	r3, r3, #2
 8015942:	9a03      	ldr	r2, [sp, #12]
 8015944:	4413      	add	r3, r2
 8015946:	681a      	ldr	r2, [r3, #0]
 8015948:	9b04      	ldr	r3, [sp, #16]
 801594a:	401a      	ands	r2, r3
 801594c:	9b06      	ldr	r3, [sp, #24]
 801594e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015952:	4618      	mov	r0, r3
 8015954:	b008      	add	sp, #32
 8015956:	4770      	bx	lr

08015958 <_ZL12read_sleb128PKhPl>:
 8015958:	b430      	push	{r4, r5}
 801595a:	2500      	movs	r5, #0
 801595c:	462a      	mov	r2, r5
 801595e:	f810 4b01 	ldrb.w	r4, [r0], #1
 8015962:	f004 037f 	and.w	r3, r4, #127	; 0x7f
 8015966:	4093      	lsls	r3, r2
 8015968:	431d      	orrs	r5, r3
 801596a:	0623      	lsls	r3, r4, #24
 801596c:	f102 0207 	add.w	r2, r2, #7
 8015970:	d4f5      	bmi.n	801595e <_ZL12read_sleb128PKhPl+0x6>
 8015972:	2a1f      	cmp	r2, #31
 8015974:	d805      	bhi.n	8015982 <_ZL12read_sleb128PKhPl+0x2a>
 8015976:	0663      	lsls	r3, r4, #25
 8015978:	d503      	bpl.n	8015982 <_ZL12read_sleb128PKhPl+0x2a>
 801597a:	f04f 33ff 	mov.w	r3, #4294967295
 801597e:	4093      	lsls	r3, r2
 8015980:	431d      	orrs	r5, r3
 8015982:	600d      	str	r5, [r1, #0]
 8015984:	bc30      	pop	{r4, r5}
 8015986:	4770      	bx	lr

08015988 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8015988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801598a:	2850      	cmp	r0, #80	; 0x50
 801598c:	b085      	sub	sp, #20
 801598e:	4605      	mov	r5, r0
 8015990:	d045      	beq.n	8015a1e <_ZL28read_encoded_value_with_basehjPKhPj+0x96>
 8015992:	460f      	mov	r7, r1
 8015994:	f000 010f 	and.w	r1, r0, #15
 8015998:	290c      	cmp	r1, #12
 801599a:	d83e      	bhi.n	8015a1a <_ZL28read_encoded_value_with_basehjPKhPj+0x92>
 801599c:	e8df f001 	tbb	[pc, r1]
 80159a0:	07392907 	.word	0x07392907
 80159a4:	3d3d3d17 	.word	0x3d3d3d17
 80159a8:	071b1f3d 	.word	0x071b1f3d
 80159ac:	17          	.byte	0x17
 80159ad:	00          	.byte	0x00
 80159ae:	4610      	mov	r0, r2
 80159b0:	f850 4b04 	ldr.w	r4, [r0], #4
 80159b4:	b144      	cbz	r4, 80159c8 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 80159b6:	f005 0170 	and.w	r1, r5, #112	; 0x70
 80159ba:	2910      	cmp	r1, #16
 80159bc:	bf18      	it	ne
 80159be:	463a      	movne	r2, r7
 80159c0:	4414      	add	r4, r2
 80159c2:	062a      	lsls	r2, r5, #24
 80159c4:	bf48      	it	mi
 80159c6:	6824      	ldrmi	r4, [r4, #0]
 80159c8:	601c      	str	r4, [r3, #0]
 80159ca:	b005      	add	sp, #20
 80159cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159ce:	4610      	mov	r0, r2
 80159d0:	f850 4b08 	ldr.w	r4, [r0], #8
 80159d4:	e7ee      	b.n	80159b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 80159d6:	4610      	mov	r0, r2
 80159d8:	f930 4b02 	ldrsh.w	r4, [r0], #2
 80159dc:	e7ea      	b.n	80159b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 80159de:	4610      	mov	r0, r2
 80159e0:	a903      	add	r1, sp, #12
 80159e2:	9301      	str	r3, [sp, #4]
 80159e4:	9200      	str	r2, [sp, #0]
 80159e6:	f7ff ffb7 	bl	8015958 <_ZL12read_sleb128PKhPl>
 80159ea:	9c03      	ldr	r4, [sp, #12]
 80159ec:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80159f0:	e7e0      	b.n	80159b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 80159f2:	2400      	movs	r4, #0
 80159f4:	4626      	mov	r6, r4
 80159f6:	4610      	mov	r0, r2
 80159f8:	f810 eb01 	ldrb.w	lr, [r0], #1
 80159fc:	f00e 017f 	and.w	r1, lr, #127	; 0x7f
 8015a00:	40b1      	lsls	r1, r6
 8015a02:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8015a06:	ea44 0401 	orr.w	r4, r4, r1
 8015a0a:	f106 0607 	add.w	r6, r6, #7
 8015a0e:	d1f3      	bne.n	80159f8 <_ZL28read_encoded_value_with_basehjPKhPj+0x70>
 8015a10:	e7d0      	b.n	80159b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 8015a12:	4610      	mov	r0, r2
 8015a14:	f830 4b02 	ldrh.w	r4, [r0], #2
 8015a18:	e7cc      	b.n	80159b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x2c>
 8015a1a:	f000 ff6b 	bl	80168f4 <abort>
 8015a1e:	1cd0      	adds	r0, r2, #3
 8015a20:	f020 0003 	bic.w	r0, r0, #3
 8015a24:	f850 4b04 	ldr.w	r4, [r0], #4
 8015a28:	601c      	str	r4, [r3, #0]
 8015a2a:	b005      	add	sp, #20
 8015a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a2e:	bf00      	nop

08015a30 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8015a30:	28ff      	cmp	r0, #255	; 0xff
 8015a32:	d015      	beq.n	8015a60 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8015a34:	b508      	push	{r3, lr}
 8015a36:	f000 0370 	and.w	r3, r0, #112	; 0x70
 8015a3a:	2b20      	cmp	r3, #32
 8015a3c:	d012      	beq.n	8015a64 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
 8015a3e:	d90a      	bls.n	8015a56 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8015a40:	2b40      	cmp	r3, #64	; 0x40
 8015a42:	d014      	beq.n	8015a6e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8015a44:	2b50      	cmp	r3, #80	; 0x50
 8015a46:	d017      	beq.n	8015a78 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8015a48:	2b30      	cmp	r3, #48	; 0x30
 8015a4a:	d107      	bne.n	8015a5c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8015a4c:	4608      	mov	r0, r1
 8015a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015a52:	f7f7 bfe3 	b.w	800da1c <_Unwind_GetDataRelBase>
 8015a56:	b17b      	cbz	r3, 8015a78 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8015a58:	2b10      	cmp	r3, #16
 8015a5a:	d00d      	beq.n	8015a78 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8015a5c:	f000 ff4a 	bl	80168f4 <abort>
 8015a60:	2000      	movs	r0, #0
 8015a62:	4770      	bx	lr
 8015a64:	4608      	mov	r0, r1
 8015a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015a6a:	f7f7 bfdb 	b.w	800da24 <_Unwind_GetTextRelBase>
 8015a6e:	4608      	mov	r0, r1
 8015a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015a74:	f7f7 bfc2 	b.w	800d9fc <_Unwind_GetRegionStart>
 8015a78:	2000      	movs	r0, #0
 8015a7a:	bd08      	pop	{r3, pc}

08015a7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8015a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a7e:	460c      	mov	r4, r1
 8015a80:	4615      	mov	r5, r2
 8015a82:	4607      	mov	r7, r0
 8015a84:	2800      	cmp	r0, #0
 8015a86:	d044      	beq.n	8015b12 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
 8015a88:	f7f7 ffb8 	bl	800d9fc <_Unwind_GetRegionStart>
 8015a8c:	6028      	str	r0, [r5, #0]
 8015a8e:	7826      	ldrb	r6, [r4, #0]
 8015a90:	2eff      	cmp	r6, #255	; 0xff
 8015a92:	f104 0401 	add.w	r4, r4, #1
 8015a96:	d032      	beq.n	8015afe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
 8015a98:	4639      	mov	r1, r7
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f7ff ffc8 	bl	8015a30 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015aa0:	4622      	mov	r2, r4
 8015aa2:	4601      	mov	r1, r0
 8015aa4:	1d2b      	adds	r3, r5, #4
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	f7ff ff6e 	bl	8015988 <_ZL28read_encoded_value_with_basehjPKhPj>
 8015aac:	4604      	mov	r4, r0
 8015aae:	1c60      	adds	r0, r4, #1
 8015ab0:	7823      	ldrb	r3, [r4, #0]
 8015ab2:	752b      	strb	r3, [r5, #20]
 8015ab4:	2bff      	cmp	r3, #255	; 0xff
 8015ab6:	d029      	beq.n	8015b0c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
 8015ab8:	2310      	movs	r3, #16
 8015aba:	2400      	movs	r4, #0
 8015abc:	752b      	strb	r3, [r5, #20]
 8015abe:	4622      	mov	r2, r4
 8015ac0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8015ac4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8015ac8:	4093      	lsls	r3, r2
 8015aca:	0609      	lsls	r1, r1, #24
 8015acc:	ea44 0403 	orr.w	r4, r4, r3
 8015ad0:	f102 0207 	add.w	r2, r2, #7
 8015ad4:	d4f4      	bmi.n	8015ac0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
 8015ad6:	4404      	add	r4, r0
 8015ad8:	60ec      	str	r4, [r5, #12]
 8015ada:	7803      	ldrb	r3, [r0, #0]
 8015adc:	756b      	strb	r3, [r5, #21]
 8015ade:	2400      	movs	r4, #0
 8015ae0:	3001      	adds	r0, #1
 8015ae2:	4622      	mov	r2, r4
 8015ae4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8015ae8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8015aec:	4093      	lsls	r3, r2
 8015aee:	431c      	orrs	r4, r3
 8015af0:	060b      	lsls	r3, r1, #24
 8015af2:	f102 0207 	add.w	r2, r2, #7
 8015af6:	d4f5      	bmi.n	8015ae4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
 8015af8:	4404      	add	r4, r0
 8015afa:	612c      	str	r4, [r5, #16]
 8015afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015afe:	6068      	str	r0, [r5, #4]
 8015b00:	7823      	ldrb	r3, [r4, #0]
 8015b02:	752b      	strb	r3, [r5, #20]
 8015b04:	2bff      	cmp	r3, #255	; 0xff
 8015b06:	f104 0001 	add.w	r0, r4, #1
 8015b0a:	d1d5      	bne.n	8015ab8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	60eb      	str	r3, [r5, #12]
 8015b10:	e7e3      	b.n	8015ada <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8015b12:	e7bb      	b.n	8015a8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

08015b14 <__gxx_personality_v0>:
 8015b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b18:	f000 0303 	and.w	r3, r0, #3
 8015b1c:	b093      	sub	sp, #76	; 0x4c
 8015b1e:	2400      	movs	r4, #0
 8015b20:	2b01      	cmp	r3, #1
 8015b22:	460f      	mov	r7, r1
 8015b24:	4615      	mov	r5, r2
 8015b26:	9406      	str	r4, [sp, #24]
 8015b28:	f000 809e 	beq.w	8015c68 <__gxx_personality_v0+0x154>
 8015b2c:	d30e      	bcc.n	8015b4c <__gxx_personality_v0+0x38>
 8015b2e:	2b02      	cmp	r3, #2
 8015b30:	d10a      	bne.n	8015b48 <__gxx_personality_v0+0x34>
 8015b32:	4638      	mov	r0, r7
 8015b34:	4629      	mov	r1, r5
 8015b36:	f7f7 ff4d 	bl	800d9d4 <__gnu_unwind_frame>
 8015b3a:	2800      	cmp	r0, #0
 8015b3c:	f000 80af 	beq.w	8015c9e <__gxx_personality_v0+0x18a>
 8015b40:	2009      	movs	r0, #9
 8015b42:	b013      	add	sp, #76	; 0x4c
 8015b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b48:	f000 fed4 	bl	80168f4 <abort>
 8015b4c:	f000 0008 	and.w	r0, r0, #8
 8015b50:	f000 01ff 	and.w	r1, r0, #255	; 0xff
 8015b54:	2800      	cmp	r0, #0
 8015b56:	d1ec      	bne.n	8015b32 <__gxx_personality_v0+0x1e>
 8015b58:	ab12      	add	r3, sp, #72	; 0x48
 8015b5a:	4610      	mov	r0, r2
 8015b5c:	f843 7d2c 	str.w	r7, [r3, #-44]!
 8015b60:	220c      	movs	r2, #12
 8015b62:	9300      	str	r3, [sp, #0]
 8015b64:	460b      	mov	r3, r1
 8015b66:	f7f7 f9a9 	bl	800cebc <_Unwind_VRS_Set>
 8015b6a:	4628      	mov	r0, r5
 8015b6c:	f7f7 ff4c 	bl	800da08 <_Unwind_GetLanguageSpecificData>
 8015b70:	f04f 0801 	mov.w	r8, #1
 8015b74:	4681      	mov	r9, r0
 8015b76:	2800      	cmp	r0, #0
 8015b78:	d0db      	beq.n	8015b32 <__gxx_personality_v0+0x1e>
 8015b7a:	ab0c      	add	r3, sp, #48	; 0x30
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	4649      	mov	r1, r9
 8015b80:	4628      	mov	r0, r5
 8015b82:	9303      	str	r3, [sp, #12]
 8015b84:	f7ff ff7a 	bl	8015a7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8015b88:	4629      	mov	r1, r5
 8015b8a:	4682      	mov	sl, r0
 8015b8c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8015b90:	f7ff ff4e 	bl	8015a30 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015b94:	ae0b      	add	r6, sp, #44	; 0x2c
 8015b96:	2100      	movs	r1, #0
 8015b98:	900e      	str	r0, [sp, #56]	; 0x38
 8015b9a:	460b      	mov	r3, r1
 8015b9c:	220f      	movs	r2, #15
 8015b9e:	9600      	str	r6, [sp, #0]
 8015ba0:	4628      	mov	r0, r5
 8015ba2:	f7f7 f963 	bl	800ce6c <_Unwind_VRS_Get>
 8015ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ba8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015baa:	f023 0301 	bic.w	r3, r3, #1
 8015bae:	4592      	cmp	sl, r2
 8015bb0:	f103 34ff 	add.w	r4, r3, #4294967295
 8015bb4:	d23a      	bcs.n	8015c2c <__gxx_personality_v0+0x118>
 8015bb6:	f89d b045 	ldrb.w	fp, [sp, #69]	; 0x45
 8015bba:	2100      	movs	r1, #0
 8015bbc:	4658      	mov	r0, fp
 8015bbe:	f7ff ff37 	bl	8015a30 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015bc2:	4652      	mov	r2, sl
 8015bc4:	4601      	mov	r1, r0
 8015bc6:	ab09      	add	r3, sp, #36	; 0x24
 8015bc8:	4658      	mov	r0, fp
 8015bca:	f7ff fedd 	bl	8015988 <_ZL28read_encoded_value_with_basehjPKhPj>
 8015bce:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 8015bd2:	4683      	mov	fp, r0
 8015bd4:	2100      	movs	r1, #0
 8015bd6:	4650      	mov	r0, sl
 8015bd8:	f7ff ff2a 	bl	8015a30 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015bdc:	465a      	mov	r2, fp
 8015bde:	4601      	mov	r1, r0
 8015be0:	ab0a      	add	r3, sp, #40	; 0x28
 8015be2:	4650      	mov	r0, sl
 8015be4:	f7ff fed0 	bl	8015988 <_ZL28read_encoded_value_with_basehjPKhPj>
 8015be8:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 8015bec:	4683      	mov	fp, r0
 8015bee:	2100      	movs	r1, #0
 8015bf0:	4650      	mov	r0, sl
 8015bf2:	f7ff ff1d 	bl	8015a30 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015bf6:	465a      	mov	r2, fp
 8015bf8:	4601      	mov	r1, r0
 8015bfa:	4633      	mov	r3, r6
 8015bfc:	4650      	mov	r0, sl
 8015bfe:	f7ff fec3 	bl	8015988 <_ZL28read_encoded_value_with_basehjPKhPj>
 8015c02:	4682      	mov	sl, r0
 8015c04:	2000      	movs	r0, #0
 8015c06:	4601      	mov	r1, r0
 8015c08:	f81a eb01 	ldrb.w	lr, [sl], #1
 8015c0c:	f00e 037f 	and.w	r3, lr, #127	; 0x7f
 8015c10:	408b      	lsls	r3, r1
 8015c12:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8015c16:	ea40 0003 	orr.w	r0, r0, r3
 8015c1a:	f101 0107 	add.w	r1, r1, #7
 8015c1e:	d1f3      	bne.n	8015c08 <__gxx_personality_v0+0xf4>
 8015c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c24:	4413      	add	r3, r2
 8015c26:	429c      	cmp	r4, r3
 8015c28:	f080 8090 	bcs.w	8015d4c <__gxx_personality_v0+0x238>
 8015c2c:	f04f 0a00 	mov.w	sl, #0
 8015c30:	2601      	movs	r6, #1
 8015c32:	2400      	movs	r4, #0
 8015c34:	f018 0f01 	tst.w	r8, #1
 8015c38:	f000 8091 	beq.w	8015d5e <__gxx_personality_v0+0x24a>
 8015c3c:	2e02      	cmp	r6, #2
 8015c3e:	f43f af78 	beq.w	8015b32 <__gxx_personality_v0+0x1e>
 8015c42:	ab0a      	add	r3, sp, #40	; 0x28
 8015c44:	2100      	movs	r1, #0
 8015c46:	4628      	mov	r0, r5
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	220d      	movs	r2, #13
 8015c4c:	460b      	mov	r3, r1
 8015c4e:	9d06      	ldr	r5, [sp, #24]
 8015c50:	f7f7 f90c 	bl	800ce6c <_Unwind_VRS_Get>
 8015c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c56:	627d      	str	r5, [r7, #36]	; 0x24
 8015c58:	62bc      	str	r4, [r7, #40]	; 0x28
 8015c5a:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 8015c5e:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
 8015c62:	623b      	str	r3, [r7, #32]
 8015c64:	2006      	movs	r0, #6
 8015c66:	e76c      	b.n	8015b42 <__gxx_personality_v0+0x2e>
 8015c68:	f000 0008 	and.w	r0, r0, #8
 8015c6c:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 8015c70:	b1c8      	cbz	r0, 8015ca6 <__gxx_personality_v0+0x192>
 8015c72:	ab12      	add	r3, sp, #72	; 0x48
 8015c74:	2100      	movs	r1, #0
 8015c76:	f843 7d2c 	str.w	r7, [r3, #-44]!
 8015c7a:	220c      	movs	r2, #12
 8015c7c:	9300      	str	r3, [sp, #0]
 8015c7e:	4628      	mov	r0, r5
 8015c80:	460b      	mov	r3, r1
 8015c82:	f7f7 f91b 	bl	800cebc <_Unwind_VRS_Set>
 8015c86:	4628      	mov	r0, r5
 8015c88:	f7f7 febe 	bl	800da08 <_Unwind_GetLanguageSpecificData>
 8015c8c:	f044 0402 	orr.w	r4, r4, #2
 8015c90:	fa5f f884 	uxtb.w	r8, r4
 8015c94:	4681      	mov	r9, r0
 8015c96:	2800      	cmp	r0, #0
 8015c98:	f47f af6f 	bne.w	8015b7a <__gxx_personality_v0+0x66>
 8015c9c:	e749      	b.n	8015b32 <__gxx_personality_v0+0x1e>
 8015c9e:	2008      	movs	r0, #8
 8015ca0:	b013      	add	sp, #76	; 0x4c
 8015ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ca6:	ab0c      	add	r3, sp, #48	; 0x30
 8015ca8:	9300      	str	r3, [sp, #0]
 8015caa:	9303      	str	r3, [sp, #12]
 8015cac:	4610      	mov	r0, r2
 8015cae:	4623      	mov	r3, r4
 8015cb0:	4621      	mov	r1, r4
 8015cb2:	220d      	movs	r2, #13
 8015cb4:	6a3e      	ldr	r6, [r7, #32]
 8015cb6:	f7f7 f8d9 	bl	800ce6c <_Unwind_VRS_Get>
 8015cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cbc:	429e      	cmp	r6, r3
 8015cbe:	d1d8      	bne.n	8015c72 <__gxx_personality_v0+0x15e>
 8015cc0:	ab12      	add	r3, sp, #72	; 0x48
 8015cc2:	220c      	movs	r2, #12
 8015cc4:	f843 7d2c 	str.w	r7, [r3, #-44]!
 8015cc8:	4628      	mov	r0, r5
 8015cca:	9300      	str	r3, [sp, #0]
 8015ccc:	4621      	mov	r1, r4
 8015cce:	4623      	mov	r3, r4
 8015cd0:	f7f7 f8f4 	bl	800cebc <_Unwind_VRS_Set>
 8015cd4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8015cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cdc:	f1ba 0f00 	cmp.w	sl, #0
 8015ce0:	d042      	beq.n	8015d68 <__gxx_personality_v0+0x254>
 8015ce2:	461c      	mov	r4, r3
 8015ce4:	4691      	mov	r9, r2
 8015ce6:	2603      	movs	r6, #3
 8015ce8:	2c00      	cmp	r4, #0
 8015cea:	f2c0 80cd 	blt.w	8015e88 <__gxx_personality_v0+0x374>
 8015cee:	ab12      	add	r3, sp, #72	; 0x48
 8015cf0:	2100      	movs	r1, #0
 8015cf2:	f843 7d28 	str.w	r7, [r3, #-40]!
 8015cf6:	460a      	mov	r2, r1
 8015cf8:	9300      	str	r3, [sp, #0]
 8015cfa:	4628      	mov	r0, r5
 8015cfc:	460b      	mov	r3, r1
 8015cfe:	f7f7 f8dd 	bl	800cebc <_Unwind_VRS_Set>
 8015d02:	aa12      	add	r2, sp, #72	; 0x48
 8015d04:	2100      	movs	r1, #0
 8015d06:	f842 4d24 	str.w	r4, [r2, #-36]!
 8015d0a:	460b      	mov	r3, r1
 8015d0c:	9200      	str	r2, [sp, #0]
 8015d0e:	4628      	mov	r0, r5
 8015d10:	2201      	movs	r2, #1
 8015d12:	f7f7 f8d3 	bl	800cebc <_Unwind_VRS_Set>
 8015d16:	ac0a      	add	r4, sp, #40	; 0x28
 8015d18:	2100      	movs	r1, #0
 8015d1a:	460b      	mov	r3, r1
 8015d1c:	9400      	str	r4, [sp, #0]
 8015d1e:	220f      	movs	r2, #15
 8015d20:	4628      	mov	r0, r5
 8015d22:	f7f7 f8a3 	bl	800ce6c <_Unwind_VRS_Get>
 8015d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d28:	9400      	str	r4, [sp, #0]
 8015d2a:	f003 0301 	and.w	r3, r3, #1
 8015d2e:	2100      	movs	r1, #0
 8015d30:	ea4a 0403 	orr.w	r4, sl, r3
 8015d34:	4628      	mov	r0, r5
 8015d36:	460b      	mov	r3, r1
 8015d38:	220f      	movs	r2, #15
 8015d3a:	940a      	str	r4, [sp, #40]	; 0x28
 8015d3c:	f7f7 f8be 	bl	800cebc <_Unwind_VRS_Set>
 8015d40:	2e02      	cmp	r6, #2
 8015d42:	d069      	beq.n	8015e18 <__gxx_personality_v0+0x304>
 8015d44:	2007      	movs	r0, #7
 8015d46:	b013      	add	sp, #76	; 0x4c
 8015d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d4e:	4413      	add	r3, r2
 8015d50:	429c      	cmp	r4, r3
 8015d52:	d313      	bcc.n	8015d7c <__gxx_personality_v0+0x268>
 8015d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d56:	459a      	cmp	sl, r3
 8015d58:	f4ff af2d 	bcc.w	8015bb6 <__gxx_personality_v0+0xa2>
 8015d5c:	e766      	b.n	8015c2c <__gxx_personality_v0+0x118>
 8015d5e:	f018 0f08 	tst.w	r8, #8
 8015d62:	d104      	bne.n	8015d6e <__gxx_personality_v0+0x25a>
 8015d64:	2e01      	cmp	r6, #1
 8015d66:	d1bf      	bne.n	8015ce8 <__gxx_personality_v0+0x1d4>
 8015d68:	4638      	mov	r0, r7
 8015d6a:	f000 fa09 	bl	8016180 <__cxa_call_terminate>
 8015d6e:	2e01      	cmp	r6, #1
 8015d70:	f000 80e1 	beq.w	8015f36 <__gxx_personality_v0+0x422>
 8015d74:	2c00      	cmp	r4, #0
 8015d76:	daba      	bge.n	8015cee <__gxx_personality_v0+0x1da>
 8015d78:	f000 f902 	bl	8015f80 <_ZSt10unexpectedv>
 8015d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	f43f aed7 	beq.w	8015b32 <__gxx_personality_v0+0x1e>
 8015d84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015d86:	eb03 0a02 	add.w	sl, r3, r2
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	f000 80ba 	beq.w	8015f04 <__gxx_personality_v0+0x3f0>
 8015d90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d92:	3801      	subs	r0, #1
 8015d94:	4418      	add	r0, r3
 8015d96:	f1ba 0f00 	cmp.w	sl, #0
 8015d9a:	f43f aeca 	beq.w	8015b32 <__gxx_personality_v0+0x1e>
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	f000 80b4 	beq.w	8015f0c <__gxx_personality_v0+0x3f8>
 8015da4:	f018 0308 	ands.w	r3, r8, #8
 8015da8:	9305      	str	r3, [sp, #20]
 8015daa:	f000 80b1 	beq.w	8015f10 <__gxx_personality_v0+0x3fc>
 8015dae:	2247      	movs	r2, #71	; 0x47
 8015db0:	234e      	movs	r3, #78	; 0x4e
 8015db2:	2155      	movs	r1, #85	; 0x55
 8015db4:	703a      	strb	r2, [r7, #0]
 8015db6:	707b      	strb	r3, [r7, #1]
 8015db8:	2243      	movs	r2, #67	; 0x43
 8015dba:	2346      	movs	r3, #70	; 0x46
 8015dbc:	70b9      	strb	r1, [r7, #2]
 8015dbe:	70fa      	strb	r2, [r7, #3]
 8015dc0:	214f      	movs	r1, #79	; 0x4f
 8015dc2:	2252      	movs	r2, #82	; 0x52
 8015dc4:	713b      	strb	r3, [r7, #4]
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	7179      	strb	r1, [r7, #5]
 8015dca:	71ba      	strb	r2, [r7, #6]
 8015dcc:	71fb      	strb	r3, [r7, #7]
 8015dce:	2300      	movs	r3, #0
 8015dd0:	469b      	mov	fp, r3
 8015dd2:	9504      	str	r5, [sp, #16]
 8015dd4:	a908      	add	r1, sp, #32
 8015dd6:	f7ff fdbf 	bl	8015958 <_ZL12read_sleb128PKhPl>
 8015dda:	a909      	add	r1, sp, #36	; 0x24
 8015ddc:	4604      	mov	r4, r0
 8015dde:	f7ff fdbb 	bl	8015958 <_ZL12read_sleb128PKhPl>
 8015de2:	9b08      	ldr	r3, [sp, #32]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d032      	beq.n	8015e4e <__gxx_personality_v0+0x33a>
 8015de8:	dd34      	ble.n	8015e54 <__gxx_personality_v0+0x340>
 8015dea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8015dee:	28ff      	cmp	r0, #255	; 0xff
 8015df0:	d06c      	beq.n	8015ecc <__gxx_personality_v0+0x3b8>
 8015df2:	f000 0207 	and.w	r2, r0, #7
 8015df6:	2a04      	cmp	r2, #4
 8015df8:	f63f aea6 	bhi.w	8015b48 <__gxx_personality_v0+0x34>
 8015dfc:	a101      	add	r1, pc, #4	; (adr r1, 8015e04 <__gxx_personality_v0+0x2f0>)
 8015dfe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015e02:	bf00      	nop
 8015e04:	08015e49 	.word	0x08015e49
 8015e08:	08015b49 	.word	0x08015b49
 8015e0c:	08015e43 	.word	0x08015e43
 8015e10:	08015e49 	.word	0x08015e49
 8015e14:	08015e23 	.word	0x08015e23
 8015e18:	4638      	mov	r0, r7
 8015e1a:	f000 f929 	bl	8016070 <__cxa_begin_cleanup>
 8015e1e:	2007      	movs	r0, #7
 8015e20:	e68f      	b.n	8015b42 <__gxx_personality_v0+0x2e>
 8015e22:	00db      	lsls	r3, r3, #3
 8015e24:	425b      	negs	r3, r3
 8015e26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015e2a:	441a      	add	r2, r3
 8015e2c:	ab0a      	add	r3, sp, #40	; 0x28
 8015e2e:	f7ff fdab 	bl	8015988 <_ZL28read_encoded_value_with_basehjPKhPj>
 8015e32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015e34:	b329      	cbz	r1, 8015e82 <__gxx_personality_v0+0x36e>
 8015e36:	b9ef      	cbnz	r7, 8015e74 <__gxx_personality_v0+0x360>
 8015e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d071      	beq.n	8015f22 <__gxx_personality_v0+0x40e>
 8015e3e:	18e0      	adds	r0, r4, r3
 8015e40:	e7c8      	b.n	8015dd4 <__gxx_personality_v0+0x2c0>
 8015e42:	005b      	lsls	r3, r3, #1
 8015e44:	425b      	negs	r3, r3
 8015e46:	e7ee      	b.n	8015e26 <__gxx_personality_v0+0x312>
 8015e48:	009b      	lsls	r3, r3, #2
 8015e4a:	425b      	negs	r3, r3
 8015e4c:	e7eb      	b.n	8015e26 <__gxx_personality_v0+0x312>
 8015e4e:	f04f 0b01 	mov.w	fp, #1
 8015e52:	e7f1      	b.n	8015e38 <__gxx_personality_v0+0x324>
 8015e54:	b117      	cbz	r7, 8015e5c <__gxx_personality_v0+0x348>
 8015e56:	9a05      	ldr	r2, [sp, #20]
 8015e58:	2a00      	cmp	r2, #0
 8015e5a:	d039      	beq.n	8015ed0 <__gxx_personality_v0+0x3bc>
 8015e5c:	1c5a      	adds	r2, r3, #1
 8015e5e:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
 8015e62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015e64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8015e68:	2a00      	cmp	r2, #0
 8015e6a:	d1e5      	bne.n	8015e38 <__gxx_personality_v0+0x324>
 8015e6c:	9d04      	ldr	r5, [sp, #16]
 8015e6e:	461c      	mov	r4, r3
 8015e70:	2603      	movs	r6, #3
 8015e72:	e6df      	b.n	8015c34 <__gxx_personality_v0+0x120>
 8015e74:	4638      	mov	r0, r7
 8015e76:	2200      	movs	r2, #0
 8015e78:	ab06      	add	r3, sp, #24
 8015e7a:	f000 f8a1 	bl	8015fc0 <__cxa_type_match>
 8015e7e:	2800      	cmp	r0, #0
 8015e80:	d0da      	beq.n	8015e38 <__gxx_personality_v0+0x324>
 8015e82:	9d04      	ldr	r5, [sp, #16]
 8015e84:	9b08      	ldr	r3, [sp, #32]
 8015e86:	e7f2      	b.n	8015e6e <__gxx_personality_v0+0x35a>
 8015e88:	9a03      	ldr	r2, [sp, #12]
 8015e8a:	4649      	mov	r1, r9
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	f7ff fdf5 	bl	8015a7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8015e92:	4629      	mov	r1, r5
 8015e94:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8015e98:	f7ff fdca 	bl	8015a30 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8015e9c:	00a2      	lsls	r2, r4, #2
 8015e9e:	f082 0203 	eor.w	r2, r2, #3
 8015ea2:	43d2      	mvns	r2, r2
 8015ea4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015ea6:	900e      	str	r0, [sp, #56]	; 0x38
 8015ea8:	588b      	ldr	r3, [r1, r2]
 8015eaa:	eb01 0e02 	add.w	lr, r1, r2
 8015eae:	b133      	cbz	r3, 8015ebe <__gxx_personality_v0+0x3aa>
 8015eb0:	4672      	mov	r2, lr
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8015eb8:	3301      	adds	r3, #1
 8015eba:	2900      	cmp	r1, #0
 8015ebc:	d1fa      	bne.n	8015eb4 <__gxx_personality_v0+0x3a0>
 8015ebe:	2204      	movs	r2, #4
 8015ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ec2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015ec4:	f8c7 e034 	str.w	lr, [r7, #52]	; 0x34
 8015ec8:	633a      	str	r2, [r7, #48]	; 0x30
 8015eca:	e710      	b.n	8015cee <__gxx_personality_v0+0x1da>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	e7aa      	b.n	8015e26 <__gxx_personality_v0+0x312>
 8015ed0:	f103 0c01 	add.w	ip, r3, #1
 8015ed4:	ebcc 728c 	rsb	r2, ip, ip, lsl #30
 8015ed8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015eda:	9d06      	ldr	r5, [sp, #24]
 8015edc:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8015ee0:	950b      	str	r5, [sp, #44]	; 0x2c
 8015ee2:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8015ee6:	2900      	cmp	r1, #0
 8015ee8:	d0c0      	beq.n	8015e6c <__gxx_personality_v0+0x358>
 8015eea:	4429      	add	r1, r5
 8015eec:	4638      	mov	r0, r7
 8015eee:	2200      	movs	r2, #0
 8015ef0:	4633      	mov	r3, r6
 8015ef2:	f000 f865 	bl	8015fc0 <__cxa_type_match>
 8015ef6:	2800      	cmp	r0, #0
 8015ef8:	d19e      	bne.n	8015e38 <__gxx_personality_v0+0x324>
 8015efa:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8015efe:	2900      	cmp	r1, #0
 8015f00:	d1f3      	bne.n	8015eea <__gxx_personality_v0+0x3d6>
 8015f02:	e7be      	b.n	8015e82 <__gxx_personality_v0+0x36e>
 8015f04:	f1ba 0f00 	cmp.w	sl, #0
 8015f08:	f43f ae13 	beq.w	8015b32 <__gxx_personality_v0+0x1e>
 8015f0c:	2602      	movs	r6, #2
 8015f0e:	e690      	b.n	8015c32 <__gxx_personality_v0+0x11e>
 8015f10:	79fb      	ldrb	r3, [r7, #7]
 8015f12:	2b01      	cmp	r3, #1
 8015f14:	bf0c      	ite	eq
 8015f16:	f857 3c20 	ldreq.w	r3, [r7, #-32]
 8015f1a:	f107 0358 	addne.w	r3, r7, #88	; 0x58
 8015f1e:	9306      	str	r3, [sp, #24]
 8015f20:	e755      	b.n	8015dce <__gxx_personality_v0+0x2ba>
 8015f22:	465a      	mov	r2, fp
 8015f24:	9d04      	ldr	r5, [sp, #16]
 8015f26:	2a00      	cmp	r2, #0
 8015f28:	f43f ae03 	beq.w	8015b32 <__gxx_personality_v0+0x1e>
 8015f2c:	461c      	mov	r4, r3
 8015f2e:	2602      	movs	r6, #2
 8015f30:	e680      	b.n	8015c34 <__gxx_personality_v0+0x120>
 8015f32:	f000 f99f 	bl	8016274 <__cxa_begin_catch>
 8015f36:	f000 f815 	bl	8015f64 <_ZSt9terminatev>
 8015f3a:	bf00      	nop

08015f3c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015f3c:	b508      	push	{r3, lr}
 8015f3e:	4780      	blx	r0
 8015f40:	f000 fcd8 	bl	80168f4 <abort>
 8015f44:	f000 f996 	bl	8016274 <__cxa_begin_catch>
 8015f48:	f000 fcd4 	bl	80168f4 <abort>
 8015f4c:	460d      	mov	r5, r1
 8015f4e:	4604      	mov	r4, r0
 8015f50:	f000 f9d6 	bl	8016300 <__cxa_end_catch>
 8015f54:	3501      	adds	r5, #1
 8015f56:	d001      	beq.n	8015f5c <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 8015f58:	f000 f82c 	bl	8015fb4 <__cxa_end_cleanup>
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	f000 f91f 	bl	80161a0 <__cxa_call_unexpected>
 8015f62:	bf00      	nop

08015f64 <_ZSt9terminatev>:
 8015f64:	b508      	push	{r3, lr}
 8015f66:	4b03      	ldr	r3, [pc, #12]	; (8015f74 <_ZSt9terminatev+0x10>)
 8015f68:	6818      	ldr	r0, [r3, #0]
 8015f6a:	f3bf 8f5f 	dmb	sy
 8015f6e:	f7ff ffe5 	bl	8015f3c <_ZN10__cxxabiv111__terminateEPFvvE>
 8015f72:	bf00      	nop
 8015f74:	20000800 	.word	0x20000800

08015f78 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8015f78:	b508      	push	{r3, lr}
 8015f7a:	4780      	blx	r0
 8015f7c:	f7ff fff2 	bl	8015f64 <_ZSt9terminatev>

08015f80 <_ZSt10unexpectedv>:
 8015f80:	b508      	push	{r3, lr}
 8015f82:	4b03      	ldr	r3, [pc, #12]	; (8015f90 <_ZSt10unexpectedv+0x10>)
 8015f84:	6818      	ldr	r0, [r3, #0]
 8015f86:	f3bf 8f5f 	dmb	sy
 8015f8a:	f7ff fff5 	bl	8015f78 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8015f8e:	bf00      	nop
 8015f90:	20000804 	.word	0x20000804

08015f94 <_ZSt13get_terminatev>:
 8015f94:	4b02      	ldr	r3, [pc, #8]	; (8015fa0 <_ZSt13get_terminatev+0xc>)
 8015f96:	6818      	ldr	r0, [r3, #0]
 8015f98:	f3bf 8f5f 	dmb	sy
 8015f9c:	4770      	bx	lr
 8015f9e:	bf00      	nop
 8015fa0:	20000800 	.word	0x20000800

08015fa4 <_ZSt14get_unexpectedv>:
 8015fa4:	4b02      	ldr	r3, [pc, #8]	; (8015fb0 <_ZSt14get_unexpectedv+0xc>)
 8015fa6:	6818      	ldr	r0, [r3, #0]
 8015fa8:	f3bf 8f5f 	dmb	sy
 8015fac:	4770      	bx	lr
 8015fae:	bf00      	nop
 8015fb0:	20000804 	.word	0x20000804

08015fb4 <__cxa_end_cleanup>:
 8015fb4:	b41e      	push	{r1, r2, r3, r4}
 8015fb6:	f000 f88d 	bl	80160d4 <__gnu_end_cleanup>
 8015fba:	bc1e      	pop	{r1, r2, r3, r4}
 8015fbc:	f7f7 fb30 	bl	800d620 <_Unwind_Resume>

08015fc0 <__cxa_type_match>:
 8015fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fc2:	7802      	ldrb	r2, [r0, #0]
 8015fc4:	2a47      	cmp	r2, #71	; 0x47
 8015fc6:	b083      	sub	sp, #12
 8015fc8:	460e      	mov	r6, r1
 8015fca:	461f      	mov	r7, r3
 8015fcc:	d01a      	beq.n	8016004 <__cxa_type_match+0x44>
 8015fce:	2300      	movs	r3, #0
 8015fd0:	4c25      	ldr	r4, [pc, #148]	; (8016068 <__cxa_type_match+0xa8>)
 8015fd2:	9301      	str	r3, [sp, #4]
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	4620      	mov	r0, r4
 8015fd8:	689b      	ldr	r3, [r3, #8]
 8015fda:	4798      	blx	r3
 8015fdc:	b180      	cbz	r0, 8016000 <__cxa_type_match+0x40>
 8015fde:	9b01      	ldr	r3, [sp, #4]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	9301      	str	r3, [sp, #4]
 8015fe4:	2502      	movs	r5, #2
 8015fe6:	6833      	ldr	r3, [r6, #0]
 8015fe8:	4621      	mov	r1, r4
 8015fea:	4630      	mov	r0, r6
 8015fec:	691c      	ldr	r4, [r3, #16]
 8015fee:	aa01      	add	r2, sp, #4
 8015ff0:	2301      	movs	r3, #1
 8015ff2:	47a0      	blx	r4
 8015ff4:	b110      	cbz	r0, 8015ffc <__cxa_type_match+0x3c>
 8015ff6:	9b01      	ldr	r3, [sp, #4]
 8015ff8:	603b      	str	r3, [r7, #0]
 8015ffa:	4628      	mov	r0, r5
 8015ffc:	b003      	add	sp, #12
 8015ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016000:	2501      	movs	r5, #1
 8016002:	e7f0      	b.n	8015fe6 <__cxa_type_match+0x26>
 8016004:	7843      	ldrb	r3, [r0, #1]
 8016006:	2b4e      	cmp	r3, #78	; 0x4e
 8016008:	d1e1      	bne.n	8015fce <__cxa_type_match+0xe>
 801600a:	7883      	ldrb	r3, [r0, #2]
 801600c:	2b55      	cmp	r3, #85	; 0x55
 801600e:	d1de      	bne.n	8015fce <__cxa_type_match+0xe>
 8016010:	78c3      	ldrb	r3, [r0, #3]
 8016012:	2b43      	cmp	r3, #67	; 0x43
 8016014:	d019      	beq.n	801604a <__cxa_type_match+0x8a>
 8016016:	78c3      	ldrb	r3, [r0, #3]
 8016018:	2b43      	cmp	r3, #67	; 0x43
 801601a:	d1d8      	bne.n	8015fce <__cxa_type_match+0xe>
 801601c:	7903      	ldrb	r3, [r0, #4]
 801601e:	2b43      	cmp	r3, #67	; 0x43
 8016020:	d1d5      	bne.n	8015fce <__cxa_type_match+0xe>
 8016022:	7943      	ldrb	r3, [r0, #5]
 8016024:	2b2b      	cmp	r3, #43	; 0x2b
 8016026:	d1d2      	bne.n	8015fce <__cxa_type_match+0xe>
 8016028:	7983      	ldrb	r3, [r0, #6]
 801602a:	2b2b      	cmp	r3, #43	; 0x2b
 801602c:	d1cf      	bne.n	8015fce <__cxa_type_match+0xe>
 801602e:	79c3      	ldrb	r3, [r0, #7]
 8016030:	2b01      	cmp	r3, #1
 8016032:	d8cc      	bhi.n	8015fce <__cxa_type_match+0xe>
 8016034:	d004      	beq.n	8016040 <__cxa_type_match+0x80>
 8016036:	f850 4c20 	ldr.w	r4, [r0, #-32]
 801603a:	3058      	adds	r0, #88	; 0x58
 801603c:	9001      	str	r0, [sp, #4]
 801603e:	e7c9      	b.n	8015fd4 <__cxa_type_match+0x14>
 8016040:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8016044:	f850 4c78 	ldr.w	r4, [r0, #-120]
 8016048:	e7f8      	b.n	801603c <__cxa_type_match+0x7c>
 801604a:	7903      	ldrb	r3, [r0, #4]
 801604c:	2b46      	cmp	r3, #70	; 0x46
 801604e:	d1e2      	bne.n	8016016 <__cxa_type_match+0x56>
 8016050:	7943      	ldrb	r3, [r0, #5]
 8016052:	2b4f      	cmp	r3, #79	; 0x4f
 8016054:	d1df      	bne.n	8016016 <__cxa_type_match+0x56>
 8016056:	7983      	ldrb	r3, [r0, #6]
 8016058:	2b52      	cmp	r3, #82	; 0x52
 801605a:	d1dc      	bne.n	8016016 <__cxa_type_match+0x56>
 801605c:	79c3      	ldrb	r3, [r0, #7]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d1d9      	bne.n	8016016 <__cxa_type_match+0x56>
 8016062:	9301      	str	r3, [sp, #4]
 8016064:	4c01      	ldr	r4, [pc, #4]	; (801606c <__cxa_type_match+0xac>)
 8016066:	e7b5      	b.n	8015fd4 <__cxa_type_match+0x14>
 8016068:	0801d9c0 	.word	0x0801d9c0
 801606c:	0801d968 	.word	0x0801d968

08016070 <__cxa_begin_cleanup>:
 8016070:	b510      	push	{r4, lr}
 8016072:	4604      	mov	r4, r0
 8016074:	f000 fa28 	bl	80164c8 <__cxa_get_globals>
 8016078:	7823      	ldrb	r3, [r4, #0]
 801607a:	2b47      	cmp	r3, #71	; 0x47
 801607c:	f1a4 0220 	sub.w	r2, r4, #32
 8016080:	d004      	beq.n	801608c <__cxa_begin_cleanup+0x1c>
 8016082:	6883      	ldr	r3, [r0, #8]
 8016084:	bb23      	cbnz	r3, 80160d0 <__cxa_begin_cleanup+0x60>
 8016086:	6082      	str	r2, [r0, #8]
 8016088:	2001      	movs	r0, #1
 801608a:	bd10      	pop	{r4, pc}
 801608c:	7863      	ldrb	r3, [r4, #1]
 801608e:	2b4e      	cmp	r3, #78	; 0x4e
 8016090:	d1f7      	bne.n	8016082 <__cxa_begin_cleanup+0x12>
 8016092:	78a3      	ldrb	r3, [r4, #2]
 8016094:	2b55      	cmp	r3, #85	; 0x55
 8016096:	d1f4      	bne.n	8016082 <__cxa_begin_cleanup+0x12>
 8016098:	78e3      	ldrb	r3, [r4, #3]
 801609a:	2b43      	cmp	r3, #67	; 0x43
 801609c:	d1f1      	bne.n	8016082 <__cxa_begin_cleanup+0x12>
 801609e:	7923      	ldrb	r3, [r4, #4]
 80160a0:	2b43      	cmp	r3, #67	; 0x43
 80160a2:	d1ee      	bne.n	8016082 <__cxa_begin_cleanup+0x12>
 80160a4:	7963      	ldrb	r3, [r4, #5]
 80160a6:	2b2b      	cmp	r3, #43	; 0x2b
 80160a8:	d1eb      	bne.n	8016082 <__cxa_begin_cleanup+0x12>
 80160aa:	79a3      	ldrb	r3, [r4, #6]
 80160ac:	2b2b      	cmp	r3, #43	; 0x2b
 80160ae:	d1e8      	bne.n	8016082 <__cxa_begin_cleanup+0x12>
 80160b0:	79e3      	ldrb	r3, [r4, #7]
 80160b2:	2b01      	cmp	r3, #1
 80160b4:	d8e5      	bhi.n	8016082 <__cxa_begin_cleanup+0x12>
 80160b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80160ba:	3301      	adds	r3, #1
 80160bc:	2b01      	cmp	r3, #1
 80160be:	f844 3c04 	str.w	r3, [r4, #-4]
 80160c2:	d1e1      	bne.n	8016088 <__cxa_begin_cleanup+0x18>
 80160c4:	6883      	ldr	r3, [r0, #8]
 80160c6:	f844 3c08 	str.w	r3, [r4, #-8]
 80160ca:	6082      	str	r2, [r0, #8]
 80160cc:	2001      	movs	r0, #1
 80160ce:	bd10      	pop	{r4, pc}
 80160d0:	f7ff ff48 	bl	8015f64 <_ZSt9terminatev>

080160d4 <__gnu_end_cleanup>:
 80160d4:	b508      	push	{r3, lr}
 80160d6:	f000 f9f7 	bl	80164c8 <__cxa_get_globals>
 80160da:	6883      	ldr	r3, [r0, #8]
 80160dc:	b383      	cbz	r3, 8016140 <__gnu_end_cleanup+0x6c>
 80160de:	f893 2020 	ldrb.w	r2, [r3, #32]
 80160e2:	2a47      	cmp	r2, #71	; 0x47
 80160e4:	d004      	beq.n	80160f0 <__gnu_end_cleanup+0x1c>
 80160e6:	2200      	movs	r2, #0
 80160e8:	6082      	str	r2, [r0, #8]
 80160ea:	f103 0020 	add.w	r0, r3, #32
 80160ee:	bd08      	pop	{r3, pc}
 80160f0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80160f4:	2a4e      	cmp	r2, #78	; 0x4e
 80160f6:	d1f6      	bne.n	80160e6 <__gnu_end_cleanup+0x12>
 80160f8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80160fc:	2a55      	cmp	r2, #85	; 0x55
 80160fe:	d1f2      	bne.n	80160e6 <__gnu_end_cleanup+0x12>
 8016100:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8016104:	2a43      	cmp	r2, #67	; 0x43
 8016106:	d1ee      	bne.n	80160e6 <__gnu_end_cleanup+0x12>
 8016108:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801610c:	2a43      	cmp	r2, #67	; 0x43
 801610e:	d1ea      	bne.n	80160e6 <__gnu_end_cleanup+0x12>
 8016110:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8016114:	2a2b      	cmp	r2, #43	; 0x2b
 8016116:	d1e6      	bne.n	80160e6 <__gnu_end_cleanup+0x12>
 8016118:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801611c:	2a2b      	cmp	r2, #43	; 0x2b
 801611e:	d1e2      	bne.n	80160e6 <__gnu_end_cleanup+0x12>
 8016120:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8016124:	2a01      	cmp	r2, #1
 8016126:	d8de      	bhi.n	80160e6 <__gnu_end_cleanup+0x12>
 8016128:	69da      	ldr	r2, [r3, #28]
 801612a:	3a01      	subs	r2, #1
 801612c:	61da      	str	r2, [r3, #28]
 801612e:	2a00      	cmp	r2, #0
 8016130:	d1db      	bne.n	80160ea <__gnu_end_cleanup+0x16>
 8016132:	699a      	ldr	r2, [r3, #24]
 8016134:	6082      	str	r2, [r0, #8]
 8016136:	2200      	movs	r2, #0
 8016138:	619a      	str	r2, [r3, #24]
 801613a:	f103 0020 	add.w	r0, r3, #32
 801613e:	bd08      	pop	{r3, pc}
 8016140:	f7ff ff10 	bl	8015f64 <_ZSt9terminatev>

08016144 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8016144:	7803      	ldrb	r3, [r0, #0]
 8016146:	2b47      	cmp	r3, #71	; 0x47
 8016148:	d001      	beq.n	801614e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 801614a:	2000      	movs	r0, #0
 801614c:	4770      	bx	lr
 801614e:	7843      	ldrb	r3, [r0, #1]
 8016150:	2b4e      	cmp	r3, #78	; 0x4e
 8016152:	d1fa      	bne.n	801614a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8016154:	7883      	ldrb	r3, [r0, #2]
 8016156:	2b55      	cmp	r3, #85	; 0x55
 8016158:	d1f7      	bne.n	801614a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801615a:	78c3      	ldrb	r3, [r0, #3]
 801615c:	2b43      	cmp	r3, #67	; 0x43
 801615e:	d1f4      	bne.n	801614a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8016160:	7903      	ldrb	r3, [r0, #4]
 8016162:	2b43      	cmp	r3, #67	; 0x43
 8016164:	d1f1      	bne.n	801614a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8016166:	7943      	ldrb	r3, [r0, #5]
 8016168:	2b2b      	cmp	r3, #43	; 0x2b
 801616a:	d1ee      	bne.n	801614a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801616c:	7983      	ldrb	r3, [r0, #6]
 801616e:	2b2b      	cmp	r3, #43	; 0x2b
 8016170:	d1eb      	bne.n	801614a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8016172:	79c0      	ldrb	r0, [r0, #7]
 8016174:	2801      	cmp	r0, #1
 8016176:	bf8c      	ite	hi
 8016178:	2000      	movhi	r0, #0
 801617a:	2001      	movls	r0, #1
 801617c:	4770      	bx	lr
 801617e:	bf00      	nop

08016180 <__cxa_call_terminate>:
 8016180:	b510      	push	{r4, lr}
 8016182:	b130      	cbz	r0, 8016192 <__cxa_call_terminate+0x12>
 8016184:	4604      	mov	r4, r0
 8016186:	f000 f875 	bl	8016274 <__cxa_begin_catch>
 801618a:	4620      	mov	r0, r4
 801618c:	f7ff ffda 	bl	8016144 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8016190:	b908      	cbnz	r0, 8016196 <__cxa_call_terminate+0x16>
 8016192:	f7ff fee7 	bl	8015f64 <_ZSt9terminatev>
 8016196:	f854 0c14 	ldr.w	r0, [r4, #-20]
 801619a:	f7ff fecf 	bl	8015f3c <_ZN10__cxxabiv111__terminateEPFvvE>
 801619e:	bf00      	nop

080161a0 <__cxa_call_unexpected>:
 80161a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a4:	b083      	sub	sp, #12
 80161a6:	4604      	mov	r4, r0
 80161a8:	f7ff ffcc 	bl	8016144 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80161ac:	b168      	cbz	r0, 80161ca <__cxa_call_unexpected+0x2a>
 80161ae:	f854 5c18 	ldr.w	r5, [r4, #-24]
 80161b2:	f854 8c14 	ldr.w	r8, [r4, #-20]
 80161b6:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
 80161ba:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80161bc:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80161be:	4620      	mov	r0, r4
 80161c0:	f000 f858 	bl	8016274 <__cxa_begin_catch>
 80161c4:	4628      	mov	r0, r5
 80161c6:	f7ff fed7 	bl	8015f78 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 80161ca:	4620      	mov	r0, r4
 80161cc:	f000 f852 	bl	8016274 <__cxa_begin_catch>
 80161d0:	f7ff fed6 	bl	8015f80 <_ZSt10unexpectedv>
 80161d4:	f000 f84e 	bl	8016274 <__cxa_begin_catch>
 80161d8:	f7ff fec4 	bl	8015f64 <_ZSt9terminatev>
 80161dc:	f000 f84a 	bl	8016274 <__cxa_begin_catch>
 80161e0:	f000 f96e 	bl	80164c0 <__cxa_get_globals_fast>
 80161e4:	6803      	ldr	r3, [r0, #0]
 80161e6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80161ea:	2a01      	cmp	r2, #1
 80161ec:	d02f      	beq.n	801624e <__cxa_call_unexpected+0xae>
 80161ee:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80161f2:	2500      	movs	r5, #0
 80161f4:	9200      	str	r2, [sp, #0]
 80161f6:	f027 0703 	bic.w	r7, r7, #3
 80161fa:	f103 0a20 	add.w	sl, r3, #32
 80161fe:	46ab      	mov	fp, r5
 8016200:	45cb      	cmp	fp, r9
 8016202:	da1a      	bge.n	801623a <__cxa_call_unexpected+0x9a>
 8016204:	6834      	ldr	r4, [r6, #0]
 8016206:	b104      	cbz	r4, 801620a <__cxa_call_unexpected+0x6a>
 8016208:	4434      	add	r4, r6
 801620a:	4650      	mov	r0, sl
 801620c:	4621      	mov	r1, r4
 801620e:	2200      	movs	r2, #0
 8016210:	466b      	mov	r3, sp
 8016212:	f7ff fed5 	bl	8015fc0 <__cxa_type_match>
 8016216:	b9f8      	cbnz	r0, 8016258 <__cxa_call_unexpected+0xb8>
 8016218:	6823      	ldr	r3, [r4, #0]
 801621a:	4913      	ldr	r1, [pc, #76]	; (8016268 <__cxa_call_unexpected+0xc8>)
 801621c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8016220:	aa02      	add	r2, sp, #8
 8016222:	2301      	movs	r3, #1
 8016224:	f842 0d04 	str.w	r0, [r2, #-4]!
 8016228:	4620      	mov	r0, r4
 801622a:	47e0      	blx	ip
 801622c:	2800      	cmp	r0, #0
 801622e:	bf18      	it	ne
 8016230:	2501      	movne	r5, #1
 8016232:	f10b 0b01 	add.w	fp, fp, #1
 8016236:	443e      	add	r6, r7
 8016238:	e7e2      	b.n	8016200 <__cxa_call_unexpected+0x60>
 801623a:	b155      	cbz	r5, 8016252 <__cxa_call_unexpected+0xb2>
 801623c:	2004      	movs	r0, #4
 801623e:	f000 f9dd 	bl	80165fc <__cxa_allocate_exception>
 8016242:	4b0a      	ldr	r3, [pc, #40]	; (801626c <__cxa_call_unexpected+0xcc>)
 8016244:	6003      	str	r3, [r0, #0]
 8016246:	4908      	ldr	r1, [pc, #32]	; (8016268 <__cxa_call_unexpected+0xc8>)
 8016248:	4a09      	ldr	r2, [pc, #36]	; (8016270 <__cxa_call_unexpected+0xd0>)
 801624a:	f000 f8c1 	bl	80163d0 <__cxa_throw>
 801624e:	681a      	ldr	r2, [r3, #0]
 8016250:	e7cf      	b.n	80161f2 <__cxa_call_unexpected+0x52>
 8016252:	4640      	mov	r0, r8
 8016254:	f7ff fe72 	bl	8015f3c <_ZN10__cxxabiv111__terminateEPFvvE>
 8016258:	f000 f8fa 	bl	8016450 <__cxa_rethrow>
 801625c:	f000 f850 	bl	8016300 <__cxa_end_catch>
 8016260:	f000 f84e 	bl	8016300 <__cxa_end_catch>
 8016264:	f7ff fea6 	bl	8015fb4 <__cxa_end_cleanup>
 8016268:	0801da00 	.word	0x0801da00
 801626c:	0801d9d0 	.word	0x0801d9d0
 8016270:	080164d1 	.word	0x080164d1

08016274 <__cxa_begin_catch>:
 8016274:	b538      	push	{r3, r4, r5, lr}
 8016276:	4604      	mov	r4, r0
 8016278:	f000 f926 	bl	80164c8 <__cxa_get_globals>
 801627c:	7821      	ldrb	r1, [r4, #0]
 801627e:	6803      	ldr	r3, [r0, #0]
 8016280:	2947      	cmp	r1, #71	; 0x47
 8016282:	f1a4 0220 	sub.w	r2, r4, #32
 8016286:	d005      	beq.n	8016294 <__cxa_begin_catch+0x20>
 8016288:	2b00      	cmp	r3, #0
 801628a:	d131      	bne.n	80162f0 <__cxa_begin_catch+0x7c>
 801628c:	461c      	mov	r4, r3
 801628e:	6002      	str	r2, [r0, #0]
 8016290:	4620      	mov	r0, r4
 8016292:	bd38      	pop	{r3, r4, r5, pc}
 8016294:	7861      	ldrb	r1, [r4, #1]
 8016296:	294e      	cmp	r1, #78	; 0x4e
 8016298:	d1f6      	bne.n	8016288 <__cxa_begin_catch+0x14>
 801629a:	78a1      	ldrb	r1, [r4, #2]
 801629c:	2955      	cmp	r1, #85	; 0x55
 801629e:	d1f3      	bne.n	8016288 <__cxa_begin_catch+0x14>
 80162a0:	78e1      	ldrb	r1, [r4, #3]
 80162a2:	2943      	cmp	r1, #67	; 0x43
 80162a4:	d1f0      	bne.n	8016288 <__cxa_begin_catch+0x14>
 80162a6:	7921      	ldrb	r1, [r4, #4]
 80162a8:	2943      	cmp	r1, #67	; 0x43
 80162aa:	d1ed      	bne.n	8016288 <__cxa_begin_catch+0x14>
 80162ac:	7961      	ldrb	r1, [r4, #5]
 80162ae:	292b      	cmp	r1, #43	; 0x2b
 80162b0:	d1ea      	bne.n	8016288 <__cxa_begin_catch+0x14>
 80162b2:	79a1      	ldrb	r1, [r4, #6]
 80162b4:	292b      	cmp	r1, #43	; 0x2b
 80162b6:	d1e7      	bne.n	8016288 <__cxa_begin_catch+0x14>
 80162b8:	79e1      	ldrb	r1, [r4, #7]
 80162ba:	2901      	cmp	r1, #1
 80162bc:	d8e4      	bhi.n	8016288 <__cxa_begin_catch+0x14>
 80162be:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 80162c2:	2d00      	cmp	r5, #0
 80162c4:	db11      	blt.n	80162ea <__cxa_begin_catch+0x76>
 80162c6:	3501      	adds	r5, #1
 80162c8:	6841      	ldr	r1, [r0, #4]
 80162ca:	f844 5c0c 	str.w	r5, [r4, #-12]
 80162ce:	4293      	cmp	r3, r2
 80162d0:	f101 31ff 	add.w	r1, r1, #4294967295
 80162d4:	6041      	str	r1, [r0, #4]
 80162d6:	bf1c      	itt	ne
 80162d8:	f844 3c10 	strne.w	r3, [r4, #-16]
 80162dc:	6002      	strne	r2, [r0, #0]
 80162de:	4620      	mov	r0, r4
 80162e0:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80162e2:	f7f6 fdbb 	bl	800ce5c <_Unwind_Complete>
 80162e6:	4620      	mov	r0, r4
 80162e8:	bd38      	pop	{r3, r4, r5, pc}
 80162ea:	f1c5 0501 	rsb	r5, r5, #1
 80162ee:	e7eb      	b.n	80162c8 <__cxa_begin_catch+0x54>
 80162f0:	f7ff fe38 	bl	8015f64 <_ZSt9terminatev>
 80162f4:	3101      	adds	r1, #1
 80162f6:	d001      	beq.n	80162fc <__cxa_begin_catch+0x88>
 80162f8:	f7ff fe5c 	bl	8015fb4 <__cxa_end_cleanup>
 80162fc:	f7ff ff50 	bl	80161a0 <__cxa_call_unexpected>

08016300 <__cxa_end_catch>:
 8016300:	b508      	push	{r3, lr}
 8016302:	f000 f8dd 	bl	80164c0 <__cxa_get_globals_fast>
 8016306:	4602      	mov	r2, r0
 8016308:	6800      	ldr	r0, [r0, #0]
 801630a:	2800      	cmp	r0, #0
 801630c:	d03d      	beq.n	801638a <__cxa_end_catch+0x8a>
 801630e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016312:	2b47      	cmp	r3, #71	; 0x47
 8016314:	d006      	beq.n	8016324 <__cxa_end_catch+0x24>
 8016316:	2300      	movs	r3, #0
 8016318:	6013      	str	r3, [r2, #0]
 801631a:	3020      	adds	r0, #32
 801631c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016320:	f7f6 bd9e 	b.w	800ce60 <_Unwind_DeleteException>
 8016324:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8016328:	2b4e      	cmp	r3, #78	; 0x4e
 801632a:	d1f4      	bne.n	8016316 <__cxa_end_catch+0x16>
 801632c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8016330:	2b55      	cmp	r3, #85	; 0x55
 8016332:	d1f0      	bne.n	8016316 <__cxa_end_catch+0x16>
 8016334:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8016338:	2b43      	cmp	r3, #67	; 0x43
 801633a:	d1ec      	bne.n	8016316 <__cxa_end_catch+0x16>
 801633c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016340:	2b43      	cmp	r3, #67	; 0x43
 8016342:	d1e8      	bne.n	8016316 <__cxa_end_catch+0x16>
 8016344:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016348:	2b2b      	cmp	r3, #43	; 0x2b
 801634a:	d1e4      	bne.n	8016316 <__cxa_end_catch+0x16>
 801634c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8016350:	2b2b      	cmp	r3, #43	; 0x2b
 8016352:	d1e0      	bne.n	8016316 <__cxa_end_catch+0x16>
 8016354:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8016358:	2b01      	cmp	r3, #1
 801635a:	d8dc      	bhi.n	8016316 <__cxa_end_catch+0x16>
 801635c:	6943      	ldr	r3, [r0, #20]
 801635e:	2b00      	cmp	r3, #0
 8016360:	db05      	blt.n	801636e <__cxa_end_catch+0x6e>
 8016362:	3b01      	subs	r3, #1
 8016364:	d008      	beq.n	8016378 <__cxa_end_catch+0x78>
 8016366:	1c5a      	adds	r2, r3, #1
 8016368:	d00d      	beq.n	8016386 <__cxa_end_catch+0x86>
 801636a:	6143      	str	r3, [r0, #20]
 801636c:	bd08      	pop	{r3, pc}
 801636e:	3301      	adds	r3, #1
 8016370:	d1fb      	bne.n	801636a <__cxa_end_catch+0x6a>
 8016372:	6901      	ldr	r1, [r0, #16]
 8016374:	6011      	str	r1, [r2, #0]
 8016376:	e7f8      	b.n	801636a <__cxa_end_catch+0x6a>
 8016378:	6903      	ldr	r3, [r0, #16]
 801637a:	6013      	str	r3, [r2, #0]
 801637c:	3020      	adds	r0, #32
 801637e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016382:	f7f6 bd6d 	b.w	800ce60 <_Unwind_DeleteException>
 8016386:	f7ff fded 	bl	8015f64 <_ZSt9terminatev>
 801638a:	bd08      	pop	{r3, pc}

0801638c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 801638c:	2801      	cmp	r0, #1
 801638e:	b510      	push	{r4, lr}
 8016390:	d81a      	bhi.n	80163c8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 8016392:	f3bf 8f5f 	dmb	sy
 8016396:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 801639a:	e853 2f00 	ldrex	r2, [r3]
 801639e:	3a01      	subs	r2, #1
 80163a0:	e843 2000 	strex	r0, r2, [r3]
 80163a4:	2800      	cmp	r0, #0
 80163a6:	d1f8      	bne.n	801639a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 80163a8:	f3bf 8f5f 	dmb	sy
 80163ac:	b95a      	cbnz	r2, 80163c6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 80163ae:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80163b2:	f101 0458 	add.w	r4, r1, #88	; 0x58
 80163b6:	b10b      	cbz	r3, 80163bc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 80163b8:	4620      	mov	r0, r4
 80163ba:	4798      	blx	r3
 80163bc:	4620      	mov	r0, r4
 80163be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163c2:	f000 b947 	b.w	8016654 <__cxa_free_exception>
 80163c6:	bd10      	pop	{r4, pc}
 80163c8:	f851 0c14 	ldr.w	r0, [r1, #-20]
 80163cc:	f7ff fdb6 	bl	8015f3c <_ZN10__cxxabiv111__terminateEPFvvE>

080163d0 <__cxa_throw>:
 80163d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163d2:	4604      	mov	r4, r0
 80163d4:	460f      	mov	r7, r1
 80163d6:	4616      	mov	r6, r2
 80163d8:	f000 f876 	bl	80164c8 <__cxa_get_globals>
 80163dc:	6843      	ldr	r3, [r0, #4]
 80163de:	2501      	movs	r5, #1
 80163e0:	442b      	add	r3, r5
 80163e2:	6043      	str	r3, [r0, #4]
 80163e4:	f844 7c78 	str.w	r7, [r4, #-120]
 80163e8:	f844 6c74 	str.w	r6, [r4, #-116]
 80163ec:	f844 5c80 	str.w	r5, [r4, #-128]
 80163f0:	f7ff fdd8 	bl	8015fa4 <_ZSt14get_unexpectedv>
 80163f4:	f844 0c70 	str.w	r0, [r4, #-112]
 80163f8:	f7ff fdcc 	bl	8015f94 <_ZSt13get_terminatev>
 80163fc:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 8016400:	2243      	movs	r2, #67	; 0x43
 8016402:	232b      	movs	r3, #43	; 0x2b
 8016404:	f04f 0c47 	mov.w	ip, #71	; 0x47
 8016408:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 801640c:	490f      	ldr	r1, [pc, #60]	; (801644c <__cxa_throw+0x7c>)
 801640e:	f844 0c6c 	str.w	r0, [r4, #-108]
 8016412:	2755      	movs	r7, #85	; 0x55
 8016414:	2600      	movs	r6, #0
 8016416:	f804 cc58 	strb.w	ip, [r4, #-88]
 801641a:	f804 ec57 	strb.w	lr, [r4, #-87]
 801641e:	f844 1c50 	str.w	r1, [r4, #-80]
 8016422:	f804 2c55 	strb.w	r2, [r4, #-85]
 8016426:	f804 2c54 	strb.w	r2, [r4, #-84]
 801642a:	f804 3c53 	strb.w	r3, [r4, #-83]
 801642e:	f804 3c52 	strb.w	r3, [r4, #-82]
 8016432:	f804 7c56 	strb.w	r7, [r4, #-86]
 8016436:	f804 6c51 	strb.w	r6, [r4, #-81]
 801643a:	4628      	mov	r0, r5
 801643c:	f7f7 f8de 	bl	800d5fc <_Unwind_RaiseException>
 8016440:	4628      	mov	r0, r5
 8016442:	f7ff ff17 	bl	8016274 <__cxa_begin_catch>
 8016446:	f7ff fd8d 	bl	8015f64 <_ZSt9terminatev>
 801644a:	bf00      	nop
 801644c:	0801638d 	.word	0x0801638d

08016450 <__cxa_rethrow>:
 8016450:	b510      	push	{r4, lr}
 8016452:	f000 f839 	bl	80164c8 <__cxa_get_globals>
 8016456:	6842      	ldr	r2, [r0, #4]
 8016458:	6803      	ldr	r3, [r0, #0]
 801645a:	3201      	adds	r2, #1
 801645c:	6042      	str	r2, [r0, #4]
 801645e:	b16b      	cbz	r3, 801647c <__cxa_rethrow+0x2c>
 8016460:	f893 2020 	ldrb.w	r2, [r3, #32]
 8016464:	2a47      	cmp	r2, #71	; 0x47
 8016466:	d00b      	beq.n	8016480 <__cxa_rethrow+0x30>
 8016468:	2200      	movs	r2, #0
 801646a:	6002      	str	r2, [r0, #0]
 801646c:	f103 0420 	add.w	r4, r3, #32
 8016470:	4620      	mov	r0, r4
 8016472:	f7f7 f8e7 	bl	800d644 <_Unwind_Resume_or_Rethrow>
 8016476:	4620      	mov	r0, r4
 8016478:	f7ff fefc 	bl	8016274 <__cxa_begin_catch>
 801647c:	f7ff fd72 	bl	8015f64 <_ZSt9terminatev>
 8016480:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8016484:	2a4e      	cmp	r2, #78	; 0x4e
 8016486:	d1ef      	bne.n	8016468 <__cxa_rethrow+0x18>
 8016488:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801648c:	2a55      	cmp	r2, #85	; 0x55
 801648e:	d1eb      	bne.n	8016468 <__cxa_rethrow+0x18>
 8016490:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8016494:	2a43      	cmp	r2, #67	; 0x43
 8016496:	d1e7      	bne.n	8016468 <__cxa_rethrow+0x18>
 8016498:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801649c:	2a43      	cmp	r2, #67	; 0x43
 801649e:	d1e3      	bne.n	8016468 <__cxa_rethrow+0x18>
 80164a0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80164a4:	2a2b      	cmp	r2, #43	; 0x2b
 80164a6:	d1df      	bne.n	8016468 <__cxa_rethrow+0x18>
 80164a8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80164ac:	2a2b      	cmp	r2, #43	; 0x2b
 80164ae:	d1db      	bne.n	8016468 <__cxa_rethrow+0x18>
 80164b0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80164b4:	2a01      	cmp	r2, #1
 80164b6:	d8d7      	bhi.n	8016468 <__cxa_rethrow+0x18>
 80164b8:	695a      	ldr	r2, [r3, #20]
 80164ba:	4252      	negs	r2, r2
 80164bc:	615a      	str	r2, [r3, #20]
 80164be:	e7d5      	b.n	801646c <__cxa_rethrow+0x1c>

080164c0 <__cxa_get_globals_fast>:
 80164c0:	4800      	ldr	r0, [pc, #0]	; (80164c4 <__cxa_get_globals_fast+0x4>)
 80164c2:	4770      	bx	lr
 80164c4:	200027f0 	.word	0x200027f0

080164c8 <__cxa_get_globals>:
 80164c8:	4800      	ldr	r0, [pc, #0]	; (80164cc <__cxa_get_globals+0x4>)
 80164ca:	4770      	bx	lr
 80164cc:	200027f0 	.word	0x200027f0

080164d0 <_ZNSt13bad_exceptionD1Ev>:
 80164d0:	4770      	bx	lr
 80164d2:	bf00      	nop

080164d4 <_ZNKSt13bad_exception4whatEv>:
 80164d4:	4800      	ldr	r0, [pc, #0]	; (80164d8 <_ZNKSt13bad_exception4whatEv+0x4>)
 80164d6:	4770      	bx	lr
 80164d8:	0801d9ac 	.word	0x0801d9ac

080164dc <_ZNSt13bad_exceptionD0Ev>:
 80164dc:	b510      	push	{r4, lr}
 80164de:	4604      	mov	r4, r0
 80164e0:	f000 f94c 	bl	801677c <_ZdlPv>
 80164e4:	4620      	mov	r0, r4
 80164e6:	bd10      	pop	{r4, pc}

080164e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 80164e8:	b570      	push	{r4, r5, r6, lr}
 80164ea:	4b3d      	ldr	r3, [pc, #244]	; (80165e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80164ec:	781a      	ldrb	r2, [r3, #0]
 80164ee:	b082      	sub	sp, #8
 80164f0:	2a00      	cmp	r2, #0
 80164f2:	d136      	bne.n	8016562 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7a>
 80164f4:	2401      	movs	r4, #1
 80164f6:	701c      	strb	r4, [r3, #0]
 80164f8:	f000 f9d2 	bl	80168a0 <__cxa_current_exception_type>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	d05c      	beq.n	80165ba <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd2>
 8016500:	6840      	ldr	r0, [r0, #4]
 8016502:	4d38      	ldr	r5, [pc, #224]	; (80165e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8016504:	7803      	ldrb	r3, [r0, #0]
 8016506:	2b2a      	cmp	r3, #42	; 0x2a
 8016508:	ab02      	add	r3, sp, #8
 801650a:	bf0c      	ite	eq
 801650c:	1904      	addeq	r4, r0, r4
 801650e:	4604      	movne	r4, r0
 8016510:	2100      	movs	r1, #0
 8016512:	f04f 32ff 	mov.w	r2, #4294967295
 8016516:	f843 2d04 	str.w	r2, [r3, #-4]!
 801651a:	4620      	mov	r0, r4
 801651c:	460a      	mov	r2, r1
 801651e:	f7f6 fa57 	bl	800c9d0 <__cxa_demangle>
 8016522:	682b      	ldr	r3, [r5, #0]
 8016524:	4606      	mov	r6, r0
 8016526:	68db      	ldr	r3, [r3, #12]
 8016528:	482f      	ldr	r0, [pc, #188]	; (80165e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 801652a:	2101      	movs	r1, #1
 801652c:	2230      	movs	r2, #48	; 0x30
 801652e:	f000 fbe9 	bl	8016d04 <fwrite>
 8016532:	9b01      	ldr	r3, [sp, #4]
 8016534:	b17b      	cbz	r3, 8016556 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
 8016536:	682b      	ldr	r3, [r5, #0]
 8016538:	4620      	mov	r0, r4
 801653a:	68d9      	ldr	r1, [r3, #12]
 801653c:	f000 fa1c 	bl	8016978 <fputs>
 8016540:	682b      	ldr	r3, [r5, #0]
 8016542:	482a      	ldr	r0, [pc, #168]	; (80165ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8016544:	68db      	ldr	r3, [r3, #12]
 8016546:	2101      	movs	r1, #1
 8016548:	2202      	movs	r2, #2
 801654a:	f000 fbdb 	bl	8016d04 <fwrite>
 801654e:	9b01      	ldr	r3, [sp, #4]
 8016550:	b18b      	cbz	r3, 8016576 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
 8016552:	f7ff ff7d 	bl	8016450 <__cxa_rethrow>
 8016556:	682b      	ldr	r3, [r5, #0]
 8016558:	4630      	mov	r0, r6
 801655a:	68d9      	ldr	r1, [r3, #12]
 801655c:	f000 fa0c 	bl	8016978 <fputs>
 8016560:	e7ee      	b.n	8016540 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x58>
 8016562:	4b20      	ldr	r3, [pc, #128]	; (80165e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8016564:	4822      	ldr	r0, [pc, #136]	; (80165f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2101      	movs	r1, #1
 801656a:	68db      	ldr	r3, [r3, #12]
 801656c:	221d      	movs	r2, #29
 801656e:	f000 fbc9 	bl	8016d04 <fwrite>
 8016572:	f000 f9bf 	bl	80168f4 <abort>
 8016576:	4630      	mov	r0, r6
 8016578:	f000 fbdc 	bl	8016d34 <free>
 801657c:	e7e9      	b.n	8016552 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6a>
 801657e:	2901      	cmp	r1, #1
 8016580:	460c      	mov	r4, r1
 8016582:	d127      	bne.n	80165d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xec>
 8016584:	f7ff fe76 	bl	8016274 <__cxa_begin_catch>
 8016588:	6803      	ldr	r3, [r0, #0]
 801658a:	689b      	ldr	r3, [r3, #8]
 801658c:	4798      	blx	r3
 801658e:	682b      	ldr	r3, [r5, #0]
 8016590:	4606      	mov	r6, r0
 8016592:	68db      	ldr	r3, [r3, #12]
 8016594:	4817      	ldr	r0, [pc, #92]	; (80165f4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 8016596:	4621      	mov	r1, r4
 8016598:	220b      	movs	r2, #11
 801659a:	f000 fbb3 	bl	8016d04 <fwrite>
 801659e:	682b      	ldr	r3, [r5, #0]
 80165a0:	4630      	mov	r0, r6
 80165a2:	68d9      	ldr	r1, [r3, #12]
 80165a4:	f000 f9e8 	bl	8016978 <fputs>
 80165a8:	682b      	ldr	r3, [r5, #0]
 80165aa:	200a      	movs	r0, #10
 80165ac:	68d9      	ldr	r1, [r3, #12]
 80165ae:	f000 f9a9 	bl	8016904 <fputc>
 80165b2:	f7ff fea5 	bl	8016300 <__cxa_end_catch>
 80165b6:	f000 f99d 	bl	80168f4 <abort>
 80165ba:	4b0a      	ldr	r3, [pc, #40]	; (80165e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 80165bc:	480e      	ldr	r0, [pc, #56]	; (80165f8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4621      	mov	r1, r4
 80165c2:	68db      	ldr	r3, [r3, #12]
 80165c4:	222d      	movs	r2, #45	; 0x2d
 80165c6:	f000 fb9d 	bl	8016d04 <fwrite>
 80165ca:	e7f4      	b.n	80165b6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
 80165cc:	f7ff fe98 	bl	8016300 <__cxa_end_catch>
 80165d0:	f7ff fcf0 	bl	8015fb4 <__cxa_end_cleanup>
 80165d4:	f7ff fe4e 	bl	8016274 <__cxa_begin_catch>
 80165d8:	f7ff fe92 	bl	8016300 <__cxa_end_catch>
 80165dc:	e7eb      	b.n	80165b6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
 80165de:	bf00      	nop
 80165e0:	200027fc 	.word	0x200027fc
 80165e4:	20000c30 	.word	0x20000c30
 80165e8:	0801da2c 	.word	0x0801da2c
 80165ec:	0801da60 	.word	0x0801da60
 80165f0:	0801da0c 	.word	0x0801da0c
 80165f4:	0801da94 	.word	0x0801da94
 80165f8:	0801da64 	.word	0x0801da64

080165fc <__cxa_allocate_exception>:
 80165fc:	b538      	push	{r3, r4, r5, lr}
 80165fe:	f100 0580 	add.w	r5, r0, #128	; 0x80
 8016602:	4628      	mov	r0, r5
 8016604:	f000 fb8e 	bl	8016d24 <malloc>
 8016608:	4604      	mov	r4, r0
 801660a:	b138      	cbz	r0, 801661c <__cxa_allocate_exception+0x20>
 801660c:	4620      	mov	r0, r4
 801660e:	2100      	movs	r1, #0
 8016610:	2280      	movs	r2, #128	; 0x80
 8016612:	f000 ff09 	bl	8017428 <memset>
 8016616:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801661a:	bd38      	pop	{r3, r4, r5, pc}
 801661c:	4a0b      	ldr	r2, [pc, #44]	; (801664c <__cxa_allocate_exception+0x50>)
 801661e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8016622:	6811      	ldr	r1, [r2, #0]
 8016624:	d807      	bhi.n	8016636 <__cxa_allocate_exception+0x3a>
 8016626:	460b      	mov	r3, r1
 8016628:	07d8      	lsls	r0, r3, #31
 801662a:	d506      	bpl.n	801663a <__cxa_allocate_exception+0x3e>
 801662c:	3401      	adds	r4, #1
 801662e:	2c04      	cmp	r4, #4
 8016630:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016634:	d1f8      	bne.n	8016628 <__cxa_allocate_exception+0x2c>
 8016636:	f7ff fc95 	bl	8015f64 <_ZSt9terminatev>
 801663a:	2301      	movs	r3, #1
 801663c:	40a3      	lsls	r3, r4
 801663e:	4804      	ldr	r0, [pc, #16]	; (8016650 <__cxa_allocate_exception+0x54>)
 8016640:	4319      	orrs	r1, r3
 8016642:	6011      	str	r1, [r2, #0]
 8016644:	eb00 2444 	add.w	r4, r0, r4, lsl #9
 8016648:	e7e0      	b.n	801660c <__cxa_allocate_exception+0x10>
 801664a:	bf00      	nop
 801664c:	20002800 	.word	0x20002800
 8016650:	20002808 	.word	0x20002808

08016654 <__cxa_free_exception>:
 8016654:	4b09      	ldr	r3, [pc, #36]	; (801667c <__cxa_free_exception+0x28>)
 8016656:	4298      	cmp	r0, r3
 8016658:	d303      	bcc.n	8016662 <__cxa_free_exception+0xe>
 801665a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 801665e:	4290      	cmp	r0, r2
 8016660:	d302      	bcc.n	8016668 <__cxa_free_exception+0x14>
 8016662:	3880      	subs	r0, #128	; 0x80
 8016664:	f000 bb66 	b.w	8016d34 <free>
 8016668:	4905      	ldr	r1, [pc, #20]	; (8016680 <__cxa_free_exception+0x2c>)
 801666a:	1ac0      	subs	r0, r0, r3
 801666c:	0a40      	lsrs	r0, r0, #9
 801666e:	680b      	ldr	r3, [r1, #0]
 8016670:	2201      	movs	r2, #1
 8016672:	4082      	lsls	r2, r0
 8016674:	ea23 0302 	bic.w	r3, r3, r2
 8016678:	600b      	str	r3, [r1, #0]
 801667a:	4770      	bx	lr
 801667c:	20002808 	.word	0x20002808
 8016680:	20002800 	.word	0x20002800

08016684 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8016684:	b570      	push	{r4, r5, r6, lr}
 8016686:	6803      	ldr	r3, [r0, #0]
 8016688:	b084      	sub	sp, #16
 801668a:	2400      	movs	r4, #0
 801668c:	699e      	ldr	r6, [r3, #24]
 801668e:	9400      	str	r4, [sp, #0]
 8016690:	2310      	movs	r3, #16
 8016692:	4615      	mov	r5, r2
 8016694:	9302      	str	r3, [sp, #8]
 8016696:	6812      	ldr	r2, [r2, #0]
 8016698:	f88d 4004 	strb.w	r4, [sp, #4]
 801669c:	466b      	mov	r3, sp
 801669e:	9403      	str	r4, [sp, #12]
 80166a0:	47b0      	blx	r6
 80166a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80166a6:	f003 0306 	and.w	r3, r3, #6
 80166aa:	2b06      	cmp	r3, #6
 80166ac:	bf03      	ittte	eq
 80166ae:	9b00      	ldreq	r3, [sp, #0]
 80166b0:	602b      	streq	r3, [r5, #0]
 80166b2:	2001      	moveq	r0, #1
 80166b4:	4620      	movne	r0, r4
 80166b6:	b004      	add	sp, #16
 80166b8:	bd70      	pop	{r4, r5, r6, pc}
 80166ba:	bf00      	nop

080166bc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80166bc:	9800      	ldr	r0, [sp, #0]
 80166be:	4290      	cmp	r0, r2
 80166c0:	bf0c      	ite	eq
 80166c2:	2006      	moveq	r0, #6
 80166c4:	2001      	movne	r0, #1
 80166c6:	4770      	bx	lr

080166c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80166c8:	b510      	push	{r4, lr}
 80166ca:	4b03      	ldr	r3, [pc, #12]	; (80166d8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80166cc:	6003      	str	r3, [r0, #0]
 80166ce:	4604      	mov	r4, r0
 80166d0:	f000 f8f4 	bl	80168bc <_ZNSt9type_infoD1Ev>
 80166d4:	4620      	mov	r0, r4
 80166d6:	bd10      	pop	{r4, pc}
 80166d8:	0801daa8 	.word	0x0801daa8

080166dc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80166dc:	b510      	push	{r4, lr}
 80166de:	4b05      	ldr	r3, [pc, #20]	; (80166f4 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 80166e0:	6003      	str	r3, [r0, #0]
 80166e2:	4604      	mov	r4, r0
 80166e4:	f000 f8ea 	bl	80168bc <_ZNSt9type_infoD1Ev>
 80166e8:	4620      	mov	r0, r4
 80166ea:	f000 f847 	bl	801677c <_ZdlPv>
 80166ee:	4620      	mov	r0, r4
 80166f0:	bd10      	pop	{r4, pc}
 80166f2:	bf00      	nop
 80166f4:	0801daa8 	.word	0x0801daa8

080166f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80166f8:	b538      	push	{r3, r4, r5, lr}
 80166fa:	4615      	mov	r5, r2
 80166fc:	461c      	mov	r4, r3
 80166fe:	f000 f8e3 	bl	80168c8 <_ZNKSt9type_infoeqERKS_>
 8016702:	b120      	cbz	r0, 801670e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8016704:	2208      	movs	r2, #8
 8016706:	2306      	movs	r3, #6
 8016708:	6025      	str	r5, [r4, #0]
 801670a:	60e2      	str	r2, [r4, #12]
 801670c:	7123      	strb	r3, [r4, #4]
 801670e:	bd38      	pop	{r3, r4, r5, pc}

08016710 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8016710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016714:	4616      	mov	r6, r2
 8016716:	461c      	mov	r4, r3
 8016718:	4607      	mov	r7, r0
 801671a:	460d      	mov	r5, r1
 801671c:	f000 f8d4 	bl	80168c8 <_ZNKSt9type_infoeqERKS_>
 8016720:	b908      	cbnz	r0, 8016726 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 8016722:	2c03      	cmp	r4, #3
 8016724:	d901      	bls.n	801672a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 8016726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801672a:	682b      	ldr	r3, [r5, #0]
 801672c:	4639      	mov	r1, r7
 801672e:	4632      	mov	r2, r6
 8016730:	4628      	mov	r0, r5
 8016732:	695b      	ldr	r3, [r3, #20]
 8016734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016738:	4718      	bx	r3
 801673a:	bf00      	nop

0801673c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801673c:	b570      	push	{r4, r5, r6, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	4616      	mov	r6, r2
 8016742:	9c06      	ldr	r4, [sp, #24]
 8016744:	9908      	ldr	r1, [sp, #32]
 8016746:	428c      	cmp	r4, r1
 8016748:	4605      	mov	r5, r0
 801674a:	d00c      	beq.n	8016766 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 801674c:	4628      	mov	r0, r5
 801674e:	4619      	mov	r1, r3
 8016750:	f000 f8ba 	bl	80168c8 <_ZNKSt9type_infoeqERKS_>
 8016754:	b120      	cbz	r0, 8016760 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8016756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016758:	2301      	movs	r3, #1
 801675a:	6014      	str	r4, [r2, #0]
 801675c:	7116      	strb	r6, [r2, #4]
 801675e:	7193      	strb	r3, [r2, #6]
 8016760:	2000      	movs	r0, #0
 8016762:	b002      	add	sp, #8
 8016764:	bd70      	pop	{r4, r5, r6, pc}
 8016766:	9907      	ldr	r1, [sp, #28]
 8016768:	9301      	str	r3, [sp, #4]
 801676a:	f000 f8ad 	bl	80168c8 <_ZNKSt9type_infoeqERKS_>
 801676e:	9b01      	ldr	r3, [sp, #4]
 8016770:	2800      	cmp	r0, #0
 8016772:	d0eb      	beq.n	801674c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x10>
 8016774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016776:	715e      	strb	r6, [r3, #5]
 8016778:	e7f2      	b.n	8016760 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 801677a:	bf00      	nop

0801677c <_ZdlPv>:
 801677c:	f000 bada 	b.w	8016d34 <free>

08016780 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8016780:	b510      	push	{r4, lr}
 8016782:	4b03      	ldr	r3, [pc, #12]	; (8016790 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8016784:	6003      	str	r3, [r0, #0]
 8016786:	4604      	mov	r4, r0
 8016788:	f7ff ff9e 	bl	80166c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801678c:	4620      	mov	r0, r4
 801678e:	bd10      	pop	{r4, pc}
 8016790:	0801e2f8 	.word	0x0801e2f8

08016794 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8016794:	b510      	push	{r4, lr}
 8016796:	4b05      	ldr	r3, [pc, #20]	; (80167ac <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8016798:	6003      	str	r3, [r0, #0]
 801679a:	4604      	mov	r4, r0
 801679c:	f7ff ff94 	bl	80166c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80167a0:	4620      	mov	r0, r4
 80167a2:	f7ff ffeb 	bl	801677c <_ZdlPv>
 80167a6:	4620      	mov	r0, r4
 80167a8:	bd10      	pop	{r4, pc}
 80167aa:	bf00      	nop
 80167ac:	0801e2f8 	.word	0x0801e2f8

080167b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80167b0:	b570      	push	{r4, r5, r6, lr}
 80167b2:	b082      	sub	sp, #8
 80167b4:	460d      	mov	r5, r1
 80167b6:	9c06      	ldr	r4, [sp, #24]
 80167b8:	4294      	cmp	r4, r2
 80167ba:	4606      	mov	r6, r0
 80167bc:	d009      	beq.n	80167d2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 80167be:	68b0      	ldr	r0, [r6, #8]
 80167c0:	6806      	ldr	r6, [r0, #0]
 80167c2:	9406      	str	r4, [sp, #24]
 80167c4:	6a34      	ldr	r4, [r6, #32]
 80167c6:	4629      	mov	r1, r5
 80167c8:	46a4      	mov	ip, r4
 80167ca:	b002      	add	sp, #8
 80167cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167d0:	4760      	bx	ip
 80167d2:	4619      	mov	r1, r3
 80167d4:	9201      	str	r2, [sp, #4]
 80167d6:	9300      	str	r3, [sp, #0]
 80167d8:	f000 f876 	bl	80168c8 <_ZNKSt9type_infoeqERKS_>
 80167dc:	9b00      	ldr	r3, [sp, #0]
 80167de:	9a01      	ldr	r2, [sp, #4]
 80167e0:	2800      	cmp	r0, #0
 80167e2:	d0ec      	beq.n	80167be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80167e4:	2006      	movs	r0, #6
 80167e6:	b002      	add	sp, #8
 80167e8:	bd70      	pop	{r4, r5, r6, pc}
 80167ea:	bf00      	nop

080167ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80167ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167f0:	b081      	sub	sp, #4
 80167f2:	460c      	mov	r4, r1
 80167f4:	4619      	mov	r1, r3
 80167f6:	461f      	mov	r7, r3
 80167f8:	4691      	mov	r9, r2
 80167fa:	4683      	mov	fp, r0
 80167fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80167fe:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8016802:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8016806:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016808:	f000 f85e 	bl	80168c8 <_ZNKSt9type_infoeqERKS_>
 801680c:	b170      	cbz	r0, 801682c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 801680e:	2c00      	cmp	r4, #0
 8016810:	602e      	str	r6, [r5, #0]
 8016812:	f885 9004 	strb.w	r9, [r5, #4]
 8016816:	db1f      	blt.n	8016858 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
 8016818:	4434      	add	r4, r6
 801681a:	45a0      	cmp	r8, r4
 801681c:	bf0c      	ite	eq
 801681e:	2406      	moveq	r4, #6
 8016820:	2401      	movne	r4, #1
 8016822:	71ac      	strb	r4, [r5, #6]
 8016824:	2000      	movs	r0, #0
 8016826:	b001      	add	sp, #4
 8016828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801682c:	4546      	cmp	r6, r8
 801682e:	d018      	beq.n	8016862 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
 8016830:	f8db 0008 	ldr.w	r0, [fp, #8]
 8016834:	f8d0 e000 	ldr.w	lr, [r0]
 8016838:	960a      	str	r6, [sp, #40]	; 0x28
 801683a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801683e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8016842:	950d      	str	r5, [sp, #52]	; 0x34
 8016844:	4621      	mov	r1, r4
 8016846:	f8de 401c 	ldr.w	r4, [lr, #28]
 801684a:	464a      	mov	r2, r9
 801684c:	463b      	mov	r3, r7
 801684e:	46a4      	mov	ip, r4
 8016850:	b001      	add	sp, #4
 8016852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016856:	4760      	bx	ip
 8016858:	3402      	adds	r4, #2
 801685a:	d1e3      	bne.n	8016824 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801685c:	2301      	movs	r3, #1
 801685e:	71ab      	strb	r3, [r5, #6]
 8016860:	e7e0      	b.n	8016824 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8016862:	4658      	mov	r0, fp
 8016864:	4651      	mov	r1, sl
 8016866:	f000 f82f 	bl	80168c8 <_ZNKSt9type_infoeqERKS_>
 801686a:	2800      	cmp	r0, #0
 801686c:	d0e0      	beq.n	8016830 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 801686e:	f885 9005 	strb.w	r9, [r5, #5]
 8016872:	e7d7      	b.n	8016824 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>

08016874 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8016874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016878:	4607      	mov	r7, r0
 801687a:	460e      	mov	r6, r1
 801687c:	4615      	mov	r5, r2
 801687e:	461c      	mov	r4, r3
 8016880:	f7ff ff3a 	bl	80166f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8016884:	b108      	cbz	r0, 801688a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 8016886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801688a:	68b8      	ldr	r0, [r7, #8]
 801688c:	6807      	ldr	r7, [r0, #0]
 801688e:	4623      	mov	r3, r4
 8016890:	69bc      	ldr	r4, [r7, #24]
 8016892:	4631      	mov	r1, r6
 8016894:	462a      	mov	r2, r5
 8016896:	46a4      	mov	ip, r4
 8016898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801689c:	4760      	bx	ip
 801689e:	bf00      	nop

080168a0 <__cxa_current_exception_type>:
 80168a0:	b508      	push	{r3, lr}
 80168a2:	f7ff fe11 	bl	80164c8 <__cxa_get_globals>
 80168a6:	6800      	ldr	r0, [r0, #0]
 80168a8:	b130      	cbz	r0, 80168b8 <__cxa_current_exception_type+0x18>
 80168aa:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80168ae:	2b01      	cmp	r3, #1
 80168b0:	bf04      	itt	eq
 80168b2:	6800      	ldreq	r0, [r0, #0]
 80168b4:	3878      	subeq	r0, #120	; 0x78
 80168b6:	6800      	ldr	r0, [r0, #0]
 80168b8:	bd08      	pop	{r3, pc}
 80168ba:	bf00      	nop

080168bc <_ZNSt9type_infoD1Ev>:
 80168bc:	4770      	bx	lr
 80168be:	bf00      	nop

080168c0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80168c0:	2000      	movs	r0, #0
 80168c2:	4770      	bx	lr

080168c4 <_ZNKSt9type_info15__is_function_pEv>:
 80168c4:	2000      	movs	r0, #0
 80168c6:	4770      	bx	lr

080168c8 <_ZNKSt9type_infoeqERKS_>:
 80168c8:	4281      	cmp	r1, r0
 80168ca:	d011      	beq.n	80168f0 <_ZNKSt9type_infoeqERKS_+0x28>
 80168cc:	b508      	push	{r3, lr}
 80168ce:	6840      	ldr	r0, [r0, #4]
 80168d0:	7803      	ldrb	r3, [r0, #0]
 80168d2:	2b2a      	cmp	r3, #42	; 0x2a
 80168d4:	d00a      	beq.n	80168ec <_ZNKSt9type_infoeqERKS_+0x24>
 80168d6:	6849      	ldr	r1, [r1, #4]
 80168d8:	780b      	ldrb	r3, [r1, #0]
 80168da:	2b2a      	cmp	r3, #42	; 0x2a
 80168dc:	bf08      	it	eq
 80168de:	3101      	addeq	r1, #1
 80168e0:	f7f7 f942 	bl	800db68 <strcmp>
 80168e4:	fab0 f080 	clz	r0, r0
 80168e8:	0940      	lsrs	r0, r0, #5
 80168ea:	bd08      	pop	{r3, pc}
 80168ec:	2000      	movs	r0, #0
 80168ee:	bd08      	pop	{r3, pc}
 80168f0:	2001      	movs	r0, #1
 80168f2:	4770      	bx	lr

080168f4 <abort>:
 80168f4:	b508      	push	{r3, lr}
 80168f6:	2006      	movs	r0, #6
 80168f8:	f001 f83e 	bl	8017978 <raise>
 80168fc:	2001      	movs	r0, #1
 80168fe:	f7f8 fa67 	bl	800edd0 <_exit>
 8016902:	bf00      	nop

08016904 <fputc>:
 8016904:	4b08      	ldr	r3, [pc, #32]	; (8016928 <fputc+0x24>)
 8016906:	b570      	push	{r4, r5, r6, lr}
 8016908:	681c      	ldr	r4, [r3, #0]
 801690a:	4606      	mov	r6, r0
 801690c:	460d      	mov	r5, r1
 801690e:	b124      	cbz	r4, 801691a <fputc+0x16>
 8016910:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016912:	b913      	cbnz	r3, 801691a <fputc+0x16>
 8016914:	4620      	mov	r0, r4
 8016916:	f003 fd33 	bl	801a380 <__sinit>
 801691a:	4620      	mov	r0, r4
 801691c:	4631      	mov	r1, r6
 801691e:	462a      	mov	r2, r5
 8016920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016924:	f000 bdd2 	b.w	80174cc <_putc_r>
 8016928:	20000c30 	.word	0x20000c30

0801692c <_fputs_r>:
 801692c:	b530      	push	{r4, r5, lr}
 801692e:	b087      	sub	sp, #28
 8016930:	4605      	mov	r5, r0
 8016932:	4608      	mov	r0, r1
 8016934:	4614      	mov	r4, r2
 8016936:	9101      	str	r1, [sp, #4]
 8016938:	f001 f862 	bl	8017a00 <strlen>
 801693c:	aa01      	add	r2, sp, #4
 801693e:	2301      	movs	r3, #1
 8016940:	9005      	str	r0, [sp, #20]
 8016942:	9002      	str	r0, [sp, #8]
 8016944:	9203      	str	r2, [sp, #12]
 8016946:	9304      	str	r3, [sp, #16]
 8016948:	b10d      	cbz	r5, 801694e <_fputs_r+0x22>
 801694a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801694c:	b183      	cbz	r3, 8016970 <_fputs_r+0x44>
 801694e:	89a3      	ldrh	r3, [r4, #12]
 8016950:	049a      	lsls	r2, r3, #18
 8016952:	d406      	bmi.n	8016962 <_fputs_r+0x36>
 8016954:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016956:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801695a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801695e:	81a3      	strh	r3, [r4, #12]
 8016960:	6662      	str	r2, [r4, #100]	; 0x64
 8016962:	4628      	mov	r0, r5
 8016964:	4621      	mov	r1, r4
 8016966:	aa03      	add	r2, sp, #12
 8016968:	f000 f80e 	bl	8016988 <__sfvwrite_r>
 801696c:	b007      	add	sp, #28
 801696e:	bd30      	pop	{r4, r5, pc}
 8016970:	4628      	mov	r0, r5
 8016972:	f003 fd05 	bl	801a380 <__sinit>
 8016976:	e7ea      	b.n	801694e <_fputs_r+0x22>

08016978 <fputs>:
 8016978:	4b02      	ldr	r3, [pc, #8]	; (8016984 <fputs+0xc>)
 801697a:	460a      	mov	r2, r1
 801697c:	4601      	mov	r1, r0
 801697e:	6818      	ldr	r0, [r3, #0]
 8016980:	f7ff bfd4 	b.w	801692c <_fputs_r>
 8016984:	20000c30 	.word	0x20000c30

08016988 <__sfvwrite_r>:
 8016988:	6893      	ldr	r3, [r2, #8]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d07a      	beq.n	8016a84 <__sfvwrite_r+0xfc>
 801698e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016992:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8016996:	f01e 0f08 	tst.w	lr, #8
 801699a:	b083      	sub	sp, #12
 801699c:	460c      	mov	r4, r1
 801699e:	4681      	mov	r9, r0
 80169a0:	4616      	mov	r6, r2
 80169a2:	d026      	beq.n	80169f2 <__sfvwrite_r+0x6a>
 80169a4:	690b      	ldr	r3, [r1, #16]
 80169a6:	b323      	cbz	r3, 80169f2 <__sfvwrite_r+0x6a>
 80169a8:	f00e 0802 	and.w	r8, lr, #2
 80169ac:	fa1f f088 	uxth.w	r0, r8
 80169b0:	6835      	ldr	r5, [r6, #0]
 80169b2:	b370      	cbz	r0, 8016a12 <__sfvwrite_r+0x8a>
 80169b4:	f04f 0a00 	mov.w	sl, #0
 80169b8:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8016c9c <__sfvwrite_r+0x314>
 80169bc:	46d0      	mov	r8, sl
 80169be:	45d8      	cmp	r8, fp
 80169c0:	4643      	mov	r3, r8
 80169c2:	4652      	mov	r2, sl
 80169c4:	bf28      	it	cs
 80169c6:	465b      	movcs	r3, fp
 80169c8:	4648      	mov	r0, r9
 80169ca:	f1b8 0f00 	cmp.w	r8, #0
 80169ce:	d053      	beq.n	8016a78 <__sfvwrite_r+0xf0>
 80169d0:	69e1      	ldr	r1, [r4, #28]
 80169d2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80169d4:	47b8      	blx	r7
 80169d6:	2800      	cmp	r0, #0
 80169d8:	dd73      	ble.n	8016ac2 <__sfvwrite_r+0x13a>
 80169da:	68b3      	ldr	r3, [r6, #8]
 80169dc:	1a1b      	subs	r3, r3, r0
 80169de:	4482      	add	sl, r0
 80169e0:	ebc0 0808 	rsb	r8, r0, r8
 80169e4:	60b3      	str	r3, [r6, #8]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d1e9      	bne.n	80169be <__sfvwrite_r+0x36>
 80169ea:	2000      	movs	r0, #0
 80169ec:	b003      	add	sp, #12
 80169ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169f2:	4648      	mov	r0, r9
 80169f4:	4621      	mov	r1, r4
 80169f6:	f002 fb39 	bl	801906c <__swsetup_r>
 80169fa:	2800      	cmp	r0, #0
 80169fc:	f040 8145 	bne.w	8016c8a <__sfvwrite_r+0x302>
 8016a00:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8016a04:	6835      	ldr	r5, [r6, #0]
 8016a06:	f00e 0802 	and.w	r8, lr, #2
 8016a0a:	fa1f f088 	uxth.w	r0, r8
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	d1d0      	bne.n	80169b4 <__sfvwrite_r+0x2c>
 8016a12:	f01e 0b01 	ands.w	fp, lr, #1
 8016a16:	d15d      	bne.n	8016ad4 <__sfvwrite_r+0x14c>
 8016a18:	46d8      	mov	r8, fp
 8016a1a:	f1b8 0f00 	cmp.w	r8, #0
 8016a1e:	d025      	beq.n	8016a6c <__sfvwrite_r+0xe4>
 8016a20:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8016a24:	68a7      	ldr	r7, [r4, #8]
 8016a26:	d02f      	beq.n	8016a88 <__sfvwrite_r+0x100>
 8016a28:	45b8      	cmp	r8, r7
 8016a2a:	46ba      	mov	sl, r7
 8016a2c:	f0c0 80a9 	bcc.w	8016b82 <__sfvwrite_r+0x1fa>
 8016a30:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8016a34:	f040 80b6 	bne.w	8016ba4 <__sfvwrite_r+0x21c>
 8016a38:	6820      	ldr	r0, [r4, #0]
 8016a3a:	4652      	mov	r2, sl
 8016a3c:	4659      	mov	r1, fp
 8016a3e:	f000 fc8f 	bl	8017360 <memmove>
 8016a42:	68a0      	ldr	r0, [r4, #8]
 8016a44:	6822      	ldr	r2, [r4, #0]
 8016a46:	1bc0      	subs	r0, r0, r7
 8016a48:	eb02 030a 	add.w	r3, r2, sl
 8016a4c:	60a0      	str	r0, [r4, #8]
 8016a4e:	6023      	str	r3, [r4, #0]
 8016a50:	4640      	mov	r0, r8
 8016a52:	68b3      	ldr	r3, [r6, #8]
 8016a54:	1a1b      	subs	r3, r3, r0
 8016a56:	4483      	add	fp, r0
 8016a58:	ebc0 0808 	rsb	r8, r0, r8
 8016a5c:	60b3      	str	r3, [r6, #8]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d0c3      	beq.n	80169ea <__sfvwrite_r+0x62>
 8016a62:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8016a66:	f1b8 0f00 	cmp.w	r8, #0
 8016a6a:	d1d9      	bne.n	8016a20 <__sfvwrite_r+0x98>
 8016a6c:	f8d5 b000 	ldr.w	fp, [r5]
 8016a70:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8016a74:	3508      	adds	r5, #8
 8016a76:	e7d0      	b.n	8016a1a <__sfvwrite_r+0x92>
 8016a78:	f8d5 a000 	ldr.w	sl, [r5]
 8016a7c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8016a80:	3508      	adds	r5, #8
 8016a82:	e79c      	b.n	80169be <__sfvwrite_r+0x36>
 8016a84:	2000      	movs	r0, #0
 8016a86:	4770      	bx	lr
 8016a88:	6820      	ldr	r0, [r4, #0]
 8016a8a:	6923      	ldr	r3, [r4, #16]
 8016a8c:	4298      	cmp	r0, r3
 8016a8e:	d803      	bhi.n	8016a98 <__sfvwrite_r+0x110>
 8016a90:	6962      	ldr	r2, [r4, #20]
 8016a92:	4590      	cmp	r8, r2
 8016a94:	f080 80b9 	bcs.w	8016c0a <__sfvwrite_r+0x282>
 8016a98:	4547      	cmp	r7, r8
 8016a9a:	bf28      	it	cs
 8016a9c:	4647      	movcs	r7, r8
 8016a9e:	463a      	mov	r2, r7
 8016aa0:	4659      	mov	r1, fp
 8016aa2:	f000 fc5d 	bl	8017360 <memmove>
 8016aa6:	68a3      	ldr	r3, [r4, #8]
 8016aa8:	6822      	ldr	r2, [r4, #0]
 8016aaa:	1bdb      	subs	r3, r3, r7
 8016aac:	443a      	add	r2, r7
 8016aae:	60a3      	str	r3, [r4, #8]
 8016ab0:	6022      	str	r2, [r4, #0]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d14a      	bne.n	8016b4c <__sfvwrite_r+0x1c4>
 8016ab6:	4648      	mov	r0, r9
 8016ab8:	4621      	mov	r1, r4
 8016aba:	f003 fbcd 	bl	801a258 <_fflush_r>
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	d044      	beq.n	8016b4c <__sfvwrite_r+0x1c4>
 8016ac2:	89a3      	ldrh	r3, [r4, #12]
 8016ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8016acc:	81a3      	strh	r3, [r4, #12]
 8016ace:	b003      	add	sp, #12
 8016ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ad4:	4680      	mov	r8, r0
 8016ad6:	9000      	str	r0, [sp, #0]
 8016ad8:	4683      	mov	fp, r0
 8016ada:	4682      	mov	sl, r0
 8016adc:	f1ba 0f00 	cmp.w	sl, #0
 8016ae0:	d02c      	beq.n	8016b3c <__sfvwrite_r+0x1b4>
 8016ae2:	9b00      	ldr	r3, [sp, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d050      	beq.n	8016b8a <__sfvwrite_r+0x202>
 8016ae8:	6820      	ldr	r0, [r4, #0]
 8016aea:	6921      	ldr	r1, [r4, #16]
 8016aec:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8016af0:	6962      	ldr	r2, [r4, #20]
 8016af2:	45d0      	cmp	r8, sl
 8016af4:	4643      	mov	r3, r8
 8016af6:	bf28      	it	cs
 8016af8:	4653      	movcs	r3, sl
 8016afa:	4288      	cmp	r0, r1
 8016afc:	461f      	mov	r7, r3
 8016afe:	d904      	bls.n	8016b0a <__sfvwrite_r+0x182>
 8016b00:	eb0e 0c02 	add.w	ip, lr, r2
 8016b04:	4563      	cmp	r3, ip
 8016b06:	f300 8092 	bgt.w	8016c2e <__sfvwrite_r+0x2a6>
 8016b0a:	4293      	cmp	r3, r2
 8016b0c:	db20      	blt.n	8016b50 <__sfvwrite_r+0x1c8>
 8016b0e:	4613      	mov	r3, r2
 8016b10:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8016b12:	69e1      	ldr	r1, [r4, #28]
 8016b14:	4648      	mov	r0, r9
 8016b16:	465a      	mov	r2, fp
 8016b18:	47b8      	blx	r7
 8016b1a:	1e07      	subs	r7, r0, #0
 8016b1c:	ddd1      	ble.n	8016ac2 <__sfvwrite_r+0x13a>
 8016b1e:	ebb8 0807 	subs.w	r8, r8, r7
 8016b22:	d025      	beq.n	8016b70 <__sfvwrite_r+0x1e8>
 8016b24:	68b3      	ldr	r3, [r6, #8]
 8016b26:	1bdb      	subs	r3, r3, r7
 8016b28:	44bb      	add	fp, r7
 8016b2a:	ebc7 0a0a 	rsb	sl, r7, sl
 8016b2e:	60b3      	str	r3, [r6, #8]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	f43f af5a 	beq.w	80169ea <__sfvwrite_r+0x62>
 8016b36:	f1ba 0f00 	cmp.w	sl, #0
 8016b3a:	d1d2      	bne.n	8016ae2 <__sfvwrite_r+0x15a>
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	f8d5 b000 	ldr.w	fp, [r5]
 8016b42:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8016b46:	9300      	str	r3, [sp, #0]
 8016b48:	3508      	adds	r5, #8
 8016b4a:	e7c7      	b.n	8016adc <__sfvwrite_r+0x154>
 8016b4c:	4638      	mov	r0, r7
 8016b4e:	e780      	b.n	8016a52 <__sfvwrite_r+0xca>
 8016b50:	461a      	mov	r2, r3
 8016b52:	4659      	mov	r1, fp
 8016b54:	9301      	str	r3, [sp, #4]
 8016b56:	f000 fc03 	bl	8017360 <memmove>
 8016b5a:	68a2      	ldr	r2, [r4, #8]
 8016b5c:	6821      	ldr	r1, [r4, #0]
 8016b5e:	9b01      	ldr	r3, [sp, #4]
 8016b60:	ebb8 0807 	subs.w	r8, r8, r7
 8016b64:	eba2 0203 	sub.w	r2, r2, r3
 8016b68:	440b      	add	r3, r1
 8016b6a:	60a2      	str	r2, [r4, #8]
 8016b6c:	6023      	str	r3, [r4, #0]
 8016b6e:	d1d9      	bne.n	8016b24 <__sfvwrite_r+0x19c>
 8016b70:	4648      	mov	r0, r9
 8016b72:	4621      	mov	r1, r4
 8016b74:	f003 fb70 	bl	801a258 <_fflush_r>
 8016b78:	2800      	cmp	r0, #0
 8016b7a:	d1a2      	bne.n	8016ac2 <__sfvwrite_r+0x13a>
 8016b7c:	f8cd 8000 	str.w	r8, [sp]
 8016b80:	e7d0      	b.n	8016b24 <__sfvwrite_r+0x19c>
 8016b82:	6820      	ldr	r0, [r4, #0]
 8016b84:	4647      	mov	r7, r8
 8016b86:	46c2      	mov	sl, r8
 8016b88:	e757      	b.n	8016a3a <__sfvwrite_r+0xb2>
 8016b8a:	4658      	mov	r0, fp
 8016b8c:	210a      	movs	r1, #10
 8016b8e:	4652      	mov	r2, sl
 8016b90:	f000 fb6a 	bl	8017268 <memchr>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	d073      	beq.n	8016c80 <__sfvwrite_r+0x2f8>
 8016b98:	3001      	adds	r0, #1
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	ebcb 0800 	rsb	r8, fp, r0
 8016ba0:	9300      	str	r3, [sp, #0]
 8016ba2:	e7a1      	b.n	8016ae8 <__sfvwrite_r+0x160>
 8016ba4:	6967      	ldr	r7, [r4, #20]
 8016ba6:	6921      	ldr	r1, [r4, #16]
 8016ba8:	6823      	ldr	r3, [r4, #0]
 8016baa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016bae:	1a5b      	subs	r3, r3, r1
 8016bb0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8016bb4:	1c58      	adds	r0, r3, #1
 8016bb6:	107f      	asrs	r7, r7, #1
 8016bb8:	4440      	add	r0, r8
 8016bba:	4287      	cmp	r7, r0
 8016bbc:	463a      	mov	r2, r7
 8016bbe:	bf3c      	itt	cc
 8016bc0:	4607      	movcc	r7, r0
 8016bc2:	463a      	movcc	r2, r7
 8016bc4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8016bc8:	9300      	str	r3, [sp, #0]
 8016bca:	d046      	beq.n	8016c5a <__sfvwrite_r+0x2d2>
 8016bcc:	4611      	mov	r1, r2
 8016bce:	4648      	mov	r0, r9
 8016bd0:	f000 f8b8 	bl	8016d44 <_malloc_r>
 8016bd4:	9b00      	ldr	r3, [sp, #0]
 8016bd6:	4682      	mov	sl, r0
 8016bd8:	2800      	cmp	r0, #0
 8016bda:	d059      	beq.n	8016c90 <__sfvwrite_r+0x308>
 8016bdc:	461a      	mov	r2, r3
 8016bde:	6921      	ldr	r1, [r4, #16]
 8016be0:	9300      	str	r3, [sp, #0]
 8016be2:	f7f6 ff23 	bl	800da2c <memcpy>
 8016be6:	89a2      	ldrh	r2, [r4, #12]
 8016be8:	9b00      	ldr	r3, [sp, #0]
 8016bea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8016bee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016bf2:	81a2      	strh	r2, [r4, #12]
 8016bf4:	eb0a 0003 	add.w	r0, sl, r3
 8016bf8:	1afb      	subs	r3, r7, r3
 8016bfa:	f8c4 a010 	str.w	sl, [r4, #16]
 8016bfe:	6167      	str	r7, [r4, #20]
 8016c00:	6020      	str	r0, [r4, #0]
 8016c02:	60a3      	str	r3, [r4, #8]
 8016c04:	4647      	mov	r7, r8
 8016c06:	46c2      	mov	sl, r8
 8016c08:	e717      	b.n	8016a3a <__sfvwrite_r+0xb2>
 8016c0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016c0e:	4543      	cmp	r3, r8
 8016c10:	bf28      	it	cs
 8016c12:	4643      	movcs	r3, r8
 8016c14:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8016c16:	fb93 f3f2 	sdiv	r3, r3, r2
 8016c1a:	4648      	mov	r0, r9
 8016c1c:	fb03 f302 	mul.w	r3, r3, r2
 8016c20:	69e1      	ldr	r1, [r4, #28]
 8016c22:	465a      	mov	r2, fp
 8016c24:	47b8      	blx	r7
 8016c26:	2800      	cmp	r0, #0
 8016c28:	f73f af13 	bgt.w	8016a52 <__sfvwrite_r+0xca>
 8016c2c:	e749      	b.n	8016ac2 <__sfvwrite_r+0x13a>
 8016c2e:	4662      	mov	r2, ip
 8016c30:	4659      	mov	r1, fp
 8016c32:	f8cd c004 	str.w	ip, [sp, #4]
 8016c36:	f000 fb93 	bl	8017360 <memmove>
 8016c3a:	6823      	ldr	r3, [r4, #0]
 8016c3c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016c40:	4463      	add	r3, ip
 8016c42:	6023      	str	r3, [r4, #0]
 8016c44:	4648      	mov	r0, r9
 8016c46:	4621      	mov	r1, r4
 8016c48:	f003 fb06 	bl	801a258 <_fflush_r>
 8016c4c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016c50:	2800      	cmp	r0, #0
 8016c52:	f47f af36 	bne.w	8016ac2 <__sfvwrite_r+0x13a>
 8016c56:	4667      	mov	r7, ip
 8016c58:	e761      	b.n	8016b1e <__sfvwrite_r+0x196>
 8016c5a:	4648      	mov	r0, r9
 8016c5c:	f000 fc6a 	bl	8017534 <_realloc_r>
 8016c60:	9b00      	ldr	r3, [sp, #0]
 8016c62:	4682      	mov	sl, r0
 8016c64:	2800      	cmp	r0, #0
 8016c66:	d1c5      	bne.n	8016bf4 <__sfvwrite_r+0x26c>
 8016c68:	4648      	mov	r0, r9
 8016c6a:	6921      	ldr	r1, [r4, #16]
 8016c6c:	f003 fbe0 	bl	801a430 <_free_r>
 8016c70:	89a3      	ldrh	r3, [r4, #12]
 8016c72:	220c      	movs	r2, #12
 8016c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	f8c9 2000 	str.w	r2, [r9]
 8016c7e:	e721      	b.n	8016ac4 <__sfvwrite_r+0x13c>
 8016c80:	2301      	movs	r3, #1
 8016c82:	f10a 0801 	add.w	r8, sl, #1
 8016c86:	9300      	str	r3, [sp, #0]
 8016c88:	e72e      	b.n	8016ae8 <__sfvwrite_r+0x160>
 8016c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8016c8e:	e6ad      	b.n	80169ec <__sfvwrite_r+0x64>
 8016c90:	230c      	movs	r3, #12
 8016c92:	f8c9 3000 	str.w	r3, [r9]
 8016c96:	89a3      	ldrh	r3, [r4, #12]
 8016c98:	e714      	b.n	8016ac4 <__sfvwrite_r+0x13c>
 8016c9a:	bf00      	nop
 8016c9c:	7ffffc00 	.word	0x7ffffc00

08016ca0 <_fwrite_r>:
 8016ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ca4:	b086      	sub	sp, #24
 8016ca6:	fb02 f403 	mul.w	r4, r2, r3
 8016caa:	4690      	mov	r8, r2
 8016cac:	461e      	mov	r6, r3
 8016cae:	aa01      	add	r2, sp, #4
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	9101      	str	r1, [sp, #4]
 8016cb4:	9402      	str	r4, [sp, #8]
 8016cb6:	9405      	str	r4, [sp, #20]
 8016cb8:	9203      	str	r2, [sp, #12]
 8016cba:	9304      	str	r3, [sp, #16]
 8016cbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016cbe:	4607      	mov	r7, r0
 8016cc0:	b108      	cbz	r0, 8016cc6 <_fwrite_r+0x26>
 8016cc2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016cc4:	b1d3      	cbz	r3, 8016cfc <_fwrite_r+0x5c>
 8016cc6:	89ab      	ldrh	r3, [r5, #12]
 8016cc8:	049a      	lsls	r2, r3, #18
 8016cca:	d406      	bmi.n	8016cda <_fwrite_r+0x3a>
 8016ccc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8016cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016cd6:	81ab      	strh	r3, [r5, #12]
 8016cd8:	666a      	str	r2, [r5, #100]	; 0x64
 8016cda:	4638      	mov	r0, r7
 8016cdc:	4629      	mov	r1, r5
 8016cde:	aa03      	add	r2, sp, #12
 8016ce0:	f7ff fe52 	bl	8016988 <__sfvwrite_r>
 8016ce4:	b130      	cbz	r0, 8016cf4 <_fwrite_r+0x54>
 8016ce6:	9805      	ldr	r0, [sp, #20]
 8016ce8:	1a24      	subs	r4, r4, r0
 8016cea:	fbb4 f0f8 	udiv	r0, r4, r8
 8016cee:	b006      	add	sp, #24
 8016cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cf4:	4630      	mov	r0, r6
 8016cf6:	b006      	add	sp, #24
 8016cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cfc:	f003 fb40 	bl	801a380 <__sinit>
 8016d00:	e7e1      	b.n	8016cc6 <_fwrite_r+0x26>
 8016d02:	bf00      	nop

08016d04 <fwrite>:
 8016d04:	b530      	push	{r4, r5, lr}
 8016d06:	b083      	sub	sp, #12
 8016d08:	4c05      	ldr	r4, [pc, #20]	; (8016d20 <fwrite+0x1c>)
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	6824      	ldr	r4, [r4, #0]
 8016d0e:	460d      	mov	r5, r1
 8016d10:	4613      	mov	r3, r2
 8016d12:	4601      	mov	r1, r0
 8016d14:	462a      	mov	r2, r5
 8016d16:	4620      	mov	r0, r4
 8016d18:	f7ff ffc2 	bl	8016ca0 <_fwrite_r>
 8016d1c:	b003      	add	sp, #12
 8016d1e:	bd30      	pop	{r4, r5, pc}
 8016d20:	20000c30 	.word	0x20000c30

08016d24 <malloc>:
 8016d24:	4b02      	ldr	r3, [pc, #8]	; (8016d30 <malloc+0xc>)
 8016d26:	4601      	mov	r1, r0
 8016d28:	6818      	ldr	r0, [r3, #0]
 8016d2a:	f000 b80b 	b.w	8016d44 <_malloc_r>
 8016d2e:	bf00      	nop
 8016d30:	20000c30 	.word	0x20000c30

08016d34 <free>:
 8016d34:	4b02      	ldr	r3, [pc, #8]	; (8016d40 <free+0xc>)
 8016d36:	4601      	mov	r1, r0
 8016d38:	6818      	ldr	r0, [r3, #0]
 8016d3a:	f003 bb79 	b.w	801a430 <_free_r>
 8016d3e:	bf00      	nop
 8016d40:	20000c30 	.word	0x20000c30

08016d44 <_malloc_r>:
 8016d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d48:	f101 050b 	add.w	r5, r1, #11
 8016d4c:	2d16      	cmp	r5, #22
 8016d4e:	b083      	sub	sp, #12
 8016d50:	4606      	mov	r6, r0
 8016d52:	d927      	bls.n	8016da4 <_malloc_r+0x60>
 8016d54:	f035 0507 	bics.w	r5, r5, #7
 8016d58:	f100 80b6 	bmi.w	8016ec8 <_malloc_r+0x184>
 8016d5c:	42a9      	cmp	r1, r5
 8016d5e:	f200 80b3 	bhi.w	8016ec8 <_malloc_r+0x184>
 8016d62:	f000 fbaf 	bl	80174c4 <__malloc_lock>
 8016d66:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8016d6a:	d222      	bcs.n	8016db2 <_malloc_r+0x6e>
 8016d6c:	4fc2      	ldr	r7, [pc, #776]	; (8017078 <_malloc_r+0x334>)
 8016d6e:	08e8      	lsrs	r0, r5, #3
 8016d70:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8016d74:	68dc      	ldr	r4, [r3, #12]
 8016d76:	429c      	cmp	r4, r3
 8016d78:	f000 81c8 	beq.w	801710c <_malloc_r+0x3c8>
 8016d7c:	6863      	ldr	r3, [r4, #4]
 8016d7e:	68e1      	ldr	r1, [r4, #12]
 8016d80:	68a5      	ldr	r5, [r4, #8]
 8016d82:	f023 0303 	bic.w	r3, r3, #3
 8016d86:	4423      	add	r3, r4
 8016d88:	4630      	mov	r0, r6
 8016d8a:	685a      	ldr	r2, [r3, #4]
 8016d8c:	60e9      	str	r1, [r5, #12]
 8016d8e:	f042 0201 	orr.w	r2, r2, #1
 8016d92:	608d      	str	r5, [r1, #8]
 8016d94:	605a      	str	r2, [r3, #4]
 8016d96:	f000 fb97 	bl	80174c8 <__malloc_unlock>
 8016d9a:	3408      	adds	r4, #8
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	b003      	add	sp, #12
 8016da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016da4:	2910      	cmp	r1, #16
 8016da6:	f200 808f 	bhi.w	8016ec8 <_malloc_r+0x184>
 8016daa:	f000 fb8b 	bl	80174c4 <__malloc_lock>
 8016dae:	2510      	movs	r5, #16
 8016db0:	e7dc      	b.n	8016d6c <_malloc_r+0x28>
 8016db2:	0a68      	lsrs	r0, r5, #9
 8016db4:	f000 808f 	beq.w	8016ed6 <_malloc_r+0x192>
 8016db8:	2804      	cmp	r0, #4
 8016dba:	f200 8154 	bhi.w	8017066 <_malloc_r+0x322>
 8016dbe:	09a8      	lsrs	r0, r5, #6
 8016dc0:	3038      	adds	r0, #56	; 0x38
 8016dc2:	0041      	lsls	r1, r0, #1
 8016dc4:	4fac      	ldr	r7, [pc, #688]	; (8017078 <_malloc_r+0x334>)
 8016dc6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8016dca:	68cc      	ldr	r4, [r1, #12]
 8016dcc:	42a1      	cmp	r1, r4
 8016dce:	d106      	bne.n	8016dde <_malloc_r+0x9a>
 8016dd0:	e00c      	b.n	8016dec <_malloc_r+0xa8>
 8016dd2:	2a00      	cmp	r2, #0
 8016dd4:	f280 8082 	bge.w	8016edc <_malloc_r+0x198>
 8016dd8:	68e4      	ldr	r4, [r4, #12]
 8016dda:	42a1      	cmp	r1, r4
 8016ddc:	d006      	beq.n	8016dec <_malloc_r+0xa8>
 8016dde:	6863      	ldr	r3, [r4, #4]
 8016de0:	f023 0303 	bic.w	r3, r3, #3
 8016de4:	1b5a      	subs	r2, r3, r5
 8016de6:	2a0f      	cmp	r2, #15
 8016de8:	ddf3      	ble.n	8016dd2 <_malloc_r+0x8e>
 8016dea:	3801      	subs	r0, #1
 8016dec:	3001      	adds	r0, #1
 8016dee:	49a2      	ldr	r1, [pc, #648]	; (8017078 <_malloc_r+0x334>)
 8016df0:	693c      	ldr	r4, [r7, #16]
 8016df2:	f101 0e08 	add.w	lr, r1, #8
 8016df6:	4574      	cmp	r4, lr
 8016df8:	f000 817d 	beq.w	80170f6 <_malloc_r+0x3b2>
 8016dfc:	6863      	ldr	r3, [r4, #4]
 8016dfe:	f023 0303 	bic.w	r3, r3, #3
 8016e02:	1b5a      	subs	r2, r3, r5
 8016e04:	2a0f      	cmp	r2, #15
 8016e06:	f300 8163 	bgt.w	80170d0 <_malloc_r+0x38c>
 8016e0a:	2a00      	cmp	r2, #0
 8016e0c:	f8c1 e014 	str.w	lr, [r1, #20]
 8016e10:	f8c1 e010 	str.w	lr, [r1, #16]
 8016e14:	da73      	bge.n	8016efe <_malloc_r+0x1ba>
 8016e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e1a:	f080 8139 	bcs.w	8017090 <_malloc_r+0x34c>
 8016e1e:	08db      	lsrs	r3, r3, #3
 8016e20:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8016e24:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8016e28:	684a      	ldr	r2, [r1, #4]
 8016e2a:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8016e2e:	f8c4 9008 	str.w	r9, [r4, #8]
 8016e32:	2301      	movs	r3, #1
 8016e34:	fa03 f30c 	lsl.w	r3, r3, ip
 8016e38:	4313      	orrs	r3, r2
 8016e3a:	f8c4 800c 	str.w	r8, [r4, #12]
 8016e3e:	604b      	str	r3, [r1, #4]
 8016e40:	f8c8 4008 	str.w	r4, [r8, #8]
 8016e44:	f8c9 400c 	str.w	r4, [r9, #12]
 8016e48:	1082      	asrs	r2, r0, #2
 8016e4a:	2401      	movs	r4, #1
 8016e4c:	4094      	lsls	r4, r2
 8016e4e:	429c      	cmp	r4, r3
 8016e50:	d862      	bhi.n	8016f18 <_malloc_r+0x1d4>
 8016e52:	4223      	tst	r3, r4
 8016e54:	d106      	bne.n	8016e64 <_malloc_r+0x120>
 8016e56:	f020 0003 	bic.w	r0, r0, #3
 8016e5a:	0064      	lsls	r4, r4, #1
 8016e5c:	4223      	tst	r3, r4
 8016e5e:	f100 0004 	add.w	r0, r0, #4
 8016e62:	d0fa      	beq.n	8016e5a <_malloc_r+0x116>
 8016e64:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8016e68:	46c4      	mov	ip, r8
 8016e6a:	4681      	mov	r9, r0
 8016e6c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8016e70:	459c      	cmp	ip, r3
 8016e72:	d107      	bne.n	8016e84 <_malloc_r+0x140>
 8016e74:	e141      	b.n	80170fa <_malloc_r+0x3b6>
 8016e76:	2900      	cmp	r1, #0
 8016e78:	f280 8151 	bge.w	801711e <_malloc_r+0x3da>
 8016e7c:	68db      	ldr	r3, [r3, #12]
 8016e7e:	459c      	cmp	ip, r3
 8016e80:	f000 813b 	beq.w	80170fa <_malloc_r+0x3b6>
 8016e84:	685a      	ldr	r2, [r3, #4]
 8016e86:	f022 0203 	bic.w	r2, r2, #3
 8016e8a:	1b51      	subs	r1, r2, r5
 8016e8c:	290f      	cmp	r1, #15
 8016e8e:	ddf2      	ble.n	8016e76 <_malloc_r+0x132>
 8016e90:	461c      	mov	r4, r3
 8016e92:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8016e96:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8016e9a:	195a      	adds	r2, r3, r5
 8016e9c:	f045 0901 	orr.w	r9, r5, #1
 8016ea0:	f041 0501 	orr.w	r5, r1, #1
 8016ea4:	f8c3 9004 	str.w	r9, [r3, #4]
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	f8c8 c00c 	str.w	ip, [r8, #12]
 8016eae:	f8cc 8008 	str.w	r8, [ip, #8]
 8016eb2:	617a      	str	r2, [r7, #20]
 8016eb4:	613a      	str	r2, [r7, #16]
 8016eb6:	f8c2 e00c 	str.w	lr, [r2, #12]
 8016eba:	f8c2 e008 	str.w	lr, [r2, #8]
 8016ebe:	6055      	str	r5, [r2, #4]
 8016ec0:	5051      	str	r1, [r2, r1]
 8016ec2:	f000 fb01 	bl	80174c8 <__malloc_unlock>
 8016ec6:	e769      	b.n	8016d9c <_malloc_r+0x58>
 8016ec8:	2400      	movs	r4, #0
 8016eca:	230c      	movs	r3, #12
 8016ecc:	4620      	mov	r0, r4
 8016ece:	6033      	str	r3, [r6, #0]
 8016ed0:	b003      	add	sp, #12
 8016ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ed6:	217e      	movs	r1, #126	; 0x7e
 8016ed8:	203f      	movs	r0, #63	; 0x3f
 8016eda:	e773      	b.n	8016dc4 <_malloc_r+0x80>
 8016edc:	4423      	add	r3, r4
 8016ede:	68e1      	ldr	r1, [r4, #12]
 8016ee0:	685a      	ldr	r2, [r3, #4]
 8016ee2:	68a5      	ldr	r5, [r4, #8]
 8016ee4:	f042 0201 	orr.w	r2, r2, #1
 8016ee8:	60e9      	str	r1, [r5, #12]
 8016eea:	4630      	mov	r0, r6
 8016eec:	608d      	str	r5, [r1, #8]
 8016eee:	605a      	str	r2, [r3, #4]
 8016ef0:	f000 faea 	bl	80174c8 <__malloc_unlock>
 8016ef4:	3408      	adds	r4, #8
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	b003      	add	sp, #12
 8016efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016efe:	4423      	add	r3, r4
 8016f00:	4630      	mov	r0, r6
 8016f02:	685a      	ldr	r2, [r3, #4]
 8016f04:	f042 0201 	orr.w	r2, r2, #1
 8016f08:	605a      	str	r2, [r3, #4]
 8016f0a:	f000 fadd 	bl	80174c8 <__malloc_unlock>
 8016f0e:	3408      	adds	r4, #8
 8016f10:	4620      	mov	r0, r4
 8016f12:	b003      	add	sp, #12
 8016f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f18:	68bc      	ldr	r4, [r7, #8]
 8016f1a:	6863      	ldr	r3, [r4, #4]
 8016f1c:	f023 0803 	bic.w	r8, r3, #3
 8016f20:	4545      	cmp	r5, r8
 8016f22:	d804      	bhi.n	8016f2e <_malloc_r+0x1ea>
 8016f24:	ebc5 0308 	rsb	r3, r5, r8
 8016f28:	2b0f      	cmp	r3, #15
 8016f2a:	f300 808c 	bgt.w	8017046 <_malloc_r+0x302>
 8016f2e:	4b53      	ldr	r3, [pc, #332]	; (801707c <_malloc_r+0x338>)
 8016f30:	f8df a158 	ldr.w	sl, [pc, #344]	; 801708c <_malloc_r+0x348>
 8016f34:	681a      	ldr	r2, [r3, #0]
 8016f36:	f8da 3000 	ldr.w	r3, [sl]
 8016f3a:	3301      	adds	r3, #1
 8016f3c:	442a      	add	r2, r5
 8016f3e:	eb04 0b08 	add.w	fp, r4, r8
 8016f42:	f000 8150 	beq.w	80171e6 <_malloc_r+0x4a2>
 8016f46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016f4a:	320f      	adds	r2, #15
 8016f4c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8016f50:	f022 020f 	bic.w	r2, r2, #15
 8016f54:	4611      	mov	r1, r2
 8016f56:	4630      	mov	r0, r6
 8016f58:	9201      	str	r2, [sp, #4]
 8016f5a:	f7f7 ff01 	bl	800ed60 <_sbrk_r>
 8016f5e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f62:	4681      	mov	r9, r0
 8016f64:	9a01      	ldr	r2, [sp, #4]
 8016f66:	f000 8147 	beq.w	80171f8 <_malloc_r+0x4b4>
 8016f6a:	4583      	cmp	fp, r0
 8016f6c:	f200 80ee 	bhi.w	801714c <_malloc_r+0x408>
 8016f70:	4b43      	ldr	r3, [pc, #268]	; (8017080 <_malloc_r+0x33c>)
 8016f72:	6819      	ldr	r1, [r3, #0]
 8016f74:	45cb      	cmp	fp, r9
 8016f76:	4411      	add	r1, r2
 8016f78:	6019      	str	r1, [r3, #0]
 8016f7a:	f000 8142 	beq.w	8017202 <_malloc_r+0x4be>
 8016f7e:	f8da 0000 	ldr.w	r0, [sl]
 8016f82:	f8df e108 	ldr.w	lr, [pc, #264]	; 801708c <_malloc_r+0x348>
 8016f86:	3001      	adds	r0, #1
 8016f88:	bf1b      	ittet	ne
 8016f8a:	ebcb 0b09 	rsbne	fp, fp, r9
 8016f8e:	4459      	addne	r1, fp
 8016f90:	f8ce 9000 	streq.w	r9, [lr]
 8016f94:	6019      	strne	r1, [r3, #0]
 8016f96:	f019 0107 	ands.w	r1, r9, #7
 8016f9a:	f000 8107 	beq.w	80171ac <_malloc_r+0x468>
 8016f9e:	f1c1 0008 	rsb	r0, r1, #8
 8016fa2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8016fa6:	4481      	add	r9, r0
 8016fa8:	3108      	adds	r1, #8
 8016faa:	444a      	add	r2, r9
 8016fac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8016fb0:	ebc2 0a01 	rsb	sl, r2, r1
 8016fb4:	4651      	mov	r1, sl
 8016fb6:	4630      	mov	r0, r6
 8016fb8:	9301      	str	r3, [sp, #4]
 8016fba:	f7f7 fed1 	bl	800ed60 <_sbrk_r>
 8016fbe:	1c43      	adds	r3, r0, #1
 8016fc0:	9b01      	ldr	r3, [sp, #4]
 8016fc2:	f000 812c 	beq.w	801721e <_malloc_r+0x4da>
 8016fc6:	ebc9 0200 	rsb	r2, r9, r0
 8016fca:	4452      	add	r2, sl
 8016fcc:	f042 0201 	orr.w	r2, r2, #1
 8016fd0:	6819      	ldr	r1, [r3, #0]
 8016fd2:	f8c7 9008 	str.w	r9, [r7, #8]
 8016fd6:	4451      	add	r1, sl
 8016fd8:	42bc      	cmp	r4, r7
 8016fda:	f8c9 2004 	str.w	r2, [r9, #4]
 8016fde:	6019      	str	r1, [r3, #0]
 8016fe0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8017080 <_malloc_r+0x33c>
 8016fe4:	d016      	beq.n	8017014 <_malloc_r+0x2d0>
 8016fe6:	f1b8 0f0f 	cmp.w	r8, #15
 8016fea:	f240 80ee 	bls.w	80171ca <_malloc_r+0x486>
 8016fee:	6862      	ldr	r2, [r4, #4]
 8016ff0:	f1a8 030c 	sub.w	r3, r8, #12
 8016ff4:	f023 0307 	bic.w	r3, r3, #7
 8016ff8:	18e0      	adds	r0, r4, r3
 8016ffa:	f002 0201 	and.w	r2, r2, #1
 8016ffe:	f04f 0e05 	mov.w	lr, #5
 8017002:	431a      	orrs	r2, r3
 8017004:	2b0f      	cmp	r3, #15
 8017006:	6062      	str	r2, [r4, #4]
 8017008:	f8c0 e004 	str.w	lr, [r0, #4]
 801700c:	f8c0 e008 	str.w	lr, [r0, #8]
 8017010:	f200 8109 	bhi.w	8017226 <_malloc_r+0x4e2>
 8017014:	4b1b      	ldr	r3, [pc, #108]	; (8017084 <_malloc_r+0x340>)
 8017016:	68bc      	ldr	r4, [r7, #8]
 8017018:	681a      	ldr	r2, [r3, #0]
 801701a:	4291      	cmp	r1, r2
 801701c:	bf88      	it	hi
 801701e:	6019      	strhi	r1, [r3, #0]
 8017020:	4b19      	ldr	r3, [pc, #100]	; (8017088 <_malloc_r+0x344>)
 8017022:	681a      	ldr	r2, [r3, #0]
 8017024:	4291      	cmp	r1, r2
 8017026:	6862      	ldr	r2, [r4, #4]
 8017028:	bf88      	it	hi
 801702a:	6019      	strhi	r1, [r3, #0]
 801702c:	f022 0203 	bic.w	r2, r2, #3
 8017030:	4295      	cmp	r5, r2
 8017032:	eba2 0305 	sub.w	r3, r2, r5
 8017036:	d801      	bhi.n	801703c <_malloc_r+0x2f8>
 8017038:	2b0f      	cmp	r3, #15
 801703a:	dc04      	bgt.n	8017046 <_malloc_r+0x302>
 801703c:	4630      	mov	r0, r6
 801703e:	f000 fa43 	bl	80174c8 <__malloc_unlock>
 8017042:	2400      	movs	r4, #0
 8017044:	e6aa      	b.n	8016d9c <_malloc_r+0x58>
 8017046:	1962      	adds	r2, r4, r5
 8017048:	f043 0301 	orr.w	r3, r3, #1
 801704c:	f045 0501 	orr.w	r5, r5, #1
 8017050:	6065      	str	r5, [r4, #4]
 8017052:	4630      	mov	r0, r6
 8017054:	60ba      	str	r2, [r7, #8]
 8017056:	6053      	str	r3, [r2, #4]
 8017058:	f000 fa36 	bl	80174c8 <__malloc_unlock>
 801705c:	3408      	adds	r4, #8
 801705e:	4620      	mov	r0, r4
 8017060:	b003      	add	sp, #12
 8017062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017066:	2814      	cmp	r0, #20
 8017068:	d968      	bls.n	801713c <_malloc_r+0x3f8>
 801706a:	2854      	cmp	r0, #84	; 0x54
 801706c:	f200 8097 	bhi.w	801719e <_malloc_r+0x45a>
 8017070:	0b28      	lsrs	r0, r5, #12
 8017072:	306e      	adds	r0, #110	; 0x6e
 8017074:	0041      	lsls	r1, r0, #1
 8017076:	e6a5      	b.n	8016dc4 <_malloc_r+0x80>
 8017078:	20000c34 	.word	0x20000c34
 801707c:	20003010 	.word	0x20003010
 8017080:	20003014 	.word	0x20003014
 8017084:	2000300c 	.word	0x2000300c
 8017088:	20003008 	.word	0x20003008
 801708c:	20001040 	.word	0x20001040
 8017090:	0a5a      	lsrs	r2, r3, #9
 8017092:	2a04      	cmp	r2, #4
 8017094:	d955      	bls.n	8017142 <_malloc_r+0x3fe>
 8017096:	2a14      	cmp	r2, #20
 8017098:	f200 80a7 	bhi.w	80171ea <_malloc_r+0x4a6>
 801709c:	325b      	adds	r2, #91	; 0x5b
 801709e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80170a2:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 80170a6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8017264 <_malloc_r+0x520>
 80170aa:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80170ae:	4561      	cmp	r1, ip
 80170b0:	d07f      	beq.n	80171b2 <_malloc_r+0x46e>
 80170b2:	684a      	ldr	r2, [r1, #4]
 80170b4:	f022 0203 	bic.w	r2, r2, #3
 80170b8:	4293      	cmp	r3, r2
 80170ba:	d202      	bcs.n	80170c2 <_malloc_r+0x37e>
 80170bc:	6889      	ldr	r1, [r1, #8]
 80170be:	458c      	cmp	ip, r1
 80170c0:	d1f7      	bne.n	80170b2 <_malloc_r+0x36e>
 80170c2:	68ca      	ldr	r2, [r1, #12]
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	60e2      	str	r2, [r4, #12]
 80170c8:	60a1      	str	r1, [r4, #8]
 80170ca:	6094      	str	r4, [r2, #8]
 80170cc:	60cc      	str	r4, [r1, #12]
 80170ce:	e6bb      	b.n	8016e48 <_malloc_r+0x104>
 80170d0:	1963      	adds	r3, r4, r5
 80170d2:	f042 0701 	orr.w	r7, r2, #1
 80170d6:	f045 0501 	orr.w	r5, r5, #1
 80170da:	6065      	str	r5, [r4, #4]
 80170dc:	4630      	mov	r0, r6
 80170de:	614b      	str	r3, [r1, #20]
 80170e0:	610b      	str	r3, [r1, #16]
 80170e2:	f8c3 e00c 	str.w	lr, [r3, #12]
 80170e6:	f8c3 e008 	str.w	lr, [r3, #8]
 80170ea:	605f      	str	r7, [r3, #4]
 80170ec:	509a      	str	r2, [r3, r2]
 80170ee:	3408      	adds	r4, #8
 80170f0:	f000 f9ea 	bl	80174c8 <__malloc_unlock>
 80170f4:	e652      	b.n	8016d9c <_malloc_r+0x58>
 80170f6:	684b      	ldr	r3, [r1, #4]
 80170f8:	e6a6      	b.n	8016e48 <_malloc_r+0x104>
 80170fa:	f109 0901 	add.w	r9, r9, #1
 80170fe:	f019 0f03 	tst.w	r9, #3
 8017102:	f10c 0c08 	add.w	ip, ip, #8
 8017106:	f47f aeb1 	bne.w	8016e6c <_malloc_r+0x128>
 801710a:	e02c      	b.n	8017166 <_malloc_r+0x422>
 801710c:	f104 0308 	add.w	r3, r4, #8
 8017110:	6964      	ldr	r4, [r4, #20]
 8017112:	42a3      	cmp	r3, r4
 8017114:	bf08      	it	eq
 8017116:	3002      	addeq	r0, #2
 8017118:	f43f ae69 	beq.w	8016dee <_malloc_r+0xaa>
 801711c:	e62e      	b.n	8016d7c <_malloc_r+0x38>
 801711e:	441a      	add	r2, r3
 8017120:	461c      	mov	r4, r3
 8017122:	6851      	ldr	r1, [r2, #4]
 8017124:	68db      	ldr	r3, [r3, #12]
 8017126:	f854 5f08 	ldr.w	r5, [r4, #8]!
 801712a:	f041 0101 	orr.w	r1, r1, #1
 801712e:	6051      	str	r1, [r2, #4]
 8017130:	4630      	mov	r0, r6
 8017132:	60eb      	str	r3, [r5, #12]
 8017134:	609d      	str	r5, [r3, #8]
 8017136:	f000 f9c7 	bl	80174c8 <__malloc_unlock>
 801713a:	e62f      	b.n	8016d9c <_malloc_r+0x58>
 801713c:	305b      	adds	r0, #91	; 0x5b
 801713e:	0041      	lsls	r1, r0, #1
 8017140:	e640      	b.n	8016dc4 <_malloc_r+0x80>
 8017142:	099a      	lsrs	r2, r3, #6
 8017144:	3238      	adds	r2, #56	; 0x38
 8017146:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801714a:	e7aa      	b.n	80170a2 <_malloc_r+0x35e>
 801714c:	42bc      	cmp	r4, r7
 801714e:	4b45      	ldr	r3, [pc, #276]	; (8017264 <_malloc_r+0x520>)
 8017150:	f43f af0e 	beq.w	8016f70 <_malloc_r+0x22c>
 8017154:	689c      	ldr	r4, [r3, #8]
 8017156:	6862      	ldr	r2, [r4, #4]
 8017158:	f022 0203 	bic.w	r2, r2, #3
 801715c:	e768      	b.n	8017030 <_malloc_r+0x2ec>
 801715e:	f8d8 8000 	ldr.w	r8, [r8]
 8017162:	4598      	cmp	r8, r3
 8017164:	d17c      	bne.n	8017260 <_malloc_r+0x51c>
 8017166:	f010 0f03 	tst.w	r0, #3
 801716a:	f1a8 0308 	sub.w	r3, r8, #8
 801716e:	f100 30ff 	add.w	r0, r0, #4294967295
 8017172:	d1f4      	bne.n	801715e <_malloc_r+0x41a>
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	ea23 0304 	bic.w	r3, r3, r4
 801717a:	607b      	str	r3, [r7, #4]
 801717c:	0064      	lsls	r4, r4, #1
 801717e:	429c      	cmp	r4, r3
 8017180:	f63f aeca 	bhi.w	8016f18 <_malloc_r+0x1d4>
 8017184:	2c00      	cmp	r4, #0
 8017186:	f43f aec7 	beq.w	8016f18 <_malloc_r+0x1d4>
 801718a:	4223      	tst	r3, r4
 801718c:	4648      	mov	r0, r9
 801718e:	f47f ae69 	bne.w	8016e64 <_malloc_r+0x120>
 8017192:	0064      	lsls	r4, r4, #1
 8017194:	4223      	tst	r3, r4
 8017196:	f100 0004 	add.w	r0, r0, #4
 801719a:	d0fa      	beq.n	8017192 <_malloc_r+0x44e>
 801719c:	e662      	b.n	8016e64 <_malloc_r+0x120>
 801719e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 80171a2:	d818      	bhi.n	80171d6 <_malloc_r+0x492>
 80171a4:	0be8      	lsrs	r0, r5, #15
 80171a6:	3077      	adds	r0, #119	; 0x77
 80171a8:	0041      	lsls	r1, r0, #1
 80171aa:	e60b      	b.n	8016dc4 <_malloc_r+0x80>
 80171ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80171b0:	e6fb      	b.n	8016faa <_malloc_r+0x266>
 80171b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80171b6:	1092      	asrs	r2, r2, #2
 80171b8:	f04f 0c01 	mov.w	ip, #1
 80171bc:	fa0c f202 	lsl.w	r2, ip, r2
 80171c0:	4313      	orrs	r3, r2
 80171c2:	f8c8 3004 	str.w	r3, [r8, #4]
 80171c6:	460a      	mov	r2, r1
 80171c8:	e77d      	b.n	80170c6 <_malloc_r+0x382>
 80171ca:	2301      	movs	r3, #1
 80171cc:	f8c9 3004 	str.w	r3, [r9, #4]
 80171d0:	464c      	mov	r4, r9
 80171d2:	2200      	movs	r2, #0
 80171d4:	e72c      	b.n	8017030 <_malloc_r+0x2ec>
 80171d6:	f240 5354 	movw	r3, #1364	; 0x554
 80171da:	4298      	cmp	r0, r3
 80171dc:	d81c      	bhi.n	8017218 <_malloc_r+0x4d4>
 80171de:	0ca8      	lsrs	r0, r5, #18
 80171e0:	307c      	adds	r0, #124	; 0x7c
 80171e2:	0041      	lsls	r1, r0, #1
 80171e4:	e5ee      	b.n	8016dc4 <_malloc_r+0x80>
 80171e6:	3210      	adds	r2, #16
 80171e8:	e6b4      	b.n	8016f54 <_malloc_r+0x210>
 80171ea:	2a54      	cmp	r2, #84	; 0x54
 80171ec:	d823      	bhi.n	8017236 <_malloc_r+0x4f2>
 80171ee:	0b1a      	lsrs	r2, r3, #12
 80171f0:	326e      	adds	r2, #110	; 0x6e
 80171f2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80171f6:	e754      	b.n	80170a2 <_malloc_r+0x35e>
 80171f8:	68bc      	ldr	r4, [r7, #8]
 80171fa:	6862      	ldr	r2, [r4, #4]
 80171fc:	f022 0203 	bic.w	r2, r2, #3
 8017200:	e716      	b.n	8017030 <_malloc_r+0x2ec>
 8017202:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8017206:	2800      	cmp	r0, #0
 8017208:	f47f aeb9 	bne.w	8016f7e <_malloc_r+0x23a>
 801720c:	4442      	add	r2, r8
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	f042 0201 	orr.w	r2, r2, #1
 8017214:	605a      	str	r2, [r3, #4]
 8017216:	e6fd      	b.n	8017014 <_malloc_r+0x2d0>
 8017218:	21fc      	movs	r1, #252	; 0xfc
 801721a:	207e      	movs	r0, #126	; 0x7e
 801721c:	e5d2      	b.n	8016dc4 <_malloc_r+0x80>
 801721e:	2201      	movs	r2, #1
 8017220:	f04f 0a00 	mov.w	sl, #0
 8017224:	e6d4      	b.n	8016fd0 <_malloc_r+0x28c>
 8017226:	f104 0108 	add.w	r1, r4, #8
 801722a:	4630      	mov	r0, r6
 801722c:	f003 f900 	bl	801a430 <_free_r>
 8017230:	f8da 1000 	ldr.w	r1, [sl]
 8017234:	e6ee      	b.n	8017014 <_malloc_r+0x2d0>
 8017236:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801723a:	d804      	bhi.n	8017246 <_malloc_r+0x502>
 801723c:	0bda      	lsrs	r2, r3, #15
 801723e:	3277      	adds	r2, #119	; 0x77
 8017240:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8017244:	e72d      	b.n	80170a2 <_malloc_r+0x35e>
 8017246:	f240 5154 	movw	r1, #1364	; 0x554
 801724a:	428a      	cmp	r2, r1
 801724c:	d804      	bhi.n	8017258 <_malloc_r+0x514>
 801724e:	0c9a      	lsrs	r2, r3, #18
 8017250:	327c      	adds	r2, #124	; 0x7c
 8017252:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8017256:	e724      	b.n	80170a2 <_malloc_r+0x35e>
 8017258:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 801725c:	227e      	movs	r2, #126	; 0x7e
 801725e:	e720      	b.n	80170a2 <_malloc_r+0x35e>
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	e78b      	b.n	801717c <_malloc_r+0x438>
 8017264:	20000c34 	.word	0x20000c34

08017268 <memchr>:
 8017268:	0783      	lsls	r3, r0, #30
 801726a:	b470      	push	{r4, r5, r6}
 801726c:	b2c9      	uxtb	r1, r1
 801726e:	d040      	beq.n	80172f2 <memchr+0x8a>
 8017270:	1e54      	subs	r4, r2, #1
 8017272:	2a00      	cmp	r2, #0
 8017274:	d03f      	beq.n	80172f6 <memchr+0x8e>
 8017276:	7803      	ldrb	r3, [r0, #0]
 8017278:	428b      	cmp	r3, r1
 801727a:	bf18      	it	ne
 801727c:	1c43      	addne	r3, r0, #1
 801727e:	d106      	bne.n	801728e <memchr+0x26>
 8017280:	e01d      	b.n	80172be <memchr+0x56>
 8017282:	b1f4      	cbz	r4, 80172c2 <memchr+0x5a>
 8017284:	7802      	ldrb	r2, [r0, #0]
 8017286:	428a      	cmp	r2, r1
 8017288:	f104 34ff 	add.w	r4, r4, #4294967295
 801728c:	d017      	beq.n	80172be <memchr+0x56>
 801728e:	f013 0f03 	tst.w	r3, #3
 8017292:	4618      	mov	r0, r3
 8017294:	f103 0301 	add.w	r3, r3, #1
 8017298:	d1f3      	bne.n	8017282 <memchr+0x1a>
 801729a:	2c03      	cmp	r4, #3
 801729c:	d814      	bhi.n	80172c8 <memchr+0x60>
 801729e:	b184      	cbz	r4, 80172c2 <memchr+0x5a>
 80172a0:	7803      	ldrb	r3, [r0, #0]
 80172a2:	428b      	cmp	r3, r1
 80172a4:	d00b      	beq.n	80172be <memchr+0x56>
 80172a6:	1905      	adds	r5, r0, r4
 80172a8:	1c43      	adds	r3, r0, #1
 80172aa:	e002      	b.n	80172b2 <memchr+0x4a>
 80172ac:	7802      	ldrb	r2, [r0, #0]
 80172ae:	428a      	cmp	r2, r1
 80172b0:	d005      	beq.n	80172be <memchr+0x56>
 80172b2:	42ab      	cmp	r3, r5
 80172b4:	4618      	mov	r0, r3
 80172b6:	f103 0301 	add.w	r3, r3, #1
 80172ba:	d1f7      	bne.n	80172ac <memchr+0x44>
 80172bc:	2000      	movs	r0, #0
 80172be:	bc70      	pop	{r4, r5, r6}
 80172c0:	4770      	bx	lr
 80172c2:	4620      	mov	r0, r4
 80172c4:	bc70      	pop	{r4, r5, r6}
 80172c6:	4770      	bx	lr
 80172c8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80172cc:	4602      	mov	r2, r0
 80172ce:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80172d2:	4610      	mov	r0, r2
 80172d4:	3204      	adds	r2, #4
 80172d6:	6803      	ldr	r3, [r0, #0]
 80172d8:	4073      	eors	r3, r6
 80172da:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80172de:	ea25 0303 	bic.w	r3, r5, r3
 80172e2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80172e6:	d1da      	bne.n	801729e <memchr+0x36>
 80172e8:	3c04      	subs	r4, #4
 80172ea:	2c03      	cmp	r4, #3
 80172ec:	4610      	mov	r0, r2
 80172ee:	d8f0      	bhi.n	80172d2 <memchr+0x6a>
 80172f0:	e7d5      	b.n	801729e <memchr+0x36>
 80172f2:	4614      	mov	r4, r2
 80172f4:	e7d1      	b.n	801729a <memchr+0x32>
 80172f6:	4610      	mov	r0, r2
 80172f8:	e7e1      	b.n	80172be <memchr+0x56>
 80172fa:	bf00      	nop

080172fc <memcmp>:
 80172fc:	2a03      	cmp	r2, #3
 80172fe:	b470      	push	{r4, r5, r6}
 8017300:	d926      	bls.n	8017350 <memcmp+0x54>
 8017302:	ea40 0301 	orr.w	r3, r0, r1
 8017306:	079b      	lsls	r3, r3, #30
 8017308:	d011      	beq.n	801732e <memcmp+0x32>
 801730a:	7804      	ldrb	r4, [r0, #0]
 801730c:	780d      	ldrb	r5, [r1, #0]
 801730e:	42ac      	cmp	r4, r5
 8017310:	d122      	bne.n	8017358 <memcmp+0x5c>
 8017312:	4402      	add	r2, r0
 8017314:	1c43      	adds	r3, r0, #1
 8017316:	e005      	b.n	8017324 <memcmp+0x28>
 8017318:	f813 4b01 	ldrb.w	r4, [r3], #1
 801731c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8017320:	42ac      	cmp	r4, r5
 8017322:	d119      	bne.n	8017358 <memcmp+0x5c>
 8017324:	4293      	cmp	r3, r2
 8017326:	d1f7      	bne.n	8017318 <memcmp+0x1c>
 8017328:	2000      	movs	r0, #0
 801732a:	bc70      	pop	{r4, r5, r6}
 801732c:	4770      	bx	lr
 801732e:	460c      	mov	r4, r1
 8017330:	4603      	mov	r3, r0
 8017332:	681e      	ldr	r6, [r3, #0]
 8017334:	6825      	ldr	r5, [r4, #0]
 8017336:	42ae      	cmp	r6, r5
 8017338:	4618      	mov	r0, r3
 801733a:	4621      	mov	r1, r4
 801733c:	f103 0304 	add.w	r3, r3, #4
 8017340:	f104 0404 	add.w	r4, r4, #4
 8017344:	d104      	bne.n	8017350 <memcmp+0x54>
 8017346:	3a04      	subs	r2, #4
 8017348:	2a03      	cmp	r2, #3
 801734a:	4618      	mov	r0, r3
 801734c:	4621      	mov	r1, r4
 801734e:	d8f0      	bhi.n	8017332 <memcmp+0x36>
 8017350:	2a00      	cmp	r2, #0
 8017352:	d1da      	bne.n	801730a <memcmp+0xe>
 8017354:	4610      	mov	r0, r2
 8017356:	e7e8      	b.n	801732a <memcmp+0x2e>
 8017358:	1b60      	subs	r0, r4, r5
 801735a:	bc70      	pop	{r4, r5, r6}
 801735c:	4770      	bx	lr
 801735e:	bf00      	nop

08017360 <memmove>:
 8017360:	4288      	cmp	r0, r1
 8017362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017364:	d90d      	bls.n	8017382 <memmove+0x22>
 8017366:	188b      	adds	r3, r1, r2
 8017368:	4298      	cmp	r0, r3
 801736a:	d20a      	bcs.n	8017382 <memmove+0x22>
 801736c:	1881      	adds	r1, r0, r2
 801736e:	2a00      	cmp	r2, #0
 8017370:	d054      	beq.n	801741c <memmove+0xbc>
 8017372:	1a9a      	subs	r2, r3, r2
 8017374:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017378:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801737c:	4293      	cmp	r3, r2
 801737e:	d1f9      	bne.n	8017374 <memmove+0x14>
 8017380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017382:	2a0f      	cmp	r2, #15
 8017384:	d948      	bls.n	8017418 <memmove+0xb8>
 8017386:	ea40 0301 	orr.w	r3, r0, r1
 801738a:	079b      	lsls	r3, r3, #30
 801738c:	d147      	bne.n	801741e <memmove+0xbe>
 801738e:	f100 0410 	add.w	r4, r0, #16
 8017392:	f101 0310 	add.w	r3, r1, #16
 8017396:	4615      	mov	r5, r2
 8017398:	f853 6c10 	ldr.w	r6, [r3, #-16]
 801739c:	f844 6c10 	str.w	r6, [r4, #-16]
 80173a0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80173a4:	f844 6c0c 	str.w	r6, [r4, #-12]
 80173a8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80173ac:	f844 6c08 	str.w	r6, [r4, #-8]
 80173b0:	3d10      	subs	r5, #16
 80173b2:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80173b6:	f844 6c04 	str.w	r6, [r4, #-4]
 80173ba:	2d0f      	cmp	r5, #15
 80173bc:	f103 0310 	add.w	r3, r3, #16
 80173c0:	f104 0410 	add.w	r4, r4, #16
 80173c4:	d8e8      	bhi.n	8017398 <memmove+0x38>
 80173c6:	f1a2 0310 	sub.w	r3, r2, #16
 80173ca:	f023 030f 	bic.w	r3, r3, #15
 80173ce:	f002 0e0f 	and.w	lr, r2, #15
 80173d2:	3310      	adds	r3, #16
 80173d4:	f1be 0f03 	cmp.w	lr, #3
 80173d8:	4419      	add	r1, r3
 80173da:	4403      	add	r3, r0
 80173dc:	d921      	bls.n	8017422 <memmove+0xc2>
 80173de:	1f1e      	subs	r6, r3, #4
 80173e0:	460d      	mov	r5, r1
 80173e2:	4674      	mov	r4, lr
 80173e4:	3c04      	subs	r4, #4
 80173e6:	f855 7b04 	ldr.w	r7, [r5], #4
 80173ea:	f846 7f04 	str.w	r7, [r6, #4]!
 80173ee:	2c03      	cmp	r4, #3
 80173f0:	d8f8      	bhi.n	80173e4 <memmove+0x84>
 80173f2:	f1ae 0404 	sub.w	r4, lr, #4
 80173f6:	f024 0403 	bic.w	r4, r4, #3
 80173fa:	3404      	adds	r4, #4
 80173fc:	4423      	add	r3, r4
 80173fe:	4421      	add	r1, r4
 8017400:	f002 0203 	and.w	r2, r2, #3
 8017404:	b152      	cbz	r2, 801741c <memmove+0xbc>
 8017406:	3b01      	subs	r3, #1
 8017408:	440a      	add	r2, r1
 801740a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801740e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017412:	4291      	cmp	r1, r2
 8017414:	d1f9      	bne.n	801740a <memmove+0xaa>
 8017416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017418:	4603      	mov	r3, r0
 801741a:	e7f3      	b.n	8017404 <memmove+0xa4>
 801741c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801741e:	4603      	mov	r3, r0
 8017420:	e7f1      	b.n	8017406 <memmove+0xa6>
 8017422:	4672      	mov	r2, lr
 8017424:	e7ee      	b.n	8017404 <memmove+0xa4>
 8017426:	bf00      	nop

08017428 <memset>:
 8017428:	b470      	push	{r4, r5, r6}
 801742a:	0784      	lsls	r4, r0, #30
 801742c:	d046      	beq.n	80174bc <memset+0x94>
 801742e:	1e54      	subs	r4, r2, #1
 8017430:	2a00      	cmp	r2, #0
 8017432:	d041      	beq.n	80174b8 <memset+0x90>
 8017434:	b2cd      	uxtb	r5, r1
 8017436:	4603      	mov	r3, r0
 8017438:	e002      	b.n	8017440 <memset+0x18>
 801743a:	1e62      	subs	r2, r4, #1
 801743c:	b3e4      	cbz	r4, 80174b8 <memset+0x90>
 801743e:	4614      	mov	r4, r2
 8017440:	f803 5b01 	strb.w	r5, [r3], #1
 8017444:	079a      	lsls	r2, r3, #30
 8017446:	d1f8      	bne.n	801743a <memset+0x12>
 8017448:	2c03      	cmp	r4, #3
 801744a:	d92e      	bls.n	80174aa <memset+0x82>
 801744c:	b2cd      	uxtb	r5, r1
 801744e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8017452:	2c0f      	cmp	r4, #15
 8017454:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8017458:	d919      	bls.n	801748e <memset+0x66>
 801745a:	f103 0210 	add.w	r2, r3, #16
 801745e:	4626      	mov	r6, r4
 8017460:	3e10      	subs	r6, #16
 8017462:	2e0f      	cmp	r6, #15
 8017464:	f842 5c10 	str.w	r5, [r2, #-16]
 8017468:	f842 5c0c 	str.w	r5, [r2, #-12]
 801746c:	f842 5c08 	str.w	r5, [r2, #-8]
 8017470:	f842 5c04 	str.w	r5, [r2, #-4]
 8017474:	f102 0210 	add.w	r2, r2, #16
 8017478:	d8f2      	bhi.n	8017460 <memset+0x38>
 801747a:	f1a4 0210 	sub.w	r2, r4, #16
 801747e:	f022 020f 	bic.w	r2, r2, #15
 8017482:	f004 040f 	and.w	r4, r4, #15
 8017486:	3210      	adds	r2, #16
 8017488:	2c03      	cmp	r4, #3
 801748a:	4413      	add	r3, r2
 801748c:	d90d      	bls.n	80174aa <memset+0x82>
 801748e:	461e      	mov	r6, r3
 8017490:	4622      	mov	r2, r4
 8017492:	3a04      	subs	r2, #4
 8017494:	2a03      	cmp	r2, #3
 8017496:	f846 5b04 	str.w	r5, [r6], #4
 801749a:	d8fa      	bhi.n	8017492 <memset+0x6a>
 801749c:	1f22      	subs	r2, r4, #4
 801749e:	f022 0203 	bic.w	r2, r2, #3
 80174a2:	3204      	adds	r2, #4
 80174a4:	4413      	add	r3, r2
 80174a6:	f004 0403 	and.w	r4, r4, #3
 80174aa:	b12c      	cbz	r4, 80174b8 <memset+0x90>
 80174ac:	b2c9      	uxtb	r1, r1
 80174ae:	441c      	add	r4, r3
 80174b0:	f803 1b01 	strb.w	r1, [r3], #1
 80174b4:	42a3      	cmp	r3, r4
 80174b6:	d1fb      	bne.n	80174b0 <memset+0x88>
 80174b8:	bc70      	pop	{r4, r5, r6}
 80174ba:	4770      	bx	lr
 80174bc:	4614      	mov	r4, r2
 80174be:	4603      	mov	r3, r0
 80174c0:	e7c2      	b.n	8017448 <memset+0x20>
 80174c2:	bf00      	nop

080174c4 <__malloc_lock>:
 80174c4:	4770      	bx	lr
 80174c6:	bf00      	nop

080174c8 <__malloc_unlock>:
 80174c8:	4770      	bx	lr
 80174ca:	bf00      	nop

080174cc <_putc_r>:
 80174cc:	b570      	push	{r4, r5, r6, lr}
 80174ce:	460d      	mov	r5, r1
 80174d0:	4614      	mov	r4, r2
 80174d2:	4606      	mov	r6, r0
 80174d4:	b108      	cbz	r0, 80174da <_putc_r+0xe>
 80174d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80174d8:	b1d3      	cbz	r3, 8017510 <_putc_r+0x44>
 80174da:	68a3      	ldr	r3, [r4, #8]
 80174dc:	3b01      	subs	r3, #1
 80174de:	2b00      	cmp	r3, #0
 80174e0:	60a3      	str	r3, [r4, #8]
 80174e2:	db06      	blt.n	80174f2 <_putc_r+0x26>
 80174e4:	6823      	ldr	r3, [r4, #0]
 80174e6:	701d      	strb	r5, [r3, #0]
 80174e8:	6823      	ldr	r3, [r4, #0]
 80174ea:	1c5a      	adds	r2, r3, #1
 80174ec:	6022      	str	r2, [r4, #0]
 80174ee:	7818      	ldrb	r0, [r3, #0]
 80174f0:	bd70      	pop	{r4, r5, r6, pc}
 80174f2:	69a2      	ldr	r2, [r4, #24]
 80174f4:	4293      	cmp	r3, r2
 80174f6:	db0e      	blt.n	8017516 <_putc_r+0x4a>
 80174f8:	6823      	ldr	r3, [r4, #0]
 80174fa:	701d      	strb	r5, [r3, #0]
 80174fc:	6823      	ldr	r3, [r4, #0]
 80174fe:	7819      	ldrb	r1, [r3, #0]
 8017500:	290a      	cmp	r1, #10
 8017502:	d1f2      	bne.n	80174ea <_putc_r+0x1e>
 8017504:	4630      	mov	r0, r6
 8017506:	4622      	mov	r2, r4
 8017508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801750c:	f001 bd5a 	b.w	8018fc4 <__swbuf_r>
 8017510:	f002 ff36 	bl	801a380 <__sinit>
 8017514:	e7e1      	b.n	80174da <_putc_r+0xe>
 8017516:	4630      	mov	r0, r6
 8017518:	4629      	mov	r1, r5
 801751a:	4622      	mov	r2, r4
 801751c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017520:	f001 bd50 	b.w	8018fc4 <__swbuf_r>

08017524 <realloc>:
 8017524:	4b02      	ldr	r3, [pc, #8]	; (8017530 <realloc+0xc>)
 8017526:	460a      	mov	r2, r1
 8017528:	4601      	mov	r1, r0
 801752a:	6818      	ldr	r0, [r3, #0]
 801752c:	f000 b802 	b.w	8017534 <_realloc_r>
 8017530:	20000c30 	.word	0x20000c30

08017534 <_realloc_r>:
 8017534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017538:	4617      	mov	r7, r2
 801753a:	b083      	sub	sp, #12
 801753c:	460e      	mov	r6, r1
 801753e:	2900      	cmp	r1, #0
 8017540:	f000 80e7 	beq.w	8017712 <_realloc_r+0x1de>
 8017544:	4681      	mov	r9, r0
 8017546:	f107 050b 	add.w	r5, r7, #11
 801754a:	f7ff ffbb 	bl	80174c4 <__malloc_lock>
 801754e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017552:	2d16      	cmp	r5, #22
 8017554:	f023 0403 	bic.w	r4, r3, #3
 8017558:	f1a6 0808 	sub.w	r8, r6, #8
 801755c:	d84c      	bhi.n	80175f8 <_realloc_r+0xc4>
 801755e:	2210      	movs	r2, #16
 8017560:	4615      	mov	r5, r2
 8017562:	42af      	cmp	r7, r5
 8017564:	d84d      	bhi.n	8017602 <_realloc_r+0xce>
 8017566:	4294      	cmp	r4, r2
 8017568:	f280 8084 	bge.w	8017674 <_realloc_r+0x140>
 801756c:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 801791c <_realloc_r+0x3e8>
 8017570:	f8db 0008 	ldr.w	r0, [fp, #8]
 8017574:	eb08 0104 	add.w	r1, r8, r4
 8017578:	4288      	cmp	r0, r1
 801757a:	f000 80d6 	beq.w	801772a <_realloc_r+0x1f6>
 801757e:	6848      	ldr	r0, [r1, #4]
 8017580:	f020 0e01 	bic.w	lr, r0, #1
 8017584:	448e      	add	lr, r1
 8017586:	f8de e004 	ldr.w	lr, [lr, #4]
 801758a:	f01e 0f01 	tst.w	lr, #1
 801758e:	d13f      	bne.n	8017610 <_realloc_r+0xdc>
 8017590:	f020 0003 	bic.w	r0, r0, #3
 8017594:	4420      	add	r0, r4
 8017596:	4290      	cmp	r0, r2
 8017598:	f280 80c1 	bge.w	801771e <_realloc_r+0x1ea>
 801759c:	07db      	lsls	r3, r3, #31
 801759e:	f100 808f 	bmi.w	80176c0 <_realloc_r+0x18c>
 80175a2:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80175a6:	ebc3 0a08 	rsb	sl, r3, r8
 80175aa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80175ae:	f023 0303 	bic.w	r3, r3, #3
 80175b2:	eb00 0e03 	add.w	lr, r0, r3
 80175b6:	4596      	cmp	lr, r2
 80175b8:	db34      	blt.n	8017624 <_realloc_r+0xf0>
 80175ba:	68cb      	ldr	r3, [r1, #12]
 80175bc:	688a      	ldr	r2, [r1, #8]
 80175be:	4657      	mov	r7, sl
 80175c0:	60d3      	str	r3, [r2, #12]
 80175c2:	609a      	str	r2, [r3, #8]
 80175c4:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80175c8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80175cc:	60cb      	str	r3, [r1, #12]
 80175ce:	1f22      	subs	r2, r4, #4
 80175d0:	2a24      	cmp	r2, #36	; 0x24
 80175d2:	6099      	str	r1, [r3, #8]
 80175d4:	f200 8136 	bhi.w	8017844 <_realloc_r+0x310>
 80175d8:	2a13      	cmp	r2, #19
 80175da:	f240 80fd 	bls.w	80177d8 <_realloc_r+0x2a4>
 80175de:	6833      	ldr	r3, [r6, #0]
 80175e0:	f8ca 3008 	str.w	r3, [sl, #8]
 80175e4:	6873      	ldr	r3, [r6, #4]
 80175e6:	f8ca 300c 	str.w	r3, [sl, #12]
 80175ea:	2a1b      	cmp	r2, #27
 80175ec:	f200 8140 	bhi.w	8017870 <_realloc_r+0x33c>
 80175f0:	3608      	adds	r6, #8
 80175f2:	f10a 0310 	add.w	r3, sl, #16
 80175f6:	e0f0      	b.n	80177da <_realloc_r+0x2a6>
 80175f8:	f025 0507 	bic.w	r5, r5, #7
 80175fc:	2d00      	cmp	r5, #0
 80175fe:	462a      	mov	r2, r5
 8017600:	daaf      	bge.n	8017562 <_realloc_r+0x2e>
 8017602:	230c      	movs	r3, #12
 8017604:	2000      	movs	r0, #0
 8017606:	f8c9 3000 	str.w	r3, [r9]
 801760a:	b003      	add	sp, #12
 801760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017610:	07d9      	lsls	r1, r3, #31
 8017612:	d455      	bmi.n	80176c0 <_realloc_r+0x18c>
 8017614:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8017618:	ebc3 0a08 	rsb	sl, r3, r8
 801761c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017620:	f023 0303 	bic.w	r3, r3, #3
 8017624:	4423      	add	r3, r4
 8017626:	4293      	cmp	r3, r2
 8017628:	db4a      	blt.n	80176c0 <_realloc_r+0x18c>
 801762a:	4657      	mov	r7, sl
 801762c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8017630:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8017634:	1f22      	subs	r2, r4, #4
 8017636:	2a24      	cmp	r2, #36	; 0x24
 8017638:	60c1      	str	r1, [r0, #12]
 801763a:	6088      	str	r0, [r1, #8]
 801763c:	f200 810e 	bhi.w	801785c <_realloc_r+0x328>
 8017640:	2a13      	cmp	r2, #19
 8017642:	f240 8109 	bls.w	8017858 <_realloc_r+0x324>
 8017646:	6831      	ldr	r1, [r6, #0]
 8017648:	f8ca 1008 	str.w	r1, [sl, #8]
 801764c:	6871      	ldr	r1, [r6, #4]
 801764e:	f8ca 100c 	str.w	r1, [sl, #12]
 8017652:	2a1b      	cmp	r2, #27
 8017654:	f200 8121 	bhi.w	801789a <_realloc_r+0x366>
 8017658:	3608      	adds	r6, #8
 801765a:	f10a 0210 	add.w	r2, sl, #16
 801765e:	6831      	ldr	r1, [r6, #0]
 8017660:	6011      	str	r1, [r2, #0]
 8017662:	6871      	ldr	r1, [r6, #4]
 8017664:	6051      	str	r1, [r2, #4]
 8017666:	68b1      	ldr	r1, [r6, #8]
 8017668:	6091      	str	r1, [r2, #8]
 801766a:	461c      	mov	r4, r3
 801766c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017670:	463e      	mov	r6, r7
 8017672:	46d0      	mov	r8, sl
 8017674:	1b62      	subs	r2, r4, r5
 8017676:	2a0f      	cmp	r2, #15
 8017678:	f003 0301 	and.w	r3, r3, #1
 801767c:	d80e      	bhi.n	801769c <_realloc_r+0x168>
 801767e:	4323      	orrs	r3, r4
 8017680:	4444      	add	r4, r8
 8017682:	f8c8 3004 	str.w	r3, [r8, #4]
 8017686:	6863      	ldr	r3, [r4, #4]
 8017688:	f043 0301 	orr.w	r3, r3, #1
 801768c:	6063      	str	r3, [r4, #4]
 801768e:	4648      	mov	r0, r9
 8017690:	f7ff ff1a 	bl	80174c8 <__malloc_unlock>
 8017694:	4630      	mov	r0, r6
 8017696:	b003      	add	sp, #12
 8017698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801769c:	eb08 0105 	add.w	r1, r8, r5
 80176a0:	431d      	orrs	r5, r3
 80176a2:	f042 0301 	orr.w	r3, r2, #1
 80176a6:	440a      	add	r2, r1
 80176a8:	f8c8 5004 	str.w	r5, [r8, #4]
 80176ac:	604b      	str	r3, [r1, #4]
 80176ae:	6853      	ldr	r3, [r2, #4]
 80176b0:	f043 0301 	orr.w	r3, r3, #1
 80176b4:	3108      	adds	r1, #8
 80176b6:	6053      	str	r3, [r2, #4]
 80176b8:	4648      	mov	r0, r9
 80176ba:	f002 feb9 	bl	801a430 <_free_r>
 80176be:	e7e6      	b.n	801768e <_realloc_r+0x15a>
 80176c0:	4639      	mov	r1, r7
 80176c2:	4648      	mov	r0, r9
 80176c4:	f7ff fb3e 	bl	8016d44 <_malloc_r>
 80176c8:	4607      	mov	r7, r0
 80176ca:	b1d8      	cbz	r0, 8017704 <_realloc_r+0x1d0>
 80176cc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80176d0:	f023 0201 	bic.w	r2, r3, #1
 80176d4:	4442      	add	r2, r8
 80176d6:	f1a0 0108 	sub.w	r1, r0, #8
 80176da:	4291      	cmp	r1, r2
 80176dc:	f000 80ac 	beq.w	8017838 <_realloc_r+0x304>
 80176e0:	1f22      	subs	r2, r4, #4
 80176e2:	2a24      	cmp	r2, #36	; 0x24
 80176e4:	f200 8099 	bhi.w	801781a <_realloc_r+0x2e6>
 80176e8:	2a13      	cmp	r2, #19
 80176ea:	d86a      	bhi.n	80177c2 <_realloc_r+0x28e>
 80176ec:	4603      	mov	r3, r0
 80176ee:	4632      	mov	r2, r6
 80176f0:	6811      	ldr	r1, [r2, #0]
 80176f2:	6019      	str	r1, [r3, #0]
 80176f4:	6851      	ldr	r1, [r2, #4]
 80176f6:	6059      	str	r1, [r3, #4]
 80176f8:	6892      	ldr	r2, [r2, #8]
 80176fa:	609a      	str	r2, [r3, #8]
 80176fc:	4631      	mov	r1, r6
 80176fe:	4648      	mov	r0, r9
 8017700:	f002 fe96 	bl	801a430 <_free_r>
 8017704:	4648      	mov	r0, r9
 8017706:	f7ff fedf 	bl	80174c8 <__malloc_unlock>
 801770a:	4638      	mov	r0, r7
 801770c:	b003      	add	sp, #12
 801770e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017712:	4611      	mov	r1, r2
 8017714:	b003      	add	sp, #12
 8017716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801771a:	f7ff bb13 	b.w	8016d44 <_malloc_r>
 801771e:	68ca      	ldr	r2, [r1, #12]
 8017720:	6889      	ldr	r1, [r1, #8]
 8017722:	4604      	mov	r4, r0
 8017724:	60ca      	str	r2, [r1, #12]
 8017726:	6091      	str	r1, [r2, #8]
 8017728:	e7a4      	b.n	8017674 <_realloc_r+0x140>
 801772a:	6841      	ldr	r1, [r0, #4]
 801772c:	f021 0103 	bic.w	r1, r1, #3
 8017730:	4421      	add	r1, r4
 8017732:	f105 0010 	add.w	r0, r5, #16
 8017736:	4281      	cmp	r1, r0
 8017738:	da5b      	bge.n	80177f2 <_realloc_r+0x2be>
 801773a:	07db      	lsls	r3, r3, #31
 801773c:	d4c0      	bmi.n	80176c0 <_realloc_r+0x18c>
 801773e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8017742:	ebc3 0a08 	rsb	sl, r3, r8
 8017746:	f8da 3004 	ldr.w	r3, [sl, #4]
 801774a:	f023 0303 	bic.w	r3, r3, #3
 801774e:	eb01 0c03 	add.w	ip, r1, r3
 8017752:	4560      	cmp	r0, ip
 8017754:	f73f af66 	bgt.w	8017624 <_realloc_r+0xf0>
 8017758:	4657      	mov	r7, sl
 801775a:	f8da 300c 	ldr.w	r3, [sl, #12]
 801775e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8017762:	1f22      	subs	r2, r4, #4
 8017764:	2a24      	cmp	r2, #36	; 0x24
 8017766:	60cb      	str	r3, [r1, #12]
 8017768:	6099      	str	r1, [r3, #8]
 801776a:	f200 80b8 	bhi.w	80178de <_realloc_r+0x3aa>
 801776e:	2a13      	cmp	r2, #19
 8017770:	f240 80a9 	bls.w	80178c6 <_realloc_r+0x392>
 8017774:	6833      	ldr	r3, [r6, #0]
 8017776:	f8ca 3008 	str.w	r3, [sl, #8]
 801777a:	6873      	ldr	r3, [r6, #4]
 801777c:	f8ca 300c 	str.w	r3, [sl, #12]
 8017780:	2a1b      	cmp	r2, #27
 8017782:	f200 80b5 	bhi.w	80178f0 <_realloc_r+0x3bc>
 8017786:	3608      	adds	r6, #8
 8017788:	f10a 0310 	add.w	r3, sl, #16
 801778c:	6832      	ldr	r2, [r6, #0]
 801778e:	601a      	str	r2, [r3, #0]
 8017790:	6872      	ldr	r2, [r6, #4]
 8017792:	605a      	str	r2, [r3, #4]
 8017794:	68b2      	ldr	r2, [r6, #8]
 8017796:	609a      	str	r2, [r3, #8]
 8017798:	eb0a 0205 	add.w	r2, sl, r5
 801779c:	ebc5 030c 	rsb	r3, r5, ip
 80177a0:	f043 0301 	orr.w	r3, r3, #1
 80177a4:	f8cb 2008 	str.w	r2, [fp, #8]
 80177a8:	6053      	str	r3, [r2, #4]
 80177aa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80177ae:	f003 0301 	and.w	r3, r3, #1
 80177b2:	431d      	orrs	r5, r3
 80177b4:	4648      	mov	r0, r9
 80177b6:	f8ca 5004 	str.w	r5, [sl, #4]
 80177ba:	f7ff fe85 	bl	80174c8 <__malloc_unlock>
 80177be:	4638      	mov	r0, r7
 80177c0:	e769      	b.n	8017696 <_realloc_r+0x162>
 80177c2:	6833      	ldr	r3, [r6, #0]
 80177c4:	6003      	str	r3, [r0, #0]
 80177c6:	6873      	ldr	r3, [r6, #4]
 80177c8:	6043      	str	r3, [r0, #4]
 80177ca:	2a1b      	cmp	r2, #27
 80177cc:	d829      	bhi.n	8017822 <_realloc_r+0x2ee>
 80177ce:	f100 0308 	add.w	r3, r0, #8
 80177d2:	f106 0208 	add.w	r2, r6, #8
 80177d6:	e78b      	b.n	80176f0 <_realloc_r+0x1bc>
 80177d8:	463b      	mov	r3, r7
 80177da:	6832      	ldr	r2, [r6, #0]
 80177dc:	601a      	str	r2, [r3, #0]
 80177de:	6872      	ldr	r2, [r6, #4]
 80177e0:	605a      	str	r2, [r3, #4]
 80177e2:	68b2      	ldr	r2, [r6, #8]
 80177e4:	609a      	str	r2, [r3, #8]
 80177e6:	463e      	mov	r6, r7
 80177e8:	4674      	mov	r4, lr
 80177ea:	f8da 3004 	ldr.w	r3, [sl, #4]
 80177ee:	46d0      	mov	r8, sl
 80177f0:	e740      	b.n	8017674 <_realloc_r+0x140>
 80177f2:	eb08 0205 	add.w	r2, r8, r5
 80177f6:	1b4b      	subs	r3, r1, r5
 80177f8:	f043 0301 	orr.w	r3, r3, #1
 80177fc:	f8cb 2008 	str.w	r2, [fp, #8]
 8017800:	6053      	str	r3, [r2, #4]
 8017802:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017806:	f003 0301 	and.w	r3, r3, #1
 801780a:	431d      	orrs	r5, r3
 801780c:	4648      	mov	r0, r9
 801780e:	f846 5c04 	str.w	r5, [r6, #-4]
 8017812:	f7ff fe59 	bl	80174c8 <__malloc_unlock>
 8017816:	4630      	mov	r0, r6
 8017818:	e73d      	b.n	8017696 <_realloc_r+0x162>
 801781a:	4631      	mov	r1, r6
 801781c:	f7ff fda0 	bl	8017360 <memmove>
 8017820:	e76c      	b.n	80176fc <_realloc_r+0x1c8>
 8017822:	68b3      	ldr	r3, [r6, #8]
 8017824:	6083      	str	r3, [r0, #8]
 8017826:	68f3      	ldr	r3, [r6, #12]
 8017828:	60c3      	str	r3, [r0, #12]
 801782a:	2a24      	cmp	r2, #36	; 0x24
 801782c:	d02c      	beq.n	8017888 <_realloc_r+0x354>
 801782e:	f100 0310 	add.w	r3, r0, #16
 8017832:	f106 0210 	add.w	r2, r6, #16
 8017836:	e75b      	b.n	80176f0 <_realloc_r+0x1bc>
 8017838:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801783c:	f022 0203 	bic.w	r2, r2, #3
 8017840:	4414      	add	r4, r2
 8017842:	e717      	b.n	8017674 <_realloc_r+0x140>
 8017844:	4631      	mov	r1, r6
 8017846:	4638      	mov	r0, r7
 8017848:	4674      	mov	r4, lr
 801784a:	463e      	mov	r6, r7
 801784c:	f7ff fd88 	bl	8017360 <memmove>
 8017850:	46d0      	mov	r8, sl
 8017852:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017856:	e70d      	b.n	8017674 <_realloc_r+0x140>
 8017858:	463a      	mov	r2, r7
 801785a:	e700      	b.n	801765e <_realloc_r+0x12a>
 801785c:	4631      	mov	r1, r6
 801785e:	4638      	mov	r0, r7
 8017860:	461c      	mov	r4, r3
 8017862:	463e      	mov	r6, r7
 8017864:	f7ff fd7c 	bl	8017360 <memmove>
 8017868:	46d0      	mov	r8, sl
 801786a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801786e:	e701      	b.n	8017674 <_realloc_r+0x140>
 8017870:	68b3      	ldr	r3, [r6, #8]
 8017872:	f8ca 3010 	str.w	r3, [sl, #16]
 8017876:	68f3      	ldr	r3, [r6, #12]
 8017878:	f8ca 3014 	str.w	r3, [sl, #20]
 801787c:	2a24      	cmp	r2, #36	; 0x24
 801787e:	d018      	beq.n	80178b2 <_realloc_r+0x37e>
 8017880:	3610      	adds	r6, #16
 8017882:	f10a 0318 	add.w	r3, sl, #24
 8017886:	e7a8      	b.n	80177da <_realloc_r+0x2a6>
 8017888:	6933      	ldr	r3, [r6, #16]
 801788a:	6103      	str	r3, [r0, #16]
 801788c:	6973      	ldr	r3, [r6, #20]
 801788e:	6143      	str	r3, [r0, #20]
 8017890:	f106 0218 	add.w	r2, r6, #24
 8017894:	f100 0318 	add.w	r3, r0, #24
 8017898:	e72a      	b.n	80176f0 <_realloc_r+0x1bc>
 801789a:	68b1      	ldr	r1, [r6, #8]
 801789c:	f8ca 1010 	str.w	r1, [sl, #16]
 80178a0:	68f1      	ldr	r1, [r6, #12]
 80178a2:	f8ca 1014 	str.w	r1, [sl, #20]
 80178a6:	2a24      	cmp	r2, #36	; 0x24
 80178a8:	d00f      	beq.n	80178ca <_realloc_r+0x396>
 80178aa:	3610      	adds	r6, #16
 80178ac:	f10a 0218 	add.w	r2, sl, #24
 80178b0:	e6d5      	b.n	801765e <_realloc_r+0x12a>
 80178b2:	6933      	ldr	r3, [r6, #16]
 80178b4:	f8ca 3018 	str.w	r3, [sl, #24]
 80178b8:	6973      	ldr	r3, [r6, #20]
 80178ba:	f8ca 301c 	str.w	r3, [sl, #28]
 80178be:	3618      	adds	r6, #24
 80178c0:	f10a 0320 	add.w	r3, sl, #32
 80178c4:	e789      	b.n	80177da <_realloc_r+0x2a6>
 80178c6:	463b      	mov	r3, r7
 80178c8:	e760      	b.n	801778c <_realloc_r+0x258>
 80178ca:	6932      	ldr	r2, [r6, #16]
 80178cc:	f8ca 2018 	str.w	r2, [sl, #24]
 80178d0:	6972      	ldr	r2, [r6, #20]
 80178d2:	f8ca 201c 	str.w	r2, [sl, #28]
 80178d6:	3618      	adds	r6, #24
 80178d8:	f10a 0220 	add.w	r2, sl, #32
 80178dc:	e6bf      	b.n	801765e <_realloc_r+0x12a>
 80178de:	4631      	mov	r1, r6
 80178e0:	4638      	mov	r0, r7
 80178e2:	f8cd c004 	str.w	ip, [sp, #4]
 80178e6:	f7ff fd3b 	bl	8017360 <memmove>
 80178ea:	f8dd c004 	ldr.w	ip, [sp, #4]
 80178ee:	e753      	b.n	8017798 <_realloc_r+0x264>
 80178f0:	68b3      	ldr	r3, [r6, #8]
 80178f2:	f8ca 3010 	str.w	r3, [sl, #16]
 80178f6:	68f3      	ldr	r3, [r6, #12]
 80178f8:	f8ca 3014 	str.w	r3, [sl, #20]
 80178fc:	2a24      	cmp	r2, #36	; 0x24
 80178fe:	d003      	beq.n	8017908 <_realloc_r+0x3d4>
 8017900:	3610      	adds	r6, #16
 8017902:	f10a 0318 	add.w	r3, sl, #24
 8017906:	e741      	b.n	801778c <_realloc_r+0x258>
 8017908:	6933      	ldr	r3, [r6, #16]
 801790a:	f8ca 3018 	str.w	r3, [sl, #24]
 801790e:	6973      	ldr	r3, [r6, #20]
 8017910:	f8ca 301c 	str.w	r3, [sl, #28]
 8017914:	3618      	adds	r6, #24
 8017916:	f10a 0320 	add.w	r3, sl, #32
 801791a:	e737      	b.n	801778c <_realloc_r+0x258>
 801791c:	20000c34 	.word	0x20000c34

08017920 <_raise_r>:
 8017920:	291f      	cmp	r1, #31
 8017922:	b538      	push	{r3, r4, r5, lr}
 8017924:	d822      	bhi.n	801796c <_raise_r+0x4c>
 8017926:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801792a:	4605      	mov	r5, r0
 801792c:	460c      	mov	r4, r1
 801792e:	b19a      	cbz	r2, 8017958 <_raise_r+0x38>
 8017930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017934:	b183      	cbz	r3, 8017958 <_raise_r+0x38>
 8017936:	2b01      	cmp	r3, #1
 8017938:	d00c      	beq.n	8017954 <_raise_r+0x34>
 801793a:	1c59      	adds	r1, r3, #1
 801793c:	d006      	beq.n	801794c <_raise_r+0x2c>
 801793e:	2500      	movs	r5, #0
 8017940:	4620      	mov	r0, r4
 8017942:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8017946:	4798      	blx	r3
 8017948:	4628      	mov	r0, r5
 801794a:	bd38      	pop	{r3, r4, r5, pc}
 801794c:	2316      	movs	r3, #22
 801794e:	6003      	str	r3, [r0, #0]
 8017950:	2001      	movs	r0, #1
 8017952:	bd38      	pop	{r3, r4, r5, pc}
 8017954:	2000      	movs	r0, #0
 8017956:	bd38      	pop	{r3, r4, r5, pc}
 8017958:	4628      	mov	r0, r5
 801795a:	f000 f829 	bl	80179b0 <_getpid_r>
 801795e:	4622      	mov	r2, r4
 8017960:	4601      	mov	r1, r0
 8017962:	4628      	mov	r0, r5
 8017964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017968:	f000 b80e 	b.w	8017988 <_kill_r>
 801796c:	2316      	movs	r3, #22
 801796e:	6003      	str	r3, [r0, #0]
 8017970:	f04f 30ff 	mov.w	r0, #4294967295
 8017974:	bd38      	pop	{r3, r4, r5, pc}
 8017976:	bf00      	nop

08017978 <raise>:
 8017978:	4b02      	ldr	r3, [pc, #8]	; (8017984 <raise+0xc>)
 801797a:	4601      	mov	r1, r0
 801797c:	6818      	ldr	r0, [r3, #0]
 801797e:	f7ff bfcf 	b.w	8017920 <_raise_r>
 8017982:	bf00      	nop
 8017984:	20000c30 	.word	0x20000c30

08017988 <_kill_r>:
 8017988:	b538      	push	{r3, r4, r5, lr}
 801798a:	4c08      	ldr	r4, [pc, #32]	; (80179ac <_kill_r+0x24>)
 801798c:	2300      	movs	r3, #0
 801798e:	4605      	mov	r5, r0
 8017990:	4608      	mov	r0, r1
 8017992:	4611      	mov	r1, r2
 8017994:	6023      	str	r3, [r4, #0]
 8017996:	f7f7 fa33 	bl	800ee00 <_kill>
 801799a:	1c43      	adds	r3, r0, #1
 801799c:	d000      	beq.n	80179a0 <_kill_r+0x18>
 801799e:	bd38      	pop	{r3, r4, r5, pc}
 80179a0:	6823      	ldr	r3, [r4, #0]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d0fb      	beq.n	801799e <_kill_r+0x16>
 80179a6:	602b      	str	r3, [r5, #0]
 80179a8:	bd38      	pop	{r3, r4, r5, pc}
 80179aa:	bf00      	nop
 80179ac:	2000303c 	.word	0x2000303c

080179b0 <_getpid_r>:
 80179b0:	f7f7 ba1e 	b.w	800edf0 <_getpid>

080179b4 <sprintf>:
 80179b4:	b40e      	push	{r1, r2, r3}
 80179b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179b8:	b09c      	sub	sp, #112	; 0x70
 80179ba:	ab21      	add	r3, sp, #132	; 0x84
 80179bc:	490f      	ldr	r1, [pc, #60]	; (80179fc <sprintf+0x48>)
 80179be:	f853 2b04 	ldr.w	r2, [r3], #4
 80179c2:	9301      	str	r3, [sp, #4]
 80179c4:	4605      	mov	r5, r0
 80179c6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80179ca:	6808      	ldr	r0, [r1, #0]
 80179cc:	9502      	str	r5, [sp, #8]
 80179ce:	f44f 7702 	mov.w	r7, #520	; 0x208
 80179d2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80179d6:	a902      	add	r1, sp, #8
 80179d8:	9506      	str	r5, [sp, #24]
 80179da:	f8ad 7014 	strh.w	r7, [sp, #20]
 80179de:	9404      	str	r4, [sp, #16]
 80179e0:	9407      	str	r4, [sp, #28]
 80179e2:	f8ad 6016 	strh.w	r6, [sp, #22]
 80179e6:	f000 f887 	bl	8017af8 <_svfprintf_r>
 80179ea:	9b02      	ldr	r3, [sp, #8]
 80179ec:	2200      	movs	r2, #0
 80179ee:	701a      	strb	r2, [r3, #0]
 80179f0:	b01c      	add	sp, #112	; 0x70
 80179f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80179f6:	b003      	add	sp, #12
 80179f8:	4770      	bx	lr
 80179fa:	bf00      	nop
 80179fc:	20000c30 	.word	0x20000c30

08017a00 <strlen>:
 8017a00:	f020 0103 	bic.w	r1, r0, #3
 8017a04:	f010 0003 	ands.w	r0, r0, #3
 8017a08:	f1c0 0000 	rsb	r0, r0, #0
 8017a0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8017a10:	f100 0c04 	add.w	ip, r0, #4
 8017a14:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017a18:	f06f 0200 	mvn.w	r2, #0
 8017a1c:	bf1c      	itt	ne
 8017a1e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8017a22:	4313      	orrne	r3, r2
 8017a24:	f04f 0c01 	mov.w	ip, #1
 8017a28:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8017a2c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8017a30:	eba3 020c 	sub.w	r2, r3, ip
 8017a34:	ea22 0203 	bic.w	r2, r2, r3
 8017a38:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8017a3c:	bf04      	itt	eq
 8017a3e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8017a42:	3004      	addeq	r0, #4
 8017a44:	d0f4      	beq.n	8017a30 <strlen+0x30>
 8017a46:	f1c2 0100 	rsb	r1, r2, #0
 8017a4a:	ea02 0201 	and.w	r2, r2, r1
 8017a4e:	fab2 f282 	clz	r2, r2
 8017a52:	f1c2 021f 	rsb	r2, r2, #31
 8017a56:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8017a5a:	4770      	bx	lr

08017a5c <strncmp>:
 8017a5c:	2a00      	cmp	r2, #0
 8017a5e:	d03e      	beq.n	8017ade <strncmp+0x82>
 8017a60:	ea40 0301 	orr.w	r3, r0, r1
 8017a64:	f013 0303 	ands.w	r3, r3, #3
 8017a68:	b4f0      	push	{r4, r5, r6, r7}
 8017a6a:	d125      	bne.n	8017ab8 <strncmp+0x5c>
 8017a6c:	2a03      	cmp	r2, #3
 8017a6e:	d923      	bls.n	8017ab8 <strncmp+0x5c>
 8017a70:	6804      	ldr	r4, [r0, #0]
 8017a72:	680d      	ldr	r5, [r1, #0]
 8017a74:	42ac      	cmp	r4, r5
 8017a76:	d11f      	bne.n	8017ab8 <strncmp+0x5c>
 8017a78:	3a04      	subs	r2, #4
 8017a7a:	d032      	beq.n	8017ae2 <strncmp+0x86>
 8017a7c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8017a80:	ea25 0404 	bic.w	r4, r5, r4
 8017a84:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8017a88:	d12e      	bne.n	8017ae8 <strncmp+0x8c>
 8017a8a:	1d07      	adds	r7, r0, #4
 8017a8c:	1d0d      	adds	r5, r1, #4
 8017a8e:	e00d      	b.n	8017aac <strncmp+0x50>
 8017a90:	f857 3b04 	ldr.w	r3, [r7], #4
 8017a94:	680e      	ldr	r6, [r1, #0]
 8017a96:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8017a9a:	42b3      	cmp	r3, r6
 8017a9c:	ea24 0403 	bic.w	r4, r4, r3
 8017aa0:	d10a      	bne.n	8017ab8 <strncmp+0x5c>
 8017aa2:	3a04      	subs	r2, #4
 8017aa4:	d01d      	beq.n	8017ae2 <strncmp+0x86>
 8017aa6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8017aaa:	d120      	bne.n	8017aee <strncmp+0x92>
 8017aac:	2a03      	cmp	r2, #3
 8017aae:	4629      	mov	r1, r5
 8017ab0:	4638      	mov	r0, r7
 8017ab2:	f105 0504 	add.w	r5, r5, #4
 8017ab6:	d8eb      	bhi.n	8017a90 <strncmp+0x34>
 8017ab8:	7803      	ldrb	r3, [r0, #0]
 8017aba:	780c      	ldrb	r4, [r1, #0]
 8017abc:	42a3      	cmp	r3, r4
 8017abe:	f102 32ff 	add.w	r2, r2, #4294967295
 8017ac2:	d109      	bne.n	8017ad8 <strncmp+0x7c>
 8017ac4:	b16a      	cbz	r2, 8017ae2 <strncmp+0x86>
 8017ac6:	b17b      	cbz	r3, 8017ae8 <strncmp+0x8c>
 8017ac8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8017acc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017ad0:	42a3      	cmp	r3, r4
 8017ad2:	f102 32ff 	add.w	r2, r2, #4294967295
 8017ad6:	d0f5      	beq.n	8017ac4 <strncmp+0x68>
 8017ad8:	1b18      	subs	r0, r3, r4
 8017ada:	bcf0      	pop	{r4, r5, r6, r7}
 8017adc:	4770      	bx	lr
 8017ade:	4610      	mov	r0, r2
 8017ae0:	4770      	bx	lr
 8017ae2:	4610      	mov	r0, r2
 8017ae4:	bcf0      	pop	{r4, r5, r6, r7}
 8017ae6:	4770      	bx	lr
 8017ae8:	4618      	mov	r0, r3
 8017aea:	bcf0      	pop	{r4, r5, r6, r7}
 8017aec:	4770      	bx	lr
 8017aee:	2000      	movs	r0, #0
 8017af0:	e7f3      	b.n	8017ada <strncmp+0x7e>
 8017af2:	bf00      	nop
 8017af4:	0000      	movs	r0, r0
	...

08017af8 <_svfprintf_r>:
 8017af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017afc:	b0bf      	sub	sp, #252	; 0xfc
 8017afe:	4689      	mov	r9, r1
 8017b00:	9206      	str	r2, [sp, #24]
 8017b02:	930a      	str	r3, [sp, #40]	; 0x28
 8017b04:	9004      	str	r0, [sp, #16]
 8017b06:	f002 fd95 	bl	801a634 <_localeconv_r>
 8017b0a:	6803      	ldr	r3, [r0, #0]
 8017b0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b0e:	4618      	mov	r0, r3
 8017b10:	f7ff ff76 	bl	8017a00 <strlen>
 8017b14:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017b18:	9014      	str	r0, [sp, #80]	; 0x50
 8017b1a:	061a      	lsls	r2, r3, #24
 8017b1c:	d504      	bpl.n	8017b28 <_svfprintf_r+0x30>
 8017b1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	f001 80a1 	beq.w	8018c6a <_svfprintf_r+0x1172>
 8017b28:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8017d90 <_svfprintf_r+0x298>
 8017b2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017b30:	2300      	movs	r3, #0
 8017b32:	af2e      	add	r7, sp, #184	; 0xb8
 8017b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b36:	9323      	str	r3, [sp, #140]	; 0x8c
 8017b38:	9322      	str	r3, [sp, #136]	; 0x88
 8017b3a:	9312      	str	r3, [sp, #72]	; 0x48
 8017b3c:	9315      	str	r3, [sp, #84]	; 0x54
 8017b3e:	9307      	str	r3, [sp, #28]
 8017b40:	9721      	str	r7, [sp, #132]	; 0x84
 8017b42:	463c      	mov	r4, r7
 8017b44:	464e      	mov	r6, r9
 8017b46:	9d06      	ldr	r5, [sp, #24]
 8017b48:	782b      	ldrb	r3, [r5, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f000 80a9 	beq.w	8017ca2 <_svfprintf_r+0x1aa>
 8017b50:	2b25      	cmp	r3, #37	; 0x25
 8017b52:	d102      	bne.n	8017b5a <_svfprintf_r+0x62>
 8017b54:	e0a5      	b.n	8017ca2 <_svfprintf_r+0x1aa>
 8017b56:	2b25      	cmp	r3, #37	; 0x25
 8017b58:	d003      	beq.n	8017b62 <_svfprintf_r+0x6a>
 8017b5a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d1f9      	bne.n	8017b56 <_svfprintf_r+0x5e>
 8017b62:	9b06      	ldr	r3, [sp, #24]
 8017b64:	1aeb      	subs	r3, r5, r3
 8017b66:	b173      	cbz	r3, 8017b86 <_svfprintf_r+0x8e>
 8017b68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017b6a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017b6c:	9806      	ldr	r0, [sp, #24]
 8017b6e:	6020      	str	r0, [r4, #0]
 8017b70:	3201      	adds	r2, #1
 8017b72:	4419      	add	r1, r3
 8017b74:	2a07      	cmp	r2, #7
 8017b76:	6063      	str	r3, [r4, #4]
 8017b78:	9123      	str	r1, [sp, #140]	; 0x8c
 8017b7a:	9222      	str	r2, [sp, #136]	; 0x88
 8017b7c:	dc72      	bgt.n	8017c64 <_svfprintf_r+0x16c>
 8017b7e:	3408      	adds	r4, #8
 8017b80:	9a07      	ldr	r2, [sp, #28]
 8017b82:	441a      	add	r2, r3
 8017b84:	9207      	str	r2, [sp, #28]
 8017b86:	782b      	ldrb	r3, [r5, #0]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	f000 87cb 	beq.w	8018b24 <_svfprintf_r+0x102c>
 8017b8e:	2300      	movs	r3, #0
 8017b90:	1c69      	adds	r1, r5, #1
 8017b92:	786d      	ldrb	r5, [r5, #1]
 8017b94:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8017b98:	461a      	mov	r2, r3
 8017b9a:	9308      	str	r3, [sp, #32]
 8017b9c:	9303      	str	r3, [sp, #12]
 8017b9e:	f04f 3aff 	mov.w	sl, #4294967295
 8017ba2:	1c4b      	adds	r3, r1, #1
 8017ba4:	f1a5 0120 	sub.w	r1, r5, #32
 8017ba8:	2958      	cmp	r1, #88	; 0x58
 8017baa:	f200 83e4 	bhi.w	8018376 <_svfprintf_r+0x87e>
 8017bae:	e8df f011 	tbh	[pc, r1, lsl #1]
 8017bb2:	0277      	.short	0x0277
 8017bb4:	03e203e2 	.word	0x03e203e2
 8017bb8:	03e2037b 	.word	0x03e2037b
 8017bbc:	03e203e2 	.word	0x03e203e2
 8017bc0:	03e203e2 	.word	0x03e203e2
 8017bc4:	02f703e2 	.word	0x02f703e2
 8017bc8:	03e20214 	.word	0x03e20214
 8017bcc:	021801fb 	.word	0x021801fb
 8017bd0:	038203e2 	.word	0x038203e2
 8017bd4:	02c102c1 	.word	0x02c102c1
 8017bd8:	02c102c1 	.word	0x02c102c1
 8017bdc:	02c102c1 	.word	0x02c102c1
 8017be0:	02c102c1 	.word	0x02c102c1
 8017be4:	03e202c1 	.word	0x03e202c1
 8017be8:	03e203e2 	.word	0x03e203e2
 8017bec:	03e203e2 	.word	0x03e203e2
 8017bf0:	03e203e2 	.word	0x03e203e2
 8017bf4:	03e203e2 	.word	0x03e203e2
 8017bf8:	02d003e2 	.word	0x02d003e2
 8017bfc:	03e20391 	.word	0x03e20391
 8017c00:	03e20391 	.word	0x03e20391
 8017c04:	03e203e2 	.word	0x03e203e2
 8017c08:	037403e2 	.word	0x037403e2
 8017c0c:	03e203e2 	.word	0x03e203e2
 8017c10:	03e2030c 	.word	0x03e2030c
 8017c14:	03e203e2 	.word	0x03e203e2
 8017c18:	03e203e2 	.word	0x03e203e2
 8017c1c:	03e2032a 	.word	0x03e2032a
 8017c20:	034403e2 	.word	0x034403e2
 8017c24:	03e203e2 	.word	0x03e203e2
 8017c28:	03e203e2 	.word	0x03e203e2
 8017c2c:	03e203e2 	.word	0x03e203e2
 8017c30:	03e203e2 	.word	0x03e203e2
 8017c34:	03e203e2 	.word	0x03e203e2
 8017c38:	0233035f 	.word	0x0233035f
 8017c3c:	03910391 	.word	0x03910391
 8017c40:	03050391 	.word	0x03050391
 8017c44:	03e20233 	.word	0x03e20233
 8017c48:	02ed03e2 	.word	0x02ed03e2
 8017c4c:	028503e2 	.word	0x028503e2
 8017c50:	03cb0202 	.word	0x03cb0202
 8017c54:	03e2027e 	.word	0x03e2027e
 8017c58:	03e20299 	.word	0x03e20299
 8017c5c:	03e2007a 	.word	0x03e2007a
 8017c60:	025103e2 	.word	0x025103e2
 8017c64:	9804      	ldr	r0, [sp, #16]
 8017c66:	9303      	str	r3, [sp, #12]
 8017c68:	4631      	mov	r1, r6
 8017c6a:	aa21      	add	r2, sp, #132	; 0x84
 8017c6c:	f003 f8bc 	bl	801ade8 <__ssprint_r>
 8017c70:	b950      	cbnz	r0, 8017c88 <_svfprintf_r+0x190>
 8017c72:	463c      	mov	r4, r7
 8017c74:	9b03      	ldr	r3, [sp, #12]
 8017c76:	e783      	b.n	8017b80 <_svfprintf_r+0x88>
 8017c78:	9804      	ldr	r0, [sp, #16]
 8017c7a:	4631      	mov	r1, r6
 8017c7c:	aa21      	add	r2, sp, #132	; 0x84
 8017c7e:	f003 f8b3 	bl	801ade8 <__ssprint_r>
 8017c82:	2800      	cmp	r0, #0
 8017c84:	f000 818c 	beq.w	8017fa0 <_svfprintf_r+0x4a8>
 8017c88:	46b1      	mov	r9, r6
 8017c8a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017c8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017c92:	9b07      	ldr	r3, [sp, #28]
 8017c94:	bf18      	it	ne
 8017c96:	f04f 33ff 	movne.w	r3, #4294967295
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	b03f      	add	sp, #252	; 0xfc
 8017c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ca2:	9d06      	ldr	r5, [sp, #24]
 8017ca4:	e76f      	b.n	8017b86 <_svfprintf_r+0x8e>
 8017ca6:	9306      	str	r3, [sp, #24]
 8017ca8:	9b03      	ldr	r3, [sp, #12]
 8017caa:	0698      	lsls	r0, r3, #26
 8017cac:	f140 82b4 	bpl.w	8018218 <_svfprintf_r+0x720>
 8017cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cb2:	f103 0907 	add.w	r9, r3, #7
 8017cb6:	f029 0307 	bic.w	r3, r9, #7
 8017cba:	f103 0208 	add.w	r2, r3, #8
 8017cbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017cc2:	920a      	str	r2, [sp, #40]	; 0x28
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	f04f 0c00 	mov.w	ip, #0
 8017cca:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8017cce:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017cd2:	f1ba 0f00 	cmp.w	sl, #0
 8017cd6:	db03      	blt.n	8017ce0 <_svfprintf_r+0x1e8>
 8017cd8:	9a03      	ldr	r2, [sp, #12]
 8017cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017cde:	9203      	str	r2, [sp, #12]
 8017ce0:	ea58 0209 	orrs.w	r2, r8, r9
 8017ce4:	f040 8357 	bne.w	8018396 <_svfprintf_r+0x89e>
 8017ce8:	f1ba 0f00 	cmp.w	sl, #0
 8017cec:	f000 845c 	beq.w	80185a8 <_svfprintf_r+0xab0>
 8017cf0:	2b01      	cmp	r3, #1
 8017cf2:	f000 835a 	beq.w	80183aa <_svfprintf_r+0x8b2>
 8017cf6:	2b02      	cmp	r3, #2
 8017cf8:	f000 849a 	beq.w	8018630 <_svfprintf_r+0xb38>
 8017cfc:	4639      	mov	r1, r7
 8017cfe:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8017d02:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 8017d06:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 8017d0a:	f008 0307 	and.w	r3, r8, #7
 8017d0e:	4681      	mov	r9, r0
 8017d10:	4690      	mov	r8, r2
 8017d12:	3330      	adds	r3, #48	; 0x30
 8017d14:	ea58 0209 	orrs.w	r2, r8, r9
 8017d18:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8017d1c:	d1ef      	bne.n	8017cfe <_svfprintf_r+0x206>
 8017d1e:	9a03      	ldr	r2, [sp, #12]
 8017d20:	910c      	str	r1, [sp, #48]	; 0x30
 8017d22:	07d2      	lsls	r2, r2, #31
 8017d24:	f100 856e 	bmi.w	8018804 <_svfprintf_r+0xd0c>
 8017d28:	1a7b      	subs	r3, r7, r1
 8017d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8017d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d2e:	4592      	cmp	sl, r2
 8017d30:	4653      	mov	r3, sl
 8017d32:	bfb8      	it	lt
 8017d34:	4613      	movlt	r3, r2
 8017d36:	9305      	str	r3, [sp, #20]
 8017d38:	2300      	movs	r3, #0
 8017d3a:	930e      	str	r3, [sp, #56]	; 0x38
 8017d3c:	f1bc 0f00 	cmp.w	ip, #0
 8017d40:	d002      	beq.n	8017d48 <_svfprintf_r+0x250>
 8017d42:	9b05      	ldr	r3, [sp, #20]
 8017d44:	3301      	adds	r3, #1
 8017d46:	9305      	str	r3, [sp, #20]
 8017d48:	9b03      	ldr	r3, [sp, #12]
 8017d4a:	f013 0302 	ands.w	r3, r3, #2
 8017d4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d50:	d002      	beq.n	8017d58 <_svfprintf_r+0x260>
 8017d52:	9b05      	ldr	r3, [sp, #20]
 8017d54:	3302      	adds	r3, #2
 8017d56:	9305      	str	r3, [sp, #20]
 8017d58:	9b03      	ldr	r3, [sp, #12]
 8017d5a:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8017d5e:	f040 8317 	bne.w	8018390 <_svfprintf_r+0x898>
 8017d62:	9b08      	ldr	r3, [sp, #32]
 8017d64:	9a05      	ldr	r2, [sp, #20]
 8017d66:	ebc2 0803 	rsb	r8, r2, r3
 8017d6a:	f1b8 0f00 	cmp.w	r8, #0
 8017d6e:	f340 830f 	ble.w	8018390 <_svfprintf_r+0x898>
 8017d72:	f1b8 0f10 	cmp.w	r8, #16
 8017d76:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017d78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017d7a:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8017d98 <_svfprintf_r+0x2a0>
 8017d7e:	dd30      	ble.n	8017de2 <_svfprintf_r+0x2ea>
 8017d80:	4653      	mov	r3, sl
 8017d82:	f04f 0b10 	mov.w	fp, #16
 8017d86:	46c2      	mov	sl, r8
 8017d88:	46a8      	mov	r8, r5
 8017d8a:	461d      	mov	r5, r3
 8017d8c:	e00d      	b.n	8017daa <_svfprintf_r+0x2b2>
 8017d8e:	bf00      	nop
	...
 8017d98:	0801e37c 	.word	0x0801e37c
 8017d9c:	f1aa 0a10 	sub.w	sl, sl, #16
 8017da0:	f1ba 0f10 	cmp.w	sl, #16
 8017da4:	f104 0408 	add.w	r4, r4, #8
 8017da8:	dd17      	ble.n	8017dda <_svfprintf_r+0x2e2>
 8017daa:	3201      	adds	r2, #1
 8017dac:	3110      	adds	r1, #16
 8017dae:	2a07      	cmp	r2, #7
 8017db0:	9123      	str	r1, [sp, #140]	; 0x8c
 8017db2:	9222      	str	r2, [sp, #136]	; 0x88
 8017db4:	e884 0820 	stmia.w	r4, {r5, fp}
 8017db8:	ddf0      	ble.n	8017d9c <_svfprintf_r+0x2a4>
 8017dba:	9804      	ldr	r0, [sp, #16]
 8017dbc:	4631      	mov	r1, r6
 8017dbe:	aa21      	add	r2, sp, #132	; 0x84
 8017dc0:	f003 f812 	bl	801ade8 <__ssprint_r>
 8017dc4:	2800      	cmp	r0, #0
 8017dc6:	f47f af5f 	bne.w	8017c88 <_svfprintf_r+0x190>
 8017dca:	f1aa 0a10 	sub.w	sl, sl, #16
 8017dce:	f1ba 0f10 	cmp.w	sl, #16
 8017dd2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017dd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017dd6:	463c      	mov	r4, r7
 8017dd8:	dce7      	bgt.n	8017daa <_svfprintf_r+0x2b2>
 8017dda:	462b      	mov	r3, r5
 8017ddc:	4645      	mov	r5, r8
 8017dde:	46d0      	mov	r8, sl
 8017de0:	469a      	mov	sl, r3
 8017de2:	3201      	adds	r2, #1
 8017de4:	eb08 0b01 	add.w	fp, r8, r1
 8017de8:	2a07      	cmp	r2, #7
 8017dea:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017dee:	9222      	str	r2, [sp, #136]	; 0x88
 8017df0:	f8c4 a000 	str.w	sl, [r4]
 8017df4:	f8c4 8004 	str.w	r8, [r4, #4]
 8017df8:	f300 847e 	bgt.w	80186f8 <_svfprintf_r+0xc00>
 8017dfc:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8017e00:	3408      	adds	r4, #8
 8017e02:	f1bc 0f00 	cmp.w	ip, #0
 8017e06:	d00f      	beq.n	8017e28 <_svfprintf_r+0x330>
 8017e08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017e0a:	3301      	adds	r3, #1
 8017e0c:	f10b 0b01 	add.w	fp, fp, #1
 8017e10:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8017e14:	2201      	movs	r2, #1
 8017e16:	2b07      	cmp	r3, #7
 8017e18:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017e1c:	9322      	str	r3, [sp, #136]	; 0x88
 8017e1e:	e884 0006 	stmia.w	r4, {r1, r2}
 8017e22:	f300 83ea 	bgt.w	80185fa <_svfprintf_r+0xb02>
 8017e26:	3408      	adds	r4, #8
 8017e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e2a:	b173      	cbz	r3, 8017e4a <_svfprintf_r+0x352>
 8017e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017e2e:	3301      	adds	r3, #1
 8017e30:	f10b 0b02 	add.w	fp, fp, #2
 8017e34:	a91a      	add	r1, sp, #104	; 0x68
 8017e36:	2202      	movs	r2, #2
 8017e38:	2b07      	cmp	r3, #7
 8017e3a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017e3e:	9322      	str	r3, [sp, #136]	; 0x88
 8017e40:	e884 0006 	stmia.w	r4, {r1, r2}
 8017e44:	f300 83cd 	bgt.w	80185e2 <_svfprintf_r+0xaea>
 8017e48:	3408      	adds	r4, #8
 8017e4a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8017e4e:	f000 8315 	beq.w	801847c <_svfprintf_r+0x984>
 8017e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e56:	ebc2 0a03 	rsb	sl, r2, r3
 8017e5a:	f1ba 0f00 	cmp.w	sl, #0
 8017e5e:	dd3c      	ble.n	8017eda <_svfprintf_r+0x3e2>
 8017e60:	f1ba 0f10 	cmp.w	sl, #16
 8017e64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017e66:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 80182cc <_svfprintf_r+0x7d4>
 8017e6a:	dd2b      	ble.n	8017ec4 <_svfprintf_r+0x3cc>
 8017e6c:	4649      	mov	r1, r9
 8017e6e:	465b      	mov	r3, fp
 8017e70:	46a9      	mov	r9, r5
 8017e72:	f04f 0810 	mov.w	r8, #16
 8017e76:	f8dd b010 	ldr.w	fp, [sp, #16]
 8017e7a:	460d      	mov	r5, r1
 8017e7c:	e006      	b.n	8017e8c <_svfprintf_r+0x394>
 8017e7e:	f1aa 0a10 	sub.w	sl, sl, #16
 8017e82:	f1ba 0f10 	cmp.w	sl, #16
 8017e86:	f104 0408 	add.w	r4, r4, #8
 8017e8a:	dd17      	ble.n	8017ebc <_svfprintf_r+0x3c4>
 8017e8c:	3201      	adds	r2, #1
 8017e8e:	3310      	adds	r3, #16
 8017e90:	2a07      	cmp	r2, #7
 8017e92:	9323      	str	r3, [sp, #140]	; 0x8c
 8017e94:	9222      	str	r2, [sp, #136]	; 0x88
 8017e96:	e884 0120 	stmia.w	r4, {r5, r8}
 8017e9a:	ddf0      	ble.n	8017e7e <_svfprintf_r+0x386>
 8017e9c:	4658      	mov	r0, fp
 8017e9e:	4631      	mov	r1, r6
 8017ea0:	aa21      	add	r2, sp, #132	; 0x84
 8017ea2:	f002 ffa1 	bl	801ade8 <__ssprint_r>
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	f47f aeee 	bne.w	8017c88 <_svfprintf_r+0x190>
 8017eac:	f1aa 0a10 	sub.w	sl, sl, #16
 8017eb0:	f1ba 0f10 	cmp.w	sl, #16
 8017eb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017eb6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017eb8:	463c      	mov	r4, r7
 8017eba:	dce7      	bgt.n	8017e8c <_svfprintf_r+0x394>
 8017ebc:	469b      	mov	fp, r3
 8017ebe:	462b      	mov	r3, r5
 8017ec0:	464d      	mov	r5, r9
 8017ec2:	4699      	mov	r9, r3
 8017ec4:	3201      	adds	r2, #1
 8017ec6:	44d3      	add	fp, sl
 8017ec8:	2a07      	cmp	r2, #7
 8017eca:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017ece:	9222      	str	r2, [sp, #136]	; 0x88
 8017ed0:	e884 0600 	stmia.w	r4, {r9, sl}
 8017ed4:	f300 8379 	bgt.w	80185ca <_svfprintf_r+0xad2>
 8017ed8:	3408      	adds	r4, #8
 8017eda:	9b03      	ldr	r3, [sp, #12]
 8017edc:	05d9      	lsls	r1, r3, #23
 8017ede:	f100 8270 	bmi.w	80183c2 <_svfprintf_r+0x8ca>
 8017ee2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ee8:	6022      	str	r2, [r4, #0]
 8017eea:	3301      	adds	r3, #1
 8017eec:	448b      	add	fp, r1
 8017eee:	2b07      	cmp	r3, #7
 8017ef0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017ef4:	6061      	str	r1, [r4, #4]
 8017ef6:	9322      	str	r3, [sp, #136]	; 0x88
 8017ef8:	f300 834a 	bgt.w	8018590 <_svfprintf_r+0xa98>
 8017efc:	3408      	adds	r4, #8
 8017efe:	9b03      	ldr	r3, [sp, #12]
 8017f00:	075a      	lsls	r2, r3, #29
 8017f02:	d541      	bpl.n	8017f88 <_svfprintf_r+0x490>
 8017f04:	9b08      	ldr	r3, [sp, #32]
 8017f06:	9a05      	ldr	r2, [sp, #20]
 8017f08:	1a9d      	subs	r5, r3, r2
 8017f0a:	2d00      	cmp	r5, #0
 8017f0c:	dd3c      	ble.n	8017f88 <_svfprintf_r+0x490>
 8017f0e:	2d10      	cmp	r5, #16
 8017f10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017f12:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 80182d0 <_svfprintf_r+0x7d8>
 8017f16:	dd23      	ble.n	8017f60 <_svfprintf_r+0x468>
 8017f18:	f04f 0810 	mov.w	r8, #16
 8017f1c:	465a      	mov	r2, fp
 8017f1e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017f22:	e004      	b.n	8017f2e <_svfprintf_r+0x436>
 8017f24:	3d10      	subs	r5, #16
 8017f26:	2d10      	cmp	r5, #16
 8017f28:	f104 0408 	add.w	r4, r4, #8
 8017f2c:	dd17      	ble.n	8017f5e <_svfprintf_r+0x466>
 8017f2e:	3301      	adds	r3, #1
 8017f30:	3210      	adds	r2, #16
 8017f32:	2b07      	cmp	r3, #7
 8017f34:	9223      	str	r2, [sp, #140]	; 0x8c
 8017f36:	9322      	str	r3, [sp, #136]	; 0x88
 8017f38:	f8c4 a000 	str.w	sl, [r4]
 8017f3c:	f8c4 8004 	str.w	r8, [r4, #4]
 8017f40:	ddf0      	ble.n	8017f24 <_svfprintf_r+0x42c>
 8017f42:	4648      	mov	r0, r9
 8017f44:	4631      	mov	r1, r6
 8017f46:	aa21      	add	r2, sp, #132	; 0x84
 8017f48:	f002 ff4e 	bl	801ade8 <__ssprint_r>
 8017f4c:	2800      	cmp	r0, #0
 8017f4e:	f47f ae9b 	bne.w	8017c88 <_svfprintf_r+0x190>
 8017f52:	3d10      	subs	r5, #16
 8017f54:	2d10      	cmp	r5, #16
 8017f56:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017f58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017f5a:	463c      	mov	r4, r7
 8017f5c:	dce7      	bgt.n	8017f2e <_svfprintf_r+0x436>
 8017f5e:	4693      	mov	fp, r2
 8017f60:	3301      	adds	r3, #1
 8017f62:	44ab      	add	fp, r5
 8017f64:	2b07      	cmp	r3, #7
 8017f66:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017f6a:	9322      	str	r3, [sp, #136]	; 0x88
 8017f6c:	f8c4 a000 	str.w	sl, [r4]
 8017f70:	6065      	str	r5, [r4, #4]
 8017f72:	dd09      	ble.n	8017f88 <_svfprintf_r+0x490>
 8017f74:	9804      	ldr	r0, [sp, #16]
 8017f76:	4631      	mov	r1, r6
 8017f78:	aa21      	add	r2, sp, #132	; 0x84
 8017f7a:	f002 ff35 	bl	801ade8 <__ssprint_r>
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	f47f ae82 	bne.w	8017c88 <_svfprintf_r+0x190>
 8017f84:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8017f88:	9b07      	ldr	r3, [sp, #28]
 8017f8a:	9a05      	ldr	r2, [sp, #20]
 8017f8c:	9908      	ldr	r1, [sp, #32]
 8017f8e:	428a      	cmp	r2, r1
 8017f90:	bfac      	ite	ge
 8017f92:	189b      	addge	r3, r3, r2
 8017f94:	185b      	addlt	r3, r3, r1
 8017f96:	9307      	str	r3, [sp, #28]
 8017f98:	f1bb 0f00 	cmp.w	fp, #0
 8017f9c:	f47f ae6c 	bne.w	8017c78 <_svfprintf_r+0x180>
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	9322      	str	r3, [sp, #136]	; 0x88
 8017fa4:	463c      	mov	r4, r7
 8017fa6:	e5ce      	b.n	8017b46 <_svfprintf_r+0x4e>
 8017fa8:	4619      	mov	r1, r3
 8017faa:	9803      	ldr	r0, [sp, #12]
 8017fac:	781d      	ldrb	r5, [r3, #0]
 8017fae:	f040 0004 	orr.w	r0, r0, #4
 8017fb2:	9003      	str	r0, [sp, #12]
 8017fb4:	e5f5      	b.n	8017ba2 <_svfprintf_r+0xaa>
 8017fb6:	9306      	str	r3, [sp, #24]
 8017fb8:	9b03      	ldr	r3, [sp, #12]
 8017fba:	f013 0320 	ands.w	r3, r3, #32
 8017fbe:	f000 810e 	beq.w	80181de <_svfprintf_r+0x6e6>
 8017fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fc4:	f103 0907 	add.w	r9, r3, #7
 8017fc8:	f029 0307 	bic.w	r3, r9, #7
 8017fcc:	f103 0208 	add.w	r2, r3, #8
 8017fd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017fd4:	920a      	str	r2, [sp, #40]	; 0x28
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	e675      	b.n	8017cc6 <_svfprintf_r+0x1ce>
 8017fda:	781d      	ldrb	r5, [r3, #0]
 8017fdc:	4619      	mov	r1, r3
 8017fde:	222b      	movs	r2, #43	; 0x2b
 8017fe0:	e5df      	b.n	8017ba2 <_svfprintf_r+0xaa>
 8017fe2:	781d      	ldrb	r5, [r3, #0]
 8017fe4:	2d2a      	cmp	r5, #42	; 0x2a
 8017fe6:	f103 0101 	add.w	r1, r3, #1
 8017fea:	f000 87b8 	beq.w	8018f5e <_svfprintf_r+0x1466>
 8017fee:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8017ff2:	2809      	cmp	r0, #9
 8017ff4:	460b      	mov	r3, r1
 8017ff6:	f04f 0a00 	mov.w	sl, #0
 8017ffa:	f63f add3 	bhi.w	8017ba4 <_svfprintf_r+0xac>
 8017ffe:	f813 5b01 	ldrb.w	r5, [r3], #1
 8018002:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8018006:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801800a:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 801800e:	2809      	cmp	r0, #9
 8018010:	d9f5      	bls.n	8017ffe <_svfprintf_r+0x506>
 8018012:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 8018016:	e5c5      	b.n	8017ba4 <_svfprintf_r+0xac>
 8018018:	9306      	str	r3, [sp, #24]
 801801a:	9b03      	ldr	r3, [sp, #12]
 801801c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8018020:	069b      	lsls	r3, r3, #26
 8018022:	f140 80a1 	bpl.w	8018168 <_svfprintf_r+0x670>
 8018026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018028:	f103 0907 	add.w	r9, r3, #7
 801802c:	f029 0907 	bic.w	r9, r9, #7
 8018030:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018034:	f109 0108 	add.w	r1, r9, #8
 8018038:	910a      	str	r1, [sp, #40]	; 0x28
 801803a:	4690      	mov	r8, r2
 801803c:	4699      	mov	r9, r3
 801803e:	2a00      	cmp	r2, #0
 8018040:	f173 0300 	sbcs.w	r3, r3, #0
 8018044:	f2c0 840e 	blt.w	8018864 <_svfprintf_r+0xd6c>
 8018048:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801804c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018050:	2301      	movs	r3, #1
 8018052:	e63e      	b.n	8017cd2 <_svfprintf_r+0x1da>
 8018054:	9306      	str	r3, [sp, #24]
 8018056:	4b9b      	ldr	r3, [pc, #620]	; (80182c4 <_svfprintf_r+0x7cc>)
 8018058:	9312      	str	r3, [sp, #72]	; 0x48
 801805a:	9b03      	ldr	r3, [sp, #12]
 801805c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8018060:	069b      	lsls	r3, r3, #26
 8018062:	f140 80f3 	bpl.w	801824c <_svfprintf_r+0x754>
 8018066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018068:	f103 0907 	add.w	r9, r3, #7
 801806c:	f029 0307 	bic.w	r3, r9, #7
 8018070:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018074:	f103 0208 	add.w	r2, r3, #8
 8018078:	920a      	str	r2, [sp, #40]	; 0x28
 801807a:	9b03      	ldr	r3, [sp, #12]
 801807c:	07d9      	lsls	r1, r3, #31
 801807e:	f140 80f5 	bpl.w	801826c <_svfprintf_r+0x774>
 8018082:	ea58 0309 	orrs.w	r3, r8, r9
 8018086:	f000 80f1 	beq.w	801826c <_svfprintf_r+0x774>
 801808a:	9a03      	ldr	r2, [sp, #12]
 801808c:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8018090:	2330      	movs	r3, #48	; 0x30
 8018092:	f042 0202 	orr.w	r2, r2, #2
 8018096:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 801809a:	9203      	str	r2, [sp, #12]
 801809c:	2302      	movs	r3, #2
 801809e:	e612      	b.n	8017cc6 <_svfprintf_r+0x1ce>
 80180a0:	781d      	ldrb	r5, [r3, #0]
 80180a2:	4619      	mov	r1, r3
 80180a4:	2a00      	cmp	r2, #0
 80180a6:	f47f ad7c 	bne.w	8017ba2 <_svfprintf_r+0xaa>
 80180aa:	2220      	movs	r2, #32
 80180ac:	e579      	b.n	8017ba2 <_svfprintf_r+0xaa>
 80180ae:	9903      	ldr	r1, [sp, #12]
 80180b0:	f041 0120 	orr.w	r1, r1, #32
 80180b4:	9103      	str	r1, [sp, #12]
 80180b6:	781d      	ldrb	r5, [r3, #0]
 80180b8:	4619      	mov	r1, r3
 80180ba:	e572      	b.n	8017ba2 <_svfprintf_r+0xaa>
 80180bc:	9306      	str	r3, [sp, #24]
 80180be:	9b03      	ldr	r3, [sp, #12]
 80180c0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80180c4:	069a      	lsls	r2, r3, #26
 80180c6:	f140 84b0 	bpl.w	8018a2a <_svfprintf_r+0xf32>
 80180ca:	9907      	ldr	r1, [sp, #28]
 80180cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80180ce:	ea4f 79e1 	mov.w	r9, r1, asr #31
 80180d2:	6813      	ldr	r3, [r2, #0]
 80180d4:	4608      	mov	r0, r1
 80180d6:	4688      	mov	r8, r1
 80180d8:	3204      	adds	r2, #4
 80180da:	4649      	mov	r1, r9
 80180dc:	920a      	str	r2, [sp, #40]	; 0x28
 80180de:	e9c3 0100 	strd	r0, r1, [r3]
 80180e2:	e530      	b.n	8017b46 <_svfprintf_r+0x4e>
 80180e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80180e6:	9306      	str	r3, [sp, #24]
 80180e8:	6813      	ldr	r3, [r2, #0]
 80180ea:	930c      	str	r3, [sp, #48]	; 0x30
 80180ec:	f04f 0b00 	mov.w	fp, #0
 80180f0:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 80180f4:	f102 0904 	add.w	r9, r2, #4
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	f000 8646 	beq.w	8018d8a <_svfprintf_r+0x1292>
 80180fe:	f1ba 0f00 	cmp.w	sl, #0
 8018102:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018104:	f2c0 85f6 	blt.w	8018cf4 <_svfprintf_r+0x11fc>
 8018108:	4659      	mov	r1, fp
 801810a:	4652      	mov	r2, sl
 801810c:	f7ff f8ac 	bl	8017268 <memchr>
 8018110:	2800      	cmp	r0, #0
 8018112:	f000 8677 	beq.w	8018e04 <_svfprintf_r+0x130c>
 8018116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018118:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801811c:	1ac3      	subs	r3, r0, r3
 801811e:	9309      	str	r3, [sp, #36]	; 0x24
 8018120:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8018124:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018128:	9305      	str	r3, [sp, #20]
 801812a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801812e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8018132:	e603      	b.n	8017d3c <_svfprintf_r+0x244>
 8018134:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8018138:	2100      	movs	r1, #0
 801813a:	f813 5b01 	ldrb.w	r5, [r3], #1
 801813e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8018142:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018146:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 801814a:	2809      	cmp	r0, #9
 801814c:	d9f5      	bls.n	801813a <_svfprintf_r+0x642>
 801814e:	9108      	str	r1, [sp, #32]
 8018150:	e528      	b.n	8017ba4 <_svfprintf_r+0xac>
 8018152:	9306      	str	r3, [sp, #24]
 8018154:	9b03      	ldr	r3, [sp, #12]
 8018156:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801815a:	f043 0310 	orr.w	r3, r3, #16
 801815e:	9303      	str	r3, [sp, #12]
 8018160:	9b03      	ldr	r3, [sp, #12]
 8018162:	069b      	lsls	r3, r3, #26
 8018164:	f53f af5f 	bmi.w	8018026 <_svfprintf_r+0x52e>
 8018168:	9b03      	ldr	r3, [sp, #12]
 801816a:	06d8      	lsls	r0, r3, #27
 801816c:	f100 836b 	bmi.w	8018846 <_svfprintf_r+0xd4e>
 8018170:	9b03      	ldr	r3, [sp, #12]
 8018172:	0659      	lsls	r1, r3, #25
 8018174:	f140 8367 	bpl.w	8018846 <_svfprintf_r+0xd4e>
 8018178:	990a      	ldr	r1, [sp, #40]	; 0x28
 801817a:	f9b1 8000 	ldrsh.w	r8, [r1]
 801817e:	3104      	adds	r1, #4
 8018180:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8018184:	4642      	mov	r2, r8
 8018186:	464b      	mov	r3, r9
 8018188:	910a      	str	r1, [sp, #40]	; 0x28
 801818a:	e758      	b.n	801803e <_svfprintf_r+0x546>
 801818c:	781d      	ldrb	r5, [r3, #0]
 801818e:	9903      	ldr	r1, [sp, #12]
 8018190:	2d6c      	cmp	r5, #108	; 0x6c
 8018192:	f000 84d3 	beq.w	8018b3c <_svfprintf_r+0x1044>
 8018196:	f041 0110 	orr.w	r1, r1, #16
 801819a:	9103      	str	r1, [sp, #12]
 801819c:	4619      	mov	r1, r3
 801819e:	e500      	b.n	8017ba2 <_svfprintf_r+0xaa>
 80181a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80181a2:	6829      	ldr	r1, [r5, #0]
 80181a4:	9108      	str	r1, [sp, #32]
 80181a6:	4608      	mov	r0, r1
 80181a8:	2800      	cmp	r0, #0
 80181aa:	4629      	mov	r1, r5
 80181ac:	f101 0104 	add.w	r1, r1, #4
 80181b0:	f2c0 84cb 	blt.w	8018b4a <_svfprintf_r+0x1052>
 80181b4:	910a      	str	r1, [sp, #40]	; 0x28
 80181b6:	781d      	ldrb	r5, [r3, #0]
 80181b8:	4619      	mov	r1, r3
 80181ba:	e4f2      	b.n	8017ba2 <_svfprintf_r+0xaa>
 80181bc:	9903      	ldr	r1, [sp, #12]
 80181be:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80181c2:	9103      	str	r1, [sp, #12]
 80181c4:	781d      	ldrb	r5, [r3, #0]
 80181c6:	4619      	mov	r1, r3
 80181c8:	e4eb      	b.n	8017ba2 <_svfprintf_r+0xaa>
 80181ca:	9306      	str	r3, [sp, #24]
 80181cc:	9b03      	ldr	r3, [sp, #12]
 80181ce:	f043 0310 	orr.w	r3, r3, #16
 80181d2:	9303      	str	r3, [sp, #12]
 80181d4:	9b03      	ldr	r3, [sp, #12]
 80181d6:	f013 0320 	ands.w	r3, r3, #32
 80181da:	f47f aef2 	bne.w	8017fc2 <_svfprintf_r+0x4ca>
 80181de:	9a03      	ldr	r2, [sp, #12]
 80181e0:	f012 0210 	ands.w	r2, r2, #16
 80181e4:	f040 831c 	bne.w	8018820 <_svfprintf_r+0xd28>
 80181e8:	9b03      	ldr	r3, [sp, #12]
 80181ea:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80181ee:	f000 8317 	beq.w	8018820 <_svfprintf_r+0xd28>
 80181f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80181f4:	4613      	mov	r3, r2
 80181f6:	460a      	mov	r2, r1
 80181f8:	3204      	adds	r2, #4
 80181fa:	f8b1 8000 	ldrh.w	r8, [r1]
 80181fe:	920a      	str	r2, [sp, #40]	; 0x28
 8018200:	f04f 0900 	mov.w	r9, #0
 8018204:	e55f      	b.n	8017cc6 <_svfprintf_r+0x1ce>
 8018206:	9306      	str	r3, [sp, #24]
 8018208:	9b03      	ldr	r3, [sp, #12]
 801820a:	f043 0310 	orr.w	r3, r3, #16
 801820e:	9303      	str	r3, [sp, #12]
 8018210:	9b03      	ldr	r3, [sp, #12]
 8018212:	0698      	lsls	r0, r3, #26
 8018214:	f53f ad4c 	bmi.w	8017cb0 <_svfprintf_r+0x1b8>
 8018218:	9b03      	ldr	r3, [sp, #12]
 801821a:	06d9      	lsls	r1, r3, #27
 801821c:	f100 8309 	bmi.w	8018832 <_svfprintf_r+0xd3a>
 8018220:	9b03      	ldr	r3, [sp, #12]
 8018222:	065a      	lsls	r2, r3, #25
 8018224:	f140 8305 	bpl.w	8018832 <_svfprintf_r+0xd3a>
 8018228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801822a:	f8b2 8000 	ldrh.w	r8, [r2]
 801822e:	3204      	adds	r2, #4
 8018230:	f04f 0900 	mov.w	r9, #0
 8018234:	2301      	movs	r3, #1
 8018236:	920a      	str	r2, [sp, #40]	; 0x28
 8018238:	e545      	b.n	8017cc6 <_svfprintf_r+0x1ce>
 801823a:	9306      	str	r3, [sp, #24]
 801823c:	4b22      	ldr	r3, [pc, #136]	; (80182c8 <_svfprintf_r+0x7d0>)
 801823e:	9312      	str	r3, [sp, #72]	; 0x48
 8018240:	9b03      	ldr	r3, [sp, #12]
 8018242:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8018246:	069b      	lsls	r3, r3, #26
 8018248:	f53f af0d 	bmi.w	8018066 <_svfprintf_r+0x56e>
 801824c:	9b03      	ldr	r3, [sp, #12]
 801824e:	06d8      	lsls	r0, r3, #27
 8018250:	f140 83dc 	bpl.w	8018a0c <_svfprintf_r+0xf14>
 8018254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018256:	4613      	mov	r3, r2
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	4698      	mov	r8, r3
 801825c:	9b03      	ldr	r3, [sp, #12]
 801825e:	3204      	adds	r2, #4
 8018260:	07d9      	lsls	r1, r3, #31
 8018262:	920a      	str	r2, [sp, #40]	; 0x28
 8018264:	f04f 0900 	mov.w	r9, #0
 8018268:	f53f af0b 	bmi.w	8018082 <_svfprintf_r+0x58a>
 801826c:	2302      	movs	r3, #2
 801826e:	e52a      	b.n	8017cc6 <_svfprintf_r+0x1ce>
 8018270:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018272:	9306      	str	r3, [sp, #24]
 8018274:	680a      	ldr	r2, [r1, #0]
 8018276:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 801827a:	2300      	movs	r3, #0
 801827c:	2201      	movs	r2, #1
 801827e:	3104      	adds	r1, #4
 8018280:	469c      	mov	ip, r3
 8018282:	9205      	str	r2, [sp, #20]
 8018284:	910a      	str	r1, [sp, #40]	; 0x28
 8018286:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 801828a:	ab24      	add	r3, sp, #144	; 0x90
 801828c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8018290:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8018294:	9209      	str	r2, [sp, #36]	; 0x24
 8018296:	930c      	str	r3, [sp, #48]	; 0x30
 8018298:	e556      	b.n	8017d48 <_svfprintf_r+0x250>
 801829a:	9903      	ldr	r1, [sp, #12]
 801829c:	f041 0108 	orr.w	r1, r1, #8
 80182a0:	9103      	str	r1, [sp, #12]
 80182a2:	781d      	ldrb	r5, [r3, #0]
 80182a4:	4619      	mov	r1, r3
 80182a6:	e47c      	b.n	8017ba2 <_svfprintf_r+0xaa>
 80182a8:	9903      	ldr	r1, [sp, #12]
 80182aa:	f041 0101 	orr.w	r1, r1, #1
 80182ae:	9103      	str	r1, [sp, #12]
 80182b0:	781d      	ldrb	r5, [r3, #0]
 80182b2:	4619      	mov	r1, r3
 80182b4:	e475      	b.n	8017ba2 <_svfprintf_r+0xaa>
 80182b6:	9903      	ldr	r1, [sp, #12]
 80182b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80182bc:	9103      	str	r1, [sp, #12]
 80182be:	781d      	ldrb	r5, [r3, #0]
 80182c0:	4619      	mov	r1, r3
 80182c2:	e46e      	b.n	8017ba2 <_svfprintf_r+0xaa>
 80182c4:	0801e3b0 	.word	0x0801e3b0
 80182c8:	0801e39c 	.word	0x0801e39c
 80182cc:	0801e36c 	.word	0x0801e36c
 80182d0:	0801e37c 	.word	0x0801e37c
 80182d4:	9306      	str	r3, [sp, #24]
 80182d6:	9b03      	ldr	r3, [sp, #12]
 80182d8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80182dc:	f013 0f08 	tst.w	r3, #8
 80182e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182e2:	46d3      	mov	fp, sl
 80182e4:	f103 0907 	add.w	r9, r3, #7
 80182e8:	f000 8386 	beq.w	80189f8 <_svfprintf_r+0xf00>
 80182ec:	f029 0307 	bic.w	r3, r9, #7
 80182f0:	ed93 7b00 	vldr	d7, [r3]
 80182f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80182f8:	f103 0208 	add.w	r2, r3, #8
 80182fc:	920a      	str	r2, [sp, #40]	; 0x28
 80182fe:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8018302:	f002 fd01 	bl	801ad08 <__fpclassifyd>
 8018306:	2801      	cmp	r0, #1
 8018308:	f040 835a 	bne.w	80189c0 <_svfprintf_r+0xec8>
 801830c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018310:	2200      	movs	r2, #0
 8018312:	2300      	movs	r3, #0
 8018314:	f7f6 f9bc 	bl	800e690 <__aeabi_dcmplt>
 8018318:	2800      	cmp	r0, #0
 801831a:	f040 856b 	bne.w	8018df4 <_svfprintf_r+0x12fc>
 801831e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8018322:	9b03      	ldr	r3, [sp, #12]
 8018324:	4abd      	ldr	r2, [pc, #756]	; (801861c <_svfprintf_r+0xb24>)
 8018326:	f8df e300 	ldr.w	lr, [pc, #768]	; 8018628 <_svfprintf_r+0xb30>
 801832a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801832e:	9303      	str	r3, [sp, #12]
 8018330:	4613      	mov	r3, r2
 8018332:	2103      	movs	r1, #3
 8018334:	2000      	movs	r0, #0
 8018336:	2d47      	cmp	r5, #71	; 0x47
 8018338:	bfd8      	it	le
 801833a:	4673      	movle	r3, lr
 801833c:	9105      	str	r1, [sp, #20]
 801833e:	900d      	str	r0, [sp, #52]	; 0x34
 8018340:	930c      	str	r3, [sp, #48]	; 0x30
 8018342:	9109      	str	r1, [sp, #36]	; 0x24
 8018344:	900e      	str	r0, [sp, #56]	; 0x38
 8018346:	e4f9      	b.n	8017d3c <_svfprintf_r+0x244>
 8018348:	980a      	ldr	r0, [sp, #40]	; 0x28
 801834a:	9903      	ldr	r1, [sp, #12]
 801834c:	9306      	str	r3, [sp, #24]
 801834e:	2230      	movs	r2, #48	; 0x30
 8018350:	6803      	ldr	r3, [r0, #0]
 8018352:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8018356:	4602      	mov	r2, r0
 8018358:	2578      	movs	r5, #120	; 0x78
 801835a:	f041 0102 	orr.w	r1, r1, #2
 801835e:	3204      	adds	r2, #4
 8018360:	4698      	mov	r8, r3
 8018362:	4baf      	ldr	r3, [pc, #700]	; (8018620 <_svfprintf_r+0xb28>)
 8018364:	9312      	str	r3, [sp, #72]	; 0x48
 8018366:	9103      	str	r1, [sp, #12]
 8018368:	920a      	str	r2, [sp, #40]	; 0x28
 801836a:	f04f 0900 	mov.w	r9, #0
 801836e:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8018372:	2302      	movs	r3, #2
 8018374:	e4a7      	b.n	8017cc6 <_svfprintf_r+0x1ce>
 8018376:	9306      	str	r3, [sp, #24]
 8018378:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801837c:	2d00      	cmp	r5, #0
 801837e:	f000 83d1 	beq.w	8018b24 <_svfprintf_r+0x102c>
 8018382:	2300      	movs	r3, #0
 8018384:	2201      	movs	r2, #1
 8018386:	469c      	mov	ip, r3
 8018388:	9205      	str	r2, [sp, #20]
 801838a:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 801838e:	e77a      	b.n	8018286 <_svfprintf_r+0x78e>
 8018390:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018394:	e535      	b.n	8017e02 <_svfprintf_r+0x30a>
 8018396:	2b01      	cmp	r3, #1
 8018398:	f47f acad 	bne.w	8017cf6 <_svfprintf_r+0x1fe>
 801839c:	f1b9 0f00 	cmp.w	r9, #0
 80183a0:	bf08      	it	eq
 80183a2:	f1b8 0f0a 	cmpeq.w	r8, #10
 80183a6:	f080 820d 	bcs.w	80187c4 <_svfprintf_r+0xccc>
 80183aa:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 80183ae:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80183b2:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 80183b6:	ebcb 0307 	rsb	r3, fp, r7
 80183ba:	9309      	str	r3, [sp, #36]	; 0x24
 80183bc:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80183c0:	e4b4      	b.n	8017d2c <_svfprintf_r+0x234>
 80183c2:	2d65      	cmp	r5, #101	; 0x65
 80183c4:	f340 80a0 	ble.w	8018508 <_svfprintf_r+0xa10>
 80183c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80183cc:	2200      	movs	r2, #0
 80183ce:	2300      	movs	r3, #0
 80183d0:	f7f6 f954 	bl	800e67c <__aeabi_dcmpeq>
 80183d4:	2800      	cmp	r0, #0
 80183d6:	f000 8144 	beq.w	8018662 <_svfprintf_r+0xb6a>
 80183da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80183dc:	4a91      	ldr	r2, [pc, #580]	; (8018624 <_svfprintf_r+0xb2c>)
 80183de:	6022      	str	r2, [r4, #0]
 80183e0:	3301      	adds	r3, #1
 80183e2:	f10b 0b01 	add.w	fp, fp, #1
 80183e6:	2201      	movs	r2, #1
 80183e8:	2b07      	cmp	r3, #7
 80183ea:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80183ee:	9322      	str	r3, [sp, #136]	; 0x88
 80183f0:	6062      	str	r2, [r4, #4]
 80183f2:	f300 833f 	bgt.w	8018a74 <_svfprintf_r+0xf7c>
 80183f6:	3408      	adds	r4, #8
 80183f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80183fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183fc:	4293      	cmp	r3, r2
 80183fe:	db03      	blt.n	8018408 <_svfprintf_r+0x910>
 8018400:	9b03      	ldr	r3, [sp, #12]
 8018402:	07da      	lsls	r2, r3, #31
 8018404:	f57f ad7b 	bpl.w	8017efe <_svfprintf_r+0x406>
 8018408:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801840a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801840c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801840e:	6022      	str	r2, [r4, #0]
 8018410:	3301      	adds	r3, #1
 8018412:	448b      	add	fp, r1
 8018414:	2b07      	cmp	r3, #7
 8018416:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801841a:	6061      	str	r1, [r4, #4]
 801841c:	9322      	str	r3, [sp, #136]	; 0x88
 801841e:	f300 839b 	bgt.w	8018b58 <_svfprintf_r+0x1060>
 8018422:	3408      	adds	r4, #8
 8018424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018426:	1e5d      	subs	r5, r3, #1
 8018428:	2d00      	cmp	r5, #0
 801842a:	f77f ad68 	ble.w	8017efe <_svfprintf_r+0x406>
 801842e:	2d10      	cmp	r5, #16
 8018430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018432:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 801862c <_svfprintf_r+0xb34>
 8018436:	f340 81b9 	ble.w	80187ac <_svfprintf_r+0xcb4>
 801843a:	f04f 0810 	mov.w	r8, #16
 801843e:	465a      	mov	r2, fp
 8018440:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018444:	e004      	b.n	8018450 <_svfprintf_r+0x958>
 8018446:	3408      	adds	r4, #8
 8018448:	3d10      	subs	r5, #16
 801844a:	2d10      	cmp	r5, #16
 801844c:	f340 81ad 	ble.w	80187aa <_svfprintf_r+0xcb2>
 8018450:	3301      	adds	r3, #1
 8018452:	3210      	adds	r2, #16
 8018454:	2b07      	cmp	r3, #7
 8018456:	9223      	str	r2, [sp, #140]	; 0x8c
 8018458:	9322      	str	r3, [sp, #136]	; 0x88
 801845a:	f8c4 9000 	str.w	r9, [r4]
 801845e:	f8c4 8004 	str.w	r8, [r4, #4]
 8018462:	ddf0      	ble.n	8018446 <_svfprintf_r+0x94e>
 8018464:	4650      	mov	r0, sl
 8018466:	4631      	mov	r1, r6
 8018468:	aa21      	add	r2, sp, #132	; 0x84
 801846a:	f002 fcbd 	bl	801ade8 <__ssprint_r>
 801846e:	2800      	cmp	r0, #0
 8018470:	f47f ac0a 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018474:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018476:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018478:	463c      	mov	r4, r7
 801847a:	e7e5      	b.n	8018448 <_svfprintf_r+0x950>
 801847c:	9b08      	ldr	r3, [sp, #32]
 801847e:	9a05      	ldr	r2, [sp, #20]
 8018480:	ebc2 0a03 	rsb	sl, r2, r3
 8018484:	f1ba 0f00 	cmp.w	sl, #0
 8018488:	f77f ace3 	ble.w	8017e52 <_svfprintf_r+0x35a>
 801848c:	f1ba 0f10 	cmp.w	sl, #16
 8018490:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018492:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801862c <_svfprintf_r+0xb34>
 8018496:	dd2b      	ble.n	80184f0 <_svfprintf_r+0x9f8>
 8018498:	4649      	mov	r1, r9
 801849a:	465b      	mov	r3, fp
 801849c:	46a9      	mov	r9, r5
 801849e:	f04f 0810 	mov.w	r8, #16
 80184a2:	f8dd b010 	ldr.w	fp, [sp, #16]
 80184a6:	460d      	mov	r5, r1
 80184a8:	e006      	b.n	80184b8 <_svfprintf_r+0x9c0>
 80184aa:	f1aa 0a10 	sub.w	sl, sl, #16
 80184ae:	f1ba 0f10 	cmp.w	sl, #16
 80184b2:	f104 0408 	add.w	r4, r4, #8
 80184b6:	dd17      	ble.n	80184e8 <_svfprintf_r+0x9f0>
 80184b8:	3201      	adds	r2, #1
 80184ba:	3310      	adds	r3, #16
 80184bc:	2a07      	cmp	r2, #7
 80184be:	9323      	str	r3, [sp, #140]	; 0x8c
 80184c0:	9222      	str	r2, [sp, #136]	; 0x88
 80184c2:	e884 0120 	stmia.w	r4, {r5, r8}
 80184c6:	ddf0      	ble.n	80184aa <_svfprintf_r+0x9b2>
 80184c8:	4658      	mov	r0, fp
 80184ca:	4631      	mov	r1, r6
 80184cc:	aa21      	add	r2, sp, #132	; 0x84
 80184ce:	f002 fc8b 	bl	801ade8 <__ssprint_r>
 80184d2:	2800      	cmp	r0, #0
 80184d4:	f47f abd8 	bne.w	8017c88 <_svfprintf_r+0x190>
 80184d8:	f1aa 0a10 	sub.w	sl, sl, #16
 80184dc:	f1ba 0f10 	cmp.w	sl, #16
 80184e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80184e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80184e4:	463c      	mov	r4, r7
 80184e6:	dce7      	bgt.n	80184b8 <_svfprintf_r+0x9c0>
 80184e8:	469b      	mov	fp, r3
 80184ea:	462b      	mov	r3, r5
 80184ec:	464d      	mov	r5, r9
 80184ee:	4699      	mov	r9, r3
 80184f0:	3201      	adds	r2, #1
 80184f2:	44d3      	add	fp, sl
 80184f4:	2a07      	cmp	r2, #7
 80184f6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80184fa:	9222      	str	r2, [sp, #136]	; 0x88
 80184fc:	e884 0600 	stmia.w	r4, {r9, sl}
 8018500:	f300 8251 	bgt.w	80189a6 <_svfprintf_r+0xeae>
 8018504:	3408      	adds	r4, #8
 8018506:	e4a4      	b.n	8017e52 <_svfprintf_r+0x35a>
 8018508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801850a:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801850c:	2b01      	cmp	r3, #1
 801850e:	f340 821f 	ble.w	8018950 <_svfprintf_r+0xe58>
 8018512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018514:	6023      	str	r3, [r4, #0]
 8018516:	3501      	adds	r5, #1
 8018518:	f10b 0301 	add.w	r3, fp, #1
 801851c:	2201      	movs	r2, #1
 801851e:	2d07      	cmp	r5, #7
 8018520:	9323      	str	r3, [sp, #140]	; 0x8c
 8018522:	9522      	str	r5, [sp, #136]	; 0x88
 8018524:	6062      	str	r2, [r4, #4]
 8018526:	f300 8225 	bgt.w	8018974 <_svfprintf_r+0xe7c>
 801852a:	3408      	adds	r4, #8
 801852c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801852e:	6061      	str	r1, [r4, #4]
 8018530:	3501      	adds	r5, #1
 8018532:	eb03 0b01 	add.w	fp, r3, r1
 8018536:	2d07      	cmp	r5, #7
 8018538:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801853a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801853e:	9522      	str	r5, [sp, #136]	; 0x88
 8018540:	6023      	str	r3, [r4, #0]
 8018542:	f300 8223 	bgt.w	801898c <_svfprintf_r+0xe94>
 8018546:	3408      	adds	r4, #8
 8018548:	2300      	movs	r3, #0
 801854a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801854e:	2200      	movs	r2, #0
 8018550:	f7f6 f894 	bl	800e67c <__aeabi_dcmpeq>
 8018554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018556:	2800      	cmp	r0, #0
 8018558:	f040 80dd 	bne.w	8018716 <_svfprintf_r+0xc1e>
 801855c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801855e:	3b01      	subs	r3, #1
 8018560:	3501      	adds	r5, #1
 8018562:	3201      	adds	r2, #1
 8018564:	449b      	add	fp, r3
 8018566:	2d07      	cmp	r5, #7
 8018568:	9522      	str	r5, [sp, #136]	; 0x88
 801856a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801856e:	6022      	str	r2, [r4, #0]
 8018570:	6063      	str	r3, [r4, #4]
 8018572:	f300 810d 	bgt.w	8018790 <_svfprintf_r+0xc98>
 8018576:	3408      	adds	r4, #8
 8018578:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801857a:	6062      	str	r2, [r4, #4]
 801857c:	3501      	adds	r5, #1
 801857e:	4493      	add	fp, r2
 8018580:	ab1d      	add	r3, sp, #116	; 0x74
 8018582:	2d07      	cmp	r5, #7
 8018584:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8018588:	9522      	str	r5, [sp, #136]	; 0x88
 801858a:	6023      	str	r3, [r4, #0]
 801858c:	f77f acb6 	ble.w	8017efc <_svfprintf_r+0x404>
 8018590:	9804      	ldr	r0, [sp, #16]
 8018592:	4631      	mov	r1, r6
 8018594:	aa21      	add	r2, sp, #132	; 0x84
 8018596:	f002 fc27 	bl	801ade8 <__ssprint_r>
 801859a:	2800      	cmp	r0, #0
 801859c:	f47f ab74 	bne.w	8017c88 <_svfprintf_r+0x190>
 80185a0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80185a4:	463c      	mov	r4, r7
 80185a6:	e4aa      	b.n	8017efe <_svfprintf_r+0x406>
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d132      	bne.n	8018612 <_svfprintf_r+0xb1a>
 80185ac:	9b03      	ldr	r3, [sp, #12]
 80185ae:	07d8      	lsls	r0, r3, #31
 80185b0:	d52f      	bpl.n	8018612 <_svfprintf_r+0xb1a>
 80185b2:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 80185b6:	2330      	movs	r3, #48	; 0x30
 80185b8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 80185bc:	ebcb 0307 	rsb	r3, fp, r7
 80185c0:	9309      	str	r3, [sp, #36]	; 0x24
 80185c2:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80185c6:	f7ff bbb1 	b.w	8017d2c <_svfprintf_r+0x234>
 80185ca:	9804      	ldr	r0, [sp, #16]
 80185cc:	4631      	mov	r1, r6
 80185ce:	aa21      	add	r2, sp, #132	; 0x84
 80185d0:	f002 fc0a 	bl	801ade8 <__ssprint_r>
 80185d4:	2800      	cmp	r0, #0
 80185d6:	f47f ab57 	bne.w	8017c88 <_svfprintf_r+0x190>
 80185da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80185de:	463c      	mov	r4, r7
 80185e0:	e47b      	b.n	8017eda <_svfprintf_r+0x3e2>
 80185e2:	9804      	ldr	r0, [sp, #16]
 80185e4:	4631      	mov	r1, r6
 80185e6:	aa21      	add	r2, sp, #132	; 0x84
 80185e8:	f002 fbfe 	bl	801ade8 <__ssprint_r>
 80185ec:	2800      	cmp	r0, #0
 80185ee:	f47f ab4b 	bne.w	8017c88 <_svfprintf_r+0x190>
 80185f2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80185f6:	463c      	mov	r4, r7
 80185f8:	e427      	b.n	8017e4a <_svfprintf_r+0x352>
 80185fa:	9804      	ldr	r0, [sp, #16]
 80185fc:	4631      	mov	r1, r6
 80185fe:	aa21      	add	r2, sp, #132	; 0x84
 8018600:	f002 fbf2 	bl	801ade8 <__ssprint_r>
 8018604:	2800      	cmp	r0, #0
 8018606:	f47f ab3f 	bne.w	8017c88 <_svfprintf_r+0x190>
 801860a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801860e:	463c      	mov	r4, r7
 8018610:	e40a      	b.n	8017e28 <_svfprintf_r+0x330>
 8018612:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018616:	970c      	str	r7, [sp, #48]	; 0x30
 8018618:	f7ff bb88 	b.w	8017d2c <_svfprintf_r+0x234>
 801861c:	0801e390 	.word	0x0801e390
 8018620:	0801e3b0 	.word	0x0801e3b0
 8018624:	0801e3cc 	.word	0x0801e3cc
 8018628:	0801e38c 	.word	0x0801e38c
 801862c:	0801e36c 	.word	0x0801e36c
 8018630:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018632:	46bb      	mov	fp, r7
 8018634:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8018638:	f008 010f 	and.w	r1, r8, #15
 801863c:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 8018640:	ea4f 1219 	mov.w	r2, r9, lsr #4
 8018644:	4698      	mov	r8, r3
 8018646:	4691      	mov	r9, r2
 8018648:	5c43      	ldrb	r3, [r0, r1]
 801864a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801864e:	ea58 0309 	orrs.w	r3, r8, r9
 8018652:	d1ef      	bne.n	8018634 <_svfprintf_r+0xb3c>
 8018654:	465b      	mov	r3, fp
 8018656:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801865a:	1afb      	subs	r3, r7, r3
 801865c:	9309      	str	r3, [sp, #36]	; 0x24
 801865e:	f7ff bb65 	b.w	8017d2c <_svfprintf_r+0x234>
 8018662:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8018664:	2d00      	cmp	r5, #0
 8018666:	f340 8211 	ble.w	8018a8c <_svfprintf_r+0xf94>
 801866a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801866c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801866e:	428a      	cmp	r2, r1
 8018670:	4613      	mov	r3, r2
 8018672:	bfa8      	it	ge
 8018674:	460b      	movge	r3, r1
 8018676:	461d      	mov	r5, r3
 8018678:	990c      	ldr	r1, [sp, #48]	; 0x30
 801867a:	2d00      	cmp	r5, #0
 801867c:	eb01 0a02 	add.w	sl, r1, r2
 8018680:	dd0b      	ble.n	801869a <_svfprintf_r+0xba2>
 8018682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018684:	6021      	str	r1, [r4, #0]
 8018686:	3301      	adds	r3, #1
 8018688:	44ab      	add	fp, r5
 801868a:	2b07      	cmp	r3, #7
 801868c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8018690:	6065      	str	r5, [r4, #4]
 8018692:	9322      	str	r3, [sp, #136]	; 0x88
 8018694:	f300 8355 	bgt.w	8018d42 <_svfprintf_r+0x124a>
 8018698:	3408      	adds	r4, #8
 801869a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801869c:	2d00      	cmp	r5, #0
 801869e:	bfa8      	it	ge
 80186a0:	1b5b      	subge	r3, r3, r5
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	461d      	mov	r5, r3
 80186a6:	f340 80f5 	ble.w	8018894 <_svfprintf_r+0xd9c>
 80186aa:	2d10      	cmp	r5, #16
 80186ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80186ae:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 8018cb8 <_svfprintf_r+0x11c0>
 80186b2:	f340 81d2 	ble.w	8018a5a <_svfprintf_r+0xf62>
 80186b6:	465a      	mov	r2, fp
 80186b8:	f04f 0810 	mov.w	r8, #16
 80186bc:	f8dd b010 	ldr.w	fp, [sp, #16]
 80186c0:	e004      	b.n	80186cc <_svfprintf_r+0xbd4>
 80186c2:	3408      	adds	r4, #8
 80186c4:	3d10      	subs	r5, #16
 80186c6:	2d10      	cmp	r5, #16
 80186c8:	f340 81c6 	ble.w	8018a58 <_svfprintf_r+0xf60>
 80186cc:	3301      	adds	r3, #1
 80186ce:	3210      	adds	r2, #16
 80186d0:	2b07      	cmp	r3, #7
 80186d2:	9223      	str	r2, [sp, #140]	; 0x8c
 80186d4:	9322      	str	r3, [sp, #136]	; 0x88
 80186d6:	f8c4 9000 	str.w	r9, [r4]
 80186da:	f8c4 8004 	str.w	r8, [r4, #4]
 80186de:	ddf0      	ble.n	80186c2 <_svfprintf_r+0xbca>
 80186e0:	4658      	mov	r0, fp
 80186e2:	4631      	mov	r1, r6
 80186e4:	aa21      	add	r2, sp, #132	; 0x84
 80186e6:	f002 fb7f 	bl	801ade8 <__ssprint_r>
 80186ea:	2800      	cmp	r0, #0
 80186ec:	f47f aacc 	bne.w	8017c88 <_svfprintf_r+0x190>
 80186f0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80186f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80186f4:	463c      	mov	r4, r7
 80186f6:	e7e5      	b.n	80186c4 <_svfprintf_r+0xbcc>
 80186f8:	9804      	ldr	r0, [sp, #16]
 80186fa:	4631      	mov	r1, r6
 80186fc:	aa21      	add	r2, sp, #132	; 0x84
 80186fe:	f002 fb73 	bl	801ade8 <__ssprint_r>
 8018702:	2800      	cmp	r0, #0
 8018704:	f47f aac0 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018708:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801870c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018710:	463c      	mov	r4, r7
 8018712:	f7ff bb76 	b.w	8017e02 <_svfprintf_r+0x30a>
 8018716:	f103 38ff 	add.w	r8, r3, #4294967295
 801871a:	f1b8 0f00 	cmp.w	r8, #0
 801871e:	f77f af2b 	ble.w	8018578 <_svfprintf_r+0xa80>
 8018722:	f1b8 0f10 	cmp.w	r8, #16
 8018726:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 8018cb8 <_svfprintf_r+0x11c0>
 801872a:	dd25      	ble.n	8018778 <_svfprintf_r+0xc80>
 801872c:	465b      	mov	r3, fp
 801872e:	f04f 0a10 	mov.w	sl, #16
 8018732:	f8dd b010 	ldr.w	fp, [sp, #16]
 8018736:	e006      	b.n	8018746 <_svfprintf_r+0xc4e>
 8018738:	f1a8 0810 	sub.w	r8, r8, #16
 801873c:	f1b8 0f10 	cmp.w	r8, #16
 8018740:	f104 0408 	add.w	r4, r4, #8
 8018744:	dd17      	ble.n	8018776 <_svfprintf_r+0xc7e>
 8018746:	3501      	adds	r5, #1
 8018748:	3310      	adds	r3, #16
 801874a:	2d07      	cmp	r5, #7
 801874c:	9323      	str	r3, [sp, #140]	; 0x8c
 801874e:	9522      	str	r5, [sp, #136]	; 0x88
 8018750:	e884 0600 	stmia.w	r4, {r9, sl}
 8018754:	ddf0      	ble.n	8018738 <_svfprintf_r+0xc40>
 8018756:	4658      	mov	r0, fp
 8018758:	4631      	mov	r1, r6
 801875a:	aa21      	add	r2, sp, #132	; 0x84
 801875c:	f002 fb44 	bl	801ade8 <__ssprint_r>
 8018760:	2800      	cmp	r0, #0
 8018762:	f47f aa91 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018766:	f1a8 0810 	sub.w	r8, r8, #16
 801876a:	f1b8 0f10 	cmp.w	r8, #16
 801876e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018770:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8018772:	463c      	mov	r4, r7
 8018774:	dce7      	bgt.n	8018746 <_svfprintf_r+0xc4e>
 8018776:	469b      	mov	fp, r3
 8018778:	3501      	adds	r5, #1
 801877a:	44c3      	add	fp, r8
 801877c:	2d07      	cmp	r5, #7
 801877e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8018782:	9522      	str	r5, [sp, #136]	; 0x88
 8018784:	f8c4 9000 	str.w	r9, [r4]
 8018788:	f8c4 8004 	str.w	r8, [r4, #4]
 801878c:	f77f aef3 	ble.w	8018576 <_svfprintf_r+0xa7e>
 8018790:	9804      	ldr	r0, [sp, #16]
 8018792:	4631      	mov	r1, r6
 8018794:	aa21      	add	r2, sp, #132	; 0x84
 8018796:	f002 fb27 	bl	801ade8 <__ssprint_r>
 801879a:	2800      	cmp	r0, #0
 801879c:	f47f aa74 	bne.w	8017c88 <_svfprintf_r+0x190>
 80187a0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80187a4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80187a6:	463c      	mov	r4, r7
 80187a8:	e6e6      	b.n	8018578 <_svfprintf_r+0xa80>
 80187aa:	4693      	mov	fp, r2
 80187ac:	3301      	adds	r3, #1
 80187ae:	44ab      	add	fp, r5
 80187b0:	2b07      	cmp	r3, #7
 80187b2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80187b6:	9322      	str	r3, [sp, #136]	; 0x88
 80187b8:	f8c4 9000 	str.w	r9, [r4]
 80187bc:	6065      	str	r5, [r4, #4]
 80187be:	f77f ab9d 	ble.w	8017efc <_svfprintf_r+0x404>
 80187c2:	e6e5      	b.n	8018590 <_svfprintf_r+0xa98>
 80187c4:	46bb      	mov	fp, r7
 80187c6:	f8cd c014 	str.w	ip, [sp, #20]
 80187ca:	4640      	mov	r0, r8
 80187cc:	4649      	mov	r1, r9
 80187ce:	220a      	movs	r2, #10
 80187d0:	2300      	movs	r3, #0
 80187d2:	f7f5 ffad 	bl	800e730 <__aeabi_uldivmod>
 80187d6:	3230      	adds	r2, #48	; 0x30
 80187d8:	4640      	mov	r0, r8
 80187da:	4649      	mov	r1, r9
 80187dc:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 80187e0:	2300      	movs	r3, #0
 80187e2:	220a      	movs	r2, #10
 80187e4:	f7f5 ffa4 	bl	800e730 <__aeabi_uldivmod>
 80187e8:	4680      	mov	r8, r0
 80187ea:	4689      	mov	r9, r1
 80187ec:	ea58 0309 	orrs.w	r3, r8, r9
 80187f0:	d1eb      	bne.n	80187ca <_svfprintf_r+0xcd2>
 80187f2:	465b      	mov	r3, fp
 80187f4:	1afb      	subs	r3, r7, r3
 80187f6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80187fa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80187fe:	9309      	str	r3, [sp, #36]	; 0x24
 8018800:	f7ff ba94 	b.w	8017d2c <_svfprintf_r+0x234>
 8018804:	2b30      	cmp	r3, #48	; 0x30
 8018806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018808:	f43f af27 	beq.w	801865a <_svfprintf_r+0xb62>
 801880c:	3b01      	subs	r3, #1
 801880e:	461a      	mov	r2, r3
 8018810:	930c      	str	r3, [sp, #48]	; 0x30
 8018812:	1aba      	subs	r2, r7, r2
 8018814:	2330      	movs	r3, #48	; 0x30
 8018816:	9209      	str	r2, [sp, #36]	; 0x24
 8018818:	f801 3c01 	strb.w	r3, [r1, #-1]
 801881c:	f7ff ba86 	b.w	8017d2c <_svfprintf_r+0x234>
 8018820:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018822:	680a      	ldr	r2, [r1, #0]
 8018824:	3104      	adds	r1, #4
 8018826:	910a      	str	r1, [sp, #40]	; 0x28
 8018828:	4690      	mov	r8, r2
 801882a:	f04f 0900 	mov.w	r9, #0
 801882e:	f7ff ba4a 	b.w	8017cc6 <_svfprintf_r+0x1ce>
 8018832:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018834:	680a      	ldr	r2, [r1, #0]
 8018836:	3104      	adds	r1, #4
 8018838:	2301      	movs	r3, #1
 801883a:	910a      	str	r1, [sp, #40]	; 0x28
 801883c:	4690      	mov	r8, r2
 801883e:	f04f 0900 	mov.w	r9, #0
 8018842:	f7ff ba40 	b.w	8017cc6 <_svfprintf_r+0x1ce>
 8018846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018848:	6813      	ldr	r3, [r2, #0]
 801884a:	4698      	mov	r8, r3
 801884c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8018850:	4613      	mov	r3, r2
 8018852:	3304      	adds	r3, #4
 8018854:	4642      	mov	r2, r8
 8018856:	930a      	str	r3, [sp, #40]	; 0x28
 8018858:	2a00      	cmp	r2, #0
 801885a:	464b      	mov	r3, r9
 801885c:	f173 0300 	sbcs.w	r3, r3, #0
 8018860:	f6bf abf2 	bge.w	8018048 <_svfprintf_r+0x550>
 8018864:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8018868:	f1d8 0800 	rsbs	r8, r8, #0
 801886c:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8018870:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8018874:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018878:	2301      	movs	r3, #1
 801887a:	f7ff ba2a 	b.w	8017cd2 <_svfprintf_r+0x1da>
 801887e:	9804      	ldr	r0, [sp, #16]
 8018880:	4631      	mov	r1, r6
 8018882:	aa21      	add	r2, sp, #132	; 0x84
 8018884:	f002 fab0 	bl	801ade8 <__ssprint_r>
 8018888:	2800      	cmp	r0, #0
 801888a:	f47f a9fd 	bne.w	8017c88 <_svfprintf_r+0x190>
 801888e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018892:	463c      	mov	r4, r7
 8018894:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018896:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018898:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801889a:	440a      	add	r2, r1
 801889c:	4690      	mov	r8, r2
 801889e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80188a0:	4293      	cmp	r3, r2
 80188a2:	db46      	blt.n	8018932 <_svfprintf_r+0xe3a>
 80188a4:	9a03      	ldr	r2, [sp, #12]
 80188a6:	07d0      	lsls	r0, r2, #31
 80188a8:	d443      	bmi.n	8018932 <_svfprintf_r+0xe3a>
 80188aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80188ac:	ebc8 050a 	rsb	r5, r8, sl
 80188b0:	1ad3      	subs	r3, r2, r3
 80188b2:	429d      	cmp	r5, r3
 80188b4:	bfa8      	it	ge
 80188b6:	461d      	movge	r5, r3
 80188b8:	2d00      	cmp	r5, #0
 80188ba:	dd0c      	ble.n	80188d6 <_svfprintf_r+0xdde>
 80188bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80188be:	f8c4 8000 	str.w	r8, [r4]
 80188c2:	3201      	adds	r2, #1
 80188c4:	44ab      	add	fp, r5
 80188c6:	2a07      	cmp	r2, #7
 80188c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80188cc:	6065      	str	r5, [r4, #4]
 80188ce:	9222      	str	r2, [sp, #136]	; 0x88
 80188d0:	f300 826f 	bgt.w	8018db2 <_svfprintf_r+0x12ba>
 80188d4:	3408      	adds	r4, #8
 80188d6:	2d00      	cmp	r5, #0
 80188d8:	bfac      	ite	ge
 80188da:	1b5d      	subge	r5, r3, r5
 80188dc:	461d      	movlt	r5, r3
 80188de:	2d00      	cmp	r5, #0
 80188e0:	f77f ab0d 	ble.w	8017efe <_svfprintf_r+0x406>
 80188e4:	2d10      	cmp	r5, #16
 80188e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80188e8:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 8018cb8 <_svfprintf_r+0x11c0>
 80188ec:	f77f af5e 	ble.w	80187ac <_svfprintf_r+0xcb4>
 80188f0:	f04f 0810 	mov.w	r8, #16
 80188f4:	465a      	mov	r2, fp
 80188f6:	f8dd a010 	ldr.w	sl, [sp, #16]
 80188fa:	e004      	b.n	8018906 <_svfprintf_r+0xe0e>
 80188fc:	3408      	adds	r4, #8
 80188fe:	3d10      	subs	r5, #16
 8018900:	2d10      	cmp	r5, #16
 8018902:	f77f af52 	ble.w	80187aa <_svfprintf_r+0xcb2>
 8018906:	3301      	adds	r3, #1
 8018908:	3210      	adds	r2, #16
 801890a:	2b07      	cmp	r3, #7
 801890c:	9223      	str	r2, [sp, #140]	; 0x8c
 801890e:	9322      	str	r3, [sp, #136]	; 0x88
 8018910:	f8c4 9000 	str.w	r9, [r4]
 8018914:	f8c4 8004 	str.w	r8, [r4, #4]
 8018918:	ddf0      	ble.n	80188fc <_svfprintf_r+0xe04>
 801891a:	4650      	mov	r0, sl
 801891c:	4631      	mov	r1, r6
 801891e:	aa21      	add	r2, sp, #132	; 0x84
 8018920:	f002 fa62 	bl	801ade8 <__ssprint_r>
 8018924:	2800      	cmp	r0, #0
 8018926:	f47f a9af 	bne.w	8017c88 <_svfprintf_r+0x190>
 801892a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801892c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801892e:	463c      	mov	r4, r7
 8018930:	e7e5      	b.n	80188fe <_svfprintf_r+0xe06>
 8018932:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018934:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018936:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018938:	6021      	str	r1, [r4, #0]
 801893a:	3201      	adds	r2, #1
 801893c:	4483      	add	fp, r0
 801893e:	2a07      	cmp	r2, #7
 8018940:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8018944:	6060      	str	r0, [r4, #4]
 8018946:	9222      	str	r2, [sp, #136]	; 0x88
 8018948:	f300 8207 	bgt.w	8018d5a <_svfprintf_r+0x1262>
 801894c:	3408      	adds	r4, #8
 801894e:	e7ac      	b.n	80188aa <_svfprintf_r+0xdb2>
 8018950:	9b03      	ldr	r3, [sp, #12]
 8018952:	07d9      	lsls	r1, r3, #31
 8018954:	f53f addd 	bmi.w	8018512 <_svfprintf_r+0xa1a>
 8018958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801895a:	6023      	str	r3, [r4, #0]
 801895c:	3501      	adds	r5, #1
 801895e:	f10b 0b01 	add.w	fp, fp, #1
 8018962:	2301      	movs	r3, #1
 8018964:	2d07      	cmp	r5, #7
 8018966:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801896a:	9522      	str	r5, [sp, #136]	; 0x88
 801896c:	6063      	str	r3, [r4, #4]
 801896e:	f77f ae02 	ble.w	8018576 <_svfprintf_r+0xa7e>
 8018972:	e70d      	b.n	8018790 <_svfprintf_r+0xc98>
 8018974:	9804      	ldr	r0, [sp, #16]
 8018976:	4631      	mov	r1, r6
 8018978:	aa21      	add	r2, sp, #132	; 0x84
 801897a:	f002 fa35 	bl	801ade8 <__ssprint_r>
 801897e:	2800      	cmp	r0, #0
 8018980:	f47f a982 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018986:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8018988:	463c      	mov	r4, r7
 801898a:	e5cf      	b.n	801852c <_svfprintf_r+0xa34>
 801898c:	9804      	ldr	r0, [sp, #16]
 801898e:	4631      	mov	r1, r6
 8018990:	aa21      	add	r2, sp, #132	; 0x84
 8018992:	f002 fa29 	bl	801ade8 <__ssprint_r>
 8018996:	2800      	cmp	r0, #0
 8018998:	f47f a976 	bne.w	8017c88 <_svfprintf_r+0x190>
 801899c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80189a0:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80189a2:	463c      	mov	r4, r7
 80189a4:	e5d0      	b.n	8018548 <_svfprintf_r+0xa50>
 80189a6:	9804      	ldr	r0, [sp, #16]
 80189a8:	4631      	mov	r1, r6
 80189aa:	aa21      	add	r2, sp, #132	; 0x84
 80189ac:	f002 fa1c 	bl	801ade8 <__ssprint_r>
 80189b0:	2800      	cmp	r0, #0
 80189b2:	f47f a969 	bne.w	8017c88 <_svfprintf_r+0x190>
 80189b6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80189ba:	463c      	mov	r4, r7
 80189bc:	f7ff ba49 	b.w	8017e52 <_svfprintf_r+0x35a>
 80189c0:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 80189c4:	f002 f9a0 	bl	801ad08 <__fpclassifyd>
 80189c8:	2800      	cmp	r0, #0
 80189ca:	f040 80d1 	bne.w	8018b70 <_svfprintf_r+0x1078>
 80189ce:	4686      	mov	lr, r0
 80189d0:	4ab6      	ldr	r2, [pc, #728]	; (8018cac <_svfprintf_r+0x11b4>)
 80189d2:	4bb7      	ldr	r3, [pc, #732]	; (8018cb0 <_svfprintf_r+0x11b8>)
 80189d4:	900d      	str	r0, [sp, #52]	; 0x34
 80189d6:	9803      	ldr	r0, [sp, #12]
 80189d8:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 80189dc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80189e0:	2103      	movs	r1, #3
 80189e2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80189e6:	2d47      	cmp	r5, #71	; 0x47
 80189e8:	bfd8      	it	le
 80189ea:	461a      	movle	r2, r3
 80189ec:	9105      	str	r1, [sp, #20]
 80189ee:	9003      	str	r0, [sp, #12]
 80189f0:	920c      	str	r2, [sp, #48]	; 0x30
 80189f2:	9109      	str	r1, [sp, #36]	; 0x24
 80189f4:	f7ff b9a2 	b.w	8017d3c <_svfprintf_r+0x244>
 80189f8:	f029 0907 	bic.w	r9, r9, #7
 80189fc:	ed99 7b00 	vldr	d7, [r9]
 8018a00:	f109 0308 	add.w	r3, r9, #8
 8018a04:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8018a08:	930a      	str	r3, [sp, #40]	; 0x28
 8018a0a:	e478      	b.n	80182fe <_svfprintf_r+0x806>
 8018a0c:	9b03      	ldr	r3, [sp, #12]
 8018a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018a14:	4613      	mov	r3, r2
 8018a16:	f43f ac1f 	beq.w	8018258 <_svfprintf_r+0x760>
 8018a1a:	3304      	adds	r3, #4
 8018a1c:	f8b2 8000 	ldrh.w	r8, [r2]
 8018a20:	930a      	str	r3, [sp, #40]	; 0x28
 8018a22:	f04f 0900 	mov.w	r9, #0
 8018a26:	f7ff bb28 	b.w	801807a <_svfprintf_r+0x582>
 8018a2a:	9b03      	ldr	r3, [sp, #12]
 8018a2c:	06db      	lsls	r3, r3, #27
 8018a2e:	d40b      	bmi.n	8018a48 <_svfprintf_r+0xf50>
 8018a30:	9b03      	ldr	r3, [sp, #12]
 8018a32:	065d      	lsls	r5, r3, #25
 8018a34:	d508      	bpl.n	8018a48 <_svfprintf_r+0xf50>
 8018a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a38:	6813      	ldr	r3, [r2, #0]
 8018a3a:	3204      	adds	r2, #4
 8018a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8018a3e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8018a42:	801a      	strh	r2, [r3, #0]
 8018a44:	f7ff b87f 	b.w	8017b46 <_svfprintf_r+0x4e>
 8018a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a4a:	6813      	ldr	r3, [r2, #0]
 8018a4c:	3204      	adds	r2, #4
 8018a4e:	920a      	str	r2, [sp, #40]	; 0x28
 8018a50:	9a07      	ldr	r2, [sp, #28]
 8018a52:	601a      	str	r2, [r3, #0]
 8018a54:	f7ff b877 	b.w	8017b46 <_svfprintf_r+0x4e>
 8018a58:	4693      	mov	fp, r2
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	44ab      	add	fp, r5
 8018a5e:	2b07      	cmp	r3, #7
 8018a60:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8018a64:	9322      	str	r3, [sp, #136]	; 0x88
 8018a66:	f8c4 9000 	str.w	r9, [r4]
 8018a6a:	6065      	str	r5, [r4, #4]
 8018a6c:	f73f af07 	bgt.w	801887e <_svfprintf_r+0xd86>
 8018a70:	3408      	adds	r4, #8
 8018a72:	e70f      	b.n	8018894 <_svfprintf_r+0xd9c>
 8018a74:	9804      	ldr	r0, [sp, #16]
 8018a76:	4631      	mov	r1, r6
 8018a78:	aa21      	add	r2, sp, #132	; 0x84
 8018a7a:	f002 f9b5 	bl	801ade8 <__ssprint_r>
 8018a7e:	2800      	cmp	r0, #0
 8018a80:	f47f a902 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018a84:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018a88:	463c      	mov	r4, r7
 8018a8a:	e4b5      	b.n	80183f8 <_svfprintf_r+0x900>
 8018a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018a8e:	4a89      	ldr	r2, [pc, #548]	; (8018cb4 <_svfprintf_r+0x11bc>)
 8018a90:	6022      	str	r2, [r4, #0]
 8018a92:	3301      	adds	r3, #1
 8018a94:	f10b 0b01 	add.w	fp, fp, #1
 8018a98:	2201      	movs	r2, #1
 8018a9a:	2b07      	cmp	r3, #7
 8018a9c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8018aa0:	9322      	str	r3, [sp, #136]	; 0x88
 8018aa2:	6062      	str	r2, [r4, #4]
 8018aa4:	f300 80f1 	bgt.w	8018c8a <_svfprintf_r+0x1192>
 8018aa8:	3408      	adds	r4, #8
 8018aaa:	b92d      	cbnz	r5, 8018ab8 <_svfprintf_r+0xfc0>
 8018aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018aae:	b91b      	cbnz	r3, 8018ab8 <_svfprintf_r+0xfc0>
 8018ab0:	9b03      	ldr	r3, [sp, #12]
 8018ab2:	07db      	lsls	r3, r3, #31
 8018ab4:	f57f aa23 	bpl.w	8017efe <_svfprintf_r+0x406>
 8018ab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018aba:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018abc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018abe:	6022      	str	r2, [r4, #0]
 8018ac0:	3301      	adds	r3, #1
 8018ac2:	eb0b 0100 	add.w	r1, fp, r0
 8018ac6:	2b07      	cmp	r3, #7
 8018ac8:	9123      	str	r1, [sp, #140]	; 0x8c
 8018aca:	6060      	str	r0, [r4, #4]
 8018acc:	9322      	str	r3, [sp, #136]	; 0x88
 8018ace:	f300 81ef 	bgt.w	8018eb0 <_svfprintf_r+0x13b8>
 8018ad2:	f104 0208 	add.w	r2, r4, #8
 8018ad6:	426d      	negs	r5, r5
 8018ad8:	2d00      	cmp	r5, #0
 8018ada:	f340 80fa 	ble.w	8018cd2 <_svfprintf_r+0x11da>
 8018ade:	2d10      	cmp	r5, #16
 8018ae0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8018cb8 <_svfprintf_r+0x11c0>
 8018ae4:	f340 8146 	ble.w	8018d74 <_svfprintf_r+0x127c>
 8018ae8:	2410      	movs	r4, #16
 8018aea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018aee:	e004      	b.n	8018afa <_svfprintf_r+0x1002>
 8018af0:	3208      	adds	r2, #8
 8018af2:	3d10      	subs	r5, #16
 8018af4:	2d10      	cmp	r5, #16
 8018af6:	f340 813d 	ble.w	8018d74 <_svfprintf_r+0x127c>
 8018afa:	3301      	adds	r3, #1
 8018afc:	3110      	adds	r1, #16
 8018afe:	2b07      	cmp	r3, #7
 8018b00:	9123      	str	r1, [sp, #140]	; 0x8c
 8018b02:	9322      	str	r3, [sp, #136]	; 0x88
 8018b04:	f8c2 9000 	str.w	r9, [r2]
 8018b08:	6054      	str	r4, [r2, #4]
 8018b0a:	ddf1      	ble.n	8018af0 <_svfprintf_r+0xff8>
 8018b0c:	4640      	mov	r0, r8
 8018b0e:	4631      	mov	r1, r6
 8018b10:	aa21      	add	r2, sp, #132	; 0x84
 8018b12:	f002 f969 	bl	801ade8 <__ssprint_r>
 8018b16:	2800      	cmp	r0, #0
 8018b18:	f47f a8b6 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018b1c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018b1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018b20:	463a      	mov	r2, r7
 8018b22:	e7e6      	b.n	8018af2 <_svfprintf_r+0xffa>
 8018b24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018b26:	46b1      	mov	r9, r6
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	f43f a8ae 	beq.w	8017c8a <_svfprintf_r+0x192>
 8018b2e:	9804      	ldr	r0, [sp, #16]
 8018b30:	4631      	mov	r1, r6
 8018b32:	aa21      	add	r2, sp, #132	; 0x84
 8018b34:	f002 f958 	bl	801ade8 <__ssprint_r>
 8018b38:	f7ff b8a7 	b.w	8017c8a <_svfprintf_r+0x192>
 8018b3c:	f041 0120 	orr.w	r1, r1, #32
 8018b40:	9103      	str	r1, [sp, #12]
 8018b42:	785d      	ldrb	r5, [r3, #1]
 8018b44:	1c59      	adds	r1, r3, #1
 8018b46:	f7ff b82c 	b.w	8017ba2 <_svfprintf_r+0xaa>
 8018b4a:	9808      	ldr	r0, [sp, #32]
 8018b4c:	910a      	str	r1, [sp, #40]	; 0x28
 8018b4e:	4240      	negs	r0, r0
 8018b50:	9008      	str	r0, [sp, #32]
 8018b52:	4619      	mov	r1, r3
 8018b54:	f7ff ba29 	b.w	8017faa <_svfprintf_r+0x4b2>
 8018b58:	9804      	ldr	r0, [sp, #16]
 8018b5a:	4631      	mov	r1, r6
 8018b5c:	aa21      	add	r2, sp, #132	; 0x84
 8018b5e:	f002 f943 	bl	801ade8 <__ssprint_r>
 8018b62:	2800      	cmp	r0, #0
 8018b64:	f47f a890 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018b68:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018b6c:	463c      	mov	r4, r7
 8018b6e:	e459      	b.n	8018424 <_svfprintf_r+0x92c>
 8018b70:	f025 0320 	bic.w	r3, r5, #32
 8018b74:	f1ba 3fff 	cmp.w	sl, #4294967295
 8018b78:	9305      	str	r3, [sp, #20]
 8018b7a:	f000 8093 	beq.w	8018ca4 <_svfprintf_r+0x11ac>
 8018b7e:	2b47      	cmp	r3, #71	; 0x47
 8018b80:	d105      	bne.n	8018b8e <_svfprintf_r+0x1096>
 8018b82:	f1ba 0f00 	cmp.w	sl, #0
 8018b86:	bf14      	ite	ne
 8018b88:	46d3      	movne	fp, sl
 8018b8a:	f04f 0b01 	moveq.w	fp, #1
 8018b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018b90:	9a03      	ldr	r2, [sp, #12]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018b98:	920b      	str	r2, [sp, #44]	; 0x2c
 8018b9a:	f2c0 81a4 	blt.w	8018ee6 <_svfprintf_r+0x13ee>
 8018b9e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8018ba2:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8018ba6:	f04f 0a00 	mov.w	sl, #0
 8018baa:	2d66      	cmp	r5, #102	; 0x66
 8018bac:	f000 80ac 	beq.w	8018d08 <_svfprintf_r+0x1210>
 8018bb0:	2d46      	cmp	r5, #70	; 0x46
 8018bb2:	f000 80a9 	beq.w	8018d08 <_svfprintf_r+0x1210>
 8018bb6:	9b05      	ldr	r3, [sp, #20]
 8018bb8:	9804      	ldr	r0, [sp, #16]
 8018bba:	2b45      	cmp	r3, #69	; 0x45
 8018bbc:	bf0c      	ite	eq
 8018bbe:	f10b 0901 	addeq.w	r9, fp, #1
 8018bc2:	46d9      	movne	r9, fp
 8018bc4:	aa1c      	add	r2, sp, #112	; 0x70
 8018bc6:	ab1f      	add	r3, sp, #124	; 0x7c
 8018bc8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018bcc:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8018bd0:	2102      	movs	r1, #2
 8018bd2:	464a      	mov	r2, r9
 8018bd4:	ab1b      	add	r3, sp, #108	; 0x6c
 8018bd6:	f000 fb43 	bl	8019260 <_dtoa_r>
 8018bda:	2d67      	cmp	r5, #103	; 0x67
 8018bdc:	900c      	str	r0, [sp, #48]	; 0x30
 8018bde:	d002      	beq.n	8018be6 <_svfprintf_r+0x10ee>
 8018be0:	2d47      	cmp	r5, #71	; 0x47
 8018be2:	f040 809f 	bne.w	8018d24 <_svfprintf_r+0x122c>
 8018be6:	9b03      	ldr	r3, [sp, #12]
 8018be8:	07db      	lsls	r3, r3, #31
 8018bea:	f140 8192 	bpl.w	8018f12 <_svfprintf_r+0x141a>
 8018bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018bf0:	eb03 0809 	add.w	r8, r3, r9
 8018bf4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	f7f5 fd3e 	bl	800e67c <__aeabi_dcmpeq>
 8018c00:	2800      	cmp	r0, #0
 8018c02:	f040 80fd 	bne.w	8018e00 <_svfprintf_r+0x1308>
 8018c06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018c08:	4598      	cmp	r8, r3
 8018c0a:	d906      	bls.n	8018c1a <_svfprintf_r+0x1122>
 8018c0c:	2130      	movs	r1, #48	; 0x30
 8018c0e:	1c5a      	adds	r2, r3, #1
 8018c10:	921f      	str	r2, [sp, #124]	; 0x7c
 8018c12:	7019      	strb	r1, [r3, #0]
 8018c14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018c16:	4598      	cmp	r8, r3
 8018c18:	d8f9      	bhi.n	8018c0e <_svfprintf_r+0x1116>
 8018c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c1c:	1a9b      	subs	r3, r3, r2
 8018c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018c20:	9b05      	ldr	r3, [sp, #20]
 8018c22:	2b47      	cmp	r3, #71	; 0x47
 8018c24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018c26:	f000 80de 	beq.w	8018de6 <_svfprintf_r+0x12ee>
 8018c2a:	2d65      	cmp	r5, #101	; 0x65
 8018c2c:	f340 80f8 	ble.w	8018e20 <_svfprintf_r+0x1328>
 8018c30:	2d66      	cmp	r5, #102	; 0x66
 8018c32:	930e      	str	r3, [sp, #56]	; 0x38
 8018c34:	f000 8160 	beq.w	8018ef8 <_svfprintf_r+0x1400>
 8018c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018c3c:	4293      	cmp	r3, r2
 8018c3e:	f300 8144 	bgt.w	8018eca <_svfprintf_r+0x13d2>
 8018c42:	9b03      	ldr	r3, [sp, #12]
 8018c44:	07d9      	lsls	r1, r3, #31
 8018c46:	f100 8166 	bmi.w	8018f16 <_svfprintf_r+0x141e>
 8018c4a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8018c50:	f1ba 0f00 	cmp.w	sl, #0
 8018c54:	f040 80bc 	bne.w	8018dd0 <_svfprintf_r+0x12d8>
 8018c58:	9305      	str	r3, [sp, #20]
 8018c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c5c:	9303      	str	r3, [sp, #12]
 8018c5e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018c62:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8018c66:	f7ff b869 	b.w	8017d3c <_svfprintf_r+0x244>
 8018c6a:	9804      	ldr	r0, [sp, #16]
 8018c6c:	2140      	movs	r1, #64	; 0x40
 8018c6e:	f7fe f869 	bl	8016d44 <_malloc_r>
 8018c72:	f8c9 0000 	str.w	r0, [r9]
 8018c76:	f8c9 0010 	str.w	r0, [r9, #16]
 8018c7a:	2800      	cmp	r0, #0
 8018c7c:	f000 8197 	beq.w	8018fae <_svfprintf_r+0x14b6>
 8018c80:	2340      	movs	r3, #64	; 0x40
 8018c82:	f8c9 3014 	str.w	r3, [r9, #20]
 8018c86:	f7fe bf4f 	b.w	8017b28 <_svfprintf_r+0x30>
 8018c8a:	9804      	ldr	r0, [sp, #16]
 8018c8c:	4631      	mov	r1, r6
 8018c8e:	aa21      	add	r2, sp, #132	; 0x84
 8018c90:	f002 f8aa 	bl	801ade8 <__ssprint_r>
 8018c94:	2800      	cmp	r0, #0
 8018c96:	f47e aff7 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018c9a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8018c9c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018ca0:	463c      	mov	r4, r7
 8018ca2:	e702      	b.n	8018aaa <_svfprintf_r+0xfb2>
 8018ca4:	f04f 0b06 	mov.w	fp, #6
 8018ca8:	e771      	b.n	8018b8e <_svfprintf_r+0x1096>
 8018caa:	bf00      	nop
 8018cac:	0801e398 	.word	0x0801e398
 8018cb0:	0801e394 	.word	0x0801e394
 8018cb4:	0801e3cc 	.word	0x0801e3cc
 8018cb8:	0801e36c 	.word	0x0801e36c
 8018cbc:	9804      	ldr	r0, [sp, #16]
 8018cbe:	4631      	mov	r1, r6
 8018cc0:	aa21      	add	r2, sp, #132	; 0x84
 8018cc2:	f002 f891 	bl	801ade8 <__ssprint_r>
 8018cc6:	2800      	cmp	r0, #0
 8018cc8:	f47e afde 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018ccc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018cce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018cd0:	463a      	mov	r2, r7
 8018cd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018cd4:	6054      	str	r4, [r2, #4]
 8018cd6:	3301      	adds	r3, #1
 8018cd8:	eb01 0b04 	add.w	fp, r1, r4
 8018cdc:	2b07      	cmp	r3, #7
 8018cde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018ce0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8018ce4:	9322      	str	r3, [sp, #136]	; 0x88
 8018ce6:	6011      	str	r1, [r2, #0]
 8018ce8:	f73f ac52 	bgt.w	8018590 <_svfprintf_r+0xa98>
 8018cec:	f102 0408 	add.w	r4, r2, #8
 8018cf0:	f7ff b905 	b.w	8017efe <_svfprintf_r+0x406>
 8018cf4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8018cf8:	f7fe fe82 	bl	8017a00 <strlen>
 8018cfc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8018d00:	9009      	str	r0, [sp, #36]	; 0x24
 8018d02:	4603      	mov	r3, r0
 8018d04:	f7ff ba0e 	b.w	8018124 <_svfprintf_r+0x62c>
 8018d08:	aa1c      	add	r2, sp, #112	; 0x70
 8018d0a:	ab1f      	add	r3, sp, #124	; 0x7c
 8018d0c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018d10:	9804      	ldr	r0, [sp, #16]
 8018d12:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8018d16:	2103      	movs	r1, #3
 8018d18:	465a      	mov	r2, fp
 8018d1a:	ab1b      	add	r3, sp, #108	; 0x6c
 8018d1c:	f000 faa0 	bl	8019260 <_dtoa_r>
 8018d20:	46d9      	mov	r9, fp
 8018d22:	900c      	str	r0, [sp, #48]	; 0x30
 8018d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d26:	eb03 0809 	add.w	r8, r3, r9
 8018d2a:	9b05      	ldr	r3, [sp, #20]
 8018d2c:	2b46      	cmp	r3, #70	; 0x46
 8018d2e:	f47f af61 	bne.w	8018bf4 <_svfprintf_r+0x10fc>
 8018d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d34:	781b      	ldrb	r3, [r3, #0]
 8018d36:	2b30      	cmp	r3, #48	; 0x30
 8018d38:	f000 8103 	beq.w	8018f42 <_svfprintf_r+0x144a>
 8018d3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018d3e:	4498      	add	r8, r3
 8018d40:	e758      	b.n	8018bf4 <_svfprintf_r+0x10fc>
 8018d42:	9804      	ldr	r0, [sp, #16]
 8018d44:	4631      	mov	r1, r6
 8018d46:	aa21      	add	r2, sp, #132	; 0x84
 8018d48:	f002 f84e 	bl	801ade8 <__ssprint_r>
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	f47e af9b 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018d52:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018d56:	463c      	mov	r4, r7
 8018d58:	e49f      	b.n	801869a <_svfprintf_r+0xba2>
 8018d5a:	9804      	ldr	r0, [sp, #16]
 8018d5c:	4631      	mov	r1, r6
 8018d5e:	aa21      	add	r2, sp, #132	; 0x84
 8018d60:	f002 f842 	bl	801ade8 <__ssprint_r>
 8018d64:	2800      	cmp	r0, #0
 8018d66:	f47e af8f 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018d6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018d6c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018d70:	463c      	mov	r4, r7
 8018d72:	e59a      	b.n	80188aa <_svfprintf_r+0xdb2>
 8018d74:	3301      	adds	r3, #1
 8018d76:	4429      	add	r1, r5
 8018d78:	2b07      	cmp	r3, #7
 8018d7a:	9123      	str	r1, [sp, #140]	; 0x8c
 8018d7c:	9322      	str	r3, [sp, #136]	; 0x88
 8018d7e:	f8c2 9000 	str.w	r9, [r2]
 8018d82:	6055      	str	r5, [r2, #4]
 8018d84:	dc9a      	bgt.n	8018cbc <_svfprintf_r+0x11c4>
 8018d86:	3208      	adds	r2, #8
 8018d88:	e7a3      	b.n	8018cd2 <_svfprintf_r+0x11da>
 8018d8a:	4653      	mov	r3, sl
 8018d8c:	2b06      	cmp	r3, #6
 8018d8e:	bf28      	it	cs
 8018d90:	2306      	movcs	r3, #6
 8018d92:	9309      	str	r3, [sp, #36]	; 0x24
 8018d94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d98:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8018d9c:	9305      	str	r3, [sp, #20]
 8018d9e:	4b87      	ldr	r3, [pc, #540]	; (8018fbc <_svfprintf_r+0x14c4>)
 8018da0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8018da4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8018da8:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8018dac:	930c      	str	r3, [sp, #48]	; 0x30
 8018dae:	f7fe bfc5 	b.w	8017d3c <_svfprintf_r+0x244>
 8018db2:	9804      	ldr	r0, [sp, #16]
 8018db4:	4631      	mov	r1, r6
 8018db6:	aa21      	add	r2, sp, #132	; 0x84
 8018db8:	f002 f816 	bl	801ade8 <__ssprint_r>
 8018dbc:	2800      	cmp	r0, #0
 8018dbe:	f47e af63 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018dc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018dc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018dc6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018dca:	1ad3      	subs	r3, r2, r3
 8018dcc:	463c      	mov	r4, r7
 8018dce:	e582      	b.n	80188d6 <_svfprintf_r+0xdde>
 8018dd0:	9305      	str	r3, [sp, #20]
 8018dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dd4:	9303      	str	r3, [sp, #12]
 8018dd6:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8018dda:	2300      	movs	r3, #0
 8018ddc:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8018de0:	930d      	str	r3, [sp, #52]	; 0x34
 8018de2:	f7fe bfae 	b.w	8017d42 <_svfprintf_r+0x24a>
 8018de6:	1cda      	adds	r2, r3, #3
 8018de8:	db19      	blt.n	8018e1e <_svfprintf_r+0x1326>
 8018dea:	459b      	cmp	fp, r3
 8018dec:	db17      	blt.n	8018e1e <_svfprintf_r+0x1326>
 8018dee:	930e      	str	r3, [sp, #56]	; 0x38
 8018df0:	2567      	movs	r5, #103	; 0x67
 8018df2:	e721      	b.n	8018c38 <_svfprintf_r+0x1140>
 8018df4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8018df8:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8018dfc:	f7ff ba91 	b.w	8018322 <_svfprintf_r+0x82a>
 8018e00:	4643      	mov	r3, r8
 8018e02:	e70a      	b.n	8018c1a <_svfprintf_r+0x1122>
 8018e04:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8018e08:	900d      	str	r0, [sp, #52]	; 0x34
 8018e0a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8018e0e:	900e      	str	r0, [sp, #56]	; 0x38
 8018e10:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8018e14:	9305      	str	r3, [sp, #20]
 8018e16:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018e1a:	f7fe bf8f 	b.w	8017d3c <_svfprintf_r+0x244>
 8018e1e:	3d02      	subs	r5, #2
 8018e20:	3b01      	subs	r3, #1
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	931b      	str	r3, [sp, #108]	; 0x6c
 8018e26:	bfba      	itte	lt
 8018e28:	425b      	neglt	r3, r3
 8018e2a:	222d      	movlt	r2, #45	; 0x2d
 8018e2c:	222b      	movge	r2, #43	; 0x2b
 8018e2e:	2b09      	cmp	r3, #9
 8018e30:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 8018e34:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8018e38:	dd7b      	ble.n	8018f32 <_svfprintf_r+0x143a>
 8018e3a:	f10d 0e83 	add.w	lr, sp, #131	; 0x83
 8018e3e:	4670      	mov	r0, lr
 8018e40:	4a5f      	ldr	r2, [pc, #380]	; (8018fc0 <_svfprintf_r+0x14c8>)
 8018e42:	fb82 2103 	smull	r2, r1, r2, r3
 8018e46:	17da      	asrs	r2, r3, #31
 8018e48:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8018e4c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8018e50:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8018e54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018e58:	2a09      	cmp	r2, #9
 8018e5a:	4613      	mov	r3, r2
 8018e5c:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8018e60:	dcee      	bgt.n	8018e40 <_svfprintf_r+0x1348>
 8018e62:	4602      	mov	r2, r0
 8018e64:	3330      	adds	r3, #48	; 0x30
 8018e66:	b2d9      	uxtb	r1, r3
 8018e68:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8018e6c:	4596      	cmp	lr, r2
 8018e6e:	f240 809b 	bls.w	8018fa8 <_svfprintf_r+0x14b0>
 8018e72:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8018e76:	4603      	mov	r3, r0
 8018e78:	e001      	b.n	8018e7e <_svfprintf_r+0x1386>
 8018e7a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8018e7e:	f802 1b01 	strb.w	r1, [r2], #1
 8018e82:	4573      	cmp	r3, lr
 8018e84:	d1f9      	bne.n	8018e7a <_svfprintf_r+0x1382>
 8018e86:	ab21      	add	r3, sp, #132	; 0x84
 8018e88:	1a1b      	subs	r3, r3, r0
 8018e8a:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8018e8e:	4413      	add	r3, r2
 8018e90:	aa1d      	add	r2, sp, #116	; 0x74
 8018e92:	1a9b      	subs	r3, r3, r2
 8018e94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018e96:	9315      	str	r3, [sp, #84]	; 0x54
 8018e98:	2a01      	cmp	r2, #1
 8018e9a:	4413      	add	r3, r2
 8018e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8018e9e:	dd74      	ble.n	8018f8a <_svfprintf_r+0x1492>
 8018ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	3301      	adds	r3, #1
 8018ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ea8:	920e      	str	r2, [sp, #56]	; 0x38
 8018eaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018eae:	e6cf      	b.n	8018c50 <_svfprintf_r+0x1158>
 8018eb0:	9804      	ldr	r0, [sp, #16]
 8018eb2:	4631      	mov	r1, r6
 8018eb4:	aa21      	add	r2, sp, #132	; 0x84
 8018eb6:	f001 ff97 	bl	801ade8 <__ssprint_r>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	f47e aee4 	bne.w	8017c88 <_svfprintf_r+0x190>
 8018ec0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8018ec2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018ec4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018ec6:	463a      	mov	r2, r7
 8018ec8:	e605      	b.n	8018ad6 <_svfprintf_r+0xfde>
 8018eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	bfd8      	it	le
 8018ed0:	f1c3 0802 	rsble	r8, r3, #2
 8018ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018ed6:	bfc8      	it	gt
 8018ed8:	f04f 0801 	movgt.w	r8, #1
 8018edc:	4443      	add	r3, r8
 8018ede:	9309      	str	r3, [sp, #36]	; 0x24
 8018ee0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018ee4:	e6b4      	b.n	8018c50 <_svfprintf_r+0x1158>
 8018ee6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018eee:	9016      	str	r0, [sp, #88]	; 0x58
 8018ef0:	9317      	str	r3, [sp, #92]	; 0x5c
 8018ef2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8018ef6:	e658      	b.n	8018baa <_svfprintf_r+0x10b2>
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	dd3d      	ble.n	8018f78 <_svfprintf_r+0x1480>
 8018efc:	f1bb 0f00 	cmp.w	fp, #0
 8018f00:	d10f      	bne.n	8018f22 <_svfprintf_r+0x142a>
 8018f02:	9b03      	ldr	r3, [sp, #12]
 8018f04:	07db      	lsls	r3, r3, #31
 8018f06:	d40c      	bmi.n	8018f22 <_svfprintf_r+0x142a>
 8018f08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8018f0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018f10:	e69e      	b.n	8018c50 <_svfprintf_r+0x1158>
 8018f12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018f14:	e681      	b.n	8018c1a <_svfprintf_r+0x1122>
 8018f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f18:	3301      	adds	r3, #1
 8018f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8018f1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f20:	e696      	b.n	8018c50 <_svfprintf_r+0x1158>
 8018f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f24:	f10b 0801 	add.w	r8, fp, #1
 8018f28:	4443      	add	r3, r8
 8018f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8018f2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f30:	e68e      	b.n	8018c50 <_svfprintf_r+0x1158>
 8018f32:	3330      	adds	r3, #48	; 0x30
 8018f34:	2230      	movs	r2, #48	; 0x30
 8018f36:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8018f3a:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8018f3e:	ab1e      	add	r3, sp, #120	; 0x78
 8018f40:	e7a6      	b.n	8018e90 <_svfprintf_r+0x1398>
 8018f42:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8018f46:	2200      	movs	r2, #0
 8018f48:	2300      	movs	r3, #0
 8018f4a:	f7f5 fb97 	bl	800e67c <__aeabi_dcmpeq>
 8018f4e:	2800      	cmp	r0, #0
 8018f50:	f47f aef4 	bne.w	8018d3c <_svfprintf_r+0x1244>
 8018f54:	f1c9 0301 	rsb	r3, r9, #1
 8018f58:	931b      	str	r3, [sp, #108]	; 0x6c
 8018f5a:	4498      	add	r8, r3
 8018f5c:	e64a      	b.n	8018bf4 <_svfprintf_r+0x10fc>
 8018f5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018f60:	f8d5 a000 	ldr.w	sl, [r5]
 8018f64:	4628      	mov	r0, r5
 8018f66:	3004      	adds	r0, #4
 8018f68:	f1ba 0f00 	cmp.w	sl, #0
 8018f6c:	785d      	ldrb	r5, [r3, #1]
 8018f6e:	900a      	str	r0, [sp, #40]	; 0x28
 8018f70:	f6be ae17 	bge.w	8017ba2 <_svfprintf_r+0xaa>
 8018f74:	f7fe be13 	b.w	8017b9e <_svfprintf_r+0xa6>
 8018f78:	f1bb 0f00 	cmp.w	fp, #0
 8018f7c:	d10e      	bne.n	8018f9c <_svfprintf_r+0x14a4>
 8018f7e:	9b03      	ldr	r3, [sp, #12]
 8018f80:	07d8      	lsls	r0, r3, #31
 8018f82:	d40b      	bmi.n	8018f9c <_svfprintf_r+0x14a4>
 8018f84:	2301      	movs	r3, #1
 8018f86:	9309      	str	r3, [sp, #36]	; 0x24
 8018f88:	e662      	b.n	8018c50 <_svfprintf_r+0x1158>
 8018f8a:	9b03      	ldr	r3, [sp, #12]
 8018f8c:	f013 0301 	ands.w	r3, r3, #1
 8018f90:	d186      	bne.n	8018ea0 <_svfprintf_r+0x13a8>
 8018f92:	930e      	str	r3, [sp, #56]	; 0x38
 8018f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f9a:	e659      	b.n	8018c50 <_svfprintf_r+0x1158>
 8018f9c:	f10b 0302 	add.w	r3, fp, #2
 8018fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8018fa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018fa6:	e653      	b.n	8018c50 <_svfprintf_r+0x1158>
 8018fa8:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8018fac:	e770      	b.n	8018e90 <_svfprintf_r+0x1398>
 8018fae:	9a04      	ldr	r2, [sp, #16]
 8018fb0:	230c      	movs	r3, #12
 8018fb2:	6013      	str	r3, [r2, #0]
 8018fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8018fb8:	f7fe be70 	b.w	8017c9c <_svfprintf_r+0x1a4>
 8018fbc:	0801e3c4 	.word	0x0801e3c4
 8018fc0:	66666667 	.word	0x66666667

08018fc4 <__swbuf_r>:
 8018fc4:	b570      	push	{r4, r5, r6, lr}
 8018fc6:	460d      	mov	r5, r1
 8018fc8:	4614      	mov	r4, r2
 8018fca:	4606      	mov	r6, r0
 8018fcc:	b110      	cbz	r0, 8018fd4 <__swbuf_r+0x10>
 8018fce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d048      	beq.n	8019066 <__swbuf_r+0xa2>
 8018fd4:	89a2      	ldrh	r2, [r4, #12]
 8018fd6:	69a3      	ldr	r3, [r4, #24]
 8018fd8:	60a3      	str	r3, [r4, #8]
 8018fda:	b291      	uxth	r1, r2
 8018fdc:	0708      	lsls	r0, r1, #28
 8018fde:	d538      	bpl.n	8019052 <__swbuf_r+0x8e>
 8018fe0:	6923      	ldr	r3, [r4, #16]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d035      	beq.n	8019052 <__swbuf_r+0x8e>
 8018fe6:	0489      	lsls	r1, r1, #18
 8018fe8:	b2ed      	uxtb	r5, r5
 8018fea:	d515      	bpl.n	8019018 <__swbuf_r+0x54>
 8018fec:	6822      	ldr	r2, [r4, #0]
 8018fee:	6961      	ldr	r1, [r4, #20]
 8018ff0:	1ad3      	subs	r3, r2, r3
 8018ff2:	428b      	cmp	r3, r1
 8018ff4:	da1c      	bge.n	8019030 <__swbuf_r+0x6c>
 8018ff6:	3301      	adds	r3, #1
 8018ff8:	68a1      	ldr	r1, [r4, #8]
 8018ffa:	1c50      	adds	r0, r2, #1
 8018ffc:	3901      	subs	r1, #1
 8018ffe:	60a1      	str	r1, [r4, #8]
 8019000:	6020      	str	r0, [r4, #0]
 8019002:	7015      	strb	r5, [r2, #0]
 8019004:	6962      	ldr	r2, [r4, #20]
 8019006:	429a      	cmp	r2, r3
 8019008:	d01a      	beq.n	8019040 <__swbuf_r+0x7c>
 801900a:	89a3      	ldrh	r3, [r4, #12]
 801900c:	07db      	lsls	r3, r3, #31
 801900e:	d501      	bpl.n	8019014 <__swbuf_r+0x50>
 8019010:	2d0a      	cmp	r5, #10
 8019012:	d015      	beq.n	8019040 <__swbuf_r+0x7c>
 8019014:	4628      	mov	r0, r5
 8019016:	bd70      	pop	{r4, r5, r6, pc}
 8019018:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801901a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801901e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8019022:	81a2      	strh	r2, [r4, #12]
 8019024:	6822      	ldr	r2, [r4, #0]
 8019026:	6661      	str	r1, [r4, #100]	; 0x64
 8019028:	6961      	ldr	r1, [r4, #20]
 801902a:	1ad3      	subs	r3, r2, r3
 801902c:	428b      	cmp	r3, r1
 801902e:	dbe2      	blt.n	8018ff6 <__swbuf_r+0x32>
 8019030:	4630      	mov	r0, r6
 8019032:	4621      	mov	r1, r4
 8019034:	f001 f910 	bl	801a258 <_fflush_r>
 8019038:	b940      	cbnz	r0, 801904c <__swbuf_r+0x88>
 801903a:	6822      	ldr	r2, [r4, #0]
 801903c:	2301      	movs	r3, #1
 801903e:	e7db      	b.n	8018ff8 <__swbuf_r+0x34>
 8019040:	4630      	mov	r0, r6
 8019042:	4621      	mov	r1, r4
 8019044:	f001 f908 	bl	801a258 <_fflush_r>
 8019048:	2800      	cmp	r0, #0
 801904a:	d0e3      	beq.n	8019014 <__swbuf_r+0x50>
 801904c:	f04f 30ff 	mov.w	r0, #4294967295
 8019050:	bd70      	pop	{r4, r5, r6, pc}
 8019052:	4630      	mov	r0, r6
 8019054:	4621      	mov	r1, r4
 8019056:	f000 f809 	bl	801906c <__swsetup_r>
 801905a:	2800      	cmp	r0, #0
 801905c:	d1f6      	bne.n	801904c <__swbuf_r+0x88>
 801905e:	89a2      	ldrh	r2, [r4, #12]
 8019060:	6923      	ldr	r3, [r4, #16]
 8019062:	b291      	uxth	r1, r2
 8019064:	e7bf      	b.n	8018fe6 <__swbuf_r+0x22>
 8019066:	f001 f98b 	bl	801a380 <__sinit>
 801906a:	e7b3      	b.n	8018fd4 <__swbuf_r+0x10>

0801906c <__swsetup_r>:
 801906c:	b538      	push	{r3, r4, r5, lr}
 801906e:	4b2f      	ldr	r3, [pc, #188]	; (801912c <__swsetup_r+0xc0>)
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	4605      	mov	r5, r0
 8019074:	460c      	mov	r4, r1
 8019076:	b113      	cbz	r3, 801907e <__swsetup_r+0x12>
 8019078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801907a:	2a00      	cmp	r2, #0
 801907c:	d036      	beq.n	80190ec <__swsetup_r+0x80>
 801907e:	89a2      	ldrh	r2, [r4, #12]
 8019080:	b293      	uxth	r3, r2
 8019082:	0718      	lsls	r0, r3, #28
 8019084:	d50c      	bpl.n	80190a0 <__swsetup_r+0x34>
 8019086:	6920      	ldr	r0, [r4, #16]
 8019088:	b1a8      	cbz	r0, 80190b6 <__swsetup_r+0x4a>
 801908a:	f013 0201 	ands.w	r2, r3, #1
 801908e:	d01e      	beq.n	80190ce <__swsetup_r+0x62>
 8019090:	6963      	ldr	r3, [r4, #20]
 8019092:	2200      	movs	r2, #0
 8019094:	425b      	negs	r3, r3
 8019096:	61a3      	str	r3, [r4, #24]
 8019098:	60a2      	str	r2, [r4, #8]
 801909a:	b1f0      	cbz	r0, 80190da <__swsetup_r+0x6e>
 801909c:	2000      	movs	r0, #0
 801909e:	bd38      	pop	{r3, r4, r5, pc}
 80190a0:	06d9      	lsls	r1, r3, #27
 80190a2:	d53b      	bpl.n	801911c <__swsetup_r+0xb0>
 80190a4:	0758      	lsls	r0, r3, #29
 80190a6:	d425      	bmi.n	80190f4 <__swsetup_r+0x88>
 80190a8:	6920      	ldr	r0, [r4, #16]
 80190aa:	f042 0308 	orr.w	r3, r2, #8
 80190ae:	81a3      	strh	r3, [r4, #12]
 80190b0:	b29b      	uxth	r3, r3
 80190b2:	2800      	cmp	r0, #0
 80190b4:	d1e9      	bne.n	801908a <__swsetup_r+0x1e>
 80190b6:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80190ba:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80190be:	d0e4      	beq.n	801908a <__swsetup_r+0x1e>
 80190c0:	4628      	mov	r0, r5
 80190c2:	4621      	mov	r1, r4
 80190c4:	f001 faba 	bl	801a63c <__smakebuf_r>
 80190c8:	89a3      	ldrh	r3, [r4, #12]
 80190ca:	6920      	ldr	r0, [r4, #16]
 80190cc:	e7dd      	b.n	801908a <__swsetup_r+0x1e>
 80190ce:	0799      	lsls	r1, r3, #30
 80190d0:	bf58      	it	pl
 80190d2:	6962      	ldrpl	r2, [r4, #20]
 80190d4:	60a2      	str	r2, [r4, #8]
 80190d6:	2800      	cmp	r0, #0
 80190d8:	d1e0      	bne.n	801909c <__swsetup_r+0x30>
 80190da:	89a3      	ldrh	r3, [r4, #12]
 80190dc:	061a      	lsls	r2, r3, #24
 80190de:	d5de      	bpl.n	801909e <__swsetup_r+0x32>
 80190e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190e4:	81a3      	strh	r3, [r4, #12]
 80190e6:	f04f 30ff 	mov.w	r0, #4294967295
 80190ea:	bd38      	pop	{r3, r4, r5, pc}
 80190ec:	4618      	mov	r0, r3
 80190ee:	f001 f947 	bl	801a380 <__sinit>
 80190f2:	e7c4      	b.n	801907e <__swsetup_r+0x12>
 80190f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80190f6:	b149      	cbz	r1, 801910c <__swsetup_r+0xa0>
 80190f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80190fc:	4299      	cmp	r1, r3
 80190fe:	d003      	beq.n	8019108 <__swsetup_r+0x9c>
 8019100:	4628      	mov	r0, r5
 8019102:	f001 f995 	bl	801a430 <_free_r>
 8019106:	89a2      	ldrh	r2, [r4, #12]
 8019108:	2300      	movs	r3, #0
 801910a:	6323      	str	r3, [r4, #48]	; 0x30
 801910c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8019110:	2300      	movs	r3, #0
 8019112:	6920      	ldr	r0, [r4, #16]
 8019114:	6063      	str	r3, [r4, #4]
 8019116:	b292      	uxth	r2, r2
 8019118:	6020      	str	r0, [r4, #0]
 801911a:	e7c6      	b.n	80190aa <__swsetup_r+0x3e>
 801911c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019120:	2309      	movs	r3, #9
 8019122:	602b      	str	r3, [r5, #0]
 8019124:	f04f 30ff 	mov.w	r0, #4294967295
 8019128:	81a2      	strh	r2, [r4, #12]
 801912a:	bd38      	pop	{r3, r4, r5, pc}
 801912c:	20000c30 	.word	0x20000c30

08019130 <quorem>:
 8019130:	6902      	ldr	r2, [r0, #16]
 8019132:	690b      	ldr	r3, [r1, #16]
 8019134:	4293      	cmp	r3, r2
 8019136:	f300 808f 	bgt.w	8019258 <quorem+0x128>
 801913a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801913e:	f103 38ff 	add.w	r8, r3, #4294967295
 8019142:	f101 0714 	add.w	r7, r1, #20
 8019146:	f100 0b14 	add.w	fp, r0, #20
 801914a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801914e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8019152:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8019156:	b083      	sub	sp, #12
 8019158:	3201      	adds	r2, #1
 801915a:	fbb3 f9f2 	udiv	r9, r3, r2
 801915e:	eb0b 0304 	add.w	r3, fp, r4
 8019162:	9400      	str	r4, [sp, #0]
 8019164:	eb07 0a04 	add.w	sl, r7, r4
 8019168:	9301      	str	r3, [sp, #4]
 801916a:	f1b9 0f00 	cmp.w	r9, #0
 801916e:	d03b      	beq.n	80191e8 <quorem+0xb8>
 8019170:	2600      	movs	r6, #0
 8019172:	4632      	mov	r2, r6
 8019174:	46bc      	mov	ip, r7
 8019176:	46de      	mov	lr, fp
 8019178:	4634      	mov	r4, r6
 801917a:	f85c 6b04 	ldr.w	r6, [ip], #4
 801917e:	f8de 5000 	ldr.w	r5, [lr]
 8019182:	b2b3      	uxth	r3, r6
 8019184:	0c36      	lsrs	r6, r6, #16
 8019186:	fb03 4409 	mla	r4, r3, r9, r4
 801918a:	fb06 f609 	mul.w	r6, r6, r9
 801918e:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 8019192:	b2a3      	uxth	r3, r4
 8019194:	1ad3      	subs	r3, r2, r3
 8019196:	b2b4      	uxth	r4, r6
 8019198:	fa13 f385 	uxtah	r3, r3, r5
 801919c:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 80191a0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80191a4:	b29b      	uxth	r3, r3
 80191a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80191aa:	45e2      	cmp	sl, ip
 80191ac:	ea4f 4224 	mov.w	r2, r4, asr #16
 80191b0:	f84e 3b04 	str.w	r3, [lr], #4
 80191b4:	ea4f 4416 	mov.w	r4, r6, lsr #16
 80191b8:	d2df      	bcs.n	801917a <quorem+0x4a>
 80191ba:	9b00      	ldr	r3, [sp, #0]
 80191bc:	f85b 3003 	ldr.w	r3, [fp, r3]
 80191c0:	b993      	cbnz	r3, 80191e8 <quorem+0xb8>
 80191c2:	9c01      	ldr	r4, [sp, #4]
 80191c4:	1f23      	subs	r3, r4, #4
 80191c6:	459b      	cmp	fp, r3
 80191c8:	d20c      	bcs.n	80191e4 <quorem+0xb4>
 80191ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80191ce:	b94b      	cbnz	r3, 80191e4 <quorem+0xb4>
 80191d0:	f1a4 0308 	sub.w	r3, r4, #8
 80191d4:	e002      	b.n	80191dc <quorem+0xac>
 80191d6:	681a      	ldr	r2, [r3, #0]
 80191d8:	3b04      	subs	r3, #4
 80191da:	b91a      	cbnz	r2, 80191e4 <quorem+0xb4>
 80191dc:	459b      	cmp	fp, r3
 80191de:	f108 38ff 	add.w	r8, r8, #4294967295
 80191e2:	d3f8      	bcc.n	80191d6 <quorem+0xa6>
 80191e4:	f8c0 8010 	str.w	r8, [r0, #16]
 80191e8:	4604      	mov	r4, r0
 80191ea:	f001 fca1 	bl	801ab30 <__mcmp>
 80191ee:	2800      	cmp	r0, #0
 80191f0:	db2e      	blt.n	8019250 <quorem+0x120>
 80191f2:	f109 0901 	add.w	r9, r9, #1
 80191f6:	465d      	mov	r5, fp
 80191f8:	2300      	movs	r3, #0
 80191fa:	f857 1b04 	ldr.w	r1, [r7], #4
 80191fe:	6828      	ldr	r0, [r5, #0]
 8019200:	b28a      	uxth	r2, r1
 8019202:	1a9a      	subs	r2, r3, r2
 8019204:	0c09      	lsrs	r1, r1, #16
 8019206:	fa12 f280 	uxtah	r2, r2, r0
 801920a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 801920e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8019212:	b291      	uxth	r1, r2
 8019214:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019218:	45ba      	cmp	sl, r7
 801921a:	f845 1b04 	str.w	r1, [r5], #4
 801921e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019222:	d2ea      	bcs.n	80191fa <quorem+0xca>
 8019224:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8019228:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 801922c:	b982      	cbnz	r2, 8019250 <quorem+0x120>
 801922e:	1f1a      	subs	r2, r3, #4
 8019230:	4593      	cmp	fp, r2
 8019232:	d20b      	bcs.n	801924c <quorem+0x11c>
 8019234:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8019238:	b942      	cbnz	r2, 801924c <quorem+0x11c>
 801923a:	3b08      	subs	r3, #8
 801923c:	e002      	b.n	8019244 <quorem+0x114>
 801923e:	681a      	ldr	r2, [r3, #0]
 8019240:	3b04      	subs	r3, #4
 8019242:	b91a      	cbnz	r2, 801924c <quorem+0x11c>
 8019244:	459b      	cmp	fp, r3
 8019246:	f108 38ff 	add.w	r8, r8, #4294967295
 801924a:	d3f8      	bcc.n	801923e <quorem+0x10e>
 801924c:	f8c4 8010 	str.w	r8, [r4, #16]
 8019250:	4648      	mov	r0, r9
 8019252:	b003      	add	sp, #12
 8019254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019258:	2000      	movs	r0, #0
 801925a:	4770      	bx	lr
 801925c:	0000      	movs	r0, r0
	...

08019260 <_dtoa_r>:
 8019260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019264:	b099      	sub	sp, #100	; 0x64
 8019266:	4604      	mov	r4, r0
 8019268:	9103      	str	r1, [sp, #12]
 801926a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801926c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801926e:	9304      	str	r3, [sp, #16]
 8019270:	4692      	mov	sl, r2
 8019272:	ed8d 0b00 	vstr	d0, [sp]
 8019276:	b141      	cbz	r1, 801928a <_dtoa_r+0x2a>
 8019278:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801927a:	604a      	str	r2, [r1, #4]
 801927c:	2301      	movs	r3, #1
 801927e:	4093      	lsls	r3, r2
 8019280:	608b      	str	r3, [r1, #8]
 8019282:	f001 fa71 	bl	801a768 <_Bfree>
 8019286:	2300      	movs	r3, #0
 8019288:	6423      	str	r3, [r4, #64]	; 0x40
 801928a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801928e:	2b00      	cmp	r3, #0
 8019290:	4699      	mov	r9, r3
 8019292:	db36      	blt.n	8019302 <_dtoa_r+0xa2>
 8019294:	2300      	movs	r3, #0
 8019296:	602b      	str	r3, [r5, #0]
 8019298:	4ba5      	ldr	r3, [pc, #660]	; (8019530 <_dtoa_r+0x2d0>)
 801929a:	461a      	mov	r2, r3
 801929c:	ea09 0303 	and.w	r3, r9, r3
 80192a0:	4293      	cmp	r3, r2
 80192a2:	d017      	beq.n	80192d4 <_dtoa_r+0x74>
 80192a4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80192a8:	2200      	movs	r2, #0
 80192aa:	2300      	movs	r3, #0
 80192ac:	4630      	mov	r0, r6
 80192ae:	4639      	mov	r1, r7
 80192b0:	f7f5 f9e4 	bl	800e67c <__aeabi_dcmpeq>
 80192b4:	4680      	mov	r8, r0
 80192b6:	2800      	cmp	r0, #0
 80192b8:	d02b      	beq.n	8019312 <_dtoa_r+0xb2>
 80192ba:	9a04      	ldr	r2, [sp, #16]
 80192bc:	2301      	movs	r3, #1
 80192be:	6013      	str	r3, [r2, #0]
 80192c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	f000 80cc 	beq.w	8019460 <_dtoa_r+0x200>
 80192c8:	489a      	ldr	r0, [pc, #616]	; (8019534 <_dtoa_r+0x2d4>)
 80192ca:	6018      	str	r0, [r3, #0]
 80192cc:	3801      	subs	r0, #1
 80192ce:	b019      	add	sp, #100	; 0x64
 80192d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192d4:	9a04      	ldr	r2, [sp, #16]
 80192d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80192da:	6013      	str	r3, [r2, #0]
 80192dc:	9b00      	ldr	r3, [sp, #0]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	f000 80a7 	beq.w	8019432 <_dtoa_r+0x1d2>
 80192e4:	4894      	ldr	r0, [pc, #592]	; (8019538 <_dtoa_r+0x2d8>)
 80192e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d0f0      	beq.n	80192ce <_dtoa_r+0x6e>
 80192ec:	78c3      	ldrb	r3, [r0, #3]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	f000 80b8 	beq.w	8019464 <_dtoa_r+0x204>
 80192f4:	f100 0308 	add.w	r3, r0, #8
 80192f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80192fa:	6013      	str	r3, [r2, #0]
 80192fc:	b019      	add	sp, #100	; 0x64
 80192fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019302:	9a01      	ldr	r2, [sp, #4]
 8019304:	2301      	movs	r3, #1
 8019306:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 801930a:	602b      	str	r3, [r5, #0]
 801930c:	f8cd 9004 	str.w	r9, [sp, #4]
 8019310:	e7c2      	b.n	8019298 <_dtoa_r+0x38>
 8019312:	4620      	mov	r0, r4
 8019314:	ec47 6b10 	vmov	d0, r6, r7
 8019318:	a917      	add	r1, sp, #92	; 0x5c
 801931a:	aa16      	add	r2, sp, #88	; 0x58
 801931c:	f001 fc96 	bl	801ac4c <__d2b>
 8019320:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8019324:	4683      	mov	fp, r0
 8019326:	f040 808d 	bne.w	8019444 <_dtoa_r+0x1e4>
 801932a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801932e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8019330:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8019334:	4445      	add	r5, r8
 8019336:	429d      	cmp	r5, r3
 8019338:	f2c0 829e 	blt.w	8019878 <_dtoa_r+0x618>
 801933c:	4a7f      	ldr	r2, [pc, #508]	; (801953c <_dtoa_r+0x2dc>)
 801933e:	1b52      	subs	r2, r2, r5
 8019340:	fa09 f902 	lsl.w	r9, r9, r2
 8019344:	9a00      	ldr	r2, [sp, #0]
 8019346:	f205 4312 	addw	r3, r5, #1042	; 0x412
 801934a:	fa22 f003 	lsr.w	r0, r2, r3
 801934e:	ea49 0000 	orr.w	r0, r9, r0
 8019352:	f7f4 feb5 	bl	800e0c0 <__aeabi_ui2d>
 8019356:	2301      	movs	r3, #1
 8019358:	3d01      	subs	r5, #1
 801935a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801935e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019360:	2200      	movs	r2, #0
 8019362:	4b77      	ldr	r3, [pc, #476]	; (8019540 <_dtoa_r+0x2e0>)
 8019364:	f7f4 fd6e 	bl	800de44 <__aeabi_dsub>
 8019368:	a36b      	add	r3, pc, #428	; (adr r3, 8019518 <_dtoa_r+0x2b8>)
 801936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801936e:	f7f4 ff1d 	bl	800e1ac <__aeabi_dmul>
 8019372:	a36b      	add	r3, pc, #428	; (adr r3, 8019520 <_dtoa_r+0x2c0>)
 8019374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019378:	f7f4 fd66 	bl	800de48 <__adddf3>
 801937c:	4606      	mov	r6, r0
 801937e:	4628      	mov	r0, r5
 8019380:	460f      	mov	r7, r1
 8019382:	f7f4 fead 	bl	800e0e0 <__aeabi_i2d>
 8019386:	a368      	add	r3, pc, #416	; (adr r3, 8019528 <_dtoa_r+0x2c8>)
 8019388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801938c:	f7f4 ff0e 	bl	800e1ac <__aeabi_dmul>
 8019390:	4602      	mov	r2, r0
 8019392:	460b      	mov	r3, r1
 8019394:	4630      	mov	r0, r6
 8019396:	4639      	mov	r1, r7
 8019398:	f7f4 fd56 	bl	800de48 <__adddf3>
 801939c:	4606      	mov	r6, r0
 801939e:	460f      	mov	r7, r1
 80193a0:	f7f5 f99e 	bl	800e6e0 <__aeabi_d2iz>
 80193a4:	4639      	mov	r1, r7
 80193a6:	9005      	str	r0, [sp, #20]
 80193a8:	2200      	movs	r2, #0
 80193aa:	4630      	mov	r0, r6
 80193ac:	2300      	movs	r3, #0
 80193ae:	f7f5 f96f 	bl	800e690 <__aeabi_dcmplt>
 80193b2:	2800      	cmp	r0, #0
 80193b4:	f040 81ab 	bne.w	801970e <_dtoa_r+0x4ae>
 80193b8:	9b05      	ldr	r3, [sp, #20]
 80193ba:	2b16      	cmp	r3, #22
 80193bc:	f200 81a4 	bhi.w	8019708 <_dtoa_r+0x4a8>
 80193c0:	9a05      	ldr	r2, [sp, #20]
 80193c2:	4b60      	ldr	r3, [pc, #384]	; (8019544 <_dtoa_r+0x2e4>)
 80193c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80193c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80193cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80193d0:	f7f5 f97c 	bl	800e6cc <__aeabi_dcmpgt>
 80193d4:	2800      	cmp	r0, #0
 80193d6:	f000 8255 	beq.w	8019884 <_dtoa_r+0x624>
 80193da:	9b05      	ldr	r3, [sp, #20]
 80193dc:	3b01      	subs	r3, #1
 80193de:	9305      	str	r3, [sp, #20]
 80193e0:	2300      	movs	r3, #0
 80193e2:	930d      	str	r3, [sp, #52]	; 0x34
 80193e4:	ebc5 0508 	rsb	r5, r5, r8
 80193e8:	1e6b      	subs	r3, r5, #1
 80193ea:	9306      	str	r3, [sp, #24]
 80193ec:	f100 81a6 	bmi.w	801973c <_dtoa_r+0x4dc>
 80193f0:	2300      	movs	r3, #0
 80193f2:	9307      	str	r3, [sp, #28]
 80193f4:	9b05      	ldr	r3, [sp, #20]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	f2c0 8197 	blt.w	801972a <_dtoa_r+0x4ca>
 80193fc:	9a06      	ldr	r2, [sp, #24]
 80193fe:	930c      	str	r3, [sp, #48]	; 0x30
 8019400:	4611      	mov	r1, r2
 8019402:	4419      	add	r1, r3
 8019404:	2300      	movs	r3, #0
 8019406:	9106      	str	r1, [sp, #24]
 8019408:	930a      	str	r3, [sp, #40]	; 0x28
 801940a:	9b03      	ldr	r3, [sp, #12]
 801940c:	2b09      	cmp	r3, #9
 801940e:	d82b      	bhi.n	8019468 <_dtoa_r+0x208>
 8019410:	2b05      	cmp	r3, #5
 8019412:	f340 8673 	ble.w	801a0fc <_dtoa_r+0xe9c>
 8019416:	3b04      	subs	r3, #4
 8019418:	9303      	str	r3, [sp, #12]
 801941a:	2700      	movs	r7, #0
 801941c:	9b03      	ldr	r3, [sp, #12]
 801941e:	3b02      	subs	r3, #2
 8019420:	2b03      	cmp	r3, #3
 8019422:	f200 8651 	bhi.w	801a0c8 <_dtoa_r+0xe68>
 8019426:	e8df f013 	tbh	[pc, r3, lsl #1]
 801942a:	03d1      	.short	0x03d1
 801942c:	02b603c4 	.word	0x02b603c4
 8019430:	0666      	.short	0x0666
 8019432:	4b41      	ldr	r3, [pc, #260]	; (8019538 <_dtoa_r+0x2d8>)
 8019434:	4a44      	ldr	r2, [pc, #272]	; (8019548 <_dtoa_r+0x2e8>)
 8019436:	f3c9 0013 	ubfx	r0, r9, #0, #20
 801943a:	2800      	cmp	r0, #0
 801943c:	bf14      	ite	ne
 801943e:	4618      	movne	r0, r3
 8019440:	4610      	moveq	r0, r2
 8019442:	e750      	b.n	80192e6 <_dtoa_r+0x86>
 8019444:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019448:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801944c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8019450:	4630      	mov	r0, r6
 8019452:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019456:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801945a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801945e:	e77f      	b.n	8019360 <_dtoa_r+0x100>
 8019460:	483a      	ldr	r0, [pc, #232]	; (801954c <_dtoa_r+0x2ec>)
 8019462:	e734      	b.n	80192ce <_dtoa_r+0x6e>
 8019464:	1cc3      	adds	r3, r0, #3
 8019466:	e747      	b.n	80192f8 <_dtoa_r+0x98>
 8019468:	2100      	movs	r1, #0
 801946a:	6461      	str	r1, [r4, #68]	; 0x44
 801946c:	4620      	mov	r0, r4
 801946e:	468a      	mov	sl, r1
 8019470:	9103      	str	r1, [sp, #12]
 8019472:	f001 f953 	bl	801a71c <_Balloc>
 8019476:	f04f 33ff 	mov.w	r3, #4294967295
 801947a:	9308      	str	r3, [sp, #32]
 801947c:	930e      	str	r3, [sp, #56]	; 0x38
 801947e:	2301      	movs	r3, #1
 8019480:	9009      	str	r0, [sp, #36]	; 0x24
 8019482:	6420      	str	r0, [r4, #64]	; 0x40
 8019484:	930b      	str	r3, [sp, #44]	; 0x2c
 8019486:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019488:	2b00      	cmp	r3, #0
 801948a:	f2c0 80d3 	blt.w	8019634 <_dtoa_r+0x3d4>
 801948e:	9a05      	ldr	r2, [sp, #20]
 8019490:	2a0e      	cmp	r2, #14
 8019492:	f300 80cf 	bgt.w	8019634 <_dtoa_r+0x3d4>
 8019496:	4b2b      	ldr	r3, [pc, #172]	; (8019544 <_dtoa_r+0x2e4>)
 8019498:	f1ba 0f00 	cmp.w	sl, #0
 801949c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80194a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80194a4:	f2c0 8395 	blt.w	8019bd2 <_dtoa_r+0x972>
 80194a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80194ac:	4642      	mov	r2, r8
 80194ae:	464b      	mov	r3, r9
 80194b0:	4630      	mov	r0, r6
 80194b2:	4639      	mov	r1, r7
 80194b4:	f7f4 ffa4 	bl	800e400 <__aeabi_ddiv>
 80194b8:	f7f5 f912 	bl	800e6e0 <__aeabi_d2iz>
 80194bc:	4682      	mov	sl, r0
 80194be:	f7f4 fe0f 	bl	800e0e0 <__aeabi_i2d>
 80194c2:	4642      	mov	r2, r8
 80194c4:	464b      	mov	r3, r9
 80194c6:	f7f4 fe71 	bl	800e1ac <__aeabi_dmul>
 80194ca:	460b      	mov	r3, r1
 80194cc:	4602      	mov	r2, r0
 80194ce:	4639      	mov	r1, r7
 80194d0:	4630      	mov	r0, r6
 80194d2:	f7f4 fcb7 	bl	800de44 <__aeabi_dsub>
 80194d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80194d8:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 80194dc:	702b      	strb	r3, [r5, #0]
 80194de:	9b08      	ldr	r3, [sp, #32]
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	4606      	mov	r6, r0
 80194e4:	460f      	mov	r7, r1
 80194e6:	f105 0501 	add.w	r5, r5, #1
 80194ea:	d063      	beq.n	80195b4 <_dtoa_r+0x354>
 80194ec:	2200      	movs	r2, #0
 80194ee:	4b18      	ldr	r3, [pc, #96]	; (8019550 <_dtoa_r+0x2f0>)
 80194f0:	f7f4 fe5c 	bl	800e1ac <__aeabi_dmul>
 80194f4:	2200      	movs	r2, #0
 80194f6:	2300      	movs	r3, #0
 80194f8:	4606      	mov	r6, r0
 80194fa:	460f      	mov	r7, r1
 80194fc:	f7f5 f8be 	bl	800e67c <__aeabi_dcmpeq>
 8019500:	2800      	cmp	r0, #0
 8019502:	f040 8084 	bne.w	801960e <_dtoa_r+0x3ae>
 8019506:	f8cd b000 	str.w	fp, [sp]
 801950a:	9403      	str	r4, [sp, #12]
 801950c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8019510:	9c08      	ldr	r4, [sp, #32]
 8019512:	e02a      	b.n	801956a <_dtoa_r+0x30a>
 8019514:	f3af 8000 	nop.w
 8019518:	636f4361 	.word	0x636f4361
 801951c:	3fd287a7 	.word	0x3fd287a7
 8019520:	8b60c8b3 	.word	0x8b60c8b3
 8019524:	3fc68a28 	.word	0x3fc68a28
 8019528:	509f79fb 	.word	0x509f79fb
 801952c:	3fd34413 	.word	0x3fd34413
 8019530:	7ff00000 	.word	0x7ff00000
 8019534:	0801e3cd 	.word	0x0801e3cd
 8019538:	0801e3dc 	.word	0x0801e3dc
 801953c:	fffffc0e 	.word	0xfffffc0e
 8019540:	3ff80000 	.word	0x3ff80000
 8019544:	0801e3e8 	.word	0x0801e3e8
 8019548:	0801e3d0 	.word	0x0801e3d0
 801954c:	0801e3cc 	.word	0x0801e3cc
 8019550:	40240000 	.word	0x40240000
 8019554:	f7f4 fe2a 	bl	800e1ac <__aeabi_dmul>
 8019558:	2200      	movs	r2, #0
 801955a:	2300      	movs	r3, #0
 801955c:	4606      	mov	r6, r0
 801955e:	460f      	mov	r7, r1
 8019560:	f7f5 f88c 	bl	800e67c <__aeabi_dcmpeq>
 8019564:	2800      	cmp	r0, #0
 8019566:	f040 83e4 	bne.w	8019d32 <_dtoa_r+0xad2>
 801956a:	4642      	mov	r2, r8
 801956c:	464b      	mov	r3, r9
 801956e:	4630      	mov	r0, r6
 8019570:	4639      	mov	r1, r7
 8019572:	f7f4 ff45 	bl	800e400 <__aeabi_ddiv>
 8019576:	f7f5 f8b3 	bl	800e6e0 <__aeabi_d2iz>
 801957a:	4682      	mov	sl, r0
 801957c:	f7f4 fdb0 	bl	800e0e0 <__aeabi_i2d>
 8019580:	4642      	mov	r2, r8
 8019582:	464b      	mov	r3, r9
 8019584:	f7f4 fe12 	bl	800e1ac <__aeabi_dmul>
 8019588:	4602      	mov	r2, r0
 801958a:	460b      	mov	r3, r1
 801958c:	4630      	mov	r0, r6
 801958e:	4639      	mov	r1, r7
 8019590:	f7f4 fc58 	bl	800de44 <__aeabi_dsub>
 8019594:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8019598:	f805 eb01 	strb.w	lr, [r5], #1
 801959c:	ebcb 0e05 	rsb	lr, fp, r5
 80195a0:	4574      	cmp	r4, lr
 80195a2:	4606      	mov	r6, r0
 80195a4:	460f      	mov	r7, r1
 80195a6:	f04f 0200 	mov.w	r2, #0
 80195aa:	4bb7      	ldr	r3, [pc, #732]	; (8019888 <_dtoa_r+0x628>)
 80195ac:	d1d2      	bne.n	8019554 <_dtoa_r+0x2f4>
 80195ae:	f8dd b000 	ldr.w	fp, [sp]
 80195b2:	9c03      	ldr	r4, [sp, #12]
 80195b4:	4632      	mov	r2, r6
 80195b6:	463b      	mov	r3, r7
 80195b8:	4630      	mov	r0, r6
 80195ba:	4639      	mov	r1, r7
 80195bc:	f7f4 fc44 	bl	800de48 <__adddf3>
 80195c0:	4606      	mov	r6, r0
 80195c2:	460f      	mov	r7, r1
 80195c4:	4640      	mov	r0, r8
 80195c6:	4649      	mov	r1, r9
 80195c8:	4632      	mov	r2, r6
 80195ca:	463b      	mov	r3, r7
 80195cc:	f7f5 f860 	bl	800e690 <__aeabi_dcmplt>
 80195d0:	b948      	cbnz	r0, 80195e6 <_dtoa_r+0x386>
 80195d2:	4640      	mov	r0, r8
 80195d4:	4649      	mov	r1, r9
 80195d6:	4632      	mov	r2, r6
 80195d8:	463b      	mov	r3, r7
 80195da:	f7f5 f84f 	bl	800e67c <__aeabi_dcmpeq>
 80195de:	b1b0      	cbz	r0, 801960e <_dtoa_r+0x3ae>
 80195e0:	f01a 0f01 	tst.w	sl, #1
 80195e4:	d013      	beq.n	801960e <_dtoa_r+0x3ae>
 80195e6:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80195ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80195ec:	1e6b      	subs	r3, r5, #1
 80195ee:	e004      	b.n	80195fa <_dtoa_r+0x39a>
 80195f0:	428b      	cmp	r3, r1
 80195f2:	f000 8448 	beq.w	8019e86 <_dtoa_r+0xc26>
 80195f6:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80195fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80195fe:	f103 0501 	add.w	r5, r3, #1
 8019602:	461a      	mov	r2, r3
 8019604:	d0f4      	beq.n	80195f0 <_dtoa_r+0x390>
 8019606:	f108 0301 	add.w	r3, r8, #1
 801960a:	b2db      	uxtb	r3, r3
 801960c:	7013      	strb	r3, [r2, #0]
 801960e:	4620      	mov	r0, r4
 8019610:	4659      	mov	r1, fp
 8019612:	f001 f8a9 	bl	801a768 <_Bfree>
 8019616:	2200      	movs	r2, #0
 8019618:	9b05      	ldr	r3, [sp, #20]
 801961a:	702a      	strb	r2, [r5, #0]
 801961c:	9a04      	ldr	r2, [sp, #16]
 801961e:	3301      	adds	r3, #1
 8019620:	6013      	str	r3, [r2, #0]
 8019622:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019624:	2b00      	cmp	r3, #0
 8019626:	f000 834b 	beq.w	8019cc0 <_dtoa_r+0xa60>
 801962a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801962c:	601d      	str	r5, [r3, #0]
 801962e:	b019      	add	sp, #100	; 0x64
 8019630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019636:	2a00      	cmp	r2, #0
 8019638:	f000 8085 	beq.w	8019746 <_dtoa_r+0x4e6>
 801963c:	9a03      	ldr	r2, [sp, #12]
 801963e:	2a01      	cmp	r2, #1
 8019640:	f340 830a 	ble.w	8019c58 <_dtoa_r+0x9f8>
 8019644:	9b08      	ldr	r3, [sp, #32]
 8019646:	1e5f      	subs	r7, r3, #1
 8019648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801964a:	42bb      	cmp	r3, r7
 801964c:	f2c0 83a6 	blt.w	8019d9c <_dtoa_r+0xb3c>
 8019650:	1bdf      	subs	r7, r3, r7
 8019652:	9b08      	ldr	r3, [sp, #32]
 8019654:	2b00      	cmp	r3, #0
 8019656:	f2c0 84a4 	blt.w	8019fa2 <_dtoa_r+0xd42>
 801965a:	9d07      	ldr	r5, [sp, #28]
 801965c:	9b08      	ldr	r3, [sp, #32]
 801965e:	9a07      	ldr	r2, [sp, #28]
 8019660:	441a      	add	r2, r3
 8019662:	9207      	str	r2, [sp, #28]
 8019664:	9a06      	ldr	r2, [sp, #24]
 8019666:	4620      	mov	r0, r4
 8019668:	441a      	add	r2, r3
 801966a:	2101      	movs	r1, #1
 801966c:	9206      	str	r2, [sp, #24]
 801966e:	f001 f915 	bl	801a89c <__i2b>
 8019672:	4606      	mov	r6, r0
 8019674:	b165      	cbz	r5, 8019690 <_dtoa_r+0x430>
 8019676:	9906      	ldr	r1, [sp, #24]
 8019678:	2900      	cmp	r1, #0
 801967a:	460b      	mov	r3, r1
 801967c:	dd08      	ble.n	8019690 <_dtoa_r+0x430>
 801967e:	42a9      	cmp	r1, r5
 8019680:	9a07      	ldr	r2, [sp, #28]
 8019682:	bfa8      	it	ge
 8019684:	462b      	movge	r3, r5
 8019686:	1ad2      	subs	r2, r2, r3
 8019688:	1aed      	subs	r5, r5, r3
 801968a:	1acb      	subs	r3, r1, r3
 801968c:	9207      	str	r2, [sp, #28]
 801968e:	9306      	str	r3, [sp, #24]
 8019690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019692:	2b00      	cmp	r3, #0
 8019694:	dd1a      	ble.n	80196cc <_dtoa_r+0x46c>
 8019696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019698:	2b00      	cmp	r3, #0
 801969a:	f000 8378 	beq.w	8019d8e <_dtoa_r+0xb2e>
 801969e:	2f00      	cmp	r7, #0
 80196a0:	dd10      	ble.n	80196c4 <_dtoa_r+0x464>
 80196a2:	4631      	mov	r1, r6
 80196a4:	463a      	mov	r2, r7
 80196a6:	4620      	mov	r0, r4
 80196a8:	f001 f99c 	bl	801a9e4 <__pow5mult>
 80196ac:	4606      	mov	r6, r0
 80196ae:	465a      	mov	r2, fp
 80196b0:	4631      	mov	r1, r6
 80196b2:	4620      	mov	r0, r4
 80196b4:	f001 f8fc 	bl	801a8b0 <__multiply>
 80196b8:	4659      	mov	r1, fp
 80196ba:	4680      	mov	r8, r0
 80196bc:	4620      	mov	r0, r4
 80196be:	f001 f853 	bl	801a768 <_Bfree>
 80196c2:	46c3      	mov	fp, r8
 80196c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196c6:	1bda      	subs	r2, r3, r7
 80196c8:	f040 82a5 	bne.w	8019c16 <_dtoa_r+0x9b6>
 80196cc:	4620      	mov	r0, r4
 80196ce:	2101      	movs	r1, #1
 80196d0:	f001 f8e4 	bl	801a89c <__i2b>
 80196d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	4680      	mov	r8, r0
 80196da:	dd38      	ble.n	801974e <_dtoa_r+0x4ee>
 80196dc:	4601      	mov	r1, r0
 80196de:	461a      	mov	r2, r3
 80196e0:	4620      	mov	r0, r4
 80196e2:	f001 f97f 	bl	801a9e4 <__pow5mult>
 80196e6:	9b03      	ldr	r3, [sp, #12]
 80196e8:	2b01      	cmp	r3, #1
 80196ea:	4680      	mov	r8, r0
 80196ec:	f340 8299 	ble.w	8019c22 <_dtoa_r+0x9c2>
 80196f0:	f04f 0900 	mov.w	r9, #0
 80196f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80196f8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80196fc:	6918      	ldr	r0, [r3, #16]
 80196fe:	f001 f87f 	bl	801a800 <__hi0bits>
 8019702:	f1c0 0020 	rsb	r0, r0, #32
 8019706:	e02c      	b.n	8019762 <_dtoa_r+0x502>
 8019708:	2301      	movs	r3, #1
 801970a:	930d      	str	r3, [sp, #52]	; 0x34
 801970c:	e66a      	b.n	80193e4 <_dtoa_r+0x184>
 801970e:	9805      	ldr	r0, [sp, #20]
 8019710:	f7f4 fce6 	bl	800e0e0 <__aeabi_i2d>
 8019714:	4632      	mov	r2, r6
 8019716:	463b      	mov	r3, r7
 8019718:	f7f4 ffb0 	bl	800e67c <__aeabi_dcmpeq>
 801971c:	2800      	cmp	r0, #0
 801971e:	f47f ae4b 	bne.w	80193b8 <_dtoa_r+0x158>
 8019722:	9b05      	ldr	r3, [sp, #20]
 8019724:	3b01      	subs	r3, #1
 8019726:	9305      	str	r3, [sp, #20]
 8019728:	e646      	b.n	80193b8 <_dtoa_r+0x158>
 801972a:	9a07      	ldr	r2, [sp, #28]
 801972c:	9b05      	ldr	r3, [sp, #20]
 801972e:	1ad2      	subs	r2, r2, r3
 8019730:	425b      	negs	r3, r3
 8019732:	930a      	str	r3, [sp, #40]	; 0x28
 8019734:	2300      	movs	r3, #0
 8019736:	9207      	str	r2, [sp, #28]
 8019738:	930c      	str	r3, [sp, #48]	; 0x30
 801973a:	e666      	b.n	801940a <_dtoa_r+0x1aa>
 801973c:	425b      	negs	r3, r3
 801973e:	9307      	str	r3, [sp, #28]
 8019740:	2300      	movs	r3, #0
 8019742:	9306      	str	r3, [sp, #24]
 8019744:	e656      	b.n	80193f4 <_dtoa_r+0x194>
 8019746:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019748:	9d07      	ldr	r5, [sp, #28]
 801974a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801974c:	e792      	b.n	8019674 <_dtoa_r+0x414>
 801974e:	9b03      	ldr	r3, [sp, #12]
 8019750:	2b01      	cmp	r3, #1
 8019752:	f340 82b8 	ble.w	8019cc6 <_dtoa_r+0xa66>
 8019756:	f04f 0900 	mov.w	r9, #0
 801975a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801975c:	2b00      	cmp	r3, #0
 801975e:	d1c9      	bne.n	80196f4 <_dtoa_r+0x494>
 8019760:	2001      	movs	r0, #1
 8019762:	9b06      	ldr	r3, [sp, #24]
 8019764:	4418      	add	r0, r3
 8019766:	f010 001f 	ands.w	r0, r0, #31
 801976a:	f000 8083 	beq.w	8019874 <_dtoa_r+0x614>
 801976e:	f1c0 0320 	rsb	r3, r0, #32
 8019772:	2b04      	cmp	r3, #4
 8019774:	f340 84b9 	ble.w	801a0ea <_dtoa_r+0xe8a>
 8019778:	f1c0 001c 	rsb	r0, r0, #28
 801977c:	9b07      	ldr	r3, [sp, #28]
 801977e:	4403      	add	r3, r0
 8019780:	9307      	str	r3, [sp, #28]
 8019782:	9b06      	ldr	r3, [sp, #24]
 8019784:	4403      	add	r3, r0
 8019786:	4405      	add	r5, r0
 8019788:	9306      	str	r3, [sp, #24]
 801978a:	9b07      	ldr	r3, [sp, #28]
 801978c:	2b00      	cmp	r3, #0
 801978e:	dd05      	ble.n	801979c <_dtoa_r+0x53c>
 8019790:	4659      	mov	r1, fp
 8019792:	461a      	mov	r2, r3
 8019794:	4620      	mov	r0, r4
 8019796:	f001 f975 	bl	801aa84 <__lshift>
 801979a:	4683      	mov	fp, r0
 801979c:	9b06      	ldr	r3, [sp, #24]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	dd05      	ble.n	80197ae <_dtoa_r+0x54e>
 80197a2:	4641      	mov	r1, r8
 80197a4:	461a      	mov	r2, r3
 80197a6:	4620      	mov	r0, r4
 80197a8:	f001 f96c 	bl	801aa84 <__lshift>
 80197ac:	4680      	mov	r8, r0
 80197ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	f040 826a 	bne.w	8019c8a <_dtoa_r+0xa2a>
 80197b6:	9b08      	ldr	r3, [sp, #32]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	f340 8297 	ble.w	8019cec <_dtoa_r+0xa8c>
 80197be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d171      	bne.n	80198a8 <_dtoa_r+0x648>
 80197c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80197c8:	9f08      	ldr	r7, [sp, #32]
 80197ca:	464d      	mov	r5, r9
 80197cc:	e002      	b.n	80197d4 <_dtoa_r+0x574>
 80197ce:	f000 ffd5 	bl	801a77c <__multadd>
 80197d2:	4683      	mov	fp, r0
 80197d4:	4641      	mov	r1, r8
 80197d6:	4658      	mov	r0, fp
 80197d8:	f7ff fcaa 	bl	8019130 <quorem>
 80197dc:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80197e0:	f805 cb01 	strb.w	ip, [r5], #1
 80197e4:	ebc9 0305 	rsb	r3, r9, r5
 80197e8:	42bb      	cmp	r3, r7
 80197ea:	4620      	mov	r0, r4
 80197ec:	4659      	mov	r1, fp
 80197ee:	f04f 020a 	mov.w	r2, #10
 80197f2:	f04f 0300 	mov.w	r3, #0
 80197f6:	dbea      	blt.n	80197ce <_dtoa_r+0x56e>
 80197f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197fa:	9a08      	ldr	r2, [sp, #32]
 80197fc:	2a01      	cmp	r2, #1
 80197fe:	bfac      	ite	ge
 8019800:	189b      	addge	r3, r3, r2
 8019802:	3301      	addlt	r3, #1
 8019804:	461d      	mov	r5, r3
 8019806:	f04f 0a00 	mov.w	sl, #0
 801980a:	4659      	mov	r1, fp
 801980c:	2201      	movs	r2, #1
 801980e:	4620      	mov	r0, r4
 8019810:	f8cd c000 	str.w	ip, [sp]
 8019814:	f001 f936 	bl	801aa84 <__lshift>
 8019818:	4641      	mov	r1, r8
 801981a:	4683      	mov	fp, r0
 801981c:	f001 f988 	bl	801ab30 <__mcmp>
 8019820:	2800      	cmp	r0, #0
 8019822:	f8dd c000 	ldr.w	ip, [sp]
 8019826:	f340 82ef 	ble.w	8019e08 <_dtoa_r+0xba8>
 801982a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801982e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019830:	1e6b      	subs	r3, r5, #1
 8019832:	e004      	b.n	801983e <_dtoa_r+0x5de>
 8019834:	428b      	cmp	r3, r1
 8019836:	f000 8275 	beq.w	8019d24 <_dtoa_r+0xac4>
 801983a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801983e:	2a39      	cmp	r2, #57	; 0x39
 8019840:	f103 0501 	add.w	r5, r3, #1
 8019844:	d0f6      	beq.n	8019834 <_dtoa_r+0x5d4>
 8019846:	3201      	adds	r2, #1
 8019848:	701a      	strb	r2, [r3, #0]
 801984a:	4641      	mov	r1, r8
 801984c:	4620      	mov	r0, r4
 801984e:	f000 ff8b 	bl	801a768 <_Bfree>
 8019852:	2e00      	cmp	r6, #0
 8019854:	f43f aedb 	beq.w	801960e <_dtoa_r+0x3ae>
 8019858:	f1ba 0f00 	cmp.w	sl, #0
 801985c:	d005      	beq.n	801986a <_dtoa_r+0x60a>
 801985e:	45b2      	cmp	sl, r6
 8019860:	d003      	beq.n	801986a <_dtoa_r+0x60a>
 8019862:	4651      	mov	r1, sl
 8019864:	4620      	mov	r0, r4
 8019866:	f000 ff7f 	bl	801a768 <_Bfree>
 801986a:	4631      	mov	r1, r6
 801986c:	4620      	mov	r0, r4
 801986e:	f000 ff7b 	bl	801a768 <_Bfree>
 8019872:	e6cc      	b.n	801960e <_dtoa_r+0x3ae>
 8019874:	201c      	movs	r0, #28
 8019876:	e781      	b.n	801977c <_dtoa_r+0x51c>
 8019878:	4b04      	ldr	r3, [pc, #16]	; (801988c <_dtoa_r+0x62c>)
 801987a:	9a00      	ldr	r2, [sp, #0]
 801987c:	1b5b      	subs	r3, r3, r5
 801987e:	fa02 f003 	lsl.w	r0, r2, r3
 8019882:	e566      	b.n	8019352 <_dtoa_r+0xf2>
 8019884:	900d      	str	r0, [sp, #52]	; 0x34
 8019886:	e5ad      	b.n	80193e4 <_dtoa_r+0x184>
 8019888:	40240000 	.word	0x40240000
 801988c:	fffffbee 	.word	0xfffffbee
 8019890:	4631      	mov	r1, r6
 8019892:	2300      	movs	r3, #0
 8019894:	4620      	mov	r0, r4
 8019896:	220a      	movs	r2, #10
 8019898:	f000 ff70 	bl	801a77c <__multadd>
 801989c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801989e:	2b00      	cmp	r3, #0
 80198a0:	4606      	mov	r6, r0
 80198a2:	f340 840b 	ble.w	801a0bc <_dtoa_r+0xe5c>
 80198a6:	9308      	str	r3, [sp, #32]
 80198a8:	2d00      	cmp	r5, #0
 80198aa:	dd05      	ble.n	80198b8 <_dtoa_r+0x658>
 80198ac:	4631      	mov	r1, r6
 80198ae:	462a      	mov	r2, r5
 80198b0:	4620      	mov	r0, r4
 80198b2:	f001 f8e7 	bl	801aa84 <__lshift>
 80198b6:	4606      	mov	r6, r0
 80198b8:	f1b9 0f00 	cmp.w	r9, #0
 80198bc:	f040 82ed 	bne.w	8019e9a <_dtoa_r+0xc3a>
 80198c0:	46b1      	mov	r9, r6
 80198c2:	9b08      	ldr	r3, [sp, #32]
 80198c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80198c6:	3b01      	subs	r3, #1
 80198c8:	18d3      	adds	r3, r2, r3
 80198ca:	9308      	str	r3, [sp, #32]
 80198cc:	9b00      	ldr	r3, [sp, #0]
 80198ce:	f003 0301 	and.w	r3, r3, #1
 80198d2:	930a      	str	r3, [sp, #40]	; 0x28
 80198d4:	4617      	mov	r7, r2
 80198d6:	4641      	mov	r1, r8
 80198d8:	4658      	mov	r0, fp
 80198da:	f7ff fc29 	bl	8019130 <quorem>
 80198de:	4631      	mov	r1, r6
 80198e0:	4605      	mov	r5, r0
 80198e2:	4658      	mov	r0, fp
 80198e4:	f001 f924 	bl	801ab30 <__mcmp>
 80198e8:	464a      	mov	r2, r9
 80198ea:	4682      	mov	sl, r0
 80198ec:	4641      	mov	r1, r8
 80198ee:	4620      	mov	r0, r4
 80198f0:	f001 f942 	bl	801ab78 <__mdiff>
 80198f4:	68c2      	ldr	r2, [r0, #12]
 80198f6:	4603      	mov	r3, r0
 80198f8:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80198fc:	2a00      	cmp	r2, #0
 80198fe:	f040 81ba 	bne.w	8019c76 <_dtoa_r+0xa16>
 8019902:	4619      	mov	r1, r3
 8019904:	4658      	mov	r0, fp
 8019906:	f8cd c01c 	str.w	ip, [sp, #28]
 801990a:	9306      	str	r3, [sp, #24]
 801990c:	f001 f910 	bl	801ab30 <__mcmp>
 8019910:	9b06      	ldr	r3, [sp, #24]
 8019912:	9000      	str	r0, [sp, #0]
 8019914:	4619      	mov	r1, r3
 8019916:	4620      	mov	r0, r4
 8019918:	f000 ff26 	bl	801a768 <_Bfree>
 801991c:	9a00      	ldr	r2, [sp, #0]
 801991e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8019922:	b92a      	cbnz	r2, 8019930 <_dtoa_r+0x6d0>
 8019924:	9b03      	ldr	r3, [sp, #12]
 8019926:	b91b      	cbnz	r3, 8019930 <_dtoa_r+0x6d0>
 8019928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801992a:	2b00      	cmp	r3, #0
 801992c:	f000 83aa 	beq.w	801a084 <_dtoa_r+0xe24>
 8019930:	f1ba 0f00 	cmp.w	sl, #0
 8019934:	f2c0 824a 	blt.w	8019dcc <_dtoa_r+0xb6c>
 8019938:	d105      	bne.n	8019946 <_dtoa_r+0x6e6>
 801993a:	9b03      	ldr	r3, [sp, #12]
 801993c:	b91b      	cbnz	r3, 8019946 <_dtoa_r+0x6e6>
 801993e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019940:	2b00      	cmp	r3, #0
 8019942:	f000 8243 	beq.w	8019dcc <_dtoa_r+0xb6c>
 8019946:	2a00      	cmp	r2, #0
 8019948:	f300 82bb 	bgt.w	8019ec2 <_dtoa_r+0xc62>
 801994c:	9b08      	ldr	r3, [sp, #32]
 801994e:	f887 c000 	strb.w	ip, [r7]
 8019952:	f107 0a01 	add.w	sl, r7, #1
 8019956:	429f      	cmp	r7, r3
 8019958:	4655      	mov	r5, sl
 801995a:	f000 82be 	beq.w	8019eda <_dtoa_r+0xc7a>
 801995e:	4659      	mov	r1, fp
 8019960:	220a      	movs	r2, #10
 8019962:	2300      	movs	r3, #0
 8019964:	4620      	mov	r0, r4
 8019966:	f000 ff09 	bl	801a77c <__multadd>
 801996a:	454e      	cmp	r6, r9
 801996c:	4683      	mov	fp, r0
 801996e:	4631      	mov	r1, r6
 8019970:	4620      	mov	r0, r4
 8019972:	f04f 020a 	mov.w	r2, #10
 8019976:	f04f 0300 	mov.w	r3, #0
 801997a:	f000 8176 	beq.w	8019c6a <_dtoa_r+0xa0a>
 801997e:	f000 fefd 	bl	801a77c <__multadd>
 8019982:	4649      	mov	r1, r9
 8019984:	4606      	mov	r6, r0
 8019986:	220a      	movs	r2, #10
 8019988:	4620      	mov	r0, r4
 801998a:	2300      	movs	r3, #0
 801998c:	f000 fef6 	bl	801a77c <__multadd>
 8019990:	4657      	mov	r7, sl
 8019992:	4681      	mov	r9, r0
 8019994:	e79f      	b.n	80198d6 <_dtoa_r+0x676>
 8019996:	2301      	movs	r3, #1
 8019998:	930b      	str	r3, [sp, #44]	; 0x2c
 801999a:	f1ba 0f00 	cmp.w	sl, #0
 801999e:	f340 820c 	ble.w	8019dba <_dtoa_r+0xb5a>
 80199a2:	4656      	mov	r6, sl
 80199a4:	4655      	mov	r5, sl
 80199a6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80199aa:	f8cd a020 	str.w	sl, [sp, #32]
 80199ae:	2100      	movs	r1, #0
 80199b0:	2e17      	cmp	r6, #23
 80199b2:	6461      	str	r1, [r4, #68]	; 0x44
 80199b4:	d90a      	bls.n	80199cc <_dtoa_r+0x76c>
 80199b6:	2201      	movs	r2, #1
 80199b8:	2304      	movs	r3, #4
 80199ba:	005b      	lsls	r3, r3, #1
 80199bc:	f103 0014 	add.w	r0, r3, #20
 80199c0:	4286      	cmp	r6, r0
 80199c2:	4611      	mov	r1, r2
 80199c4:	f102 0201 	add.w	r2, r2, #1
 80199c8:	d2f7      	bcs.n	80199ba <_dtoa_r+0x75a>
 80199ca:	6461      	str	r1, [r4, #68]	; 0x44
 80199cc:	4620      	mov	r0, r4
 80199ce:	f000 fea5 	bl	801a71c <_Balloc>
 80199d2:	2d0e      	cmp	r5, #14
 80199d4:	9009      	str	r0, [sp, #36]	; 0x24
 80199d6:	6420      	str	r0, [r4, #64]	; 0x40
 80199d8:	f63f ad55 	bhi.w	8019486 <_dtoa_r+0x226>
 80199dc:	2f00      	cmp	r7, #0
 80199de:	f43f ad52 	beq.w	8019486 <_dtoa_r+0x226>
 80199e2:	ed9d 7b00 	vldr	d7, [sp]
 80199e6:	9905      	ldr	r1, [sp, #20]
 80199e8:	2900      	cmp	r1, #0
 80199ea:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80199ee:	f340 8223 	ble.w	8019e38 <_dtoa_r+0xbd8>
 80199f2:	4bb7      	ldr	r3, [pc, #732]	; (8019cd0 <_dtoa_r+0xa70>)
 80199f4:	f001 020f 	and.w	r2, r1, #15
 80199f8:	110d      	asrs	r5, r1, #4
 80199fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80199fe:	06e9      	lsls	r1, r5, #27
 8019a00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8019a04:	f140 81d2 	bpl.w	8019dac <_dtoa_r+0xb4c>
 8019a08:	4bb2      	ldr	r3, [pc, #712]	; (8019cd4 <_dtoa_r+0xa74>)
 8019a0a:	ec51 0b17 	vmov	r0, r1, d7
 8019a0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019a12:	f7f4 fcf5 	bl	800e400 <__aeabi_ddiv>
 8019a16:	e9cd 0100 	strd	r0, r1, [sp]
 8019a1a:	f005 050f 	and.w	r5, r5, #15
 8019a1e:	f04f 0803 	mov.w	r8, #3
 8019a22:	b18d      	cbz	r5, 8019a48 <_dtoa_r+0x7e8>
 8019a24:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8019cd4 <_dtoa_r+0xa74>
 8019a28:	4630      	mov	r0, r6
 8019a2a:	4639      	mov	r1, r7
 8019a2c:	07ea      	lsls	r2, r5, #31
 8019a2e:	d505      	bpl.n	8019a3c <_dtoa_r+0x7dc>
 8019a30:	e9d9 2300 	ldrd	r2, r3, [r9]
 8019a34:	f7f4 fbba 	bl	800e1ac <__aeabi_dmul>
 8019a38:	f108 0801 	add.w	r8, r8, #1
 8019a3c:	106d      	asrs	r5, r5, #1
 8019a3e:	f109 0908 	add.w	r9, r9, #8
 8019a42:	d1f3      	bne.n	8019a2c <_dtoa_r+0x7cc>
 8019a44:	4606      	mov	r6, r0
 8019a46:	460f      	mov	r7, r1
 8019a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019a4c:	4632      	mov	r2, r6
 8019a4e:	463b      	mov	r3, r7
 8019a50:	f7f4 fcd6 	bl	800e400 <__aeabi_ddiv>
 8019a54:	e9cd 0100 	strd	r0, r1, [sp]
 8019a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a5a:	b143      	cbz	r3, 8019a6e <_dtoa_r+0x80e>
 8019a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019a60:	2200      	movs	r2, #0
 8019a62:	4b9d      	ldr	r3, [pc, #628]	; (8019cd8 <_dtoa_r+0xa78>)
 8019a64:	f7f4 fe14 	bl	800e690 <__aeabi_dcmplt>
 8019a68:	2800      	cmp	r0, #0
 8019a6a:	f040 82ae 	bne.w	8019fca <_dtoa_r+0xd6a>
 8019a6e:	4640      	mov	r0, r8
 8019a70:	f7f4 fb36 	bl	800e0e0 <__aeabi_i2d>
 8019a74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019a78:	f7f4 fb98 	bl	800e1ac <__aeabi_dmul>
 8019a7c:	4b97      	ldr	r3, [pc, #604]	; (8019cdc <_dtoa_r+0xa7c>)
 8019a7e:	2200      	movs	r2, #0
 8019a80:	f7f4 f9e2 	bl	800de48 <__adddf3>
 8019a84:	9b08      	ldr	r3, [sp, #32]
 8019a86:	4606      	mov	r6, r0
 8019a88:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	f000 8162 	beq.w	8019d56 <_dtoa_r+0xaf6>
 8019a92:	9b05      	ldr	r3, [sp, #20]
 8019a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019a98:	9314      	str	r3, [sp, #80]	; 0x50
 8019a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	f000 8223 	beq.w	8019ee8 <_dtoa_r+0xc88>
 8019aa2:	4b8b      	ldr	r3, [pc, #556]	; (8019cd0 <_dtoa_r+0xa70>)
 8019aa4:	498e      	ldr	r1, [pc, #568]	; (8019ce0 <_dtoa_r+0xa80>)
 8019aa6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8019aaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019aae:	2000      	movs	r0, #0
 8019ab0:	f7f4 fca6 	bl	800e400 <__aeabi_ddiv>
 8019ab4:	4632      	mov	r2, r6
 8019ab6:	463b      	mov	r3, r7
 8019ab8:	f7f4 f9c4 	bl	800de44 <__aeabi_dsub>
 8019abc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019ac0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8019ac4:	4639      	mov	r1, r7
 8019ac6:	4630      	mov	r0, r6
 8019ac8:	f7f4 fe0a 	bl	800e6e0 <__aeabi_d2iz>
 8019acc:	4605      	mov	r5, r0
 8019ace:	f7f4 fb07 	bl	800e0e0 <__aeabi_i2d>
 8019ad2:	3530      	adds	r5, #48	; 0x30
 8019ad4:	4602      	mov	r2, r0
 8019ad6:	460b      	mov	r3, r1
 8019ad8:	4630      	mov	r0, r6
 8019ada:	4639      	mov	r1, r7
 8019adc:	f7f4 f9b2 	bl	800de44 <__aeabi_dsub>
 8019ae0:	fa5f f885 	uxtb.w	r8, r5
 8019ae4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019ae6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8019aea:	f885 8000 	strb.w	r8, [r5]
 8019aee:	4606      	mov	r6, r0
 8019af0:	460f      	mov	r7, r1
 8019af2:	3501      	adds	r5, #1
 8019af4:	f7f4 fdcc 	bl	800e690 <__aeabi_dcmplt>
 8019af8:	2800      	cmp	r0, #0
 8019afa:	f040 82a7 	bne.w	801a04c <_dtoa_r+0xdec>
 8019afe:	4632      	mov	r2, r6
 8019b00:	463b      	mov	r3, r7
 8019b02:	2000      	movs	r0, #0
 8019b04:	4974      	ldr	r1, [pc, #464]	; (8019cd8 <_dtoa_r+0xa78>)
 8019b06:	f7f4 f99d 	bl	800de44 <__aeabi_dsub>
 8019b0a:	4602      	mov	r2, r0
 8019b0c:	460b      	mov	r3, r1
 8019b0e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8019b12:	f7f4 fddb 	bl	800e6cc <__aeabi_dcmpgt>
 8019b16:	2800      	cmp	r0, #0
 8019b18:	f040 82ad 	bne.w	801a076 <_dtoa_r+0xe16>
 8019b1c:	f1b9 0f01 	cmp.w	r9, #1
 8019b20:	f340 8184 	ble.w	8019e2c <_dtoa_r+0xbcc>
 8019b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b26:	f8cd b000 	str.w	fp, [sp]
 8019b2a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8019b2e:	4499      	add	r9, r3
 8019b30:	46a0      	mov	r8, r4
 8019b32:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8019b36:	e00d      	b.n	8019b54 <_dtoa_r+0x8f4>
 8019b38:	2000      	movs	r0, #0
 8019b3a:	4967      	ldr	r1, [pc, #412]	; (8019cd8 <_dtoa_r+0xa78>)
 8019b3c:	f7f4 f982 	bl	800de44 <__aeabi_dsub>
 8019b40:	4652      	mov	r2, sl
 8019b42:	465b      	mov	r3, fp
 8019b44:	f7f4 fda4 	bl	800e690 <__aeabi_dcmplt>
 8019b48:	2800      	cmp	r0, #0
 8019b4a:	f040 828f 	bne.w	801a06c <_dtoa_r+0xe0c>
 8019b4e:	454d      	cmp	r5, r9
 8019b50:	f000 8167 	beq.w	8019e22 <_dtoa_r+0xbc2>
 8019b54:	4650      	mov	r0, sl
 8019b56:	4659      	mov	r1, fp
 8019b58:	2200      	movs	r2, #0
 8019b5a:	4b62      	ldr	r3, [pc, #392]	; (8019ce4 <_dtoa_r+0xa84>)
 8019b5c:	f7f4 fb26 	bl	800e1ac <__aeabi_dmul>
 8019b60:	2200      	movs	r2, #0
 8019b62:	4b60      	ldr	r3, [pc, #384]	; (8019ce4 <_dtoa_r+0xa84>)
 8019b64:	4682      	mov	sl, r0
 8019b66:	468b      	mov	fp, r1
 8019b68:	4630      	mov	r0, r6
 8019b6a:	4639      	mov	r1, r7
 8019b6c:	f7f4 fb1e 	bl	800e1ac <__aeabi_dmul>
 8019b70:	460f      	mov	r7, r1
 8019b72:	4606      	mov	r6, r0
 8019b74:	f7f4 fdb4 	bl	800e6e0 <__aeabi_d2iz>
 8019b78:	4604      	mov	r4, r0
 8019b7a:	f7f4 fab1 	bl	800e0e0 <__aeabi_i2d>
 8019b7e:	4602      	mov	r2, r0
 8019b80:	460b      	mov	r3, r1
 8019b82:	4630      	mov	r0, r6
 8019b84:	4639      	mov	r1, r7
 8019b86:	f7f4 f95d 	bl	800de44 <__aeabi_dsub>
 8019b8a:	3430      	adds	r4, #48	; 0x30
 8019b8c:	b2e4      	uxtb	r4, r4
 8019b8e:	4652      	mov	r2, sl
 8019b90:	465b      	mov	r3, fp
 8019b92:	f805 4b01 	strb.w	r4, [r5], #1
 8019b96:	4606      	mov	r6, r0
 8019b98:	460f      	mov	r7, r1
 8019b9a:	f7f4 fd79 	bl	800e690 <__aeabi_dcmplt>
 8019b9e:	4632      	mov	r2, r6
 8019ba0:	463b      	mov	r3, r7
 8019ba2:	2800      	cmp	r0, #0
 8019ba4:	d0c8      	beq.n	8019b38 <_dtoa_r+0x8d8>
 8019ba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ba8:	f8dd b000 	ldr.w	fp, [sp]
 8019bac:	9305      	str	r3, [sp, #20]
 8019bae:	4644      	mov	r4, r8
 8019bb0:	e52d      	b.n	801960e <_dtoa_r+0x3ae>
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8019bb6:	9b05      	ldr	r3, [sp, #20]
 8019bb8:	4453      	add	r3, sl
 8019bba:	930e      	str	r3, [sp, #56]	; 0x38
 8019bbc:	3301      	adds	r3, #1
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	9308      	str	r3, [sp, #32]
 8019bc2:	f340 8101 	ble.w	8019dc8 <_dtoa_r+0xb68>
 8019bc6:	9d08      	ldr	r5, [sp, #32]
 8019bc8:	462e      	mov	r6, r5
 8019bca:	e6f0      	b.n	80199ae <_dtoa_r+0x74e>
 8019bcc:	2300      	movs	r3, #0
 8019bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8019bd0:	e6e3      	b.n	801999a <_dtoa_r+0x73a>
 8019bd2:	9b08      	ldr	r3, [sp, #32]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	f73f ac67 	bgt.w	80194a8 <_dtoa_r+0x248>
 8019bda:	f040 80d4 	bne.w	8019d86 <_dtoa_r+0xb26>
 8019bde:	4640      	mov	r0, r8
 8019be0:	2200      	movs	r2, #0
 8019be2:	4b41      	ldr	r3, [pc, #260]	; (8019ce8 <_dtoa_r+0xa88>)
 8019be4:	4649      	mov	r1, r9
 8019be6:	f7f4 fae1 	bl	800e1ac <__aeabi_dmul>
 8019bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019bee:	f7f4 fd63 	bl	800e6b8 <__aeabi_dcmpge>
 8019bf2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019bf6:	4646      	mov	r6, r8
 8019bf8:	2800      	cmp	r0, #0
 8019bfa:	f000 808b 	beq.w	8019d14 <_dtoa_r+0xab4>
 8019bfe:	ea6f 030a 	mvn.w	r3, sl
 8019c02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019c04:	9305      	str	r3, [sp, #20]
 8019c06:	4641      	mov	r1, r8
 8019c08:	4620      	mov	r0, r4
 8019c0a:	f000 fdad 	bl	801a768 <_Bfree>
 8019c0e:	2e00      	cmp	r6, #0
 8019c10:	f47f ae2b 	bne.w	801986a <_dtoa_r+0x60a>
 8019c14:	e4fb      	b.n	801960e <_dtoa_r+0x3ae>
 8019c16:	4659      	mov	r1, fp
 8019c18:	4620      	mov	r0, r4
 8019c1a:	f000 fee3 	bl	801a9e4 <__pow5mult>
 8019c1e:	4683      	mov	fp, r0
 8019c20:	e554      	b.n	80196cc <_dtoa_r+0x46c>
 8019c22:	9b00      	ldr	r3, [sp, #0]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	f47f ad63 	bne.w	80196f0 <_dtoa_r+0x490>
 8019c2a:	9b01      	ldr	r3, [sp, #4]
 8019c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	f47f ad90 	bne.w	8019756 <_dtoa_r+0x4f6>
 8019c36:	9b01      	ldr	r3, [sp, #4]
 8019c38:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8019c3c:	0d3f      	lsrs	r7, r7, #20
 8019c3e:	053f      	lsls	r7, r7, #20
 8019c40:	2f00      	cmp	r7, #0
 8019c42:	f000 821c 	beq.w	801a07e <_dtoa_r+0xe1e>
 8019c46:	9b07      	ldr	r3, [sp, #28]
 8019c48:	3301      	adds	r3, #1
 8019c4a:	9307      	str	r3, [sp, #28]
 8019c4c:	9b06      	ldr	r3, [sp, #24]
 8019c4e:	3301      	adds	r3, #1
 8019c50:	9306      	str	r3, [sp, #24]
 8019c52:	f04f 0901 	mov.w	r9, #1
 8019c56:	e580      	b.n	801975a <_dtoa_r+0x4fa>
 8019c58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019c5a:	2a00      	cmp	r2, #0
 8019c5c:	f000 81a7 	beq.w	8019fae <_dtoa_r+0xd4e>
 8019c60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019c64:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019c66:	9d07      	ldr	r5, [sp, #28]
 8019c68:	e4f9      	b.n	801965e <_dtoa_r+0x3fe>
 8019c6a:	f000 fd87 	bl	801a77c <__multadd>
 8019c6e:	4657      	mov	r7, sl
 8019c70:	4606      	mov	r6, r0
 8019c72:	4681      	mov	r9, r0
 8019c74:	e62f      	b.n	80198d6 <_dtoa_r+0x676>
 8019c76:	4601      	mov	r1, r0
 8019c78:	4620      	mov	r0, r4
 8019c7a:	f8cd c000 	str.w	ip, [sp]
 8019c7e:	f000 fd73 	bl	801a768 <_Bfree>
 8019c82:	2201      	movs	r2, #1
 8019c84:	f8dd c000 	ldr.w	ip, [sp]
 8019c88:	e652      	b.n	8019930 <_dtoa_r+0x6d0>
 8019c8a:	4658      	mov	r0, fp
 8019c8c:	4641      	mov	r1, r8
 8019c8e:	f000 ff4f 	bl	801ab30 <__mcmp>
 8019c92:	2800      	cmp	r0, #0
 8019c94:	f6bf ad8f 	bge.w	80197b6 <_dtoa_r+0x556>
 8019c98:	9f05      	ldr	r7, [sp, #20]
 8019c9a:	4659      	mov	r1, fp
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	220a      	movs	r2, #10
 8019ca2:	3f01      	subs	r7, #1
 8019ca4:	9705      	str	r7, [sp, #20]
 8019ca6:	f000 fd69 	bl	801a77c <__multadd>
 8019caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cac:	4683      	mov	fp, r0
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	f47f adee 	bne.w	8019890 <_dtoa_r+0x630>
 8019cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	f340 81f5 	ble.w	801a0a6 <_dtoa_r+0xe46>
 8019cbc:	9308      	str	r3, [sp, #32]
 8019cbe:	e581      	b.n	80197c4 <_dtoa_r+0x564>
 8019cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cc2:	f7ff bb04 	b.w	80192ce <_dtoa_r+0x6e>
 8019cc6:	9b00      	ldr	r3, [sp, #0]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	f47f ad44 	bne.w	8019756 <_dtoa_r+0x4f6>
 8019cce:	e7ac      	b.n	8019c2a <_dtoa_r+0x9ca>
 8019cd0:	0801e3e8 	.word	0x0801e3e8
 8019cd4:	0801e4c0 	.word	0x0801e4c0
 8019cd8:	3ff00000 	.word	0x3ff00000
 8019cdc:	401c0000 	.word	0x401c0000
 8019ce0:	3fe00000 	.word	0x3fe00000
 8019ce4:	40240000 	.word	0x40240000
 8019ce8:	40140000 	.word	0x40140000
 8019cec:	9b03      	ldr	r3, [sp, #12]
 8019cee:	2b02      	cmp	r3, #2
 8019cf0:	f77f ad65 	ble.w	80197be <_dtoa_r+0x55e>
 8019cf4:	9b08      	ldr	r3, [sp, #32]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d181      	bne.n	8019bfe <_dtoa_r+0x99e>
 8019cfa:	4641      	mov	r1, r8
 8019cfc:	2205      	movs	r2, #5
 8019cfe:	4620      	mov	r0, r4
 8019d00:	f000 fd3c 	bl	801a77c <__multadd>
 8019d04:	4680      	mov	r8, r0
 8019d06:	4641      	mov	r1, r8
 8019d08:	4658      	mov	r0, fp
 8019d0a:	f000 ff11 	bl	801ab30 <__mcmp>
 8019d0e:	2800      	cmp	r0, #0
 8019d10:	f77f af75 	ble.w	8019bfe <_dtoa_r+0x99e>
 8019d14:	9a05      	ldr	r2, [sp, #20]
 8019d16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d18:	2331      	movs	r3, #49	; 0x31
 8019d1a:	3201      	adds	r2, #1
 8019d1c:	9205      	str	r2, [sp, #20]
 8019d1e:	700b      	strb	r3, [r1, #0]
 8019d20:	1c4d      	adds	r5, r1, #1
 8019d22:	e770      	b.n	8019c06 <_dtoa_r+0x9a6>
 8019d24:	9a05      	ldr	r2, [sp, #20]
 8019d26:	3201      	adds	r2, #1
 8019d28:	9205      	str	r2, [sp, #20]
 8019d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d2c:	2331      	movs	r3, #49	; 0x31
 8019d2e:	7013      	strb	r3, [r2, #0]
 8019d30:	e58b      	b.n	801984a <_dtoa_r+0x5ea>
 8019d32:	f8dd b000 	ldr.w	fp, [sp]
 8019d36:	9c03      	ldr	r4, [sp, #12]
 8019d38:	e469      	b.n	801960e <_dtoa_r+0x3ae>
 8019d3a:	4640      	mov	r0, r8
 8019d3c:	f7f4 f9d0 	bl	800e0e0 <__aeabi_i2d>
 8019d40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d44:	f7f4 fa32 	bl	800e1ac <__aeabi_dmul>
 8019d48:	2200      	movs	r2, #0
 8019d4a:	4bc2      	ldr	r3, [pc, #776]	; (801a054 <_dtoa_r+0xdf4>)
 8019d4c:	f7f4 f87c 	bl	800de48 <__adddf3>
 8019d50:	4606      	mov	r6, r0
 8019d52:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8019d56:	2200      	movs	r2, #0
 8019d58:	4bbf      	ldr	r3, [pc, #764]	; (801a058 <_dtoa_r+0xdf8>)
 8019d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019d5e:	f7f4 f871 	bl	800de44 <__aeabi_dsub>
 8019d62:	4632      	mov	r2, r6
 8019d64:	463b      	mov	r3, r7
 8019d66:	4680      	mov	r8, r0
 8019d68:	4689      	mov	r9, r1
 8019d6a:	f7f4 fcaf 	bl	800e6cc <__aeabi_dcmpgt>
 8019d6e:	2800      	cmp	r0, #0
 8019d70:	f040 80b6 	bne.w	8019ee0 <_dtoa_r+0xc80>
 8019d74:	4632      	mov	r2, r6
 8019d76:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019d7a:	4640      	mov	r0, r8
 8019d7c:	4649      	mov	r1, r9
 8019d7e:	f7f4 fc87 	bl	800e690 <__aeabi_dcmplt>
 8019d82:	2800      	cmp	r0, #0
 8019d84:	d052      	beq.n	8019e2c <_dtoa_r+0xbcc>
 8019d86:	f04f 0800 	mov.w	r8, #0
 8019d8a:	4646      	mov	r6, r8
 8019d8c:	e737      	b.n	8019bfe <_dtoa_r+0x99e>
 8019d8e:	4659      	mov	r1, fp
 8019d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d92:	4620      	mov	r0, r4
 8019d94:	f000 fe26 	bl	801a9e4 <__pow5mult>
 8019d98:	4683      	mov	fp, r0
 8019d9a:	e497      	b.n	80196cc <_dtoa_r+0x46c>
 8019d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019da0:	970a      	str	r7, [sp, #40]	; 0x28
 8019da2:	1afb      	subs	r3, r7, r3
 8019da4:	441a      	add	r2, r3
 8019da6:	920c      	str	r2, [sp, #48]	; 0x30
 8019da8:	2700      	movs	r7, #0
 8019daa:	e452      	b.n	8019652 <_dtoa_r+0x3f2>
 8019dac:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8019db0:	f04f 0802 	mov.w	r8, #2
 8019db4:	ed8d 7b00 	vstr	d7, [sp]
 8019db8:	e633      	b.n	8019a22 <_dtoa_r+0x7c2>
 8019dba:	2501      	movs	r5, #1
 8019dbc:	950e      	str	r5, [sp, #56]	; 0x38
 8019dbe:	9508      	str	r5, [sp, #32]
 8019dc0:	46aa      	mov	sl, r5
 8019dc2:	2100      	movs	r1, #0
 8019dc4:	6461      	str	r1, [r4, #68]	; 0x44
 8019dc6:	e601      	b.n	80199cc <_dtoa_r+0x76c>
 8019dc8:	461d      	mov	r5, r3
 8019dca:	e7fa      	b.n	8019dc2 <_dtoa_r+0xb62>
 8019dcc:	2a00      	cmp	r2, #0
 8019dce:	dd15      	ble.n	8019dfc <_dtoa_r+0xb9c>
 8019dd0:	4659      	mov	r1, fp
 8019dd2:	2201      	movs	r2, #1
 8019dd4:	4620      	mov	r0, r4
 8019dd6:	f8cd c000 	str.w	ip, [sp]
 8019dda:	f000 fe53 	bl	801aa84 <__lshift>
 8019dde:	4641      	mov	r1, r8
 8019de0:	4683      	mov	fp, r0
 8019de2:	f000 fea5 	bl	801ab30 <__mcmp>
 8019de6:	2800      	cmp	r0, #0
 8019de8:	f8dd c000 	ldr.w	ip, [sp]
 8019dec:	f340 8154 	ble.w	801a098 <_dtoa_r+0xe38>
 8019df0:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8019df4:	f000 8111 	beq.w	801a01a <_dtoa_r+0xdba>
 8019df8:	f10c 0c01 	add.w	ip, ip, #1
 8019dfc:	46b2      	mov	sl, r6
 8019dfe:	f887 c000 	strb.w	ip, [r7]
 8019e02:	1c7d      	adds	r5, r7, #1
 8019e04:	464e      	mov	r6, r9
 8019e06:	e520      	b.n	801984a <_dtoa_r+0x5ea>
 8019e08:	d104      	bne.n	8019e14 <_dtoa_r+0xbb4>
 8019e0a:	f01c 0f01 	tst.w	ip, #1
 8019e0e:	d001      	beq.n	8019e14 <_dtoa_r+0xbb4>
 8019e10:	e50b      	b.n	801982a <_dtoa_r+0x5ca>
 8019e12:	4615      	mov	r5, r2
 8019e14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019e18:	2b30      	cmp	r3, #48	; 0x30
 8019e1a:	f105 32ff 	add.w	r2, r5, #4294967295
 8019e1e:	d0f8      	beq.n	8019e12 <_dtoa_r+0xbb2>
 8019e20:	e513      	b.n	801984a <_dtoa_r+0x5ea>
 8019e22:	f8dd b000 	ldr.w	fp, [sp]
 8019e26:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8019e2a:	4644      	mov	r4, r8
 8019e2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019e30:	e9cd 2300 	strd	r2, r3, [sp]
 8019e34:	f7ff bb27 	b.w	8019486 <_dtoa_r+0x226>
 8019e38:	9b05      	ldr	r3, [sp, #20]
 8019e3a:	425d      	negs	r5, r3
 8019e3c:	2d00      	cmp	r5, #0
 8019e3e:	f000 80bd 	beq.w	8019fbc <_dtoa_r+0xd5c>
 8019e42:	4b86      	ldr	r3, [pc, #536]	; (801a05c <_dtoa_r+0xdfc>)
 8019e44:	f005 020f 	and.w	r2, r5, #15
 8019e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019e54:	f7f4 f9aa 	bl	800e1ac <__aeabi_dmul>
 8019e58:	112d      	asrs	r5, r5, #4
 8019e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8019e5e:	f000 8127 	beq.w	801a0b0 <_dtoa_r+0xe50>
 8019e62:	4e7f      	ldr	r6, [pc, #508]	; (801a060 <_dtoa_r+0xe00>)
 8019e64:	f04f 0802 	mov.w	r8, #2
 8019e68:	07eb      	lsls	r3, r5, #31
 8019e6a:	d505      	bpl.n	8019e78 <_dtoa_r+0xc18>
 8019e6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019e70:	f7f4 f99c 	bl	800e1ac <__aeabi_dmul>
 8019e74:	f108 0801 	add.w	r8, r8, #1
 8019e78:	106d      	asrs	r5, r5, #1
 8019e7a:	f106 0608 	add.w	r6, r6, #8
 8019e7e:	d1f3      	bne.n	8019e68 <_dtoa_r+0xc08>
 8019e80:	e9cd 0100 	strd	r0, r1, [sp]
 8019e84:	e5e8      	b.n	8019a58 <_dtoa_r+0x7f8>
 8019e86:	9a05      	ldr	r2, [sp, #20]
 8019e88:	3201      	adds	r2, #1
 8019e8a:	9205      	str	r2, [sp, #20]
 8019e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e8e:	2330      	movs	r3, #48	; 0x30
 8019e90:	7013      	strb	r3, [r2, #0]
 8019e92:	2331      	movs	r3, #49	; 0x31
 8019e94:	7013      	strb	r3, [r2, #0]
 8019e96:	f7ff bbba 	b.w	801960e <_dtoa_r+0x3ae>
 8019e9a:	6871      	ldr	r1, [r6, #4]
 8019e9c:	4620      	mov	r0, r4
 8019e9e:	f000 fc3d 	bl	801a71c <_Balloc>
 8019ea2:	6933      	ldr	r3, [r6, #16]
 8019ea4:	1c9a      	adds	r2, r3, #2
 8019ea6:	4605      	mov	r5, r0
 8019ea8:	0092      	lsls	r2, r2, #2
 8019eaa:	f106 010c 	add.w	r1, r6, #12
 8019eae:	300c      	adds	r0, #12
 8019eb0:	f7f3 fdbc 	bl	800da2c <memcpy>
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	4629      	mov	r1, r5
 8019eb8:	2201      	movs	r2, #1
 8019eba:	f000 fde3 	bl	801aa84 <__lshift>
 8019ebe:	4681      	mov	r9, r0
 8019ec0:	e4ff      	b.n	80198c2 <_dtoa_r+0x662>
 8019ec2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8019ec6:	f000 80a8 	beq.w	801a01a <_dtoa_r+0xdba>
 8019eca:	f10c 0c01 	add.w	ip, ip, #1
 8019ece:	46b2      	mov	sl, r6
 8019ed0:	f887 c000 	strb.w	ip, [r7]
 8019ed4:	1c7d      	adds	r5, r7, #1
 8019ed6:	464e      	mov	r6, r9
 8019ed8:	e4b7      	b.n	801984a <_dtoa_r+0x5ea>
 8019eda:	46b2      	mov	sl, r6
 8019edc:	464e      	mov	r6, r9
 8019ede:	e494      	b.n	801980a <_dtoa_r+0x5aa>
 8019ee0:	f04f 0800 	mov.w	r8, #0
 8019ee4:	4646      	mov	r6, r8
 8019ee6:	e715      	b.n	8019d14 <_dtoa_r+0xab4>
 8019ee8:	495c      	ldr	r1, [pc, #368]	; (801a05c <_dtoa_r+0xdfc>)
 8019eea:	f109 33ff 	add.w	r3, r9, #4294967295
 8019eee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019ef2:	4632      	mov	r2, r6
 8019ef4:	9315      	str	r3, [sp, #84]	; 0x54
 8019ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019efa:	463b      	mov	r3, r7
 8019efc:	f7f4 f956 	bl	800e1ac <__aeabi_dmul>
 8019f00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019f04:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8019f08:	4639      	mov	r1, r7
 8019f0a:	4630      	mov	r0, r6
 8019f0c:	f7f4 fbe8 	bl	800e6e0 <__aeabi_d2iz>
 8019f10:	4605      	mov	r5, r0
 8019f12:	f7f4 f8e5 	bl	800e0e0 <__aeabi_i2d>
 8019f16:	4602      	mov	r2, r0
 8019f18:	460b      	mov	r3, r1
 8019f1a:	4630      	mov	r0, r6
 8019f1c:	4639      	mov	r1, r7
 8019f1e:	f7f3 ff91 	bl	800de44 <__aeabi_dsub>
 8019f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f24:	3530      	adds	r5, #48	; 0x30
 8019f26:	f1b9 0f01 	cmp.w	r9, #1
 8019f2a:	7015      	strb	r5, [r2, #0]
 8019f2c:	4606      	mov	r6, r0
 8019f2e:	460f      	mov	r7, r1
 8019f30:	f102 0501 	add.w	r5, r2, #1
 8019f34:	d023      	beq.n	8019f7e <_dtoa_r+0xd1e>
 8019f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f38:	f8cd b000 	str.w	fp, [sp]
 8019f3c:	444b      	add	r3, r9
 8019f3e:	4698      	mov	r8, r3
 8019f40:	46a9      	mov	r9, r5
 8019f42:	46ab      	mov	fp, r5
 8019f44:	2200      	movs	r2, #0
 8019f46:	4b47      	ldr	r3, [pc, #284]	; (801a064 <_dtoa_r+0xe04>)
 8019f48:	f7f4 f930 	bl	800e1ac <__aeabi_dmul>
 8019f4c:	460f      	mov	r7, r1
 8019f4e:	4606      	mov	r6, r0
 8019f50:	f7f4 fbc6 	bl	800e6e0 <__aeabi_d2iz>
 8019f54:	4605      	mov	r5, r0
 8019f56:	f7f4 f8c3 	bl	800e0e0 <__aeabi_i2d>
 8019f5a:	3530      	adds	r5, #48	; 0x30
 8019f5c:	4602      	mov	r2, r0
 8019f5e:	460b      	mov	r3, r1
 8019f60:	4630      	mov	r0, r6
 8019f62:	4639      	mov	r1, r7
 8019f64:	f7f3 ff6e 	bl	800de44 <__aeabi_dsub>
 8019f68:	f809 5b01 	strb.w	r5, [r9], #1
 8019f6c:	45c1      	cmp	r9, r8
 8019f6e:	d1e9      	bne.n	8019f44 <_dtoa_r+0xce4>
 8019f70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f72:	465d      	mov	r5, fp
 8019f74:	f8dd b000 	ldr.w	fp, [sp]
 8019f78:	4606      	mov	r6, r0
 8019f7a:	460f      	mov	r7, r1
 8019f7c:	441d      	add	r5, r3
 8019f7e:	2200      	movs	r2, #0
 8019f80:	4b39      	ldr	r3, [pc, #228]	; (801a068 <_dtoa_r+0xe08>)
 8019f82:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8019f86:	f7f3 ff5f 	bl	800de48 <__adddf3>
 8019f8a:	4632      	mov	r2, r6
 8019f8c:	463b      	mov	r3, r7
 8019f8e:	f7f4 fb7f 	bl	800e690 <__aeabi_dcmplt>
 8019f92:	2800      	cmp	r0, #0
 8019f94:	d047      	beq.n	801a026 <_dtoa_r+0xdc6>
 8019f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f98:	9305      	str	r3, [sp, #20]
 8019f9a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8019f9e:	f7ff bb24 	b.w	80195ea <_dtoa_r+0x38a>
 8019fa2:	9b07      	ldr	r3, [sp, #28]
 8019fa4:	9a08      	ldr	r2, [sp, #32]
 8019fa6:	1a9d      	subs	r5, r3, r2
 8019fa8:	2300      	movs	r3, #0
 8019faa:	f7ff bb58 	b.w	801965e <_dtoa_r+0x3fe>
 8019fae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019fb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019fb2:	9d07      	ldr	r5, [sp, #28]
 8019fb4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019fb8:	f7ff bb51 	b.w	801965e <_dtoa_r+0x3fe>
 8019fbc:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8019fc0:	f04f 0802 	mov.w	r8, #2
 8019fc4:	ed8d 7b00 	vstr	d7, [sp]
 8019fc8:	e546      	b.n	8019a58 <_dtoa_r+0x7f8>
 8019fca:	9b08      	ldr	r3, [sp, #32]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	f43f aeb4 	beq.w	8019d3a <_dtoa_r+0xada>
 8019fd2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019fd4:	2d00      	cmp	r5, #0
 8019fd6:	f77f af29 	ble.w	8019e2c <_dtoa_r+0xbcc>
 8019fda:	2200      	movs	r2, #0
 8019fdc:	4b21      	ldr	r3, [pc, #132]	; (801a064 <_dtoa_r+0xe04>)
 8019fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019fe2:	f7f4 f8e3 	bl	800e1ac <__aeabi_dmul>
 8019fe6:	4606      	mov	r6, r0
 8019fe8:	460f      	mov	r7, r1
 8019fea:	f108 0001 	add.w	r0, r8, #1
 8019fee:	e9cd 6700 	strd	r6, r7, [sp]
 8019ff2:	f7f4 f875 	bl	800e0e0 <__aeabi_i2d>
 8019ff6:	4602      	mov	r2, r0
 8019ff8:	460b      	mov	r3, r1
 8019ffa:	4630      	mov	r0, r6
 8019ffc:	4639      	mov	r1, r7
 8019ffe:	f7f4 f8d5 	bl	800e1ac <__aeabi_dmul>
 801a002:	4b14      	ldr	r3, [pc, #80]	; (801a054 <_dtoa_r+0xdf4>)
 801a004:	2200      	movs	r2, #0
 801a006:	f7f3 ff1f 	bl	800de48 <__adddf3>
 801a00a:	9b05      	ldr	r3, [sp, #20]
 801a00c:	3b01      	subs	r3, #1
 801a00e:	4606      	mov	r6, r0
 801a010:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801a014:	9314      	str	r3, [sp, #80]	; 0x50
 801a016:	46a9      	mov	r9, r5
 801a018:	e53f      	b.n	8019a9a <_dtoa_r+0x83a>
 801a01a:	2239      	movs	r2, #57	; 0x39
 801a01c:	46b2      	mov	sl, r6
 801a01e:	703a      	strb	r2, [r7, #0]
 801a020:	464e      	mov	r6, r9
 801a022:	1c7d      	adds	r5, r7, #1
 801a024:	e403      	b.n	801982e <_dtoa_r+0x5ce>
 801a026:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801a02a:	2000      	movs	r0, #0
 801a02c:	490e      	ldr	r1, [pc, #56]	; (801a068 <_dtoa_r+0xe08>)
 801a02e:	f7f3 ff09 	bl	800de44 <__aeabi_dsub>
 801a032:	4632      	mov	r2, r6
 801a034:	463b      	mov	r3, r7
 801a036:	f7f4 fb49 	bl	800e6cc <__aeabi_dcmpgt>
 801a03a:	b908      	cbnz	r0, 801a040 <_dtoa_r+0xde0>
 801a03c:	e6f6      	b.n	8019e2c <_dtoa_r+0xbcc>
 801a03e:	4615      	mov	r5, r2
 801a040:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a044:	2b30      	cmp	r3, #48	; 0x30
 801a046:	f105 32ff 	add.w	r2, r5, #4294967295
 801a04a:	d0f8      	beq.n	801a03e <_dtoa_r+0xdde>
 801a04c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a04e:	9305      	str	r3, [sp, #20]
 801a050:	f7ff badd 	b.w	801960e <_dtoa_r+0x3ae>
 801a054:	401c0000 	.word	0x401c0000
 801a058:	40140000 	.word	0x40140000
 801a05c:	0801e3e8 	.word	0x0801e3e8
 801a060:	0801e4c0 	.word	0x0801e4c0
 801a064:	40240000 	.word	0x40240000
 801a068:	3fe00000 	.word	0x3fe00000
 801a06c:	4643      	mov	r3, r8
 801a06e:	f8dd b000 	ldr.w	fp, [sp]
 801a072:	46a0      	mov	r8, r4
 801a074:	461c      	mov	r4, r3
 801a076:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a078:	9305      	str	r3, [sp, #20]
 801a07a:	f7ff bab6 	b.w	80195ea <_dtoa_r+0x38a>
 801a07e:	46b9      	mov	r9, r7
 801a080:	f7ff bb6b 	b.w	801975a <_dtoa_r+0x4fa>
 801a084:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 801a088:	d0c7      	beq.n	801a01a <_dtoa_r+0xdba>
 801a08a:	f1ba 0f00 	cmp.w	sl, #0
 801a08e:	f77f aeb5 	ble.w	8019dfc <_dtoa_r+0xb9c>
 801a092:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 801a096:	e6b1      	b.n	8019dfc <_dtoa_r+0xb9c>
 801a098:	f47f aeb0 	bne.w	8019dfc <_dtoa_r+0xb9c>
 801a09c:	f01c 0f01 	tst.w	ip, #1
 801a0a0:	f43f aeac 	beq.w	8019dfc <_dtoa_r+0xb9c>
 801a0a4:	e6a4      	b.n	8019df0 <_dtoa_r+0xb90>
 801a0a6:	9b03      	ldr	r3, [sp, #12]
 801a0a8:	2b02      	cmp	r3, #2
 801a0aa:	dc04      	bgt.n	801a0b6 <_dtoa_r+0xe56>
 801a0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0ae:	e605      	b.n	8019cbc <_dtoa_r+0xa5c>
 801a0b0:	f04f 0802 	mov.w	r8, #2
 801a0b4:	e4d0      	b.n	8019a58 <_dtoa_r+0x7f8>
 801a0b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0b8:	9308      	str	r3, [sp, #32]
 801a0ba:	e61b      	b.n	8019cf4 <_dtoa_r+0xa94>
 801a0bc:	9b03      	ldr	r3, [sp, #12]
 801a0be:	2b02      	cmp	r3, #2
 801a0c0:	dcf9      	bgt.n	801a0b6 <_dtoa_r+0xe56>
 801a0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0c4:	f7ff bbef 	b.w	80198a6 <_dtoa_r+0x646>
 801a0c8:	2500      	movs	r5, #0
 801a0ca:	6465      	str	r5, [r4, #68]	; 0x44
 801a0cc:	4629      	mov	r1, r5
 801a0ce:	4620      	mov	r0, r4
 801a0d0:	f000 fb24 	bl	801a71c <_Balloc>
 801a0d4:	f04f 33ff 	mov.w	r3, #4294967295
 801a0d8:	9308      	str	r3, [sp, #32]
 801a0da:	930e      	str	r3, [sp, #56]	; 0x38
 801a0dc:	2301      	movs	r3, #1
 801a0de:	9009      	str	r0, [sp, #36]	; 0x24
 801a0e0:	46aa      	mov	sl, r5
 801a0e2:	6420      	str	r0, [r4, #64]	; 0x40
 801a0e4:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0e6:	f7ff b9ce 	b.w	8019486 <_dtoa_r+0x226>
 801a0ea:	f43f ab4e 	beq.w	801978a <_dtoa_r+0x52a>
 801a0ee:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 801a0f2:	f7ff bb43 	b.w	801977c <_dtoa_r+0x51c>
 801a0f6:	2301      	movs	r3, #1
 801a0f8:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0fa:	e55c      	b.n	8019bb6 <_dtoa_r+0x956>
 801a0fc:	2701      	movs	r7, #1
 801a0fe:	f7ff b98d 	b.w	801941c <_dtoa_r+0x1bc>
 801a102:	bf00      	nop

0801a104 <__sflush_r>:
 801a104:	898b      	ldrh	r3, [r1, #12]
 801a106:	b29a      	uxth	r2, r3
 801a108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a10c:	460d      	mov	r5, r1
 801a10e:	0711      	lsls	r1, r2, #28
 801a110:	4680      	mov	r8, r0
 801a112:	d43c      	bmi.n	801a18e <__sflush_r+0x8a>
 801a114:	686a      	ldr	r2, [r5, #4]
 801a116:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a11a:	2a00      	cmp	r2, #0
 801a11c:	81ab      	strh	r3, [r5, #12]
 801a11e:	dd65      	ble.n	801a1ec <__sflush_r+0xe8>
 801a120:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801a122:	2e00      	cmp	r6, #0
 801a124:	d04b      	beq.n	801a1be <__sflush_r+0xba>
 801a126:	b29b      	uxth	r3, r3
 801a128:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801a12c:	2100      	movs	r1, #0
 801a12e:	b292      	uxth	r2, r2
 801a130:	f8d8 4000 	ldr.w	r4, [r8]
 801a134:	f8c8 1000 	str.w	r1, [r8]
 801a138:	2a00      	cmp	r2, #0
 801a13a:	d05b      	beq.n	801a1f4 <__sflush_r+0xf0>
 801a13c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801a13e:	075f      	lsls	r7, r3, #29
 801a140:	d505      	bpl.n	801a14e <__sflush_r+0x4a>
 801a142:	6869      	ldr	r1, [r5, #4]
 801a144:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801a146:	1a52      	subs	r2, r2, r1
 801a148:	b10b      	cbz	r3, 801a14e <__sflush_r+0x4a>
 801a14a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801a14c:	1ad2      	subs	r2, r2, r3
 801a14e:	4640      	mov	r0, r8
 801a150:	69e9      	ldr	r1, [r5, #28]
 801a152:	2300      	movs	r3, #0
 801a154:	47b0      	blx	r6
 801a156:	1c46      	adds	r6, r0, #1
 801a158:	d056      	beq.n	801a208 <__sflush_r+0x104>
 801a15a:	89ab      	ldrh	r3, [r5, #12]
 801a15c:	692a      	ldr	r2, [r5, #16]
 801a15e:	602a      	str	r2, [r5, #0]
 801a160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a164:	b29b      	uxth	r3, r3
 801a166:	2200      	movs	r2, #0
 801a168:	606a      	str	r2, [r5, #4]
 801a16a:	04da      	lsls	r2, r3, #19
 801a16c:	81ab      	strh	r3, [r5, #12]
 801a16e:	d43b      	bmi.n	801a1e8 <__sflush_r+0xe4>
 801a170:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a172:	f8c8 4000 	str.w	r4, [r8]
 801a176:	b311      	cbz	r1, 801a1be <__sflush_r+0xba>
 801a178:	f105 0340 	add.w	r3, r5, #64	; 0x40
 801a17c:	4299      	cmp	r1, r3
 801a17e:	d002      	beq.n	801a186 <__sflush_r+0x82>
 801a180:	4640      	mov	r0, r8
 801a182:	f000 f955 	bl	801a430 <_free_r>
 801a186:	2000      	movs	r0, #0
 801a188:	6328      	str	r0, [r5, #48]	; 0x30
 801a18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a18e:	692e      	ldr	r6, [r5, #16]
 801a190:	b1ae      	cbz	r6, 801a1be <__sflush_r+0xba>
 801a192:	682c      	ldr	r4, [r5, #0]
 801a194:	602e      	str	r6, [r5, #0]
 801a196:	0791      	lsls	r1, r2, #30
 801a198:	bf0c      	ite	eq
 801a19a:	696b      	ldreq	r3, [r5, #20]
 801a19c:	2300      	movne	r3, #0
 801a19e:	1ba4      	subs	r4, r4, r6
 801a1a0:	60ab      	str	r3, [r5, #8]
 801a1a2:	e00a      	b.n	801a1ba <__sflush_r+0xb6>
 801a1a4:	4632      	mov	r2, r6
 801a1a6:	4623      	mov	r3, r4
 801a1a8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801a1aa:	69e9      	ldr	r1, [r5, #28]
 801a1ac:	4640      	mov	r0, r8
 801a1ae:	47b8      	blx	r7
 801a1b0:	2800      	cmp	r0, #0
 801a1b2:	eba4 0400 	sub.w	r4, r4, r0
 801a1b6:	4406      	add	r6, r0
 801a1b8:	dd04      	ble.n	801a1c4 <__sflush_r+0xc0>
 801a1ba:	2c00      	cmp	r4, #0
 801a1bc:	dcf2      	bgt.n	801a1a4 <__sflush_r+0xa0>
 801a1be:	2000      	movs	r0, #0
 801a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1c4:	89ab      	ldrh	r3, [r5, #12]
 801a1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1ca:	81ab      	strh	r3, [r5, #12]
 801a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1d4:	89ab      	ldrh	r3, [r5, #12]
 801a1d6:	692a      	ldr	r2, [r5, #16]
 801a1d8:	6069      	str	r1, [r5, #4]
 801a1da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a1de:	b29b      	uxth	r3, r3
 801a1e0:	81ab      	strh	r3, [r5, #12]
 801a1e2:	04db      	lsls	r3, r3, #19
 801a1e4:	602a      	str	r2, [r5, #0]
 801a1e6:	d5c3      	bpl.n	801a170 <__sflush_r+0x6c>
 801a1e8:	6528      	str	r0, [r5, #80]	; 0x50
 801a1ea:	e7c1      	b.n	801a170 <__sflush_r+0x6c>
 801a1ec:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801a1ee:	2a00      	cmp	r2, #0
 801a1f0:	dc96      	bgt.n	801a120 <__sflush_r+0x1c>
 801a1f2:	e7e4      	b.n	801a1be <__sflush_r+0xba>
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	4640      	mov	r0, r8
 801a1f8:	69e9      	ldr	r1, [r5, #28]
 801a1fa:	47b0      	blx	r6
 801a1fc:	1c43      	adds	r3, r0, #1
 801a1fe:	4602      	mov	r2, r0
 801a200:	d019      	beq.n	801a236 <__sflush_r+0x132>
 801a202:	89ab      	ldrh	r3, [r5, #12]
 801a204:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801a206:	e79a      	b.n	801a13e <__sflush_r+0x3a>
 801a208:	f8d8 1000 	ldr.w	r1, [r8]
 801a20c:	2900      	cmp	r1, #0
 801a20e:	d0e1      	beq.n	801a1d4 <__sflush_r+0xd0>
 801a210:	291d      	cmp	r1, #29
 801a212:	d007      	beq.n	801a224 <__sflush_r+0x120>
 801a214:	2916      	cmp	r1, #22
 801a216:	d005      	beq.n	801a224 <__sflush_r+0x120>
 801a218:	89ab      	ldrh	r3, [r5, #12]
 801a21a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a21e:	81ab      	strh	r3, [r5, #12]
 801a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a224:	89ab      	ldrh	r3, [r5, #12]
 801a226:	692a      	ldr	r2, [r5, #16]
 801a228:	602a      	str	r2, [r5, #0]
 801a22a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a22e:	2200      	movs	r2, #0
 801a230:	81ab      	strh	r3, [r5, #12]
 801a232:	606a      	str	r2, [r5, #4]
 801a234:	e79c      	b.n	801a170 <__sflush_r+0x6c>
 801a236:	f8d8 3000 	ldr.w	r3, [r8]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d0e1      	beq.n	801a202 <__sflush_r+0xfe>
 801a23e:	2b1d      	cmp	r3, #29
 801a240:	d007      	beq.n	801a252 <__sflush_r+0x14e>
 801a242:	2b16      	cmp	r3, #22
 801a244:	d005      	beq.n	801a252 <__sflush_r+0x14e>
 801a246:	89ab      	ldrh	r3, [r5, #12]
 801a248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a24c:	81ab      	strh	r3, [r5, #12]
 801a24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a252:	f8c8 4000 	str.w	r4, [r8]
 801a256:	e7b2      	b.n	801a1be <__sflush_r+0xba>

0801a258 <_fflush_r>:
 801a258:	b510      	push	{r4, lr}
 801a25a:	4604      	mov	r4, r0
 801a25c:	b082      	sub	sp, #8
 801a25e:	b108      	cbz	r0, 801a264 <_fflush_r+0xc>
 801a260:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a262:	b153      	cbz	r3, 801a27a <_fflush_r+0x22>
 801a264:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801a268:	b908      	cbnz	r0, 801a26e <_fflush_r+0x16>
 801a26a:	b002      	add	sp, #8
 801a26c:	bd10      	pop	{r4, pc}
 801a26e:	4620      	mov	r0, r4
 801a270:	b002      	add	sp, #8
 801a272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a276:	f7ff bf45 	b.w	801a104 <__sflush_r>
 801a27a:	9101      	str	r1, [sp, #4]
 801a27c:	f000 f880 	bl	801a380 <__sinit>
 801a280:	9901      	ldr	r1, [sp, #4]
 801a282:	e7ef      	b.n	801a264 <_fflush_r+0xc>

0801a284 <_cleanup_r>:
 801a284:	4901      	ldr	r1, [pc, #4]	; (801a28c <_cleanup_r+0x8>)
 801a286:	f000 b9ab 	b.w	801a5e0 <_fwalk_reent>
 801a28a:	bf00      	nop
 801a28c:	0801af4d 	.word	0x0801af4d

0801a290 <__sinit.part.1>:
 801a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a294:	4b35      	ldr	r3, [pc, #212]	; (801a36c <__sinit.part.1+0xdc>)
 801a296:	6845      	ldr	r5, [r0, #4]
 801a298:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a29a:	2400      	movs	r4, #0
 801a29c:	4607      	mov	r7, r0
 801a29e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 801a2a2:	2304      	movs	r3, #4
 801a2a4:	2103      	movs	r1, #3
 801a2a6:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 801a2aa:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 801a2ae:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 801a2b2:	b083      	sub	sp, #12
 801a2b4:	602c      	str	r4, [r5, #0]
 801a2b6:	606c      	str	r4, [r5, #4]
 801a2b8:	60ac      	str	r4, [r5, #8]
 801a2ba:	666c      	str	r4, [r5, #100]	; 0x64
 801a2bc:	81ec      	strh	r4, [r5, #14]
 801a2be:	612c      	str	r4, [r5, #16]
 801a2c0:	616c      	str	r4, [r5, #20]
 801a2c2:	61ac      	str	r4, [r5, #24]
 801a2c4:	81ab      	strh	r3, [r5, #12]
 801a2c6:	4621      	mov	r1, r4
 801a2c8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 801a2cc:	2208      	movs	r2, #8
 801a2ce:	f7fd f8ab 	bl	8017428 <memset>
 801a2d2:	68be      	ldr	r6, [r7, #8]
 801a2d4:	f8df b098 	ldr.w	fp, [pc, #152]	; 801a370 <__sinit.part.1+0xe0>
 801a2d8:	f8df a098 	ldr.w	sl, [pc, #152]	; 801a374 <__sinit.part.1+0xe4>
 801a2dc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 801a378 <__sinit.part.1+0xe8>
 801a2e0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 801a37c <__sinit.part.1+0xec>
 801a2e4:	f8c5 b020 	str.w	fp, [r5, #32]
 801a2e8:	2301      	movs	r3, #1
 801a2ea:	2209      	movs	r2, #9
 801a2ec:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 801a2f0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 801a2f4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 801a2f8:	61ed      	str	r5, [r5, #28]
 801a2fa:	4621      	mov	r1, r4
 801a2fc:	81f3      	strh	r3, [r6, #14]
 801a2fe:	81b2      	strh	r2, [r6, #12]
 801a300:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 801a304:	6034      	str	r4, [r6, #0]
 801a306:	6074      	str	r4, [r6, #4]
 801a308:	60b4      	str	r4, [r6, #8]
 801a30a:	6674      	str	r4, [r6, #100]	; 0x64
 801a30c:	6134      	str	r4, [r6, #16]
 801a30e:	6174      	str	r4, [r6, #20]
 801a310:	61b4      	str	r4, [r6, #24]
 801a312:	2208      	movs	r2, #8
 801a314:	9301      	str	r3, [sp, #4]
 801a316:	f7fd f887 	bl	8017428 <memset>
 801a31a:	68fd      	ldr	r5, [r7, #12]
 801a31c:	61f6      	str	r6, [r6, #28]
 801a31e:	2012      	movs	r0, #18
 801a320:	2202      	movs	r2, #2
 801a322:	f8c6 b020 	str.w	fp, [r6, #32]
 801a326:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 801a32a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 801a32e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 801a332:	4621      	mov	r1, r4
 801a334:	81a8      	strh	r0, [r5, #12]
 801a336:	81ea      	strh	r2, [r5, #14]
 801a338:	602c      	str	r4, [r5, #0]
 801a33a:	606c      	str	r4, [r5, #4]
 801a33c:	60ac      	str	r4, [r5, #8]
 801a33e:	666c      	str	r4, [r5, #100]	; 0x64
 801a340:	612c      	str	r4, [r5, #16]
 801a342:	616c      	str	r4, [r5, #20]
 801a344:	61ac      	str	r4, [r5, #24]
 801a346:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 801a34a:	2208      	movs	r2, #8
 801a34c:	f7fd f86c 	bl	8017428 <memset>
 801a350:	9b01      	ldr	r3, [sp, #4]
 801a352:	61ed      	str	r5, [r5, #28]
 801a354:	f8c5 b020 	str.w	fp, [r5, #32]
 801a358:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 801a35c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 801a360:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 801a364:	63bb      	str	r3, [r7, #56]	; 0x38
 801a366:	b003      	add	sp, #12
 801a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a36c:	0801a285 	.word	0x0801a285
 801a370:	0801ad65 	.word	0x0801ad65
 801a374:	0801ad89 	.word	0x0801ad89
 801a378:	0801adc1 	.word	0x0801adc1
 801a37c:	0801ade1 	.word	0x0801ade1

0801a380 <__sinit>:
 801a380:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a382:	b103      	cbz	r3, 801a386 <__sinit+0x6>
 801a384:	4770      	bx	lr
 801a386:	f7ff bf83 	b.w	801a290 <__sinit.part.1>
 801a38a:	bf00      	nop

0801a38c <__sfp_lock_acquire>:
 801a38c:	4770      	bx	lr
 801a38e:	bf00      	nop

0801a390 <__sfp_lock_release>:
 801a390:	4770      	bx	lr
 801a392:	bf00      	nop

0801a394 <_malloc_trim_r>:
 801a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a396:	4f23      	ldr	r7, [pc, #140]	; (801a424 <_malloc_trim_r+0x90>)
 801a398:	460c      	mov	r4, r1
 801a39a:	4606      	mov	r6, r0
 801a39c:	f7fd f892 	bl	80174c4 <__malloc_lock>
 801a3a0:	68bb      	ldr	r3, [r7, #8]
 801a3a2:	685d      	ldr	r5, [r3, #4]
 801a3a4:	f025 0503 	bic.w	r5, r5, #3
 801a3a8:	1b29      	subs	r1, r5, r4
 801a3aa:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 801a3ae:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 801a3b2:	f021 010f 	bic.w	r1, r1, #15
 801a3b6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 801a3ba:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 801a3be:	db07      	blt.n	801a3d0 <_malloc_trim_r+0x3c>
 801a3c0:	4630      	mov	r0, r6
 801a3c2:	2100      	movs	r1, #0
 801a3c4:	f7f4 fccc 	bl	800ed60 <_sbrk_r>
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	442b      	add	r3, r5
 801a3cc:	4298      	cmp	r0, r3
 801a3ce:	d004      	beq.n	801a3da <_malloc_trim_r+0x46>
 801a3d0:	4630      	mov	r0, r6
 801a3d2:	f7fd f879 	bl	80174c8 <__malloc_unlock>
 801a3d6:	2000      	movs	r0, #0
 801a3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3da:	4630      	mov	r0, r6
 801a3dc:	4261      	negs	r1, r4
 801a3de:	f7f4 fcbf 	bl	800ed60 <_sbrk_r>
 801a3e2:	3001      	adds	r0, #1
 801a3e4:	d00d      	beq.n	801a402 <_malloc_trim_r+0x6e>
 801a3e6:	4b10      	ldr	r3, [pc, #64]	; (801a428 <_malloc_trim_r+0x94>)
 801a3e8:	68ba      	ldr	r2, [r7, #8]
 801a3ea:	6819      	ldr	r1, [r3, #0]
 801a3ec:	1b2d      	subs	r5, r5, r4
 801a3ee:	f045 0501 	orr.w	r5, r5, #1
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	1b09      	subs	r1, r1, r4
 801a3f6:	6055      	str	r5, [r2, #4]
 801a3f8:	6019      	str	r1, [r3, #0]
 801a3fa:	f7fd f865 	bl	80174c8 <__malloc_unlock>
 801a3fe:	2001      	movs	r0, #1
 801a400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a402:	4630      	mov	r0, r6
 801a404:	2100      	movs	r1, #0
 801a406:	f7f4 fcab 	bl	800ed60 <_sbrk_r>
 801a40a:	68ba      	ldr	r2, [r7, #8]
 801a40c:	1a83      	subs	r3, r0, r2
 801a40e:	2b0f      	cmp	r3, #15
 801a410:	ddde      	ble.n	801a3d0 <_malloc_trim_r+0x3c>
 801a412:	4c06      	ldr	r4, [pc, #24]	; (801a42c <_malloc_trim_r+0x98>)
 801a414:	4904      	ldr	r1, [pc, #16]	; (801a428 <_malloc_trim_r+0x94>)
 801a416:	6824      	ldr	r4, [r4, #0]
 801a418:	f043 0301 	orr.w	r3, r3, #1
 801a41c:	1b00      	subs	r0, r0, r4
 801a41e:	6053      	str	r3, [r2, #4]
 801a420:	6008      	str	r0, [r1, #0]
 801a422:	e7d5      	b.n	801a3d0 <_malloc_trim_r+0x3c>
 801a424:	20000c34 	.word	0x20000c34
 801a428:	20003014 	.word	0x20003014
 801a42c:	20001040 	.word	0x20001040

0801a430 <_free_r>:
 801a430:	2900      	cmp	r1, #0
 801a432:	d04e      	beq.n	801a4d2 <_free_r+0xa2>
 801a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a438:	460c      	mov	r4, r1
 801a43a:	4680      	mov	r8, r0
 801a43c:	f7fd f842 	bl	80174c4 <__malloc_lock>
 801a440:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801a444:	4962      	ldr	r1, [pc, #392]	; (801a5d0 <_free_r+0x1a0>)
 801a446:	f027 0201 	bic.w	r2, r7, #1
 801a44a:	f1a4 0508 	sub.w	r5, r4, #8
 801a44e:	18ab      	adds	r3, r5, r2
 801a450:	688e      	ldr	r6, [r1, #8]
 801a452:	6858      	ldr	r0, [r3, #4]
 801a454:	429e      	cmp	r6, r3
 801a456:	f020 0003 	bic.w	r0, r0, #3
 801a45a:	d05a      	beq.n	801a512 <_free_r+0xe2>
 801a45c:	07fe      	lsls	r6, r7, #31
 801a45e:	6058      	str	r0, [r3, #4]
 801a460:	d40b      	bmi.n	801a47a <_free_r+0x4a>
 801a462:	f854 7c08 	ldr.w	r7, [r4, #-8]
 801a466:	1bed      	subs	r5, r5, r7
 801a468:	f101 0e08 	add.w	lr, r1, #8
 801a46c:	68ac      	ldr	r4, [r5, #8]
 801a46e:	4574      	cmp	r4, lr
 801a470:	443a      	add	r2, r7
 801a472:	d067      	beq.n	801a544 <_free_r+0x114>
 801a474:	68ef      	ldr	r7, [r5, #12]
 801a476:	60e7      	str	r7, [r4, #12]
 801a478:	60bc      	str	r4, [r7, #8]
 801a47a:	181c      	adds	r4, r3, r0
 801a47c:	6864      	ldr	r4, [r4, #4]
 801a47e:	07e4      	lsls	r4, r4, #31
 801a480:	d40c      	bmi.n	801a49c <_free_r+0x6c>
 801a482:	4f54      	ldr	r7, [pc, #336]	; (801a5d4 <_free_r+0x1a4>)
 801a484:	689c      	ldr	r4, [r3, #8]
 801a486:	42bc      	cmp	r4, r7
 801a488:	4402      	add	r2, r0
 801a48a:	d07c      	beq.n	801a586 <_free_r+0x156>
 801a48c:	68d8      	ldr	r0, [r3, #12]
 801a48e:	60e0      	str	r0, [r4, #12]
 801a490:	f042 0301 	orr.w	r3, r2, #1
 801a494:	6084      	str	r4, [r0, #8]
 801a496:	606b      	str	r3, [r5, #4]
 801a498:	50aa      	str	r2, [r5, r2]
 801a49a:	e003      	b.n	801a4a4 <_free_r+0x74>
 801a49c:	f042 0301 	orr.w	r3, r2, #1
 801a4a0:	606b      	str	r3, [r5, #4]
 801a4a2:	50aa      	str	r2, [r5, r2]
 801a4a4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801a4a8:	d214      	bcs.n	801a4d4 <_free_r+0xa4>
 801a4aa:	08d2      	lsrs	r2, r2, #3
 801a4ac:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 801a4b0:	6848      	ldr	r0, [r1, #4]
 801a4b2:	689f      	ldr	r7, [r3, #8]
 801a4b4:	60af      	str	r7, [r5, #8]
 801a4b6:	1092      	asrs	r2, r2, #2
 801a4b8:	2401      	movs	r4, #1
 801a4ba:	fa04 f202 	lsl.w	r2, r4, r2
 801a4be:	4310      	orrs	r0, r2
 801a4c0:	60eb      	str	r3, [r5, #12]
 801a4c2:	6048      	str	r0, [r1, #4]
 801a4c4:	609d      	str	r5, [r3, #8]
 801a4c6:	60fd      	str	r5, [r7, #12]
 801a4c8:	4640      	mov	r0, r8
 801a4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4ce:	f7fc bffb 	b.w	80174c8 <__malloc_unlock>
 801a4d2:	4770      	bx	lr
 801a4d4:	0a53      	lsrs	r3, r2, #9
 801a4d6:	2b04      	cmp	r3, #4
 801a4d8:	d847      	bhi.n	801a56a <_free_r+0x13a>
 801a4da:	0993      	lsrs	r3, r2, #6
 801a4dc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801a4e0:	0060      	lsls	r0, r4, #1
 801a4e2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801a4e6:	493a      	ldr	r1, [pc, #232]	; (801a5d0 <_free_r+0x1a0>)
 801a4e8:	6883      	ldr	r3, [r0, #8]
 801a4ea:	4283      	cmp	r3, r0
 801a4ec:	d043      	beq.n	801a576 <_free_r+0x146>
 801a4ee:	6859      	ldr	r1, [r3, #4]
 801a4f0:	f021 0103 	bic.w	r1, r1, #3
 801a4f4:	4291      	cmp	r1, r2
 801a4f6:	d902      	bls.n	801a4fe <_free_r+0xce>
 801a4f8:	689b      	ldr	r3, [r3, #8]
 801a4fa:	4298      	cmp	r0, r3
 801a4fc:	d1f7      	bne.n	801a4ee <_free_r+0xbe>
 801a4fe:	68da      	ldr	r2, [r3, #12]
 801a500:	60ea      	str	r2, [r5, #12]
 801a502:	60ab      	str	r3, [r5, #8]
 801a504:	4640      	mov	r0, r8
 801a506:	6095      	str	r5, [r2, #8]
 801a508:	60dd      	str	r5, [r3, #12]
 801a50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a50e:	f7fc bfdb 	b.w	80174c8 <__malloc_unlock>
 801a512:	07ff      	lsls	r7, r7, #31
 801a514:	4402      	add	r2, r0
 801a516:	d407      	bmi.n	801a528 <_free_r+0xf8>
 801a518:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801a51c:	1aed      	subs	r5, r5, r3
 801a51e:	441a      	add	r2, r3
 801a520:	68a8      	ldr	r0, [r5, #8]
 801a522:	68eb      	ldr	r3, [r5, #12]
 801a524:	60c3      	str	r3, [r0, #12]
 801a526:	6098      	str	r0, [r3, #8]
 801a528:	4b2b      	ldr	r3, [pc, #172]	; (801a5d8 <_free_r+0x1a8>)
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	f042 0001 	orr.w	r0, r2, #1
 801a530:	429a      	cmp	r2, r3
 801a532:	6068      	str	r0, [r5, #4]
 801a534:	608d      	str	r5, [r1, #8]
 801a536:	d3c7      	bcc.n	801a4c8 <_free_r+0x98>
 801a538:	4b28      	ldr	r3, [pc, #160]	; (801a5dc <_free_r+0x1ac>)
 801a53a:	4640      	mov	r0, r8
 801a53c:	6819      	ldr	r1, [r3, #0]
 801a53e:	f7ff ff29 	bl	801a394 <_malloc_trim_r>
 801a542:	e7c1      	b.n	801a4c8 <_free_r+0x98>
 801a544:	1819      	adds	r1, r3, r0
 801a546:	6849      	ldr	r1, [r1, #4]
 801a548:	07c9      	lsls	r1, r1, #31
 801a54a:	d409      	bmi.n	801a560 <_free_r+0x130>
 801a54c:	68d9      	ldr	r1, [r3, #12]
 801a54e:	689b      	ldr	r3, [r3, #8]
 801a550:	4402      	add	r2, r0
 801a552:	f042 0001 	orr.w	r0, r2, #1
 801a556:	60d9      	str	r1, [r3, #12]
 801a558:	608b      	str	r3, [r1, #8]
 801a55a:	6068      	str	r0, [r5, #4]
 801a55c:	50aa      	str	r2, [r5, r2]
 801a55e:	e7b3      	b.n	801a4c8 <_free_r+0x98>
 801a560:	f042 0301 	orr.w	r3, r2, #1
 801a564:	606b      	str	r3, [r5, #4]
 801a566:	50aa      	str	r2, [r5, r2]
 801a568:	e7ae      	b.n	801a4c8 <_free_r+0x98>
 801a56a:	2b14      	cmp	r3, #20
 801a56c:	d814      	bhi.n	801a598 <_free_r+0x168>
 801a56e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 801a572:	0060      	lsls	r0, r4, #1
 801a574:	e7b5      	b.n	801a4e2 <_free_r+0xb2>
 801a576:	684a      	ldr	r2, [r1, #4]
 801a578:	10a4      	asrs	r4, r4, #2
 801a57a:	2001      	movs	r0, #1
 801a57c:	40a0      	lsls	r0, r4
 801a57e:	4302      	orrs	r2, r0
 801a580:	604a      	str	r2, [r1, #4]
 801a582:	461a      	mov	r2, r3
 801a584:	e7bc      	b.n	801a500 <_free_r+0xd0>
 801a586:	f042 0301 	orr.w	r3, r2, #1
 801a58a:	614d      	str	r5, [r1, #20]
 801a58c:	610d      	str	r5, [r1, #16]
 801a58e:	60ec      	str	r4, [r5, #12]
 801a590:	60ac      	str	r4, [r5, #8]
 801a592:	606b      	str	r3, [r5, #4]
 801a594:	50aa      	str	r2, [r5, r2]
 801a596:	e797      	b.n	801a4c8 <_free_r+0x98>
 801a598:	2b54      	cmp	r3, #84	; 0x54
 801a59a:	d804      	bhi.n	801a5a6 <_free_r+0x176>
 801a59c:	0b13      	lsrs	r3, r2, #12
 801a59e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 801a5a2:	0060      	lsls	r0, r4, #1
 801a5a4:	e79d      	b.n	801a4e2 <_free_r+0xb2>
 801a5a6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801a5aa:	d804      	bhi.n	801a5b6 <_free_r+0x186>
 801a5ac:	0bd3      	lsrs	r3, r2, #15
 801a5ae:	f103 0477 	add.w	r4, r3, #119	; 0x77
 801a5b2:	0060      	lsls	r0, r4, #1
 801a5b4:	e795      	b.n	801a4e2 <_free_r+0xb2>
 801a5b6:	f240 5054 	movw	r0, #1364	; 0x554
 801a5ba:	4283      	cmp	r3, r0
 801a5bc:	d804      	bhi.n	801a5c8 <_free_r+0x198>
 801a5be:	0c93      	lsrs	r3, r2, #18
 801a5c0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801a5c4:	0060      	lsls	r0, r4, #1
 801a5c6:	e78c      	b.n	801a4e2 <_free_r+0xb2>
 801a5c8:	20fc      	movs	r0, #252	; 0xfc
 801a5ca:	247e      	movs	r4, #126	; 0x7e
 801a5cc:	e789      	b.n	801a4e2 <_free_r+0xb2>
 801a5ce:	bf00      	nop
 801a5d0:	20000c34 	.word	0x20000c34
 801a5d4:	20000c3c 	.word	0x20000c3c
 801a5d8:	2000103c 	.word	0x2000103c
 801a5dc:	20003010 	.word	0x20003010

0801a5e0 <_fwalk_reent>:
 801a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5e4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 801a5e8:	d01f      	beq.n	801a62a <_fwalk_reent+0x4a>
 801a5ea:	4688      	mov	r8, r1
 801a5ec:	4606      	mov	r6, r0
 801a5ee:	f04f 0900 	mov.w	r9, #0
 801a5f2:	687d      	ldr	r5, [r7, #4]
 801a5f4:	68bc      	ldr	r4, [r7, #8]
 801a5f6:	3d01      	subs	r5, #1
 801a5f8:	d411      	bmi.n	801a61e <_fwalk_reent+0x3e>
 801a5fa:	89a3      	ldrh	r3, [r4, #12]
 801a5fc:	2b01      	cmp	r3, #1
 801a5fe:	f105 35ff 	add.w	r5, r5, #4294967295
 801a602:	d908      	bls.n	801a616 <_fwalk_reent+0x36>
 801a604:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801a608:	3301      	adds	r3, #1
 801a60a:	4621      	mov	r1, r4
 801a60c:	4630      	mov	r0, r6
 801a60e:	d002      	beq.n	801a616 <_fwalk_reent+0x36>
 801a610:	47c0      	blx	r8
 801a612:	ea49 0900 	orr.w	r9, r9, r0
 801a616:	1c6b      	adds	r3, r5, #1
 801a618:	f104 0468 	add.w	r4, r4, #104	; 0x68
 801a61c:	d1ed      	bne.n	801a5fa <_fwalk_reent+0x1a>
 801a61e:	683f      	ldr	r7, [r7, #0]
 801a620:	2f00      	cmp	r7, #0
 801a622:	d1e6      	bne.n	801a5f2 <_fwalk_reent+0x12>
 801a624:	4648      	mov	r0, r9
 801a626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a62a:	46b9      	mov	r9, r7
 801a62c:	4648      	mov	r0, r9
 801a62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a632:	bf00      	nop

0801a634 <_localeconv_r>:
 801a634:	4800      	ldr	r0, [pc, #0]	; (801a638 <_localeconv_r+0x4>)
 801a636:	4770      	bx	lr
 801a638:	20001044 	.word	0x20001044

0801a63c <__smakebuf_r>:
 801a63c:	898b      	ldrh	r3, [r1, #12]
 801a63e:	b29a      	uxth	r2, r3
 801a640:	f012 0f02 	tst.w	r2, #2
 801a644:	d13c      	bne.n	801a6c0 <__smakebuf_r+0x84>
 801a646:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a648:	460c      	mov	r4, r1
 801a64a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a64e:	2900      	cmp	r1, #0
 801a650:	b091      	sub	sp, #68	; 0x44
 801a652:	4605      	mov	r5, r0
 801a654:	db19      	blt.n	801a68a <__smakebuf_r+0x4e>
 801a656:	aa01      	add	r2, sp, #4
 801a658:	f7f4 fb9a 	bl	800ed90 <_fstat_r>
 801a65c:	2800      	cmp	r0, #0
 801a65e:	db12      	blt.n	801a686 <__smakebuf_r+0x4a>
 801a660:	9b02      	ldr	r3, [sp, #8]
 801a662:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801a666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a66a:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 801a66e:	fab7 f787 	clz	r7, r7
 801a672:	ea4f 1757 	mov.w	r7, r7, lsr #5
 801a676:	d02a      	beq.n	801a6ce <__smakebuf_r+0x92>
 801a678:	89a3      	ldrh	r3, [r4, #12]
 801a67a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a67e:	81a3      	strh	r3, [r4, #12]
 801a680:	f44f 6680 	mov.w	r6, #1024	; 0x400
 801a684:	e00b      	b.n	801a69e <__smakebuf_r+0x62>
 801a686:	89a3      	ldrh	r3, [r4, #12]
 801a688:	b29a      	uxth	r2, r3
 801a68a:	f012 0f80 	tst.w	r2, #128	; 0x80
 801a68e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a692:	81a3      	strh	r3, [r4, #12]
 801a694:	bf0c      	ite	eq
 801a696:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 801a69a:	2640      	movne	r6, #64	; 0x40
 801a69c:	2700      	movs	r7, #0
 801a69e:	4628      	mov	r0, r5
 801a6a0:	4631      	mov	r1, r6
 801a6a2:	f7fc fb4f 	bl	8016d44 <_malloc_r>
 801a6a6:	89a3      	ldrh	r3, [r4, #12]
 801a6a8:	b340      	cbz	r0, 801a6fc <__smakebuf_r+0xc0>
 801a6aa:	4a1a      	ldr	r2, [pc, #104]	; (801a714 <__smakebuf_r+0xd8>)
 801a6ac:	63ea      	str	r2, [r5, #60]	; 0x3c
 801a6ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a6b2:	81a3      	strh	r3, [r4, #12]
 801a6b4:	6020      	str	r0, [r4, #0]
 801a6b6:	6120      	str	r0, [r4, #16]
 801a6b8:	6166      	str	r6, [r4, #20]
 801a6ba:	b99f      	cbnz	r7, 801a6e4 <__smakebuf_r+0xa8>
 801a6bc:	b011      	add	sp, #68	; 0x44
 801a6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6c0:	f101 0343 	add.w	r3, r1, #67	; 0x43
 801a6c4:	2201      	movs	r2, #1
 801a6c6:	600b      	str	r3, [r1, #0]
 801a6c8:	610b      	str	r3, [r1, #16]
 801a6ca:	614a      	str	r2, [r1, #20]
 801a6cc:	4770      	bx	lr
 801a6ce:	4b12      	ldr	r3, [pc, #72]	; (801a718 <__smakebuf_r+0xdc>)
 801a6d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a6d2:	429a      	cmp	r2, r3
 801a6d4:	d1d0      	bne.n	801a678 <__smakebuf_r+0x3c>
 801a6d6:	89a3      	ldrh	r3, [r4, #12]
 801a6d8:	f44f 6680 	mov.w	r6, #1024	; 0x400
 801a6dc:	4333      	orrs	r3, r6
 801a6de:	81a3      	strh	r3, [r4, #12]
 801a6e0:	64e6      	str	r6, [r4, #76]	; 0x4c
 801a6e2:	e7dc      	b.n	801a69e <__smakebuf_r+0x62>
 801a6e4:	4628      	mov	r0, r5
 801a6e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a6ea:	f7f4 fb69 	bl	800edc0 <_isatty_r>
 801a6ee:	2800      	cmp	r0, #0
 801a6f0:	d0e4      	beq.n	801a6bc <__smakebuf_r+0x80>
 801a6f2:	89a3      	ldrh	r3, [r4, #12]
 801a6f4:	f043 0301 	orr.w	r3, r3, #1
 801a6f8:	81a3      	strh	r3, [r4, #12]
 801a6fa:	e7df      	b.n	801a6bc <__smakebuf_r+0x80>
 801a6fc:	059a      	lsls	r2, r3, #22
 801a6fe:	d4dd      	bmi.n	801a6bc <__smakebuf_r+0x80>
 801a700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a704:	f043 0302 	orr.w	r3, r3, #2
 801a708:	2101      	movs	r1, #1
 801a70a:	81a3      	strh	r3, [r4, #12]
 801a70c:	6022      	str	r2, [r4, #0]
 801a70e:	6122      	str	r2, [r4, #16]
 801a710:	6161      	str	r1, [r4, #20]
 801a712:	e7d3      	b.n	801a6bc <__smakebuf_r+0x80>
 801a714:	0801a285 	.word	0x0801a285
 801a718:	0801adc1 	.word	0x0801adc1

0801a71c <_Balloc>:
 801a71c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a71e:	b570      	push	{r4, r5, r6, lr}
 801a720:	4605      	mov	r5, r0
 801a722:	460c      	mov	r4, r1
 801a724:	b14b      	cbz	r3, 801a73a <_Balloc+0x1e>
 801a726:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a72a:	b180      	cbz	r0, 801a74e <_Balloc+0x32>
 801a72c:	6802      	ldr	r2, [r0, #0]
 801a72e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801a732:	2300      	movs	r3, #0
 801a734:	6103      	str	r3, [r0, #16]
 801a736:	60c3      	str	r3, [r0, #12]
 801a738:	bd70      	pop	{r4, r5, r6, pc}
 801a73a:	2104      	movs	r1, #4
 801a73c:	2221      	movs	r2, #33	; 0x21
 801a73e:	f000 fbd5 	bl	801aeec <_calloc_r>
 801a742:	64e8      	str	r0, [r5, #76]	; 0x4c
 801a744:	4603      	mov	r3, r0
 801a746:	2800      	cmp	r0, #0
 801a748:	d1ed      	bne.n	801a726 <_Balloc+0xa>
 801a74a:	2000      	movs	r0, #0
 801a74c:	bd70      	pop	{r4, r5, r6, pc}
 801a74e:	2101      	movs	r1, #1
 801a750:	fa01 f604 	lsl.w	r6, r1, r4
 801a754:	1d72      	adds	r2, r6, #5
 801a756:	4628      	mov	r0, r5
 801a758:	0092      	lsls	r2, r2, #2
 801a75a:	f000 fbc7 	bl	801aeec <_calloc_r>
 801a75e:	2800      	cmp	r0, #0
 801a760:	d0f3      	beq.n	801a74a <_Balloc+0x2e>
 801a762:	6044      	str	r4, [r0, #4]
 801a764:	6086      	str	r6, [r0, #8]
 801a766:	e7e4      	b.n	801a732 <_Balloc+0x16>

0801a768 <_Bfree>:
 801a768:	b131      	cbz	r1, 801a778 <_Bfree+0x10>
 801a76a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a76c:	684a      	ldr	r2, [r1, #4]
 801a76e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a772:	6008      	str	r0, [r1, #0]
 801a774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801a778:	4770      	bx	lr
 801a77a:	bf00      	nop

0801a77c <__multadd>:
 801a77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a77e:	690c      	ldr	r4, [r1, #16]
 801a780:	b083      	sub	sp, #12
 801a782:	460d      	mov	r5, r1
 801a784:	4606      	mov	r6, r0
 801a786:	f101 0e14 	add.w	lr, r1, #20
 801a78a:	2700      	movs	r7, #0
 801a78c:	f8de 1000 	ldr.w	r1, [lr]
 801a790:	b288      	uxth	r0, r1
 801a792:	0c09      	lsrs	r1, r1, #16
 801a794:	fb02 3300 	mla	r3, r2, r0, r3
 801a798:	fb02 f101 	mul.w	r1, r2, r1
 801a79c:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 801a7a0:	3701      	adds	r7, #1
 801a7a2:	b29b      	uxth	r3, r3
 801a7a4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801a7a8:	42bc      	cmp	r4, r7
 801a7aa:	f84e 3b04 	str.w	r3, [lr], #4
 801a7ae:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801a7b2:	dceb      	bgt.n	801a78c <__multadd+0x10>
 801a7b4:	b13b      	cbz	r3, 801a7c6 <__multadd+0x4a>
 801a7b6:	68aa      	ldr	r2, [r5, #8]
 801a7b8:	4294      	cmp	r4, r2
 801a7ba:	da07      	bge.n	801a7cc <__multadd+0x50>
 801a7bc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 801a7c0:	3401      	adds	r4, #1
 801a7c2:	6153      	str	r3, [r2, #20]
 801a7c4:	612c      	str	r4, [r5, #16]
 801a7c6:	4628      	mov	r0, r5
 801a7c8:	b003      	add	sp, #12
 801a7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7cc:	6869      	ldr	r1, [r5, #4]
 801a7ce:	9301      	str	r3, [sp, #4]
 801a7d0:	3101      	adds	r1, #1
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	f7ff ffa2 	bl	801a71c <_Balloc>
 801a7d8:	692a      	ldr	r2, [r5, #16]
 801a7da:	3202      	adds	r2, #2
 801a7dc:	f105 010c 	add.w	r1, r5, #12
 801a7e0:	4607      	mov	r7, r0
 801a7e2:	0092      	lsls	r2, r2, #2
 801a7e4:	300c      	adds	r0, #12
 801a7e6:	f7f3 f921 	bl	800da2c <memcpy>
 801a7ea:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 801a7ec:	6869      	ldr	r1, [r5, #4]
 801a7ee:	9b01      	ldr	r3, [sp, #4]
 801a7f0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 801a7f4:	6028      	str	r0, [r5, #0]
 801a7f6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 801a7fa:	463d      	mov	r5, r7
 801a7fc:	e7de      	b.n	801a7bc <__multadd+0x40>
 801a7fe:	bf00      	nop

0801a800 <__hi0bits>:
 801a800:	0c03      	lsrs	r3, r0, #16
 801a802:	041b      	lsls	r3, r3, #16
 801a804:	b9b3      	cbnz	r3, 801a834 <__hi0bits+0x34>
 801a806:	0400      	lsls	r0, r0, #16
 801a808:	2310      	movs	r3, #16
 801a80a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a80e:	bf04      	itt	eq
 801a810:	0200      	lsleq	r0, r0, #8
 801a812:	3308      	addeq	r3, #8
 801a814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a818:	bf04      	itt	eq
 801a81a:	0100      	lsleq	r0, r0, #4
 801a81c:	3304      	addeq	r3, #4
 801a81e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a822:	bf04      	itt	eq
 801a824:	0080      	lsleq	r0, r0, #2
 801a826:	3302      	addeq	r3, #2
 801a828:	2800      	cmp	r0, #0
 801a82a:	db07      	blt.n	801a83c <__hi0bits+0x3c>
 801a82c:	0042      	lsls	r2, r0, #1
 801a82e:	d403      	bmi.n	801a838 <__hi0bits+0x38>
 801a830:	2020      	movs	r0, #32
 801a832:	4770      	bx	lr
 801a834:	2300      	movs	r3, #0
 801a836:	e7e8      	b.n	801a80a <__hi0bits+0xa>
 801a838:	1c58      	adds	r0, r3, #1
 801a83a:	4770      	bx	lr
 801a83c:	4618      	mov	r0, r3
 801a83e:	4770      	bx	lr

0801a840 <__lo0bits>:
 801a840:	6803      	ldr	r3, [r0, #0]
 801a842:	f013 0207 	ands.w	r2, r3, #7
 801a846:	d007      	beq.n	801a858 <__lo0bits+0x18>
 801a848:	07d9      	lsls	r1, r3, #31
 801a84a:	d420      	bmi.n	801a88e <__lo0bits+0x4e>
 801a84c:	079a      	lsls	r2, r3, #30
 801a84e:	d420      	bmi.n	801a892 <__lo0bits+0x52>
 801a850:	089b      	lsrs	r3, r3, #2
 801a852:	6003      	str	r3, [r0, #0]
 801a854:	2002      	movs	r0, #2
 801a856:	4770      	bx	lr
 801a858:	b299      	uxth	r1, r3
 801a85a:	b909      	cbnz	r1, 801a860 <__lo0bits+0x20>
 801a85c:	0c1b      	lsrs	r3, r3, #16
 801a85e:	2210      	movs	r2, #16
 801a860:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a864:	bf04      	itt	eq
 801a866:	0a1b      	lsreq	r3, r3, #8
 801a868:	3208      	addeq	r2, #8
 801a86a:	0719      	lsls	r1, r3, #28
 801a86c:	bf04      	itt	eq
 801a86e:	091b      	lsreq	r3, r3, #4
 801a870:	3204      	addeq	r2, #4
 801a872:	0799      	lsls	r1, r3, #30
 801a874:	bf04      	itt	eq
 801a876:	089b      	lsreq	r3, r3, #2
 801a878:	3202      	addeq	r2, #2
 801a87a:	07d9      	lsls	r1, r3, #31
 801a87c:	d404      	bmi.n	801a888 <__lo0bits+0x48>
 801a87e:	085b      	lsrs	r3, r3, #1
 801a880:	d101      	bne.n	801a886 <__lo0bits+0x46>
 801a882:	2020      	movs	r0, #32
 801a884:	4770      	bx	lr
 801a886:	3201      	adds	r2, #1
 801a888:	6003      	str	r3, [r0, #0]
 801a88a:	4610      	mov	r0, r2
 801a88c:	4770      	bx	lr
 801a88e:	2000      	movs	r0, #0
 801a890:	4770      	bx	lr
 801a892:	085b      	lsrs	r3, r3, #1
 801a894:	6003      	str	r3, [r0, #0]
 801a896:	2001      	movs	r0, #1
 801a898:	4770      	bx	lr
 801a89a:	bf00      	nop

0801a89c <__i2b>:
 801a89c:	b510      	push	{r4, lr}
 801a89e:	460c      	mov	r4, r1
 801a8a0:	2101      	movs	r1, #1
 801a8a2:	f7ff ff3b 	bl	801a71c <_Balloc>
 801a8a6:	2201      	movs	r2, #1
 801a8a8:	6144      	str	r4, [r0, #20]
 801a8aa:	6102      	str	r2, [r0, #16]
 801a8ac:	bd10      	pop	{r4, pc}
 801a8ae:	bf00      	nop

0801a8b0 <__multiply>:
 801a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8b4:	690f      	ldr	r7, [r1, #16]
 801a8b6:	6916      	ldr	r6, [r2, #16]
 801a8b8:	42b7      	cmp	r7, r6
 801a8ba:	b083      	sub	sp, #12
 801a8bc:	460d      	mov	r5, r1
 801a8be:	4614      	mov	r4, r2
 801a8c0:	f2c0 808d 	blt.w	801a9de <__multiply+0x12e>
 801a8c4:	4633      	mov	r3, r6
 801a8c6:	463e      	mov	r6, r7
 801a8c8:	461f      	mov	r7, r3
 801a8ca:	68ab      	ldr	r3, [r5, #8]
 801a8cc:	6869      	ldr	r1, [r5, #4]
 801a8ce:	eb06 0807 	add.w	r8, r6, r7
 801a8d2:	4598      	cmp	r8, r3
 801a8d4:	bfc8      	it	gt
 801a8d6:	3101      	addgt	r1, #1
 801a8d8:	f7ff ff20 	bl	801a71c <_Balloc>
 801a8dc:	f100 0c14 	add.w	ip, r0, #20
 801a8e0:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 801a8e4:	45cc      	cmp	ip, r9
 801a8e6:	9000      	str	r0, [sp, #0]
 801a8e8:	d205      	bcs.n	801a8f6 <__multiply+0x46>
 801a8ea:	4663      	mov	r3, ip
 801a8ec:	2100      	movs	r1, #0
 801a8ee:	f843 1b04 	str.w	r1, [r3], #4
 801a8f2:	4599      	cmp	r9, r3
 801a8f4:	d8fb      	bhi.n	801a8ee <__multiply+0x3e>
 801a8f6:	f104 0214 	add.w	r2, r4, #20
 801a8fa:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 801a8fe:	f105 0314 	add.w	r3, r5, #20
 801a902:	4552      	cmp	r2, sl
 801a904:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801a908:	d254      	bcs.n	801a9b4 <__multiply+0x104>
 801a90a:	f8cd 9004 	str.w	r9, [sp, #4]
 801a90e:	4699      	mov	r9, r3
 801a910:	f852 3b04 	ldr.w	r3, [r2], #4
 801a914:	fa1f fb83 	uxth.w	fp, r3
 801a918:	f1bb 0f00 	cmp.w	fp, #0
 801a91c:	d020      	beq.n	801a960 <__multiply+0xb0>
 801a91e:	2000      	movs	r0, #0
 801a920:	464f      	mov	r7, r9
 801a922:	4666      	mov	r6, ip
 801a924:	4605      	mov	r5, r0
 801a926:	e000      	b.n	801a92a <__multiply+0x7a>
 801a928:	461e      	mov	r6, r3
 801a92a:	f857 4b04 	ldr.w	r4, [r7], #4
 801a92e:	6830      	ldr	r0, [r6, #0]
 801a930:	b2a1      	uxth	r1, r4
 801a932:	b283      	uxth	r3, r0
 801a934:	fb0b 3101 	mla	r1, fp, r1, r3
 801a938:	0c24      	lsrs	r4, r4, #16
 801a93a:	0c00      	lsrs	r0, r0, #16
 801a93c:	194b      	adds	r3, r1, r5
 801a93e:	fb0b 0004 	mla	r0, fp, r4, r0
 801a942:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 801a946:	b299      	uxth	r1, r3
 801a948:	4633      	mov	r3, r6
 801a94a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a94e:	45be      	cmp	lr, r7
 801a950:	ea4f 4510 	mov.w	r5, r0, lsr #16
 801a954:	f843 1b04 	str.w	r1, [r3], #4
 801a958:	d8e6      	bhi.n	801a928 <__multiply+0x78>
 801a95a:	6075      	str	r5, [r6, #4]
 801a95c:	f852 3c04 	ldr.w	r3, [r2, #-4]
 801a960:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 801a964:	d020      	beq.n	801a9a8 <__multiply+0xf8>
 801a966:	f8dc 3000 	ldr.w	r3, [ip]
 801a96a:	4667      	mov	r7, ip
 801a96c:	4618      	mov	r0, r3
 801a96e:	464d      	mov	r5, r9
 801a970:	2100      	movs	r1, #0
 801a972:	e000      	b.n	801a976 <__multiply+0xc6>
 801a974:	4637      	mov	r7, r6
 801a976:	882c      	ldrh	r4, [r5, #0]
 801a978:	0c00      	lsrs	r0, r0, #16
 801a97a:	fb0b 0004 	mla	r0, fp, r4, r0
 801a97e:	4401      	add	r1, r0
 801a980:	b29c      	uxth	r4, r3
 801a982:	463e      	mov	r6, r7
 801a984:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 801a988:	f846 3b04 	str.w	r3, [r6], #4
 801a98c:	6878      	ldr	r0, [r7, #4]
 801a98e:	f855 4b04 	ldr.w	r4, [r5], #4
 801a992:	b283      	uxth	r3, r0
 801a994:	0c24      	lsrs	r4, r4, #16
 801a996:	fb0b 3404 	mla	r4, fp, r4, r3
 801a99a:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 801a99e:	45ae      	cmp	lr, r5
 801a9a0:	ea4f 4113 	mov.w	r1, r3, lsr #16
 801a9a4:	d8e6      	bhi.n	801a974 <__multiply+0xc4>
 801a9a6:	607b      	str	r3, [r7, #4]
 801a9a8:	4592      	cmp	sl, r2
 801a9aa:	f10c 0c04 	add.w	ip, ip, #4
 801a9ae:	d8af      	bhi.n	801a910 <__multiply+0x60>
 801a9b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801a9b4:	f1b8 0f00 	cmp.w	r8, #0
 801a9b8:	dd0b      	ble.n	801a9d2 <__multiply+0x122>
 801a9ba:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801a9be:	f1a9 0904 	sub.w	r9, r9, #4
 801a9c2:	b11b      	cbz	r3, 801a9cc <__multiply+0x11c>
 801a9c4:	e005      	b.n	801a9d2 <__multiply+0x122>
 801a9c6:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801a9ca:	b913      	cbnz	r3, 801a9d2 <__multiply+0x122>
 801a9cc:	f1b8 0801 	subs.w	r8, r8, #1
 801a9d0:	d1f9      	bne.n	801a9c6 <__multiply+0x116>
 801a9d2:	9800      	ldr	r0, [sp, #0]
 801a9d4:	f8c0 8010 	str.w	r8, [r0, #16]
 801a9d8:	b003      	add	sp, #12
 801a9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9de:	4615      	mov	r5, r2
 801a9e0:	460c      	mov	r4, r1
 801a9e2:	e772      	b.n	801a8ca <__multiply+0x1a>

0801a9e4 <__pow5mult>:
 801a9e4:	f012 0303 	ands.w	r3, r2, #3
 801a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9ec:	4614      	mov	r4, r2
 801a9ee:	4607      	mov	r7, r0
 801a9f0:	460e      	mov	r6, r1
 801a9f2:	d12d      	bne.n	801aa50 <__pow5mult+0x6c>
 801a9f4:	10a4      	asrs	r4, r4, #2
 801a9f6:	d01c      	beq.n	801aa32 <__pow5mult+0x4e>
 801a9f8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 801a9fa:	b395      	cbz	r5, 801aa62 <__pow5mult+0x7e>
 801a9fc:	07e3      	lsls	r3, r4, #31
 801a9fe:	f04f 0800 	mov.w	r8, #0
 801aa02:	d406      	bmi.n	801aa12 <__pow5mult+0x2e>
 801aa04:	1064      	asrs	r4, r4, #1
 801aa06:	d014      	beq.n	801aa32 <__pow5mult+0x4e>
 801aa08:	6828      	ldr	r0, [r5, #0]
 801aa0a:	b1a8      	cbz	r0, 801aa38 <__pow5mult+0x54>
 801aa0c:	4605      	mov	r5, r0
 801aa0e:	07e3      	lsls	r3, r4, #31
 801aa10:	d5f8      	bpl.n	801aa04 <__pow5mult+0x20>
 801aa12:	4638      	mov	r0, r7
 801aa14:	4631      	mov	r1, r6
 801aa16:	462a      	mov	r2, r5
 801aa18:	f7ff ff4a 	bl	801a8b0 <__multiply>
 801aa1c:	b1b6      	cbz	r6, 801aa4c <__pow5mult+0x68>
 801aa1e:	6872      	ldr	r2, [r6, #4]
 801aa20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa22:	1064      	asrs	r4, r4, #1
 801aa24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801aa28:	6031      	str	r1, [r6, #0]
 801aa2a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 801aa2e:	4606      	mov	r6, r0
 801aa30:	d1ea      	bne.n	801aa08 <__pow5mult+0x24>
 801aa32:	4630      	mov	r0, r6
 801aa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa38:	4629      	mov	r1, r5
 801aa3a:	462a      	mov	r2, r5
 801aa3c:	4638      	mov	r0, r7
 801aa3e:	f7ff ff37 	bl	801a8b0 <__multiply>
 801aa42:	6028      	str	r0, [r5, #0]
 801aa44:	f8c0 8000 	str.w	r8, [r0]
 801aa48:	4605      	mov	r5, r0
 801aa4a:	e7e0      	b.n	801aa0e <__pow5mult+0x2a>
 801aa4c:	4606      	mov	r6, r0
 801aa4e:	e7d9      	b.n	801aa04 <__pow5mult+0x20>
 801aa50:	1e5a      	subs	r2, r3, #1
 801aa52:	4d0b      	ldr	r5, [pc, #44]	; (801aa80 <__pow5mult+0x9c>)
 801aa54:	2300      	movs	r3, #0
 801aa56:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801aa5a:	f7ff fe8f 	bl	801a77c <__multadd>
 801aa5e:	4606      	mov	r6, r0
 801aa60:	e7c8      	b.n	801a9f4 <__pow5mult+0x10>
 801aa62:	2101      	movs	r1, #1
 801aa64:	4638      	mov	r0, r7
 801aa66:	f7ff fe59 	bl	801a71c <_Balloc>
 801aa6a:	f240 2171 	movw	r1, #625	; 0x271
 801aa6e:	2201      	movs	r2, #1
 801aa70:	2300      	movs	r3, #0
 801aa72:	6141      	str	r1, [r0, #20]
 801aa74:	6102      	str	r2, [r0, #16]
 801aa76:	4605      	mov	r5, r0
 801aa78:	64b8      	str	r0, [r7, #72]	; 0x48
 801aa7a:	6003      	str	r3, [r0, #0]
 801aa7c:	e7be      	b.n	801a9fc <__pow5mult+0x18>
 801aa7e:	bf00      	nop
 801aa80:	0801e4b0 	.word	0x0801e4b0

0801aa84 <__lshift>:
 801aa84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa88:	690f      	ldr	r7, [r1, #16]
 801aa8a:	688b      	ldr	r3, [r1, #8]
 801aa8c:	ea4f 1962 	mov.w	r9, r2, asr #5
 801aa90:	444f      	add	r7, r9
 801aa92:	1c7d      	adds	r5, r7, #1
 801aa94:	429d      	cmp	r5, r3
 801aa96:	460e      	mov	r6, r1
 801aa98:	4614      	mov	r4, r2
 801aa9a:	6849      	ldr	r1, [r1, #4]
 801aa9c:	4680      	mov	r8, r0
 801aa9e:	dd04      	ble.n	801aaaa <__lshift+0x26>
 801aaa0:	005b      	lsls	r3, r3, #1
 801aaa2:	429d      	cmp	r5, r3
 801aaa4:	f101 0101 	add.w	r1, r1, #1
 801aaa8:	dcfa      	bgt.n	801aaa0 <__lshift+0x1c>
 801aaaa:	4640      	mov	r0, r8
 801aaac:	f7ff fe36 	bl	801a71c <_Balloc>
 801aab0:	f1b9 0f00 	cmp.w	r9, #0
 801aab4:	f100 0114 	add.w	r1, r0, #20
 801aab8:	dd09      	ble.n	801aace <__lshift+0x4a>
 801aaba:	2300      	movs	r3, #0
 801aabc:	469e      	mov	lr, r3
 801aabe:	460a      	mov	r2, r1
 801aac0:	3301      	adds	r3, #1
 801aac2:	454b      	cmp	r3, r9
 801aac4:	f842 eb04 	str.w	lr, [r2], #4
 801aac8:	d1fa      	bne.n	801aac0 <__lshift+0x3c>
 801aaca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801aace:	6932      	ldr	r2, [r6, #16]
 801aad0:	f106 0314 	add.w	r3, r6, #20
 801aad4:	f014 0c1f 	ands.w	ip, r4, #31
 801aad8:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 801aadc:	d01f      	beq.n	801ab1e <__lshift+0x9a>
 801aade:	f1cc 0920 	rsb	r9, ip, #32
 801aae2:	2200      	movs	r2, #0
 801aae4:	681c      	ldr	r4, [r3, #0]
 801aae6:	fa04 f40c 	lsl.w	r4, r4, ip
 801aaea:	4314      	orrs	r4, r2
 801aaec:	468a      	mov	sl, r1
 801aaee:	f841 4b04 	str.w	r4, [r1], #4
 801aaf2:	f853 4b04 	ldr.w	r4, [r3], #4
 801aaf6:	459e      	cmp	lr, r3
 801aaf8:	fa24 f209 	lsr.w	r2, r4, r9
 801aafc:	d8f2      	bhi.n	801aae4 <__lshift+0x60>
 801aafe:	f8ca 2004 	str.w	r2, [sl, #4]
 801ab02:	b102      	cbz	r2, 801ab06 <__lshift+0x82>
 801ab04:	1cbd      	adds	r5, r7, #2
 801ab06:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 801ab0a:	6872      	ldr	r2, [r6, #4]
 801ab0c:	3d01      	subs	r5, #1
 801ab0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ab12:	6105      	str	r5, [r0, #16]
 801ab14:	6031      	str	r1, [r6, #0]
 801ab16:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 801ab1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab1e:	3904      	subs	r1, #4
 801ab20:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab24:	f841 2f04 	str.w	r2, [r1, #4]!
 801ab28:	459e      	cmp	lr, r3
 801ab2a:	d8f9      	bhi.n	801ab20 <__lshift+0x9c>
 801ab2c:	e7eb      	b.n	801ab06 <__lshift+0x82>
 801ab2e:	bf00      	nop

0801ab30 <__mcmp>:
 801ab30:	6902      	ldr	r2, [r0, #16]
 801ab32:	690b      	ldr	r3, [r1, #16]
 801ab34:	1ad2      	subs	r2, r2, r3
 801ab36:	d113      	bne.n	801ab60 <__mcmp+0x30>
 801ab38:	009b      	lsls	r3, r3, #2
 801ab3a:	3014      	adds	r0, #20
 801ab3c:	3114      	adds	r1, #20
 801ab3e:	4419      	add	r1, r3
 801ab40:	b410      	push	{r4}
 801ab42:	4403      	add	r3, r0
 801ab44:	e001      	b.n	801ab4a <__mcmp+0x1a>
 801ab46:	4298      	cmp	r0, r3
 801ab48:	d20c      	bcs.n	801ab64 <__mcmp+0x34>
 801ab4a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801ab4e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ab52:	4294      	cmp	r4, r2
 801ab54:	d0f7      	beq.n	801ab46 <__mcmp+0x16>
 801ab56:	d309      	bcc.n	801ab6c <__mcmp+0x3c>
 801ab58:	2001      	movs	r0, #1
 801ab5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab5e:	4770      	bx	lr
 801ab60:	4610      	mov	r0, r2
 801ab62:	4770      	bx	lr
 801ab64:	2000      	movs	r0, #0
 801ab66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab6a:	4770      	bx	lr
 801ab6c:	f04f 30ff 	mov.w	r0, #4294967295
 801ab70:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab74:	4770      	bx	lr
 801ab76:	bf00      	nop

0801ab78 <__mdiff>:
 801ab78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab7c:	460e      	mov	r6, r1
 801ab7e:	4605      	mov	r5, r0
 801ab80:	4611      	mov	r1, r2
 801ab82:	4630      	mov	r0, r6
 801ab84:	4614      	mov	r4, r2
 801ab86:	f7ff ffd3 	bl	801ab30 <__mcmp>
 801ab8a:	1e07      	subs	r7, r0, #0
 801ab8c:	d054      	beq.n	801ac38 <__mdiff+0xc0>
 801ab8e:	db4d      	blt.n	801ac2c <__mdiff+0xb4>
 801ab90:	f04f 0800 	mov.w	r8, #0
 801ab94:	6871      	ldr	r1, [r6, #4]
 801ab96:	4628      	mov	r0, r5
 801ab98:	f7ff fdc0 	bl	801a71c <_Balloc>
 801ab9c:	6937      	ldr	r7, [r6, #16]
 801ab9e:	6923      	ldr	r3, [r4, #16]
 801aba0:	f8c0 800c 	str.w	r8, [r0, #12]
 801aba4:	3614      	adds	r6, #20
 801aba6:	f104 0214 	add.w	r2, r4, #20
 801abaa:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 801abae:	f100 0514 	add.w	r5, r0, #20
 801abb2:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 801abb6:	2300      	movs	r3, #0
 801abb8:	f856 8b04 	ldr.w	r8, [r6], #4
 801abbc:	f852 4b04 	ldr.w	r4, [r2], #4
 801abc0:	fa13 f388 	uxtah	r3, r3, r8
 801abc4:	b2a1      	uxth	r1, r4
 801abc6:	0c24      	lsrs	r4, r4, #16
 801abc8:	1a59      	subs	r1, r3, r1
 801abca:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 801abce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801abd2:	b289      	uxth	r1, r1
 801abd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801abd8:	4594      	cmp	ip, r2
 801abda:	f845 1b04 	str.w	r1, [r5], #4
 801abde:	ea4f 4323 	mov.w	r3, r3, asr #16
 801abe2:	4634      	mov	r4, r6
 801abe4:	d8e8      	bhi.n	801abb8 <__mdiff+0x40>
 801abe6:	45b6      	cmp	lr, r6
 801abe8:	46ac      	mov	ip, r5
 801abea:	d915      	bls.n	801ac18 <__mdiff+0xa0>
 801abec:	f854 2b04 	ldr.w	r2, [r4], #4
 801abf0:	fa13 f182 	uxtah	r1, r3, r2
 801abf4:	0c13      	lsrs	r3, r2, #16
 801abf6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801abfa:	b289      	uxth	r1, r1
 801abfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801ac00:	45a6      	cmp	lr, r4
 801ac02:	f845 1b04 	str.w	r1, [r5], #4
 801ac06:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ac0a:	d8ef      	bhi.n	801abec <__mdiff+0x74>
 801ac0c:	43f6      	mvns	r6, r6
 801ac0e:	4476      	add	r6, lr
 801ac10:	f026 0503 	bic.w	r5, r6, #3
 801ac14:	3504      	adds	r5, #4
 801ac16:	4465      	add	r5, ip
 801ac18:	3d04      	subs	r5, #4
 801ac1a:	b921      	cbnz	r1, 801ac26 <__mdiff+0xae>
 801ac1c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801ac20:	3f01      	subs	r7, #1
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d0fa      	beq.n	801ac1c <__mdiff+0xa4>
 801ac26:	6107      	str	r7, [r0, #16]
 801ac28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac2c:	4633      	mov	r3, r6
 801ac2e:	f04f 0801 	mov.w	r8, #1
 801ac32:	4626      	mov	r6, r4
 801ac34:	461c      	mov	r4, r3
 801ac36:	e7ad      	b.n	801ab94 <__mdiff+0x1c>
 801ac38:	4628      	mov	r0, r5
 801ac3a:	4639      	mov	r1, r7
 801ac3c:	f7ff fd6e 	bl	801a71c <_Balloc>
 801ac40:	2301      	movs	r3, #1
 801ac42:	6147      	str	r7, [r0, #20]
 801ac44:	6103      	str	r3, [r0, #16]
 801ac46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac4a:	bf00      	nop

0801ac4c <__d2b>:
 801ac4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac50:	ec57 6b10 	vmov	r6, r7, d0
 801ac54:	b083      	sub	sp, #12
 801ac56:	4688      	mov	r8, r1
 801ac58:	2101      	movs	r1, #1
 801ac5a:	463c      	mov	r4, r7
 801ac5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801ac60:	4617      	mov	r7, r2
 801ac62:	f7ff fd5b 	bl	801a71c <_Balloc>
 801ac66:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ac6a:	4681      	mov	r9, r0
 801ac6c:	b10d      	cbz	r5, 801ac72 <__d2b+0x26>
 801ac6e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 801ac72:	9401      	str	r4, [sp, #4]
 801ac74:	b31e      	cbz	r6, 801acbe <__d2b+0x72>
 801ac76:	a802      	add	r0, sp, #8
 801ac78:	f840 6d08 	str.w	r6, [r0, #-8]!
 801ac7c:	f7ff fde0 	bl	801a840 <__lo0bits>
 801ac80:	2800      	cmp	r0, #0
 801ac82:	d134      	bne.n	801acee <__d2b+0xa2>
 801ac84:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801ac88:	f8c9 2014 	str.w	r2, [r9, #20]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	bf14      	ite	ne
 801ac90:	2402      	movne	r4, #2
 801ac92:	2401      	moveq	r4, #1
 801ac94:	f8c9 3018 	str.w	r3, [r9, #24]
 801ac98:	f8c9 4010 	str.w	r4, [r9, #16]
 801ac9c:	b9dd      	cbnz	r5, 801acd6 <__d2b+0x8a>
 801ac9e:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 801aca2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801aca6:	f8c8 0000 	str.w	r0, [r8]
 801acaa:	6918      	ldr	r0, [r3, #16]
 801acac:	f7ff fda8 	bl	801a800 <__hi0bits>
 801acb0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 801acb4:	6038      	str	r0, [r7, #0]
 801acb6:	4648      	mov	r0, r9
 801acb8:	b003      	add	sp, #12
 801acba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801acbe:	a801      	add	r0, sp, #4
 801acc0:	f7ff fdbe 	bl	801a840 <__lo0bits>
 801acc4:	2401      	movs	r4, #1
 801acc6:	9b01      	ldr	r3, [sp, #4]
 801acc8:	f8c9 3014 	str.w	r3, [r9, #20]
 801accc:	3020      	adds	r0, #32
 801acce:	f8c9 4010 	str.w	r4, [r9, #16]
 801acd2:	2d00      	cmp	r5, #0
 801acd4:	d0e3      	beq.n	801ac9e <__d2b+0x52>
 801acd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801acda:	4405      	add	r5, r0
 801acdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ace0:	f8c8 5000 	str.w	r5, [r8]
 801ace4:	6038      	str	r0, [r7, #0]
 801ace6:	4648      	mov	r0, r9
 801ace8:	b003      	add	sp, #12
 801acea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801acee:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801acf2:	f1c0 0120 	rsb	r1, r0, #32
 801acf6:	fa03 f101 	lsl.w	r1, r3, r1
 801acfa:	430a      	orrs	r2, r1
 801acfc:	40c3      	lsrs	r3, r0
 801acfe:	9301      	str	r3, [sp, #4]
 801ad00:	f8c9 2014 	str.w	r2, [r9, #20]
 801ad04:	e7c2      	b.n	801ac8c <__d2b+0x40>
 801ad06:	bf00      	nop

0801ad08 <__fpclassifyd>:
 801ad08:	ec53 2b10 	vmov	r2, r3, d0
 801ad0c:	b410      	push	{r4}
 801ad0e:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 801ad12:	d008      	beq.n	801ad26 <__fpclassifyd+0x1e>
 801ad14:	4911      	ldr	r1, [pc, #68]	; (801ad5c <__fpclassifyd+0x54>)
 801ad16:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 801ad1a:	4288      	cmp	r0, r1
 801ad1c:	d808      	bhi.n	801ad30 <__fpclassifyd+0x28>
 801ad1e:	2004      	movs	r0, #4
 801ad20:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad24:	4770      	bx	lr
 801ad26:	b91a      	cbnz	r2, 801ad30 <__fpclassifyd+0x28>
 801ad28:	2002      	movs	r0, #2
 801ad2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad2e:	4770      	bx	lr
 801ad30:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 801ad34:	4909      	ldr	r1, [pc, #36]	; (801ad5c <__fpclassifyd+0x54>)
 801ad36:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ad3a:	428b      	cmp	r3, r1
 801ad3c:	d9ef      	bls.n	801ad1e <__fpclassifyd+0x16>
 801ad3e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ad42:	d201      	bcs.n	801ad48 <__fpclassifyd+0x40>
 801ad44:	2003      	movs	r0, #3
 801ad46:	e7eb      	b.n	801ad20 <__fpclassifyd+0x18>
 801ad48:	4b05      	ldr	r3, [pc, #20]	; (801ad60 <__fpclassifyd+0x58>)
 801ad4a:	429c      	cmp	r4, r3
 801ad4c:	d001      	beq.n	801ad52 <__fpclassifyd+0x4a>
 801ad4e:	2000      	movs	r0, #0
 801ad50:	e7e6      	b.n	801ad20 <__fpclassifyd+0x18>
 801ad52:	fab2 f082 	clz	r0, r2
 801ad56:	0940      	lsrs	r0, r0, #5
 801ad58:	e7e2      	b.n	801ad20 <__fpclassifyd+0x18>
 801ad5a:	bf00      	nop
 801ad5c:	7fdfffff 	.word	0x7fdfffff
 801ad60:	7ff00000 	.word	0x7ff00000

0801ad64 <__sread>:
 801ad64:	b510      	push	{r4, lr}
 801ad66:	460c      	mov	r4, r1
 801ad68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad6c:	f7f3 ffc0 	bl	800ecf0 <_read_r>
 801ad70:	2800      	cmp	r0, #0
 801ad72:	db03      	blt.n	801ad7c <__sread+0x18>
 801ad74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801ad76:	4403      	add	r3, r0
 801ad78:	6523      	str	r3, [r4, #80]	; 0x50
 801ad7a:	bd10      	pop	{r4, pc}
 801ad7c:	89a3      	ldrh	r3, [r4, #12]
 801ad7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad82:	81a3      	strh	r3, [r4, #12]
 801ad84:	bd10      	pop	{r4, pc}
 801ad86:	bf00      	nop

0801ad88 <__swrite>:
 801ad88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad8c:	4616      	mov	r6, r2
 801ad8e:	898a      	ldrh	r2, [r1, #12]
 801ad90:	461d      	mov	r5, r3
 801ad92:	05d3      	lsls	r3, r2, #23
 801ad94:	460c      	mov	r4, r1
 801ad96:	4607      	mov	r7, r0
 801ad98:	d506      	bpl.n	801ada8 <__swrite+0x20>
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ada0:	2302      	movs	r3, #2
 801ada2:	f7f3 ffb5 	bl	800ed10 <_lseek_r>
 801ada6:	89a2      	ldrh	r2, [r4, #12]
 801ada8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801adac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801adb0:	81a2      	strh	r2, [r4, #12]
 801adb2:	4638      	mov	r0, r7
 801adb4:	4632      	mov	r2, r6
 801adb6:	462b      	mov	r3, r5
 801adb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801adbc:	f7f3 bfb8 	b.w	800ed30 <_write_r>

0801adc0 <__sseek>:
 801adc0:	b510      	push	{r4, lr}
 801adc2:	460c      	mov	r4, r1
 801adc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adc8:	f7f3 ffa2 	bl	800ed10 <_lseek_r>
 801adcc:	89a3      	ldrh	r3, [r4, #12]
 801adce:	1c42      	adds	r2, r0, #1
 801add0:	bf0e      	itee	eq
 801add2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801add6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801adda:	6520      	strne	r0, [r4, #80]	; 0x50
 801addc:	81a3      	strh	r3, [r4, #12]
 801adde:	bd10      	pop	{r4, pc}

0801ade0 <__sclose>:
 801ade0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ade4:	f7f3 bfb4 	b.w	800ed50 <_close_r>

0801ade8 <__ssprint_r>:
 801ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adec:	6893      	ldr	r3, [r2, #8]
 801adee:	f8d2 8000 	ldr.w	r8, [r2]
 801adf2:	b083      	sub	sp, #12
 801adf4:	4691      	mov	r9, r2
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d072      	beq.n	801aee0 <__ssprint_r+0xf8>
 801adfa:	4607      	mov	r7, r0
 801adfc:	f04f 0b00 	mov.w	fp, #0
 801ae00:	6808      	ldr	r0, [r1, #0]
 801ae02:	688b      	ldr	r3, [r1, #8]
 801ae04:	460d      	mov	r5, r1
 801ae06:	465c      	mov	r4, fp
 801ae08:	2c00      	cmp	r4, #0
 801ae0a:	d045      	beq.n	801ae98 <__ssprint_r+0xb0>
 801ae0c:	429c      	cmp	r4, r3
 801ae0e:	461e      	mov	r6, r3
 801ae10:	469a      	mov	sl, r3
 801ae12:	d348      	bcc.n	801aea6 <__ssprint_r+0xbe>
 801ae14:	89ab      	ldrh	r3, [r5, #12]
 801ae16:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801ae1a:	d02d      	beq.n	801ae78 <__ssprint_r+0x90>
 801ae1c:	696e      	ldr	r6, [r5, #20]
 801ae1e:	6929      	ldr	r1, [r5, #16]
 801ae20:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ae24:	ebc1 0a00 	rsb	sl, r1, r0
 801ae28:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801ae2c:	1c60      	adds	r0, r4, #1
 801ae2e:	1076      	asrs	r6, r6, #1
 801ae30:	4450      	add	r0, sl
 801ae32:	4286      	cmp	r6, r0
 801ae34:	4632      	mov	r2, r6
 801ae36:	bf3c      	itt	cc
 801ae38:	4606      	movcc	r6, r0
 801ae3a:	4632      	movcc	r2, r6
 801ae3c:	055b      	lsls	r3, r3, #21
 801ae3e:	d535      	bpl.n	801aeac <__ssprint_r+0xc4>
 801ae40:	4611      	mov	r1, r2
 801ae42:	4638      	mov	r0, r7
 801ae44:	f7fb ff7e 	bl	8016d44 <_malloc_r>
 801ae48:	2800      	cmp	r0, #0
 801ae4a:	d039      	beq.n	801aec0 <__ssprint_r+0xd8>
 801ae4c:	4652      	mov	r2, sl
 801ae4e:	6929      	ldr	r1, [r5, #16]
 801ae50:	9001      	str	r0, [sp, #4]
 801ae52:	f7f2 fdeb 	bl	800da2c <memcpy>
 801ae56:	89aa      	ldrh	r2, [r5, #12]
 801ae58:	9b01      	ldr	r3, [sp, #4]
 801ae5a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801ae5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801ae62:	81aa      	strh	r2, [r5, #12]
 801ae64:	ebca 0206 	rsb	r2, sl, r6
 801ae68:	eb03 000a 	add.w	r0, r3, sl
 801ae6c:	616e      	str	r6, [r5, #20]
 801ae6e:	612b      	str	r3, [r5, #16]
 801ae70:	6028      	str	r0, [r5, #0]
 801ae72:	60aa      	str	r2, [r5, #8]
 801ae74:	4626      	mov	r6, r4
 801ae76:	46a2      	mov	sl, r4
 801ae78:	4652      	mov	r2, sl
 801ae7a:	4659      	mov	r1, fp
 801ae7c:	f7fc fa70 	bl	8017360 <memmove>
 801ae80:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ae84:	68ab      	ldr	r3, [r5, #8]
 801ae86:	6828      	ldr	r0, [r5, #0]
 801ae88:	1b9b      	subs	r3, r3, r6
 801ae8a:	4450      	add	r0, sl
 801ae8c:	1b14      	subs	r4, r2, r4
 801ae8e:	60ab      	str	r3, [r5, #8]
 801ae90:	6028      	str	r0, [r5, #0]
 801ae92:	f8c9 4008 	str.w	r4, [r9, #8]
 801ae96:	b31c      	cbz	r4, 801aee0 <__ssprint_r+0xf8>
 801ae98:	f8d8 b000 	ldr.w	fp, [r8]
 801ae9c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801aea0:	f108 0808 	add.w	r8, r8, #8
 801aea4:	e7b0      	b.n	801ae08 <__ssprint_r+0x20>
 801aea6:	4626      	mov	r6, r4
 801aea8:	46a2      	mov	sl, r4
 801aeaa:	e7e5      	b.n	801ae78 <__ssprint_r+0x90>
 801aeac:	4638      	mov	r0, r7
 801aeae:	f7fc fb41 	bl	8017534 <_realloc_r>
 801aeb2:	4603      	mov	r3, r0
 801aeb4:	2800      	cmp	r0, #0
 801aeb6:	d1d5      	bne.n	801ae64 <__ssprint_r+0x7c>
 801aeb8:	4638      	mov	r0, r7
 801aeba:	6929      	ldr	r1, [r5, #16]
 801aebc:	f7ff fab8 	bl	801a430 <_free_r>
 801aec0:	230c      	movs	r3, #12
 801aec2:	603b      	str	r3, [r7, #0]
 801aec4:	89ab      	ldrh	r3, [r5, #12]
 801aec6:	2200      	movs	r2, #0
 801aec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aecc:	f04f 30ff 	mov.w	r0, #4294967295
 801aed0:	81ab      	strh	r3, [r5, #12]
 801aed2:	f8c9 2008 	str.w	r2, [r9, #8]
 801aed6:	f8c9 2004 	str.w	r2, [r9, #4]
 801aeda:	b003      	add	sp, #12
 801aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aee0:	2000      	movs	r0, #0
 801aee2:	f8c9 0004 	str.w	r0, [r9, #4]
 801aee6:	b003      	add	sp, #12
 801aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aeec <_calloc_r>:
 801aeec:	b510      	push	{r4, lr}
 801aeee:	fb02 f101 	mul.w	r1, r2, r1
 801aef2:	f7fb ff27 	bl	8016d44 <_malloc_r>
 801aef6:	4604      	mov	r4, r0
 801aef8:	b168      	cbz	r0, 801af16 <_calloc_r+0x2a>
 801aefa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801aefe:	f022 0203 	bic.w	r2, r2, #3
 801af02:	3a04      	subs	r2, #4
 801af04:	2a24      	cmp	r2, #36	; 0x24
 801af06:	d818      	bhi.n	801af3a <_calloc_r+0x4e>
 801af08:	2a13      	cmp	r2, #19
 801af0a:	d806      	bhi.n	801af1a <_calloc_r+0x2e>
 801af0c:	4603      	mov	r3, r0
 801af0e:	2200      	movs	r2, #0
 801af10:	601a      	str	r2, [r3, #0]
 801af12:	605a      	str	r2, [r3, #4]
 801af14:	609a      	str	r2, [r3, #8]
 801af16:	4620      	mov	r0, r4
 801af18:	bd10      	pop	{r4, pc}
 801af1a:	2300      	movs	r3, #0
 801af1c:	2a1b      	cmp	r2, #27
 801af1e:	6003      	str	r3, [r0, #0]
 801af20:	6043      	str	r3, [r0, #4]
 801af22:	d90f      	bls.n	801af44 <_calloc_r+0x58>
 801af24:	2a24      	cmp	r2, #36	; 0x24
 801af26:	6083      	str	r3, [r0, #8]
 801af28:	60c3      	str	r3, [r0, #12]
 801af2a:	bf05      	ittet	eq
 801af2c:	6103      	streq	r3, [r0, #16]
 801af2e:	6143      	streq	r3, [r0, #20]
 801af30:	f100 0310 	addne.w	r3, r0, #16
 801af34:	f100 0318 	addeq.w	r3, r0, #24
 801af38:	e7e9      	b.n	801af0e <_calloc_r+0x22>
 801af3a:	2100      	movs	r1, #0
 801af3c:	f7fc fa74 	bl	8017428 <memset>
 801af40:	4620      	mov	r0, r4
 801af42:	bd10      	pop	{r4, pc}
 801af44:	f100 0308 	add.w	r3, r0, #8
 801af48:	e7e1      	b.n	801af0e <_calloc_r+0x22>
 801af4a:	bf00      	nop

0801af4c <_fclose_r>:
 801af4c:	2900      	cmp	r1, #0
 801af4e:	d03d      	beq.n	801afcc <_fclose_r+0x80>
 801af50:	b570      	push	{r4, r5, r6, lr}
 801af52:	4605      	mov	r5, r0
 801af54:	460c      	mov	r4, r1
 801af56:	b108      	cbz	r0, 801af5c <_fclose_r+0x10>
 801af58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801af5a:	b37b      	cbz	r3, 801afbc <_fclose_r+0x70>
 801af5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af60:	b90b      	cbnz	r3, 801af66 <_fclose_r+0x1a>
 801af62:	2000      	movs	r0, #0
 801af64:	bd70      	pop	{r4, r5, r6, pc}
 801af66:	4628      	mov	r0, r5
 801af68:	4621      	mov	r1, r4
 801af6a:	f7ff f8cb 	bl	801a104 <__sflush_r>
 801af6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801af70:	4606      	mov	r6, r0
 801af72:	b133      	cbz	r3, 801af82 <_fclose_r+0x36>
 801af74:	4628      	mov	r0, r5
 801af76:	69e1      	ldr	r1, [r4, #28]
 801af78:	4798      	blx	r3
 801af7a:	2800      	cmp	r0, #0
 801af7c:	bfb8      	it	lt
 801af7e:	f04f 36ff 	movlt.w	r6, #4294967295
 801af82:	89a3      	ldrh	r3, [r4, #12]
 801af84:	061b      	lsls	r3, r3, #24
 801af86:	d41c      	bmi.n	801afc2 <_fclose_r+0x76>
 801af88:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801af8a:	b141      	cbz	r1, 801af9e <_fclose_r+0x52>
 801af8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801af90:	4299      	cmp	r1, r3
 801af92:	d002      	beq.n	801af9a <_fclose_r+0x4e>
 801af94:	4628      	mov	r0, r5
 801af96:	f7ff fa4b 	bl	801a430 <_free_r>
 801af9a:	2300      	movs	r3, #0
 801af9c:	6323      	str	r3, [r4, #48]	; 0x30
 801af9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801afa0:	b121      	cbz	r1, 801afac <_fclose_r+0x60>
 801afa2:	4628      	mov	r0, r5
 801afa4:	f7ff fa44 	bl	801a430 <_free_r>
 801afa8:	2300      	movs	r3, #0
 801afaa:	6463      	str	r3, [r4, #68]	; 0x44
 801afac:	f7ff f9ee 	bl	801a38c <__sfp_lock_acquire>
 801afb0:	2300      	movs	r3, #0
 801afb2:	81a3      	strh	r3, [r4, #12]
 801afb4:	f7ff f9ec 	bl	801a390 <__sfp_lock_release>
 801afb8:	4630      	mov	r0, r6
 801afba:	bd70      	pop	{r4, r5, r6, pc}
 801afbc:	f7ff f9e0 	bl	801a380 <__sinit>
 801afc0:	e7cc      	b.n	801af5c <_fclose_r+0x10>
 801afc2:	4628      	mov	r0, r5
 801afc4:	6921      	ldr	r1, [r4, #16]
 801afc6:	f7ff fa33 	bl	801a430 <_free_r>
 801afca:	e7dd      	b.n	801af88 <_fclose_r+0x3c>
 801afcc:	2000      	movs	r0, #0
 801afce:	4770      	bx	lr
